#include "audio.h"
#include "cs43l22.h"
#include <stdio.h>

extern I2C_HandleTypeDef hi2c1;
extern I2S_HandleTypeDef hi2s3;
extern ADC_HandleTypeDef hadc1;

uint16_t adcData[ADC_BUFFER_SIZE];
int16_t dacData[I2S_BUFFER_SIZE];

static volatile int16_t *inBufPtr;
static volatile int16_t *outBufPtr = &dacData[0];

uint8_t dataReadyFlag;

// === DMA callbacks ===

void HAL_I2SEx_TxRxHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
    inBufPtr = &adcData[0];
    outBufPtr = &dacData[0];

    dataReadyFlag = 1;
}

void HAL_I2SEx_TxRxCpltCallback(ADC_HandleTypeDef* hadc)
{
    inBufPtr = &adcData[ADC_BUFFER_SIZE / 2];
    outBufPtr = &dacData[I2S_BUFFER_SIZE / 2];

    dataReadyFlag = 1;
}

void Audio_Init(void)
{
    // Init codec
	cs43l22_init();
    cs43l22_unmute();  // unmute
    cs43l22_play((int16_t*)dac_buffer, I2S_BUFFER_SIZE);
}

void Audio_Start(void)
{
    // Start DMA streams
    HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_buffer, ADC_BUFFER_SIZE);
    HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)dac_buffer, I2S_BUFFER_SIZE);
}

void ProcessData() {
	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for (uint8_t n = 0; n < (AUDIO_BLOCK_SIZE / 2) - 1; n += 2) {
		// Left channel
		leftIn = INT16_TO_FLOAT * inBufPtr[n];
		if (leftIn > 1.0f) {
			leftIn -= 2.0f;
		}
		leftOut = leftIn;

		outBufPtr[n] = (int16_t) (FLOAT_O_INT16 * leftOut);

		// Right channel
		rightIn = INT16_TO_FLOAT * inBufPtr[n];
		if (rightIn > 1.0f) {
			rightIn -= 2.0f;
		}
		rightOut = rightIn;

		outBufPtr[n + 1] = (int16_t) (FLOAT_O_INT16 * rightOut);
	}

	dataReadyFlag = 0;
}
