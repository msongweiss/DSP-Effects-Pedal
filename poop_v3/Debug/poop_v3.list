
poop_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b588  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800b710  0800b710  0000c710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b910  0800b910  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b910  0800b910  0000c910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b918  0800b918  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b918  0800b918  0000c918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b91c  0800b91c  0000c91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800b920  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d080  2**0
                  CONTENTS
 10 .bss          00000bd8  20000080  20000080  0000d080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c58  20000c58  0000d080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015035  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b19  00000000  00000000  000220e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00025c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c83  00000000  00000000  00026c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f3a  00000000  00000000  0002790b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000173fd  00000000  00000000  0004b845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca6da  00000000  00000000  00062c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d31c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a90  00000000  00000000  0012d360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00131df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6f8 	.word	0x0800b6f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800b6f8 	.word	0x0800b6f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad8:	f000 b988 	b.w	8000dec <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	468e      	mov	lr, r1
 8000afc:	4604      	mov	r4, r0
 8000afe:	4688      	mov	r8, r1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d14a      	bne.n	8000b9a <__udivmoddi4+0xa6>
 8000b04:	428a      	cmp	r2, r1
 8000b06:	4617      	mov	r7, r2
 8000b08:	d962      	bls.n	8000bd0 <__udivmoddi4+0xdc>
 8000b0a:	fab2 f682 	clz	r6, r2
 8000b0e:	b14e      	cbz	r6, 8000b24 <__udivmoddi4+0x30>
 8000b10:	f1c6 0320 	rsb	r3, r6, #32
 8000b14:	fa01 f806 	lsl.w	r8, r1, r6
 8000b18:	fa20 f303 	lsr.w	r3, r0, r3
 8000b1c:	40b7      	lsls	r7, r6
 8000b1e:	ea43 0808 	orr.w	r8, r3, r8
 8000b22:	40b4      	lsls	r4, r6
 8000b24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b28:	fa1f fc87 	uxth.w	ip, r7
 8000b2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b30:	0c23      	lsrs	r3, r4, #16
 8000b32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d909      	bls.n	8000b56 <__udivmoddi4+0x62>
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b48:	f080 80ea 	bcs.w	8000d20 <__udivmoddi4+0x22c>
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	f240 80e7 	bls.w	8000d20 <__udivmoddi4+0x22c>
 8000b52:	3902      	subs	r1, #2
 8000b54:	443b      	add	r3, r7
 8000b56:	1a9a      	subs	r2, r3, r2
 8000b58:	b2a3      	uxth	r3, r4
 8000b5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b6a:	459c      	cmp	ip, r3
 8000b6c:	d909      	bls.n	8000b82 <__udivmoddi4+0x8e>
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b74:	f080 80d6 	bcs.w	8000d24 <__udivmoddi4+0x230>
 8000b78:	459c      	cmp	ip, r3
 8000b7a:	f240 80d3 	bls.w	8000d24 <__udivmoddi4+0x230>
 8000b7e:	443b      	add	r3, r7
 8000b80:	3802      	subs	r0, #2
 8000b82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b86:	eba3 030c 	sub.w	r3, r3, ip
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	b11d      	cbz	r5, 8000b96 <__udivmoddi4+0xa2>
 8000b8e:	40f3      	lsrs	r3, r6
 8000b90:	2200      	movs	r2, #0
 8000b92:	e9c5 3200 	strd	r3, r2, [r5]
 8000b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d905      	bls.n	8000baa <__udivmoddi4+0xb6>
 8000b9e:	b10d      	cbz	r5, 8000ba4 <__udivmoddi4+0xb0>
 8000ba0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	e7f5      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000baa:	fab3 f183 	clz	r1, r3
 8000bae:	2900      	cmp	r1, #0
 8000bb0:	d146      	bne.n	8000c40 <__udivmoddi4+0x14c>
 8000bb2:	4573      	cmp	r3, lr
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xc8>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 8105 	bhi.w	8000dc6 <__udivmoddi4+0x2d2>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4690      	mov	r8, r2
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d0e5      	beq.n	8000b96 <__udivmoddi4+0xa2>
 8000bca:	e9c5 4800 	strd	r4, r8, [r5]
 8000bce:	e7e2      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f000 8090 	beq.w	8000cf6 <__udivmoddi4+0x202>
 8000bd6:	fab2 f682 	clz	r6, r2
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f040 80a4 	bne.w	8000d28 <__udivmoddi4+0x234>
 8000be0:	1a8a      	subs	r2, r1, r2
 8000be2:	0c03      	lsrs	r3, r0, #16
 8000be4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000be8:	b280      	uxth	r0, r0
 8000bea:	b2bc      	uxth	r4, r7
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bf2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb04 f20c 	mul.w	r2, r4, ip
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d907      	bls.n	8000c12 <__udivmoddi4+0x11e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x11c>
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	f200 80e0 	bhi.w	8000dd0 <__udivmoddi4+0x2dc>
 8000c10:	46c4      	mov	ip, r8
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c20:	fb02 f404 	mul.w	r4, r2, r4
 8000c24:	429c      	cmp	r4, r3
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x144>
 8000c28:	18fb      	adds	r3, r7, r3
 8000c2a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x142>
 8000c30:	429c      	cmp	r4, r3
 8000c32:	f200 80ca 	bhi.w	8000dca <__udivmoddi4+0x2d6>
 8000c36:	4602      	mov	r2, r0
 8000c38:	1b1b      	subs	r3, r3, r4
 8000c3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0x98>
 8000c40:	f1c1 0620 	rsb	r6, r1, #32
 8000c44:	408b      	lsls	r3, r1
 8000c46:	fa22 f706 	lsr.w	r7, r2, r6
 8000c4a:	431f      	orrs	r7, r3
 8000c4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c50:	fa20 f306 	lsr.w	r3, r0, r6
 8000c54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c62:	fa1f fc87 	uxth.w	ip, r7
 8000c66:	fbbe f0f9 	udiv	r0, lr, r9
 8000c6a:	0c1c      	lsrs	r4, r3, #16
 8000c6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c78:	45a6      	cmp	lr, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x1a0>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c86:	f080 809c 	bcs.w	8000dc2 <__udivmoddi4+0x2ce>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8099 	bls.w	8000dc2 <__udivmoddi4+0x2ce>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	eba4 040e 	sub.w	r4, r4, lr
 8000c98:	fa1f fe83 	uxth.w	lr, r3
 8000c9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ca0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ca4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ca8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1ce>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000cb6:	f080 8082 	bcs.w	8000dbe <__udivmoddi4+0x2ca>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d97f      	bls.n	8000dbe <__udivmoddi4+0x2ca>
 8000cbe:	3b02      	subs	r3, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cce:	4564      	cmp	r4, ip
 8000cd0:	4673      	mov	r3, lr
 8000cd2:	46e1      	mov	r9, ip
 8000cd4:	d362      	bcc.n	8000d9c <__udivmoddi4+0x2a8>
 8000cd6:	d05f      	beq.n	8000d98 <__udivmoddi4+0x2a4>
 8000cd8:	b15d      	cbz	r5, 8000cf2 <__udivmoddi4+0x1fe>
 8000cda:	ebb8 0203 	subs.w	r2, r8, r3
 8000cde:	eb64 0409 	sbc.w	r4, r4, r9
 8000ce2:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cea:	431e      	orrs	r6, r3
 8000cec:	40cc      	lsrs	r4, r1
 8000cee:	e9c5 6400 	strd	r6, r4, [r5]
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	e74f      	b.n	8000b96 <__udivmoddi4+0xa2>
 8000cf6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cfa:	0c01      	lsrs	r1, r0, #16
 8000cfc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d00:	b280      	uxth	r0, r0
 8000d02:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d06:	463b      	mov	r3, r7
 8000d08:	4638      	mov	r0, r7
 8000d0a:	463c      	mov	r4, r7
 8000d0c:	46b8      	mov	r8, r7
 8000d0e:	46be      	mov	lr, r7
 8000d10:	2620      	movs	r6, #32
 8000d12:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d16:	eba2 0208 	sub.w	r2, r2, r8
 8000d1a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d1e:	e766      	b.n	8000bee <__udivmoddi4+0xfa>
 8000d20:	4601      	mov	r1, r0
 8000d22:	e718      	b.n	8000b56 <__udivmoddi4+0x62>
 8000d24:	4610      	mov	r0, r2
 8000d26:	e72c      	b.n	8000b82 <__udivmoddi4+0x8e>
 8000d28:	f1c6 0220 	rsb	r2, r6, #32
 8000d2c:	fa2e f302 	lsr.w	r3, lr, r2
 8000d30:	40b7      	lsls	r7, r6
 8000d32:	40b1      	lsls	r1, r6
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d42:	b2bc      	uxth	r4, r7
 8000d44:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d48:	0c11      	lsrs	r1, r2, #16
 8000d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4e:	fb08 f904 	mul.w	r9, r8, r4
 8000d52:	40b0      	lsls	r0, r6
 8000d54:	4589      	cmp	r9, r1
 8000d56:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d5a:	b280      	uxth	r0, r0
 8000d5c:	d93e      	bls.n	8000ddc <__udivmoddi4+0x2e8>
 8000d5e:	1879      	adds	r1, r7, r1
 8000d60:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d64:	d201      	bcs.n	8000d6a <__udivmoddi4+0x276>
 8000d66:	4589      	cmp	r9, r1
 8000d68:	d81f      	bhi.n	8000daa <__udivmoddi4+0x2b6>
 8000d6a:	eba1 0109 	sub.w	r1, r1, r9
 8000d6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d72:	fb09 f804 	mul.w	r8, r9, r4
 8000d76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d7a:	b292      	uxth	r2, r2
 8000d7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d80:	4542      	cmp	r2, r8
 8000d82:	d229      	bcs.n	8000dd8 <__udivmoddi4+0x2e4>
 8000d84:	18ba      	adds	r2, r7, r2
 8000d86:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d8a:	d2c4      	bcs.n	8000d16 <__udivmoddi4+0x222>
 8000d8c:	4542      	cmp	r2, r8
 8000d8e:	d2c2      	bcs.n	8000d16 <__udivmoddi4+0x222>
 8000d90:	f1a9 0102 	sub.w	r1, r9, #2
 8000d94:	443a      	add	r2, r7
 8000d96:	e7be      	b.n	8000d16 <__udivmoddi4+0x222>
 8000d98:	45f0      	cmp	r8, lr
 8000d9a:	d29d      	bcs.n	8000cd8 <__udivmoddi4+0x1e4>
 8000d9c:	ebbe 0302 	subs.w	r3, lr, r2
 8000da0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000da4:	3801      	subs	r0, #1
 8000da6:	46e1      	mov	r9, ip
 8000da8:	e796      	b.n	8000cd8 <__udivmoddi4+0x1e4>
 8000daa:	eba7 0909 	sub.w	r9, r7, r9
 8000dae:	4449      	add	r1, r9
 8000db0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000db4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db8:	fb09 f804 	mul.w	r8, r9, r4
 8000dbc:	e7db      	b.n	8000d76 <__udivmoddi4+0x282>
 8000dbe:	4673      	mov	r3, lr
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1ce>
 8000dc2:	4650      	mov	r0, sl
 8000dc4:	e766      	b.n	8000c94 <__udivmoddi4+0x1a0>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e6fd      	b.n	8000bc6 <__udivmoddi4+0xd2>
 8000dca:	443b      	add	r3, r7
 8000dcc:	3a02      	subs	r2, #2
 8000dce:	e733      	b.n	8000c38 <__udivmoddi4+0x144>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	e71c      	b.n	8000c12 <__udivmoddi4+0x11e>
 8000dd8:	4649      	mov	r1, r9
 8000dda:	e79c      	b.n	8000d16 <__udivmoddi4+0x222>
 8000ddc:	eba1 0109 	sub.w	r1, r1, r9
 8000de0:	46c4      	mov	ip, r8
 8000de2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000de6:	fb09 f804 	mul.w	r8, r9, r4
 8000dea:	e7c4      	b.n	8000d76 <__udivmoddi4+0x282>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <cs43l22_unmute>:
			                                    1, &i2c_data, 1, 100);
	return status_i2c;
}

int cs43l22_unmute()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af04      	add	r7, sp, #16
	uint8_t i2c_data;
	HAL_StatusTypeDef status_i2c = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71fb      	strb	r3, [r7, #7]
	// unmute headphone A and B, page 52
	i2c_data = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADAVOL_REG,
 8000dfe:	2364      	movs	r3, #100	@ 0x64
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	2301      	movs	r3, #1
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	1dbb      	adds	r3, r7, #6
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	2222      	movs	r2, #34	@ 0x22
 8000e0e:	2194      	movs	r1, #148	@ 0x94
 8000e10:	4813      	ldr	r0, [pc, #76]	@ (8000e60 <cs43l22_unmute+0x70>)
 8000e12:	f003 ff3f 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
		                                    1, &i2c_data, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_HEADBVOL_REG,
 8000e1a:	2364      	movs	r3, #100	@ 0x64
 8000e1c:	9302      	str	r3, [sp, #8]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2301      	movs	r3, #1
 8000e28:	2223      	movs	r2, #35	@ 0x23
 8000e2a:	2194      	movs	r1, #148	@ 0x94
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <cs43l22_unmute+0x70>)
 8000e2e:	f003 ff31 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
			                                    1, &i2c_data, 1, 100);
	// turn on headphone
	i2c_data = 0xaf;
 8000e36:	23af      	movs	r3, #175	@ 0xaf
 8000e38:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000e3a:	2364      	movs	r3, #100	@ 0x64
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	2204      	movs	r2, #4
 8000e4a:	2194      	movs	r1, #148	@ 0x94
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <cs43l22_unmute+0x70>)
 8000e4e:	f003 ff21 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
				                                    1, &i2c_data, 1, 100);

	return status_i2c;
 8000e56:	79fb      	ldrb	r3, [r7, #7]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000009c 	.word	0x2000009c

08000e64 <cs43l22_init>:
codec_state get_cs43l22_state()
{
	return cs43l22_state;
}
int cs43l22_init()
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status_i2c = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	uint8_t i2c_data;
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2110      	movs	r1, #16
 8000e72:	4853      	ldr	r0, [pc, #332]	@ (8000fc0 <cs43l22_init+0x15c>)
 8000e74:	f001 fc7c 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e78:	2064      	movs	r0, #100	@ 0x64
 8000e7a:	f000 fe37 	bl	8001aec <HAL_Delay>
	HAL_GPIO_WritePin(CS43L22_RST_Port, CS43L22_RST_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2110      	movs	r1, #16
 8000e82:	484f      	ldr	r0, [pc, #316]	@ (8000fc0 <cs43l22_init+0x15c>)
 8000e84:	f001 fc74 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000e88:	2064      	movs	r0, #100	@ 0x64
 8000e8a:	f000 fe2f 	bl	8001aec <HAL_Delay>
	// power off the codec, page 38
	i2c_data = 0x01;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8000e92:	2364      	movs	r3, #100	@ 0x64
 8000e94:	9302      	str	r3, [sp, #8]
 8000e96:	2301      	movs	r3, #1
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	1dbb      	adds	r3, r7, #6
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	2194      	movs	r1, #148	@ 0x94
 8000ea4:	4847      	ldr	r0, [pc, #284]	@ (8000fc4 <cs43l22_init+0x160>)
 8000ea6:	f003 fef5 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	                                    1, &i2c_data, 1, 100);

	// output device is headphone 0xaf, page 38
	i2c_data = 0b10101111;
 8000eae:	23af      	movs	r3, #175	@ 0xaf
 8000eb0:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON2_REG,
 8000eb2:	2364      	movs	r3, #100	@ 0x64
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	1dbb      	adds	r3, r7, #6
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	2204      	movs	r2, #4
 8000ec2:	2194      	movs	r1, #148	@ 0x94
 8000ec4:	483f      	ldr	r0, [pc, #252]	@ (8000fc4 <cs43l22_init+0x160>)
 8000ec6:	f003 fee5 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <cs43l22_init+0x74>
	{
		return status_i2c;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	e06f      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	// clock auto-detect and divide mclk by 2
	i2c_data = 0b10000001;
 8000ed8:	2381      	movs	r3, #129	@ 0x81
 8000eda:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_CLKCON_REG,
 8000edc:	2364      	movs	r3, #100	@ 0x64
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	1dbb      	adds	r3, r7, #6
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	2205      	movs	r2, #5
 8000eec:	2194      	movs	r1, #148	@ 0x94
 8000eee:	4835      	ldr	r0, [pc, #212]	@ (8000fc4 <cs43l22_init+0x160>)
 8000ef0:	f003 fed0 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <cs43l22_init+0x9e>
	{
		return status_i2c;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	e05a      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	cs43l22_set_volume(200);
 8000f02:	20c8      	movs	r0, #200	@ 0xc8
 8000f04:	f000 f8a2 	bl	800104c <cs43l22_set_volume>

	// i2s up to 24-bit interface, 16-bit data length, page 41
	i2c_data = 0b00000111;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_INTERCON1_REG,
 8000f0c:	2364      	movs	r3, #100	@ 0x64
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	2194      	movs	r1, #148	@ 0x94
 8000f1e:	4829      	ldr	r0, [pc, #164]	@ (8000fc4 <cs43l22_init+0x160>)
 8000f20:	f003 feb8 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <cs43l22_init+0xce>
	{
		return status_i2c;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	e042      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	// enable digital soft ramp and de-emphasis filter
	i2c_data = 0b00000110;
 8000f32:	2306      	movs	r3, #6
 8000f34:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MISCON_REG,
 8000f36:	2364      	movs	r3, #100	@ 0x64
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	220e      	movs	r2, #14
 8000f46:	2194      	movs	r1, #148	@ 0x94
 8000f48:	481e      	ldr	r0, [pc, #120]	@ (8000fc4 <cs43l22_init+0x160>)
 8000f4a:	f003 fea3 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
											1, &i2c_data, 1, 100);
	if (status_i2c)
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <cs43l22_init+0xf8>
	{
		return status_i2c;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	e02d      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	//  PCM VOlume adjust, page 47
	i2c_data = 0x00;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMAVOLCON_REG,
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	221a      	movs	r2, #26
 8000f70:	2194      	movs	r1, #148	@ 0x94
 8000f72:	4814      	ldr	r0, [pc, #80]	@ (8000fc4 <cs43l22_init+0x160>)
 8000f74:	f003 fe8e 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <cs43l22_init+0x122>
	{
		return status_i2c;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	e018      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	i2c_data = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71bb      	strb	r3, [r7, #6]
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_PCMBVOLCON_REG,
 8000f8a:	2364      	movs	r3, #100	@ 0x64
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	221b      	movs	r2, #27
 8000f9a:	2194      	movs	r1, #148	@ 0x94
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <cs43l22_init+0x160>)
 8000f9e:	f003 fe79 	bl	8004c94 <HAL_I2C_Mem_Write>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
										1, &i2c_data, 1, 100);
	if (status_i2c)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <cs43l22_init+0x14c>
	{
		return status_i2c;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	e003      	b.n	8000fb8 <cs43l22_init+0x154>
	}

	cs43l22_state = READY;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <cs43l22_init+0x164>)
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000fb6:	2300      	movs	r3, #0

}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	2000009c 	.word	0x2000009c
 8000fc8:	20000000 	.word	0x20000000

08000fcc <cs43l22_play>:

int cs43l22_play(int16_t *pbuffer, uint32_t size)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status_i2c = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	uint8_t i2c_data;
	if (cs43l22_state != PLAY)
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <cs43l22_play+0x74>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d028      	beq.n	8001034 <cs43l22_play+0x68>
	{
		status_i2c = cs43l22_unmute();
 8000fe2:	f7ff ff05 	bl	8000df0 <cs43l22_unmute>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]
		if (status_i2c)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <cs43l22_play+0x28>
		{
			return status_i2c;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	e020      	b.n	8001036 <cs43l22_play+0x6a>
		}
		// powered up, page 38
		i2c_data = 0b10011110;
 8000ff4:	239e      	movs	r3, #158	@ 0x9e
 8000ff6:	73bb      	strb	r3, [r7, #14]
		status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_POWCON1_REG,
 8000ff8:	2364      	movs	r3, #100	@ 0x64
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	f107 030e 	add.w	r3, r7, #14
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2202      	movs	r2, #2
 800100a:	2194      	movs	r1, #148	@ 0x94
 800100c:	480d      	ldr	r0, [pc, #52]	@ (8001044 <cs43l22_play+0x78>)
 800100e:	f003 fe41 	bl	8004c94 <HAL_I2C_Mem_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
												1, &i2c_data, 1, 100);
		if (status_i2c)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <cs43l22_play+0x54>
		{
			return status_i2c;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	e00a      	b.n	8001036 <cs43l22_play+0x6a>
		}
		cs43l22_state = PLAY;
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <cs43l22_play+0x74>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
		HAL_I2S_Transmit_DMA(&CS43L22_I2S, (uint16_t * )pbuffer, size);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <cs43l22_play+0x7c>)
 8001030:	f004 fada 	bl	80055e8 <HAL_I2S_Transmit_DMA>
	}
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000000 	.word	0x20000000
 8001044:	2000009c 	.word	0x2000009c
 8001048:	200000f0 	.word	0x200000f0

0800104c <cs43l22_set_volume>:
	HAL_I2C_Mem_Read(&CS43L22_I2C, CS43L22_I2C_ADDRESS, reg,
			1, reg_value, 1, 100);
}

int cs43l22_set_volume(uint8_t volume)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af04      	add	r7, sp, #16
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status_i2c = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
	// page 52
	if (volume > 0xe6)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2be6      	cmp	r3, #230	@ 0xe6
 800105e:	d904      	bls.n	800106a <cs43l22_set_volume+0x1e>
	{
		volume -= 0xe7;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	3319      	adds	r3, #25
 8001064:	b2db      	uxtb	r3, r3
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e003      	b.n	8001072 <cs43l22_set_volume+0x26>
	}
	else
	{
		volume += 0x19;
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	3319      	adds	r3, #25
 800106e:	b2db      	uxtb	r3, r3
 8001070:	71fb      	strb	r3, [r7, #7]
	}
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASAVOL_REG,
 8001072:	2364      	movs	r3, #100	@ 0x64
 8001074:	9302      	str	r3, [sp, #8]
 8001076:	2301      	movs	r3, #1
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2301      	movs	r3, #1
 8001080:	2220      	movs	r2, #32
 8001082:	2194      	movs	r1, #148	@ 0x94
 8001084:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <cs43l22_set_volume+0x68>)
 8001086:	f003 fe05 	bl	8004c94 <HAL_I2C_Mem_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
											1, &volume, 1, 100);
	status_i2c = HAL_I2C_Mem_Write(&CS43L22_I2C, CS43L22_I2C_ADDRESS, CS43l22_MASBVOL_REG,
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	2194      	movs	r1, #148	@ 0x94
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <cs43l22_set_volume+0x68>)
 80010a2:	f003 fdf7 	bl	8004c94 <HAL_I2C_Mem_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
												1, &volume, 1, 100);
	return status_i2c;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000009c 	.word	0x2000009c

080010b8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a04      	ldr	r2, [pc, #16]	@ (80010d4 <HAL_I2S_TxCpltCallback+0x1c>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_I2S_TxCpltCallback+0x14>
  {
	AUDIO_I2S_TxCpltCallback();
 80010c8:	f000 f816 	bl	80010f8 <AUDIO_I2S_TxCpltCallback>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000f0 	.word	0x200000f0

080010d8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hi2s == &CS43L22_I2S)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_I2S_TxHalfCpltCallback+0x14>
  {

    AUDIO_I2S_TxHalfCpltCallback();
 80010e8:	f000 f80d 	bl	8001106 <AUDIO_I2S_TxHalfCpltCallback>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000f0 	.word	0x200000f0

080010f8 <AUDIO_I2S_TxCpltCallback>:
__weak void AUDIO_I2S_TxCpltCallback(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <AUDIO_I2S_TxHalfCpltCallback>:
__weak void AUDIO_I2S_TxHalfCpltCallback(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	0000      	movs	r0, r0
	...

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 fc73 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f88b 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 f96f 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 800112a:	f000 f94d 	bl	80013c8 <MX_DMA_Init>
  MX_I2C1_Init();
 800112e:	f000 f8ef 	bl	8001310 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001132:	f000 f91b 	bl	800136c <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8001136:	f008 fe65 	bl	8009e04 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  cs43l22_init();
 800113a:	f7ff fe93 	bl	8000e64 <cs43l22_init>
  // sine signal
  for(int i = 0; i < BUFFER_LENGTH;i++)
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e061      	b.n	8001208 <main+0xf0>
    {
        buffer_audio[2 * i] = 10000 * sin(2 * 3.14 * SIN_FREQ * i / SAMPLING_RATE);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f991 	bl	800046c <__aeabi_i2d>
 800114a:	a335      	add	r3, pc, #212	@ (adr r3, 8001220 <main+0x108>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff f9f6 	bl	8000540 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	a332      	add	r3, pc, #200	@ (adr r3, 8001228 <main+0x110>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fb17 	bl	8000794 <__aeabi_ddiv>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	ec43 2b17 	vmov	d7, r2, r3
 800116e:	eeb0 0a47 	vmov.f32	s0, s14
 8001172:	eef0 0a67 	vmov.f32	s1, s15
 8001176:	f009 fa9b 	bl	800a6b0 <sin>
 800117a:	ec51 0b10 	vmov	r0, r1, d0
 800117e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001230 <main+0x118>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff f9dc 	bl	8000540 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	005c      	lsls	r4, r3, #1
 8001194:	f7ff fc6e 	bl	8000a74 <__aeabi_d2iz>
 8001198:	4603      	mov	r3, r0
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <main+0x120>)
 800119e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        buffer_audio[2 * i + 1] = 10000 * sin(2 * 3.14 * SIN_FREQ * i / SAMPLING_RATE);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff f962 	bl	800046c <__aeabi_i2d>
 80011a8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001220 <main+0x108>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff f9c7 	bl	8000540 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8001228 <main+0x110>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fae8 	bl	8000794 <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	ec43 2b17 	vmov	d7, r2, r3
 80011cc:	eeb0 0a47 	vmov.f32	s0, s14
 80011d0:	eef0 0a67 	vmov.f32	s1, s15
 80011d4:	f009 fa6c 	bl	800a6b0 <sin>
 80011d8:	ec51 0b10 	vmov	r0, r1, d0
 80011dc:	a314      	add	r3, pc, #80	@ (adr r3, 8001230 <main+0x118>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f9ad 	bl	8000540 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	1c5c      	adds	r4, r3, #1
 80011f4:	f7ff fc3e 	bl	8000a74 <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <main+0x120>)
 80011fe:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  for(int i = 0; i < BUFFER_LENGTH;i++)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3301      	adds	r3, #1
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b6c      	cmp	r3, #108	@ 0x6c
 800120c:	dd9a      	ble.n	8001144 <main+0x2c>
    }
  // playing the sound
  cs43l22_play(buffer_audio, 2 * BUFFER_LENGTH);
 800120e:	21da      	movs	r1, #218	@ 0xda
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <main+0x120>)
 8001212:	f7ff fedb 	bl	8000fcc <cs43l22_play>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001216:	f008 fe1b 	bl	8009e50 <MX_USB_HOST_Process>
 800121a:	e7fc      	b.n	8001216 <main+0xfe>
 800121c:	f3af 8000 	nop.w
 8001220:	66666667 	.word	0x66666667
 8001224:	40a59666 	.word	0x40a59666
 8001228:	00000000 	.word	0x00000000
 800122c:	40e77000 	.word	0x40e77000
 8001230:	00000000 	.word	0x00000000
 8001234:	40c38800 	.word	0x40c38800
 8001238:	20000198 	.word	0x20000198

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b094      	sub	sp, #80	@ 0x50
 8001240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001242:	f107 0320 	add.w	r3, r7, #32
 8001246:	2230      	movs	r2, #48	@ 0x30
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f009 f9a2 	bl	800a594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	4b28      	ldr	r3, [pc, #160]	@ (8001308 <SystemClock_Config+0xcc>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	4a27      	ldr	r2, [pc, #156]	@ (8001308 <SystemClock_Config+0xcc>)
 800126a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001270:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <SystemClock_Config+0xcc>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <SystemClock_Config+0xd0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <SystemClock_Config+0xd0>)
 8001286:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <SystemClock_Config+0xd0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001298:	2301      	movs	r3, #1
 800129a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800129c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a2:	2302      	movs	r3, #2
 80012a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ac:	2308      	movs	r3, #8
 80012ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012ba:	2307      	movs	r3, #7
 80012bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fdea 	bl	8005e9c <HAL_RCC_OscConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ce:	f000 f9a9 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d2:	230f      	movs	r3, #15
 80012d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d6:	2302      	movs	r3, #2
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2105      	movs	r1, #5
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 f84b 	bl	800638c <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012fc:	f000 f992 	bl	8001624 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3750      	adds	r7, #80	@ 0x50
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40007000 	.word	0x40007000

08001310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	@ (8001364 <MX_I2C1_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_I2C1_Init+0x50>)
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x58>)
 800131e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_I2C1_Init+0x50>)
 800132e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001332:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_I2C1_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_I2C1_Init+0x50>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_I2C1_Init+0x50>)
 800134e:	f003 fb5d 	bl	8004a0c <HAL_I2C_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 f964 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000009c 	.word	0x2000009c
 8001364:	40005400 	.word	0x40005400
 8001368:	000186a0 	.word	0x000186a0

0800136c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_I2S3_Init+0x54>)
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <MX_I2S3_Init+0x58>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_I2S3_Init+0x54>)
 8001378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_LSB;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_I2S3_Init+0x54>)
 8001380:	2220      	movs	r2, #32
 8001382:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001384:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_I2S3_Init+0x54>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800138a:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <MX_I2S3_Init+0x54>)
 800138c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001390:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_I2S3_Init+0x54>)
 8001394:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001398:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800139a:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_I2S3_Init+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80013a0:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <MX_I2S3_Init+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_I2S3_Init+0x54>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013ac:	4804      	ldr	r0, [pc, #16]	@ (80013c0 <MX_I2S3_Init+0x54>)
 80013ae:	f003 ffdb 	bl	8005368 <HAL_I2S_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80013b8:	f000 f934 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000f0 	.word	0x200000f0
 80013c4:	40003c00 	.word	0x40003c00

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_DMA_Init+0x3c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001404 <MX_DMA_Init+0x3c>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_DMA_Init+0x3c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2010      	movs	r0, #16
 80013f0:	f000 fc7b 	bl	8001cea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013f4:	2010      	movs	r0, #16
 80013f6:	f000 fc94 	bl	8001d22 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b7a      	ldr	r3, [pc, #488]	@ (800160c <MX_GPIO_Init+0x204>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a79      	ldr	r2, [pc, #484]	@ (800160c <MX_GPIO_Init+0x204>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b77      	ldr	r3, [pc, #476]	@ (800160c <MX_GPIO_Init+0x204>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b73      	ldr	r3, [pc, #460]	@ (800160c <MX_GPIO_Init+0x204>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a72      	ldr	r2, [pc, #456]	@ (800160c <MX_GPIO_Init+0x204>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b70      	ldr	r3, [pc, #448]	@ (800160c <MX_GPIO_Init+0x204>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b6c      	ldr	r3, [pc, #432]	@ (800160c <MX_GPIO_Init+0x204>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a6b      	ldr	r2, [pc, #428]	@ (800160c <MX_GPIO_Init+0x204>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b69      	ldr	r3, [pc, #420]	@ (800160c <MX_GPIO_Init+0x204>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b65      	ldr	r3, [pc, #404]	@ (800160c <MX_GPIO_Init+0x204>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a64      	ldr	r2, [pc, #400]	@ (800160c <MX_GPIO_Init+0x204>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b62      	ldr	r3, [pc, #392]	@ (800160c <MX_GPIO_Init+0x204>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b5e      	ldr	r3, [pc, #376]	@ (800160c <MX_GPIO_Init+0x204>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a5d      	ldr	r2, [pc, #372]	@ (800160c <MX_GPIO_Init+0x204>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b5b      	ldr	r3, [pc, #364]	@ (800160c <MX_GPIO_Init+0x204>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b57      	ldr	r3, [pc, #348]	@ (800160c <MX_GPIO_Init+0x204>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a56      	ldr	r2, [pc, #344]	@ (800160c <MX_GPIO_Init+0x204>)
 80014b4:	f043 0308 	orr.w	r3, r3, #8
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b54      	ldr	r3, [pc, #336]	@ (800160c <MX_GPIO_Init+0x204>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2108      	movs	r1, #8
 80014ca:	4851      	ldr	r0, [pc, #324]	@ (8001610 <MX_GPIO_Init+0x208>)
 80014cc:	f001 f950 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2101      	movs	r1, #1
 80014d4:	484f      	ldr	r0, [pc, #316]	@ (8001614 <MX_GPIO_Init+0x20c>)
 80014d6:	f001 f94b 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014da:	2200      	movs	r2, #0
 80014dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80014e0:	484d      	ldr	r0, [pc, #308]	@ (8001618 <MX_GPIO_Init+0x210>)
 80014e2:	f001 f945 	bl	8002770 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80014e6:	2308      	movs	r3, #8
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4844      	ldr	r0, [pc, #272]	@ (8001610 <MX_GPIO_Init+0x208>)
 80014fe:	f000 ff9b 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001502:	2301      	movs	r3, #1
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	483e      	ldr	r0, [pc, #248]	@ (8001614 <MX_GPIO_Init+0x20c>)
 800151a:	f000 ff8d 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800151e:	2308      	movs	r3, #8
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152e:	2305      	movs	r3, #5
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4836      	ldr	r0, [pc, #216]	@ (8001614 <MX_GPIO_Init+0x20c>)
 800153a:	f000 ff7d 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001542:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	4619      	mov	r1, r3
 8001552:	4832      	ldr	r0, [pc, #200]	@ (800161c <MX_GPIO_Init+0x214>)
 8001554:	f000 ff70 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001558:	23e0      	movs	r3, #224	@ 0xe0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001568:	2305      	movs	r3, #5
 800156a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	482a      	ldr	r0, [pc, #168]	@ (800161c <MX_GPIO_Init+0x214>)
 8001574:	f000 ff60 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001578:	2304      	movs	r3, #4
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4825      	ldr	r0, [pc, #148]	@ (8001620 <MX_GPIO_Init+0x218>)
 800158c:	f000 ff54 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001590:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	2302      	movs	r3, #2
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a2:	2305      	movs	r3, #5
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	481c      	ldr	r0, [pc, #112]	@ (8001620 <MX_GPIO_Init+0x218>)
 80015ae:	f000 ff43 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015b2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80015b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4813      	ldr	r0, [pc, #76]	@ (8001618 <MX_GPIO_Init+0x210>)
 80015cc:	f000 ff34 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80015d0:	2320      	movs	r3, #32
 80015d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_GPIO_Init+0x210>)
 80015e4:	f000 ff28 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4804      	ldr	r0, [pc, #16]	@ (8001610 <MX_GPIO_Init+0x208>)
 80015fe:	f000 ff1b 	bl	8002438 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	@ 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40021000 	.word	0x40021000
 8001614:	40020800 	.word	0x40020800
 8001618:	40020c00 	.word	0x40020c00
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166e:	2007      	movs	r0, #7
 8001670:	f000 fb30 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <HAL_I2C_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12c      	bne.n	80016fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a17      	ldr	r2, [pc, #92]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80016be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d0:	2304      	movs	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	480c      	ldr	r0, [pc, #48]	@ (800170c <HAL_I2C_MspInit+0x8c>)
 80016dc:	f000 feac 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	@ 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08e      	sub	sp, #56	@ 0x38
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a4d      	ldr	r2, [pc, #308]	@ (8001870 <HAL_I2S_MspInit+0x160>)
 800173c:	4293      	cmp	r3, r2
 800173e:	f040 8093 	bne.w	8001868 <HAL_I2S_MspInit+0x158>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001742:	2301      	movs	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001746:	23c0      	movs	r3, #192	@ 0xc0
 8001748:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800174a:	2302      	movs	r3, #2
 800174c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4618      	mov	r0, r3
 8001754:	f005 f826 	bl	80067a4 <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800175e:	f7ff ff61 	bl	8001624 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a42      	ldr	r2, [pc, #264]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 800176c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b40      	ldr	r3, [pc, #256]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a3b      	ldr	r2, [pc, #236]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a34      	ldr	r2, [pc, #208]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <HAL_I2S_MspInit+0x164>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017b6:	2310      	movs	r3, #16
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c6:	2306      	movs	r3, #6
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4829      	ldr	r0, [pc, #164]	@ (8001878 <HAL_I2S_MspInit+0x168>)
 80017d2:	f000 fe31 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80017d6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e8:	2306      	movs	r3, #6
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4822      	ldr	r0, [pc, #136]	@ (800187c <HAL_I2S_MspInit+0x16c>)
 80017f4:	f000 fe20 	bl	8002438 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80017f8:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 80017fa:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_I2S_MspInit+0x174>)
 80017fc:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001800:	2200      	movs	r2, #0
 8001802:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001816:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 800181a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800181e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001820:	4b17      	ldr	r3, [pc, #92]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001822:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001826:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001828:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 800182a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800182e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001836:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800183c:	4810      	ldr	r0, [pc, #64]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 800183e:	f000 fa8b 	bl	8001d58 <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8001848:	f7ff feec 	bl	8001624 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001850:	639a      	str	r2, [r3, #56]	@ 0x38
 8001852:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <HAL_I2S_MspInit+0x170>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2033      	movs	r0, #51	@ 0x33
 800185e:	f000 fa44 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001862:	2033      	movs	r0, #51	@ 0x33
 8001864:	f000 fa5d 	bl	8001d22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	@ 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40003c00 	.word	0x40003c00
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020800 	.word	0x40020800
 8001880:	20000138 	.word	0x20000138
 8001884:	40026088 	.word	0x40026088

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <MemManage_Handler+0x4>

080018a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <UsageFault_Handler+0x4>

080018b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f8e5 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018ec:	4802      	ldr	r0, [pc, #8]	@ (80018f8 <DMA1_Stream5_IRQHandler+0x10>)
 80018ee:	f000 fb39 	bl	8001f64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000138 	.word	0x20000138

080018fc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <SPI3_IRQHandler+0x10>)
 8001902:	f003 ff15 	bl	8005730 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200000f0 	.word	0x200000f0

08001910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <OTG_FS_IRQHandler+0x10>)
 8001916:	f001 fa25 	bl	8002d64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000730 	.word	0x20000730

08001924 <_sbrk>:
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
 8001954:	f008 fe36 	bl	800a5c4 <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20020000 	.word	0x20020000
 8001984:	00000400 	.word	0x00000400
 8001988:	2000034c 	.word	0x2000034c
 800198c:	20000c58 	.word	0x20000c58

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019b8:	f7ff ffea 	bl	8001990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019be:	490d      	ldr	r1, [pc, #52]	@ (80019f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c4:	e002      	b.n	80019cc <LoopCopyDataInit>

080019c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ca:	3304      	adds	r3, #4

080019cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d0:	d3f9      	bcc.n	80019c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d8:	e001      	b.n	80019de <LoopFillZerobss>

080019da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019dc:	3204      	adds	r2, #4

080019de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e0:	d3fb      	bcc.n	80019da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e2:	f008 fdf5 	bl	800a5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fb97 	bl	8001118 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80019f8:	0800b920 	.word	0x0800b920
  ldr r2, =_sbss
 80019fc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a00:	20000c58 	.word	0x20000c58

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 f94f 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff fdf8 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f967 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a88:	f000 f92f 	bl	8001cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000008 	.word	0x20000008

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	2000000c 	.word	0x2000000c
 8001ad0:	20000350 	.word	0x20000350

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	@ (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000350 	.word	0x20000350

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	@ (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	@ (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	@ (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	@ (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cb4:	f7ff ff8e 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff29 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff3e 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff8e 	bl	8001c28 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5d 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff31 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa2 	bl	8001c90 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d64:	f7ff feb6 	bl	8001ad4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e099      	b.n	8001ea8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d94:	e00f      	b.n	8001db6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d96:	f7ff fe9d 	bl	8001ad4 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d908      	bls.n	8001db6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2203      	movs	r2, #3
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e078      	b.n	8001ea8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e8      	bne.n	8001d96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_DMA_Init+0x158>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d107      	bne.n	8001e20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f023 0307 	bic.w	r3, r3, #7
 8001e36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d117      	bne.n	8001e7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fa6f 	bl	8002340 <DMA_CheckFifoParam>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2240      	movs	r2, #64	@ 0x40
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e76:	2301      	movs	r3, #1
 8001e78:	e016      	b.n	8001ea8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fa26 	bl	80022d4 <DMA_CalcBaseAndBitshift>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e90:	223f      	movs	r2, #63	@ 0x3f
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	f010803f 	.word	0xf010803f

08001eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_DMA_Start_IT+0x26>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e040      	b.n	8001f5c <HAL_DMA_Start_IT+0xa8>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d12f      	bne.n	8001f4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68b9      	ldr	r1, [r7, #8]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 f9b8 	bl	8002278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0c:	223f      	movs	r2, #63	@ 0x3f
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0216 	orr.w	r2, r2, #22
 8001f22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
 8001f58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f70:	4b8e      	ldr	r3, [pc, #568]	@ (80021ac <HAL_DMA_IRQHandler+0x248>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a8e      	ldr	r2, [pc, #568]	@ (80021b0 <HAL_DMA_IRQHandler+0x24c>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8e:	2208      	movs	r2, #8
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d01a      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	409a      	lsls	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00b      	beq.n	8002006 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f043 0202 	orr.w	r2, r3, #2
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800200a:	2204      	movs	r2, #4
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00b      	beq.n	800203c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2204      	movs	r2, #4
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2210      	movs	r2, #16
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d043      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03c      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	2210      	movs	r2, #16
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d018      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d108      	bne.n	8002094 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d024      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	4798      	blx	r3
 8002092:	e01f      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	e016      	b.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d8:	2220      	movs	r2, #32
 80020da:	409a      	lsls	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 808f 	beq.w	8002204 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 8087 	beq.w	8002204 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fa:	2220      	movs	r2, #32
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b05      	cmp	r3, #5
 800210c:	d136      	bne.n	800217c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0216 	bic.w	r2, r2, #22
 800211c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800212c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_DMA_IRQHandler+0x1da>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213a:	2b00      	cmp	r3, #0
 800213c:	d007      	beq.n	800214e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	223f      	movs	r2, #63	@ 0x3f
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216e:	2b00      	cmp	r3, #0
 8002170:	d07e      	beq.n	8002270 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
        }
        return;
 800217a:	e079      	b.n	8002270 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01d      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10d      	bne.n	80021b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219c:	2b00      	cmp	r3, #0
 800219e:	d031      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
 80021a8:	e02c      	b.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
 80021aa:	bf00      	nop
 80021ac:	20000004 	.word	0x20000004
 80021b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d023      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e01e      	b.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10f      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0210 	bic.w	r2, r2, #16
 80021e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	2b00      	cmp	r3, #0
 800220a:	d032      	beq.n	8002272 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d022      	beq.n	800225e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2205      	movs	r2, #5
 800221c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0201 	bic.w	r2, r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d307      	bcc.n	800224c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f2      	bne.n	8002230 <HAL_DMA_IRQHandler+0x2cc>
 800224a:	e000      	b.n	800224e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800224c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
 800226e:	e000      	b.n	8002272 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002270:	bf00      	nop
    }
  }
}
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b40      	cmp	r3, #64	@ 0x40
 80022a4:	d108      	bne.n	80022b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022b6:	e007      	b.n	80022c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3b10      	subs	r3, #16
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <DMA_CalcBaseAndBitshift+0x64>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022ee:	4a13      	ldr	r2, [pc, #76]	@ (800233c <DMA_CalcBaseAndBitshift+0x68>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d909      	bls.n	8002316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	1d1a      	adds	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	659a      	str	r2, [r3, #88]	@ 0x58
 8002314:	e007      	b.n	8002326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800231e:	f023 0303 	bic.w	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	aaaaaaab 	.word	0xaaaaaaab
 800233c:	0800b72c 	.word	0x0800b72c

08002340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d11f      	bne.n	800239a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d856      	bhi.n	800240e <DMA_CheckFifoParam+0xce>
 8002360:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <DMA_CheckFifoParam+0x28>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	0800238b 	.word	0x0800238b
 8002370:	08002379 	.word	0x08002379
 8002374:	0800240f 	.word	0x0800240f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d046      	beq.n	8002412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e043      	b.n	8002412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002392:	d140      	bne.n	8002416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e03d      	b.n	8002416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023a2:	d121      	bne.n	80023e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d837      	bhi.n	800241a <DMA_CheckFifoParam+0xda>
 80023aa:	a201      	add	r2, pc, #4	@ (adr r2, 80023b0 <DMA_CheckFifoParam+0x70>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023c7 	.word	0x080023c7
 80023b8:	080023c1 	.word	0x080023c1
 80023bc:	080023d9 	.word	0x080023d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      break;
 80023c4:	e030      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d025      	beq.n	800241e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d6:	e022      	b.n	800241e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023e0:	d11f      	bne.n	8002422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023e6:	e01c      	b.n	8002422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d903      	bls.n	80023f6 <DMA_CheckFifoParam+0xb6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023f4:	e018      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
      break;
 80023fa:	e015      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00e      	beq.n	8002426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      break;
 800240c:	e00b      	b.n	8002426 <DMA_CheckFifoParam+0xe6>
      break;
 800240e:	bf00      	nop
 8002410:	e00a      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e008      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e006      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
 800241c:	e004      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;   
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
    }
  } 
  
  return status; 
 8002428:	7bfb      	ldrb	r3, [r7, #15]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e16b      	b.n	800272c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 815a 	bne.w	8002726 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80b4 	beq.w	8002726 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b60      	ldr	r3, [pc, #384]	@ (8002744 <HAL_GPIO_Init+0x30c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002744 <HAL_GPIO_Init+0x30c>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002744 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a5b      	ldr	r2, [pc, #364]	@ (8002748 <HAL_GPIO_Init+0x310>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a52      	ldr	r2, [pc, #328]	@ (800274c <HAL_GPIO_Init+0x314>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d02b      	beq.n	800265e <HAL_GPIO_Init+0x226>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a51      	ldr	r2, [pc, #324]	@ (8002750 <HAL_GPIO_Init+0x318>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d025      	beq.n	800265a <HAL_GPIO_Init+0x222>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a50      	ldr	r2, [pc, #320]	@ (8002754 <HAL_GPIO_Init+0x31c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01f      	beq.n	8002656 <HAL_GPIO_Init+0x21e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4f      	ldr	r2, [pc, #316]	@ (8002758 <HAL_GPIO_Init+0x320>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d019      	beq.n	8002652 <HAL_GPIO_Init+0x21a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4e      	ldr	r2, [pc, #312]	@ (800275c <HAL_GPIO_Init+0x324>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d013      	beq.n	800264e <HAL_GPIO_Init+0x216>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4d      	ldr	r2, [pc, #308]	@ (8002760 <HAL_GPIO_Init+0x328>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00d      	beq.n	800264a <HAL_GPIO_Init+0x212>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4c      	ldr	r2, [pc, #304]	@ (8002764 <HAL_GPIO_Init+0x32c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x20e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4b      	ldr	r2, [pc, #300]	@ (8002768 <HAL_GPIO_Init+0x330>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d101      	bne.n	8002642 <HAL_GPIO_Init+0x20a>
 800263e:	2307      	movs	r3, #7
 8002640:	e00e      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002642:	2308      	movs	r3, #8
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002646:	2306      	movs	r3, #6
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x228>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x228>
 800265e:	2300      	movs	r3, #0
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002670:	4935      	ldr	r1, [pc, #212]	@ (8002748 <HAL_GPIO_Init+0x310>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267e:	4b3b      	ldr	r3, [pc, #236]	@ (800276c <HAL_GPIO_Init+0x334>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a2:	4a32      	ldr	r2, [pc, #200]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a8:	4b30      	ldr	r3, [pc, #192]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026cc:	4a27      	ldr	r2, [pc, #156]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d2:	4b26      	ldr	r3, [pc, #152]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f6:	4a1d      	ldr	r2, [pc, #116]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <HAL_GPIO_Init+0x334>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002720:	4a12      	ldr	r2, [pc, #72]	@ (800276c <HAL_GPIO_Init+0x334>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3301      	adds	r3, #1
 800272a:	61fb      	str	r3, [r7, #28]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	2b0f      	cmp	r3, #15
 8002730:	f67f ae90 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3724      	adds	r7, #36	@ 0x24
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40013800 	.word	0x40013800
 800274c:	40020000 	.word	0x40020000
 8002750:	40020400 	.word	0x40020400
 8002754:	40020800 	.word	0x40020800
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40021000 	.word	0x40021000
 8002760:	40021400 	.word	0x40021400
 8002764:	40021800 	.word	0x40021800
 8002768:	40021c00 	.word	0x40021c00
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e059      	b.n	8002868 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f007 fb76 	bl	8009ec0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2203      	movs	r2, #3
 80027d8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e2:	d102      	bne.n	80027ea <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 f98f 	bl	8006b12 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7c1a      	ldrb	r2, [r3, #16]
 80027fc:	f88d 2000 	strb.w	r2, [sp]
 8002800:	3304      	adds	r3, #4
 8002802:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002804:	f004 f910 	bl	8006a28 <USB_CoreInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e026      	b.n	8002868 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2101      	movs	r1, #1
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f987 	bl	8006b34 <USB_SetCurrentMode>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e017      	b.n	8002868 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7c1a      	ldrb	r2, [r3, #16]
 8002840:	f88d 2000 	strb.w	r2, [sp]
 8002844:	3304      	adds	r3, #4
 8002846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002848:	f004 fb2a 	bl	8006ea0 <USB_HostInit>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2202      	movs	r2, #2
 8002856:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e004      	b.n	8002868 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08b      	sub	sp, #44	@ 0x2c
 8002874:	af04      	add	r7, sp, #16
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	70fb      	strb	r3, [r7, #3]
 8002882:	460b      	mov	r3, r1
 8002884:	70bb      	strb	r3, [r7, #2]
 8002886:	4613      	mov	r3, r2
 8002888:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800288a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800288c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_HCD_HC_Init+0x2c>
 8002898:	2302      	movs	r3, #2
 800289a:	e09d      	b.n	80029d8 <HAL_HCD_HC_Init+0x168>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3319      	adds	r3, #25
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3314      	adds	r3, #20
 80028c8:	787a      	ldrb	r2, [r7, #1]
 80028ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	4613      	mov	r3, r2
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	3315      	adds	r3, #21
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3326      	adds	r3, #38	@ 0x26
 80028f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80028f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	78bb      	ldrb	r3, [r7, #2]
 80028fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3316      	adds	r3, #22
 800290e:	4602      	mov	r2, r0
 8002910:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	4619      	mov	r1, r3
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fbc8 	bl	80030ac <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800291c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da0a      	bge.n	800293a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3317      	adds	r3, #23
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e009      	b.n	800294e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	3317      	adds	r3, #23
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fc08 	bl	8007168 <USB_GetHostSpeed>
 8002958:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800295a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10b      	bne.n	800297a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002962:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_HCD_HC_Init+0x10a>
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2bbc      	cmp	r3, #188	@ 0xbc
 8002974:	d901      	bls.n	800297a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002976:	23bc      	movs	r3, #188	@ 0xbc
 8002978:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3318      	adds	r3, #24
 800298a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800298e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	b298      	uxth	r0, r3
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3328      	adds	r3, #40	@ 0x28
 80029a4:	4602      	mov	r2, r0
 80029a6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	787c      	ldrb	r4, [r7, #1]
 80029b2:	78ba      	ldrb	r2, [r7, #2]
 80029b4:	78f9      	ldrb	r1, [r7, #3]
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029bc:	9301      	str	r3, [sp, #4]
 80029be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4623      	mov	r3, r4
 80029c6:	f004 fbf7 	bl	80071b8 <USB_HC_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}

080029e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_HCD_HC_Halt+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e00f      	b.n	8002a1e <HAL_HCD_HC_Halt+0x3e>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 ff89 	bl	8007926 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	461a      	mov	r2, r3
 8002a36:	4603      	mov	r3, r0
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	70bb      	strb	r3, [r7, #2]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3317      	adds	r3, #23
 8002a52:	78ba      	ldrb	r2, [r7, #2]
 8002a54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3326      	adds	r3, #38	@ 0x26
 8002a66:	787a      	ldrb	r2, [r7, #1]
 8002a68:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a6a:	7c3b      	ldrb	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d114      	bne.n	8002a9a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	332a      	adds	r3, #42	@ 0x2a
 8002a80:	2203      	movs	r2, #3
 8002a82:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3319      	adds	r3, #25
 8002a94:	7f3a      	ldrb	r2, [r7, #28]
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e009      	b.n	8002aae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	332a      	adds	r3, #42	@ 0x2a
 8002aaa:	2202      	movs	r2, #2
 8002aac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002aae:	787b      	ldrb	r3, [r7, #1]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	f200 8102 	bhi.w	8002cba <HAL_HCD_HC_SubmitRequest+0x292>
 8002ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002acd 	.word	0x08002acd
 8002ac0:	08002ca5 	.word	0x08002ca5
 8002ac4:	08002b91 	.word	0x08002b91
 8002ac8:	08002c1b 	.word	0x08002c1b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002acc:	7c3b      	ldrb	r3, [r7, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	f040 80f5 	bne.w	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002ad4:	78bb      	ldrb	r3, [r7, #2]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12d      	bne.n	8002b36 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ada:	8b3b      	ldrh	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	333d      	adds	r3, #61	@ 0x3d
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	333d      	adds	r3, #61	@ 0x3d
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	332a      	adds	r3, #42	@ 0x2a
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002b1e:	e0ce      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	332a      	adds	r3, #42	@ 0x2a
 8002b30:	2202      	movs	r2, #2
 8002b32:	701a      	strb	r2, [r3, #0]
      break;
 8002b34:	e0c3      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	331a      	adds	r3, #26
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 80b8 	bne.w	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	333c      	adds	r3, #60	@ 0x3c
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	332a      	adds	r3, #42	@ 0x2a
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
      break;
 8002b78:	e0a1      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	332a      	adds	r3, #42	@ 0x2a
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	701a      	strb	r2, [r3, #0]
      break;
 8002b8e:	e096      	b.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b90:	78bb      	ldrb	r3, [r7, #2]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d120      	bne.n	8002bd8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	333d      	adds	r3, #61	@ 0x3d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	332a      	adds	r3, #42	@ 0x2a
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002bc0:	e07e      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	332a      	adds	r3, #42	@ 0x2a
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	701a      	strb	r2, [r3, #0]
      break;
 8002bd6:	e073      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333c      	adds	r3, #60	@ 0x3c
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	332a      	adds	r3, #42	@ 0x2a
 8002bfe:	2200      	movs	r2, #0
 8002c00:	701a      	strb	r2, [r3, #0]
      break;
 8002c02:	e05d      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	332a      	adds	r3, #42	@ 0x2a
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
      break;
 8002c18:	e052      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c1a:	78bb      	ldrb	r3, [r7, #2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d120      	bne.n	8002c62 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	333d      	adds	r3, #61	@ 0x3d
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	332a      	adds	r3, #42	@ 0x2a
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c4a:	e039      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	332a      	adds	r3, #42	@ 0x2a
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
      break;
 8002c60:	e02e      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	333c      	adds	r3, #60	@ 0x3c
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	332a      	adds	r3, #42	@ 0x2a
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e018      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	332a      	adds	r3, #42	@ 0x2a
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	701a      	strb	r2, [r3, #0]
      break;
 8002ca2:	e00d      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	332a      	adds	r3, #42	@ 0x2a
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
      break;
 8002cb8:	e002      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002cba:	bf00      	nop
 8002cbc:	e000      	b.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002cbe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	332c      	adds	r3, #44	@ 0x2c
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	8b39      	ldrh	r1, [r7, #24]
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4403      	add	r3, r0
 8002ce4:	3334      	adds	r3, #52	@ 0x34
 8002ce6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334c      	adds	r3, #76	@ 0x4c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	3338      	adds	r3, #56	@ 0x38
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3315      	adds	r3, #21
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	334d      	adds	r3, #77	@ 0x4d
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	3310      	adds	r3, #16
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	1d19      	adds	r1, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	799b      	ldrb	r3, [r3, #6]
 8002d52:	461a      	mov	r2, r3
 8002d54:	f004 fb5c 	bl	8007410 <USB_HC_StartXfer>
 8002d58:	4603      	mov	r3, r0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop

08002d64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f850 	bl	8006e20 <USB_GetMode>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f040 80fb 	bne.w	8002f7e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 f813 	bl	8006db8 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80f1 	beq.w	8002f7c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f80a 	bl	8006db8 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002daa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dae:	d104      	bne.n	8002dba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002db8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fffa 	bl	8006db8 <USB_ReadInterrupts>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dce:	d104      	bne.n	8002dda <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f003 ffea 	bl	8006db8 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dee:	d104      	bne.n	8002dfa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002df8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 ffda 	bl	8006db8 <USB_ReadInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d103      	bne.n	8002e16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 ffcc 	bl	8006db8 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e2a:	d120      	bne.n	8002e6e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002e34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d113      	bne.n	8002e6e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e46:	2110      	movs	r1, #16
 8002e48:	6938      	ldr	r0, [r7, #16]
 8002e4a:	f003 febf 	bl	8006bcc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e4e:	6938      	ldr	r0, [r7, #16]
 8002e50:	f003 feee 	bl	8006c30 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	7a5b      	ldrb	r3, [r3, #9]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d105      	bne.n	8002e68 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2101      	movs	r1, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f8e0 	bl	8007028 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f007 f8a7 	bl	8009fbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 ffa0 	bl	8006db8 <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e82:	d102      	bne.n	8002e8a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f001 fd4d 	bl	8004924 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 ff92 	bl	8006db8 <USB_ReadInterrupts>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d106      	bne.n	8002eac <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f007 f870 	bl	8009f84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 ff81 	bl	8006db8 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ec0:	d139      	bne.n	8002f36 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fd1c 	bl	8007904 <USB_HC_ReadInterrupt>
 8002ecc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e025      	b.n	8002f20 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d018      	beq.n	8002f1a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002efe:	d106      	bne.n	8002f0e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	4619      	mov	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f905 	bl	8003116 <HCD_HC_IN_IRQHandler>
 8002f0c:	e005      	b.n	8002f1a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 ff67 	bl	8003de8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	795b      	ldrb	r3, [r3, #5]
 8002f24:	461a      	mov	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d3d3      	bcc.n	8002ed4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 ff3c 	bl	8006db8 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d101      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x1ea>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_HCD_IRQHandler+0x1ec>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d014      	beq.n	8002f7e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699a      	ldr	r2, [r3, #24]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0210 	bic.w	r2, r2, #16
 8002f62:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f001 fbfe 	bl	8004766 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0210 	orr.w	r2, r2, #16
 8002f78:	619a      	str	r2, [r3, #24]
 8002f7a:	e000      	b.n	8002f7e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002f7c:	bf00      	nop
    }
  }
}
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_HCD_Start+0x16>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e013      	b.n	8002fc2 <HAL_HCD_Start+0x3e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 f8a4 	bl	80070f6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fd9c 	bl	8006af0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_HCD_Stop+0x16>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e00d      	b.n	8002ffc <HAL_HCD_Stop+0x32>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fdf7 	bl	8007be0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f004 f846 	bl	80070a2 <USB_ResetPort>
 8003016:	4603      	mov	r3, r0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334c      	adds	r3, #76	@ 0x4c
 800303c:	781b      	ldrb	r3, [r3, #0]
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3338      	adds	r3, #56	@ 0x38
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f004 f888 	bl	8007196 <USB_GetCurrentFrame>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 f863 	bl	8007168 <USB_GetHostSpeed>
 80030a2:	4603      	mov	r3, r0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	331a      	adds	r3, #26
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	331b      	adds	r3, #27
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3325      	adds	r3, #37	@ 0x25
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3324      	adds	r3, #36	@ 0x24
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fe52 	bl	8006dde <USB_ReadChInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d11a      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003150:	461a      	mov	r2, r3
 8003152:	2304      	movs	r3, #4
 8003154:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334d      	adds	r3, #77	@ 0x4d
 8003166:	2207      	movs	r2, #7
 8003168:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f004 fbd7 	bl	8007926 <USB_HC_Halt>
 8003178:	e09e      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fe2b 	bl	8006dde <USB_ReadChInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003192:	d11b      	bne.n	80031cc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2208      	movs	r2, #8
 80031ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 fbae 	bl	8007926 <USB_HC_Halt>
 80031ca:	e075      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fe02 	bl	8006dde <USB_ReadChInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d11a      	bne.n	800321a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2308      	movs	r3, #8
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	2206      	movs	r2, #6
 8003208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fb87 	bl	8007926 <USB_HC_Halt>
 8003218:	e04e      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fddb 	bl	8006dde <USB_ReadChInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d11b      	bne.n	800326c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003246:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	2209      	movs	r2, #9
 800325a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fb5e 	bl	8007926 <USB_HC_Halt>
 800326a:	e025      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fdb2 	bl	8006dde <USB_ReadChInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003280:	2b80      	cmp	r3, #128	@ 0x80
 8003282:	d119      	bne.n	80032b8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003290:	461a      	mov	r2, r3
 8003292:	2380      	movs	r3, #128	@ 0x80
 8003294:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334d      	adds	r3, #77	@ 0x4d
 80032a6:	2207      	movs	r2, #7
 80032a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fb37 	bl	8007926 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fd8c 	bl	8006dde <USB_ReadChInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032d0:	d112      	bne.n	80032f8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fb23 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032f2:	6093      	str	r3, [r2, #8]
 80032f4:	f000 bd75 	b.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fd6c 	bl	8006dde <USB_ReadChInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 8128 	bne.w	8003562 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2320      	movs	r3, #32
 8003322:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	331b      	adds	r3, #27
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d119      	bne.n	800336e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	331b      	adds	r3, #27
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	0151      	lsls	r1, r2, #5
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	440a      	add	r2, r1
 8003364:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800336c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	799b      	ldrb	r3, [r3, #6]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01b      	beq.n	80033ae <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3330      	adds	r3, #48	@ 0x30
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	1ac9      	subs	r1, r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4403      	add	r3, r0
 80033aa:	3338      	adds	r3, #56	@ 0x38
 80033ac:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3344      	adds	r3, #68	@ 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	2301      	movs	r3, #1
 80033e6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3326      	adds	r3, #38	@ 0x26
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3326      	adds	r3, #38	@ 0x26
 800340e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003410:	2b02      	cmp	r3, #2
 8003412:	d110      	bne.n	8003436 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f004 fa82 	bl	8007926 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2310      	movs	r3, #16
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	e03d      	b.n	80034b2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3326      	adds	r3, #38	@ 0x26
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d00a      	beq.n	8003462 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3326      	adds	r3, #38	@ 0x26
 800345c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800345e:	2b01      	cmp	r3, #1
 8003460:	d127      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	0151      	lsls	r1, r2, #5
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	440a      	add	r2, r1
 8003478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800347c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003480:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334c      	adds	r3, #76	@ 0x4c
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334c      	adds	r3, #76	@ 0x4c
 80034a6:	781a      	ldrb	r2, [r3, #0]
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	4619      	mov	r1, r3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f006 fd93 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	799b      	ldrb	r3, [r3, #6]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d13b      	bne.n	8003532 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3338      	adds	r3, #56	@ 0x38
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	3328      	adds	r3, #40	@ 0x28
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	440b      	add	r3, r1
 80034e0:	1e59      	subs	r1, r3, #1
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	3328      	adds	r3, #40	@ 0x28
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8470 	beq.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	333c      	adds	r3, #60	@ 0x3c
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333c      	adds	r3, #60	@ 0x3c
 800352a:	4602      	mov	r2, r0
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	f000 bc58 	b.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	333c      	adds	r3, #60	@ 0x3c
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2d8      	uxtb	r0, r3
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	@ 0x3c
 800355a:	4602      	mov	r2, r0
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	f000 bc40 	b.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f003 fc37 	bl	8006dde <USB_ReadChInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b20      	cmp	r3, #32
 8003578:	d131      	bne.n	80035de <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2320      	movs	r3, #32
 800358a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	331a      	adds	r3, #26
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f040 841f 	bne.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	331b      	adds	r3, #27
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	@ 0x4d
 80035c8:	2203      	movs	r2, #3
 80035ca:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 f9a6 	bl	8007926 <USB_HC_Halt>
 80035da:	f000 bc02 	b.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f003 fbf9 	bl	8006dde <USB_ReadChInterrupts>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	f040 8305 	bne.w	8003c02 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003604:	461a      	mov	r2, r3
 8003606:	2302      	movs	r3, #2
 8003608:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	334d      	adds	r3, #77	@ 0x4d
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d114      	bne.n	800364a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	334d      	adds	r3, #77	@ 0x4d
 8003630:	2202      	movs	r2, #2
 8003632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e2cc      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334d      	adds	r3, #77	@ 0x4d
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b06      	cmp	r3, #6
 800365e:	d114      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334d      	adds	r3, #77	@ 0x4d
 8003670:	2202      	movs	r2, #2
 8003672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	@ 0x4c
 8003684:	2205      	movs	r2, #5
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	e2ac      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334d      	adds	r3, #77	@ 0x4d
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b07      	cmp	r3, #7
 800369e:	d00b      	beq.n	80036b8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	334d      	adds	r3, #77	@ 0x4d
 80036b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036b2:	2b09      	cmp	r3, #9
 80036b4:	f040 80a6 	bne.w	8003804 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334d      	adds	r3, #77	@ 0x4d
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3344      	adds	r3, #68	@ 0x44
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1c59      	adds	r1, r3, #1
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	3344      	adds	r3, #68	@ 0x44
 80036ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3344      	adds	r3, #68	@ 0x44
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d943      	bls.n	800378e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3344      	adds	r3, #68	@ 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	331a      	adds	r3, #26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d123      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	331b      	adds	r3, #27
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	331c      	adds	r3, #28
 8003754:	2200      	movs	r2, #0
 8003756:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	440a      	add	r2, r1
 800376e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003776:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334c      	adds	r3, #76	@ 0x4c
 8003788:	2204      	movs	r2, #4
 800378a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800378c:	e229      	b.n	8003be2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	334c      	adds	r3, #76	@ 0x4c
 800379e:	2202      	movs	r2, #2
 80037a0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	@ 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3326      	adds	r3, #38	@ 0x26
 80037c8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f040 8209 	bne.w	8003be2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037e6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037ee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037fc:	461a      	mov	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003802:	e1ee      	b.n	8003be2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	334d      	adds	r3, #77	@ 0x4d
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b05      	cmp	r3, #5
 8003818:	f040 80c8 	bne.w	80039ac <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	2202      	movs	r2, #2
 800382e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331b      	adds	r3, #27
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	f040 81ce 	bne.w	8003be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3326      	adds	r3, #38	@ 0x26
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d16b      	bne.n	8003936 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3348      	adds	r3, #72	@ 0x48
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c59      	adds	r1, r3, #1
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4403      	add	r3, r0
 800387e:	3348      	adds	r3, #72	@ 0x48
 8003880:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3348      	adds	r3, #72	@ 0x48
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d943      	bls.n	8003920 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3348      	adds	r3, #72	@ 0x48
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331b      	adds	r3, #27
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3344      	adds	r3, #68	@ 0x44
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d809      	bhi.n	80038ea <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	331c      	adds	r3, #28
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	0151      	lsls	r1, r2, #5
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	440a      	add	r2, r1
 8003900:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003908:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	334c      	adds	r3, #76	@ 0x4c
 800391a:	2204      	movs	r2, #4
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	e014      	b.n	800394a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334c      	adds	r3, #76	@ 0x4c
 8003930:	2202      	movs	r2, #2
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	e009      	b.n	800394a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	334c      	adds	r3, #76	@ 0x4c
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3326      	adds	r3, #38	@ 0x26
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	3326      	adds	r3, #38	@ 0x26
 8003970:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003972:	2b02      	cmp	r3, #2
 8003974:	f040 8136 	bne.w	8003be4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800398e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003996:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a4:	461a      	mov	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e11b      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334d      	adds	r3, #77	@ 0x4d
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	f040 8081 	bne.w	8003ac6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	331b      	adds	r3, #27
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	f040 80fa 	bne.w	8003be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334c      	adds	r3, #76	@ 0x4c
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a22:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a42:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	0151      	lsls	r1, r2, #5
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	440a      	add	r2, r1
 8003a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5e:	f023 0320 	bic.w	r3, r3, #32
 8003a62:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3326      	adds	r3, #38	@ 0x26
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3326      	adds	r3, #38	@ 0x26
 8003a8a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	f040 80a9 	bne.w	8003be4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003aa8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ab0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	e08e      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	@ 0x4d
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d143      	bne.n	8003b64 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334d      	adds	r3, #77	@ 0x4d
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	@ 0x4c
 8003b00:	2202      	movs	r2, #2
 8003b02:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3326      	adds	r3, #38	@ 0x26
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	3326      	adds	r3, #38	@ 0x26
 8003b2a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d159      	bne.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b46:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b4e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e03f      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	334d      	adds	r3, #77	@ 0x4d
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d126      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	334d      	adds	r3, #77	@ 0x4d
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3344      	adds	r3, #68	@ 0x44
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4403      	add	r3, r0
 8003bae:	3344      	adds	r3, #68	@ 0x44
 8003bb0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	334c      	adds	r3, #76	@ 0x4c
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e00d      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	334d      	adds	r3, #77	@ 0x4d
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	f000 8100 	beq.w	8003de0 <HCD_HC_IN_IRQHandler+0xcca>
 8003be0:	e000      	b.n	8003be4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003be2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003be4:	78fa      	ldrb	r2, [r7, #3]
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	334c      	adds	r3, #76	@ 0x4c
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f006 f9ec 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c00:	e0ef      	b.n	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 f8e7 	bl	8006dde <USB_ReadChInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d12f      	bne.n	8003c7a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	2340      	movs	r3, #64	@ 0x40
 8003c2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334d      	adds	r3, #77	@ 0x4d
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	331a      	adds	r3, #26
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	011b      	lsls	r3, r3, #4
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	3344      	adds	r3, #68	@ 0x44
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f003 fe57 	bl	8007926 <USB_HC_Halt>
 8003c78:	e0b3      	b.n	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 f8ab 	bl	8006dde <USB_ReadChInterrupts>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	f040 80a7 	bne.w	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3326      	adds	r3, #38	@ 0x26
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d11b      	bne.n	8003ce2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3344      	adds	r3, #68	@ 0x44
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	334d      	adds	r3, #77	@ 0x4d
 8003cce:	2204      	movs	r2, #4
 8003cd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 fe23 	bl	8007926 <USB_HC_Halt>
 8003ce0:	e03f      	b.n	8003d62 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3326      	adds	r3, #38	@ 0x26
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3326      	adds	r3, #38	@ 0x26
 8003d08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d129      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3344      	adds	r3, #68	@ 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	799b      	ldrb	r3, [r3, #6]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HCD_HC_IN_IRQHandler+0xc2a>
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	331b      	adds	r3, #27
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d110      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	334d      	adds	r3, #77	@ 0x4d
 8003d50:	2204      	movs	r2, #4
 8003d52:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 fde2 	bl	8007926 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	331b      	adds	r3, #27
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d129      	bne.n	8003dcc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	331b      	adds	r3, #27
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	0151      	lsls	r1, r2, #5
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	440a      	add	r2, r1
 8003da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003daa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	0151      	lsls	r1, r2, #5
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	440a      	add	r2, r1
 8003dc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dc6:	f043 0320 	orr.w	r3, r3, #32
 8003dca:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003dcc:	78fb      	ldrb	r3, [r7, #3]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2310      	movs	r3, #16
 8003ddc:	6093      	str	r3, [r2, #8]
 8003dde:	e000      	b.n	8003de2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003de0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f002 ffe9 	bl	8006dde <USB_ReadChInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d11b      	bne.n	8003e4e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	2304      	movs	r3, #4
 8003e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334d      	adds	r3, #77	@ 0x4d
 8003e38:	2207      	movs	r2, #7
 8003e3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fd6e 	bl	8007926 <USB_HC_Halt>
 8003e4a:	f000 bc89 	b.w	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 ffc1 	bl	8006dde <USB_ReadChInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f040 8082 	bne.w	8003f6c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e74:	461a      	mov	r2, r3
 8003e76:	2320      	movs	r3, #32
 8003e78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	3319      	adds	r3, #25
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d124      	bne.n	8003eda <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3319      	adds	r3, #25
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334c      	adds	r3, #76	@ 0x4c
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334d      	adds	r3, #77	@ 0x4d
 8003ec8:	2203      	movs	r2, #3
 8003eca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f003 fd26 	bl	8007926 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	331a      	adds	r3, #26
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 8437 	bne.w	8004760 <HCD_HC_OUT_IRQHandler+0x978>
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	331b      	adds	r3, #27
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 842b 	bne.w	8004760 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	3326      	adds	r3, #38	@ 0x26
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d009      	beq.n	8003f34 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	331b      	adds	r3, #27
 8003f30:	2201      	movs	r2, #1
 8003f32:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334d      	adds	r3, #77	@ 0x4d
 8003f44:	2203      	movs	r2, #3
 8003f46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f003 fce8 	bl	8007926 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e3f9      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f002 ff32 	bl	8006dde <USB_ReadChInterrupts>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f84:	d111      	bne.n	8003faa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f92:	461a      	mov	r2, r3
 8003f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f003 fcbf 	bl	8007926 <USB_HC_Halt>
 8003fa8:	e3da      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f002 ff13 	bl	8006dde <USB_ReadChInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d168      	bne.n	8004094 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3344      	adds	r3, #68	@ 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 fefd 	bl	8006dde <USB_ReadChInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b40      	cmp	r3, #64	@ 0x40
 8003fec:	d112      	bne.n	8004014 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003fee:	78fa      	ldrb	r2, [r7, #3]
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	1a9b      	subs	r3, r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3319      	adds	r3, #25
 8003ffe:	2201      	movs	r2, #1
 8004000:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004002:	78fb      	ldrb	r3, [r7, #3]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2340      	movs	r3, #64	@ 0x40
 8004012:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	331b      	adds	r3, #27
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d019      	beq.n	800405e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	331b      	adds	r3, #27
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	4413      	add	r3, r2
 8004046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	440a      	add	r2, r1
 8004054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800405c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	4413      	add	r3, r2
 8004066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406a:	461a      	mov	r2, r3
 800406c:	2301      	movs	r3, #1
 800406e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004070:	78fa      	ldrb	r2, [r7, #3]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	1a9b      	subs	r3, r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	334d      	adds	r3, #77	@ 0x4d
 8004080:	2201      	movs	r2, #1
 8004082:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f003 fc4a 	bl	8007926 <USB_HC_Halt>
 8004092:	e365      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f002 fe9e 	bl	8006dde <USB_ReadChInterrupts>
 80040a2:	4603      	mov	r3, r0
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	d139      	bne.n	8004120 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	334d      	adds	r3, #77	@ 0x4d
 80040bc:	2205      	movs	r2, #5
 80040be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	331a      	adds	r3, #26
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3319      	adds	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3344      	adds	r3, #68	@ 0x44
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fc0d 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004118:	461a      	mov	r2, r3
 800411a:	2340      	movs	r3, #64	@ 0x40
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	e31f      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f002 fe58 	bl	8006dde <USB_ReadChInterrupts>
 800412e:	4603      	mov	r3, r0
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b08      	cmp	r3, #8
 8004136:	d11a      	bne.n	800416e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004144:	461a      	mov	r2, r3
 8004146:	2308      	movs	r3, #8
 8004148:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334d      	adds	r3, #77	@ 0x4d
 800415a:	2206      	movs	r2, #6
 800415c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f003 fbdd 	bl	8007926 <USB_HC_Halt>
 800416c:	e2f8      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f002 fe31 	bl	8006dde <USB_ReadChInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d144      	bne.n	8004210 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3344      	adds	r3, #68	@ 0x44
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	334d      	adds	r3, #77	@ 0x4d
 80041aa:	2204      	movs	r2, #4
 80041ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3319      	adds	r3, #25
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d114      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3318      	adds	r3, #24
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	3319      	adds	r3, #25
 80041ea:	2201      	movs	r2, #1
 80041ec:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fb95 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	2310      	movs	r3, #16
 800420c:	6093      	str	r3, [r2, #8]
 800420e:	e2a7      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f002 fde0 	bl	8006dde <USB_ReadChInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004224:	2b80      	cmp	r3, #128	@ 0x80
 8004226:	f040 8083 	bne.w	8004330 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	799b      	ldrb	r3, [r3, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d111      	bne.n	8004256 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	334d      	adds	r3, #77	@ 0x4d
 8004242:	2207      	movs	r2, #7
 8004244:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f003 fb69 	bl	8007926 <USB_HC_Halt>
 8004254:	e062      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	4613      	mov	r3, r2
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	1a9b      	subs	r3, r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	3344      	adds	r3, #68	@ 0x44
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	1a9b      	subs	r3, r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4403      	add	r3, r0
 8004276:	3344      	adds	r3, #68	@ 0x44
 8004278:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	3344      	adds	r3, #68	@ 0x44
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d922      	bls.n	80042d6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3344      	adds	r3, #68	@ 0x44
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042a4:	78fa      	ldrb	r2, [r7, #3]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	334c      	adds	r3, #76	@ 0x4c
 80042b4:	2204      	movs	r2, #4
 80042b6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334c      	adds	r3, #76	@ 0x4c
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f005 fe82 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042d4:	e022      	b.n	800431c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	334c      	adds	r3, #76	@ 0x4c
 80042e6:	2202      	movs	r2, #2
 80042e8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004300:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004308:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004328:	461a      	mov	r2, r3
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	6093      	str	r3, [r2, #8]
 800432e:	e217      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	4611      	mov	r1, r2
 8004338:	4618      	mov	r0, r3
 800433a:	f002 fd50 	bl	8006dde <USB_ReadChInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004348:	d11b      	bne.n	8004382 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334d      	adds	r3, #77	@ 0x4d
 800435a:	2209      	movs	r2, #9
 800435c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f003 fadd 	bl	8007926 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	e1ee      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	4611      	mov	r1, r2
 800438a:	4618      	mov	r0, r3
 800438c:	f002 fd27 	bl	8006dde <USB_ReadChInterrupts>
 8004390:	4603      	mov	r3, r0
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	f040 81df 	bne.w	800475a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a8:	461a      	mov	r2, r3
 80043aa:	2302      	movs	r3, #2
 80043ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	334d      	adds	r3, #77	@ 0x4d
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 8093 	bne.w	80044ec <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	334d      	adds	r3, #77	@ 0x4d
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	4613      	mov	r3, r2
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	334c      	adds	r3, #76	@ 0x4c
 80043ea:	2201      	movs	r2, #1
 80043ec:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3326      	adds	r3, #38	@ 0x26
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d00b      	beq.n	800441c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3326      	adds	r3, #38	@ 0x26
 8004414:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004416:	2b03      	cmp	r3, #3
 8004418:	f040 8190 	bne.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	799b      	ldrb	r3, [r3, #6]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d115      	bne.n	8004450 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	333d      	adds	r3, #61	@ 0x3d
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	f083 0301 	eor.w	r3, r3, #1
 800443c:	b2d8      	uxtb	r0, r3
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	333d      	adds	r3, #61	@ 0x3d
 800444c:	4602      	mov	r2, r0
 800444e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	799b      	ldrb	r3, [r3, #6]
 8004454:	2b01      	cmp	r3, #1
 8004456:	f040 8171 	bne.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3334      	adds	r3, #52	@ 0x34
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8165 	beq.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	3334      	adds	r3, #52	@ 0x34
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4403      	add	r3, r0
 8004492:	3328      	adds	r3, #40	@ 0x28
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	440b      	add	r3, r1
 8004498:	1e59      	subs	r1, r3, #1
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4403      	add	r3, r0
 80044a8:	3328      	adds	r3, #40	@ 0x28
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80044b0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 813f 	beq.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	333d      	adds	r3, #61	@ 0x3d
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2d8      	uxtb	r0, r3
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	333d      	adds	r3, #61	@ 0x3d
 80044e6:	4602      	mov	r2, r0
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e127      	b.n	800473c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334d      	adds	r3, #77	@ 0x4d
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d120      	bne.n	8004544 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	1a9b      	subs	r3, r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	334d      	adds	r3, #77	@ 0x4d
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	331b      	adds	r3, #27
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 8107 	bne.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	334c      	adds	r3, #76	@ 0x4c
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e0fb      	b.n	800473c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334d      	adds	r3, #77	@ 0x4d
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d13a      	bne.n	80045d0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	334d      	adds	r3, #77	@ 0x4d
 800456a:	2202      	movs	r2, #2
 800456c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	334c      	adds	r3, #76	@ 0x4c
 800457e:	2202      	movs	r2, #2
 8004580:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	331b      	adds	r3, #27
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	f040 80d1 	bne.w	800473c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800459a:	78fa      	ldrb	r2, [r7, #3]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	331b      	adds	r3, #27
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045ae:	78fb      	ldrb	r3, [r7, #3]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045cc:	6053      	str	r3, [r2, #4]
 80045ce:	e0b5      	b.n	800473c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	@ 0x4d
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b05      	cmp	r3, #5
 80045e4:	d114      	bne.n	8004610 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	334d      	adds	r3, #77	@ 0x4d
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	334c      	adds	r3, #76	@ 0x4c
 800460a:	2202      	movs	r2, #2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	e095      	b.n	800473c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334d      	adds	r3, #77	@ 0x4d
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b06      	cmp	r3, #6
 8004624:	d114      	bne.n	8004650 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	334d      	adds	r3, #77	@ 0x4d
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334c      	adds	r3, #76	@ 0x4c
 800464a:	2205      	movs	r2, #5
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e075      	b.n	800473c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334d      	adds	r3, #77	@ 0x4d
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b07      	cmp	r3, #7
 8004664:	d00a      	beq.n	800467c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004666:	78fa      	ldrb	r2, [r7, #3]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	334d      	adds	r3, #77	@ 0x4d
 8004676:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004678:	2b09      	cmp	r3, #9
 800467a:	d170      	bne.n	800475e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	334d      	adds	r3, #77	@ 0x4d
 800468c:	2202      	movs	r2, #2
 800468e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3344      	adds	r3, #68	@ 0x44
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	1c59      	adds	r1, r3, #1
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4403      	add	r3, r0
 80046b0:	3344      	adds	r3, #68	@ 0x44
 80046b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	3344      	adds	r3, #68	@ 0x44
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d914      	bls.n	80046f4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	3344      	adds	r3, #68	@ 0x44
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334c      	adds	r3, #76	@ 0x4c
 80046ee:	2204      	movs	r2, #4
 80046f0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f2:	e022      	b.n	800473a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334c      	adds	r3, #76	@ 0x4c
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800471e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004726:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004734:	461a      	mov	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800473a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	334c      	adds	r3, #76	@ 0x4c
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f005 fc40 	bl	8009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004758:	e002      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800475e:	bf00      	nop
  }
}
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08a      	sub	sp, #40	@ 0x28
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	0c5b      	lsrs	r3, r3, #17
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d004      	beq.n	80047ac <HCD_RXQLVL_IRQHandler+0x46>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	f000 80b6 	beq.w	8004916 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047aa:	e0b7      	b.n	800491c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80b3 	beq.w	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	332c      	adds	r3, #44	@ 0x2c
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 80a7 	beq.w	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3338      	adds	r3, #56	@ 0x38
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	18d1      	adds	r1, r2, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4403      	add	r3, r0
 80047f0:	3334      	adds	r3, #52	@ 0x34
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4299      	cmp	r1, r3
 80047f6:	f200 8083 	bhi.w	8004900 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	332c      	adds	r3, #44	@ 0x2c
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	b292      	uxth	r2, r2
 8004814:	4619      	mov	r1, r3
 8004816:	f002 fa77 	bl	8006d08 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	332c      	adds	r3, #44	@ 0x2c
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	18d1      	adds	r1, r2, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4403      	add	r3, r0
 800483e:	332c      	adds	r3, #44	@ 0x2c
 8004840:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	3338      	adds	r3, #56	@ 0x38
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	18d1      	adds	r1, r2, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4403      	add	r3, r0
 8004866:	3338      	adds	r3, #56	@ 0x38
 8004868:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	4413      	add	r3, r2
 8004872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	0cdb      	lsrs	r3, r3, #19
 800487a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800487e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3328      	adds	r3, #40	@ 0x28
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4293      	cmp	r3, r2
 8004898:	d13f      	bne.n	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d03c      	beq.n	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048be:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048cc:	461a      	mov	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	333c      	adds	r3, #60	@ 0x3c
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2d8      	uxtb	r0, r3
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	333c      	adds	r3, #60	@ 0x3c
 80048fa:	4602      	mov	r2, r0
 80048fc:	701a      	strb	r2, [r3, #0]
      break;
 80048fe:	e00c      	b.n	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	334c      	adds	r3, #76	@ 0x4c
 8004910:	2204      	movs	r2, #4
 8004912:	701a      	strb	r2, [r3, #0]
      break;
 8004914:	e001      	b.n	800491a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004916:	bf00      	nop
 8004918:	e000      	b.n	800491c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800491a:	bf00      	nop
  }
}
 800491c:	bf00      	nop
 800491e:	3728      	adds	r7, #40	@ 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004950:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b02      	cmp	r3, #2
 800495a:	d10b      	bne.n	8004974 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f005 fb1a 	bl	8009fa0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f043 0302 	orr.w	r3, r3, #2
 8004972:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d132      	bne.n	80049e4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f043 0308 	orr.w	r3, r3, #8
 8004984:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d126      	bne.n	80049de <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	7a5b      	ldrb	r3, [r3, #9]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d113      	bne.n	80049c0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800499e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049a2:	d106      	bne.n	80049b2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2102      	movs	r1, #2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 fb3c 	bl	8007028 <USB_InitFSLSPClkSel>
 80049b0:	e011      	b.n	80049d6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	4618      	mov	r0, r3
 80049ba:	f002 fb35 	bl	8007028 <USB_InitFSLSPClkSel>
 80049be:	e00a      	b.n	80049d6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	79db      	ldrb	r3, [r3, #7]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049ce:	461a      	mov	r2, r3
 80049d0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80049d4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f005 fb0c 	bl	8009ff4 <HAL_HCD_PortEnabled_Callback>
 80049dc:	e002      	b.n	80049e4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f005 fb16 	bl	800a010 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d103      	bne.n	80049f6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f043 0320 	orr.w	r3, r3, #32
 80049f4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	6013      	str	r3, [r2, #0]
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e12b      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fe24 	bl	8001680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	@ 0x24
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a70:	f001 fe84 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a81      	ldr	r2, [pc, #516]	@ (8004c80 <HAL_I2C_Init+0x274>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d807      	bhi.n	8004a90 <HAL_I2C_Init+0x84>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a80      	ldr	r2, [pc, #512]	@ (8004c84 <HAL_I2C_Init+0x278>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	bf94      	ite	ls
 8004a88:	2301      	movls	r3, #1
 8004a8a:	2300      	movhi	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e006      	b.n	8004a9e <HAL_I2C_Init+0x92>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a7d      	ldr	r2, [pc, #500]	@ (8004c88 <HAL_I2C_Init+0x27c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0e7      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a78      	ldr	r2, [pc, #480]	@ (8004c8c <HAL_I2C_Init+0x280>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	@ (8004c80 <HAL_I2C_Init+0x274>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <HAL_I2C_Init+0xd4>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	e009      	b.n	8004af4 <HAL_I2C_Init+0xe8>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a69      	ldr	r2, [pc, #420]	@ (8004c90 <HAL_I2C_Init+0x284>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	3301      	adds	r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	495c      	ldr	r1, [pc, #368]	@ (8004c80 <HAL_I2C_Init+0x274>)
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d819      	bhi.n	8004b48 <HAL_I2C_Init+0x13c>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e59      	subs	r1, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b28:	400b      	ands	r3, r1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_I2C_Init+0x138>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1e59      	subs	r1, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b42:	e051      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b44:	2304      	movs	r3, #4
 8004b46:	e04f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d111      	bne.n	8004b74 <HAL_I2C_Init+0x168>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	440b      	add	r3, r1
 8004b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e012      	b.n	8004b9a <HAL_I2C_Init+0x18e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	0099      	lsls	r1, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Init+0x196>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_I2C_Init+0x1bc>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1e58      	subs	r0, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	440b      	add	r3, r1
 8004bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc6:	e00f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	0099      	lsls	r1, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	6809      	ldr	r1, [r1, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6911      	ldr	r1, [r2, #16]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	000186a0 	.word	0x000186a0
 8004c84:	001e847f 	.word	0x001e847f
 8004c88:	003d08ff 	.word	0x003d08ff
 8004c8c:	431bde83 	.word	0x431bde83
 8004c90:	10624dd3 	.word	0x10624dd3

08004c94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	4608      	mov	r0, r1
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	817b      	strh	r3, [r7, #10]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	813b      	strh	r3, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cae:	f7fc ff11 	bl	8001ad4 <HAL_GetTick>
 8004cb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	f040 80d9 	bne.w	8004e74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2319      	movs	r3, #25
 8004cc8:	2201      	movs	r2, #1
 8004cca:	496d      	ldr	r1, [pc, #436]	@ (8004e80 <HAL_I2C_Mem_Write+0x1ec>)
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 f971 	bl	8004fb4 <I2C_WaitOnFlagUntilTimeout>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e0cc      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_I2C_Mem_Write+0x56>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e0c5      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d007      	beq.n	8004d10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2221      	movs	r2, #33	@ 0x21
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2240      	movs	r2, #64	@ 0x40
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a3a      	ldr	r2, [r7, #32]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8004e84 <HAL_I2C_Mem_Write+0x1f0>)
 8004d50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d52:	88f8      	ldrh	r0, [r7, #6]
 8004d54:	893a      	ldrh	r2, [r7, #8]
 8004d56:	8979      	ldrh	r1, [r7, #10]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	9301      	str	r3, [sp, #4]
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	4603      	mov	r3, r0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f890 	bl	8004e88 <I2C_RequestMemoryWrite>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d052      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e081      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 fa36 	bl	80051e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d107      	bne.n	8004d9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e06b      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d11b      	bne.n	8004e14 <HAL_I2C_Mem_Write+0x180>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	781a      	ldrb	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1aa      	bne.n	8004d72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fa29 	bl	8005278 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00d      	beq.n	8004e48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d107      	bne.n	8004e44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e016      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	e000      	b.n	8004e76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e74:	2302      	movs	r3, #2
  }
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	00100002 	.word	0x00100002
 8004e84:	ffff0000 	.word	0xffff0000

08004e88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f878 	bl	8004fb4 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00d      	beq.n	8004ee6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d103      	bne.n	8004ee2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ee0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e05f      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ef4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef8:	6a3a      	ldr	r2, [r7, #32]
 8004efa:	492d      	ldr	r1, [pc, #180]	@ (8004fb0 <I2C_RequestMemoryWrite+0x128>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f8d3 	bl	80050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e04c      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f24:	6a39      	ldr	r1, [r7, #32]
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f000 f95e 	bl	80051e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d107      	bne.n	8004f4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e02b      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d105      	bne.n	8004f60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f54:	893b      	ldrh	r3, [r7, #8]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	611a      	str	r2, [r3, #16]
 8004f5e:	e021      	b.n	8004fa4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f60:	893b      	ldrh	r3, [r7, #8]
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f70:	6a39      	ldr	r1, [r7, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f938 	bl	80051e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00d      	beq.n	8004f9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d107      	bne.n	8004f96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e005      	b.n	8004fa6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9a:	893b      	ldrh	r3, [r7, #8]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	00010002 	.word	0x00010002

08004fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc4:	e048      	b.n	8005058 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fcc:	d044      	beq.n	8005058 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc fd81 	bl	8001ad4 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d139      	bne.n	8005058 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d10d      	bne.n	800500a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	43da      	mvns	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	e00c      	b.n	8005024 <I2C_WaitOnFlagUntilTimeout+0x70>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	43da      	mvns	r2, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	4013      	ands	r3, r2
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	461a      	mov	r2, r3
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	429a      	cmp	r2, r3
 8005028:	d116      	bne.n	8005058 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e023      	b.n	80050a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d10d      	bne.n	800507e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	43da      	mvns	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	e00c      	b.n	8005098 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	43da      	mvns	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	429a      	cmp	r2, r3
 800509c:	d093      	beq.n	8004fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b6:	e071      	b.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c6:	d123      	bne.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f043 0204 	orr.w	r2, r3, #4
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e067      	b.n	80051e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005116:	d041      	beq.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005118:	f7fc fcdc 	bl	8001ad4 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d136      	bne.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10c      	bne.n	8005152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	43da      	mvns	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e00b      	b.n	800516a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	43da      	mvns	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	4013      	ands	r3, r2
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e021      	b.n	80051e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10c      	bne.n	80051c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	43da      	mvns	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4013      	ands	r3, r2
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e00b      	b.n	80051d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	43da      	mvns	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4013      	ands	r3, r2
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f af6d 	bne.w	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051f4:	e034      	b.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f886 	bl	8005308 <I2C_IsAcknowledgeFailed>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e034      	b.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800520c:	d028      	beq.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	f7fc fc61 	bl	8001ad4 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d11d      	bne.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522e:	2b80      	cmp	r3, #128	@ 0x80
 8005230:	d016      	beq.n	8005260 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0220 	orr.w	r2, r3, #32
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e007      	b.n	8005270 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d1c3      	bne.n	80051f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005284:	e034      	b.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f83e 	bl	8005308 <I2C_IsAcknowledgeFailed>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e034      	b.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529c:	d028      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529e:	f7fc fc19 	bl	8001ad4 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d11d      	bne.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d016      	beq.n	80052f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e007      	b.n	8005300 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b04      	cmp	r3, #4
 80052fc:	d1c3      	bne.n	8005286 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531e:	d11b      	bne.n	8005358 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005328:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	f043 0204 	orr.w	r2, r3, #4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e128      	b.n	80055cc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a90      	ldr	r2, [pc, #576]	@ (80055d4 <HAL_I2S_Init+0x26c>)
 8005392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fc f9bb 	bl	8001710 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6812      	ldr	r2, [r2, #0]
 80053ac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80053b0:	f023 030f 	bic.w	r3, r3, #15
 80053b4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2202      	movs	r2, #2
 80053bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d060      	beq.n	8005488 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80053ce:	2310      	movs	r3, #16
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e001      	b.n	80053d8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80053d4:	2320      	movs	r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d802      	bhi.n	80053e6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80053e6:	2001      	movs	r0, #1
 80053e8:	f001 fabe 	bl	8006968 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ec:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	d125      	bne.n	8005444 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d010      	beq.n	8005422 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	fbb2 f2f3 	udiv	r2, r2, r3
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	3305      	adds	r3, #5
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e01f      	b.n	8005462 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	fbb2 f2f3 	udiv	r2, r2, r3
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	3305      	adds	r3, #5
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e00e      	b.n	8005462 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	fbb2 f2f3 	udiv	r2, r2, r3
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	461a      	mov	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	fbb2 f3f3 	udiv	r3, r2, r3
 800545e:	3305      	adds	r3, #5
 8005460:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	4a5c      	ldr	r2, [pc, #368]	@ (80055d8 <HAL_I2S_Init+0x270>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	021b      	lsls	r3, r3, #8
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e003      	b.n	8005490 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005488:	2302      	movs	r3, #2
 800548a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d902      	bls.n	800549c <HAL_I2S_Init+0x134>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2bff      	cmp	r3, #255	@ 0xff
 800549a:	d907      	bls.n	80054ac <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e08f      	b.n	80055cc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	ea42 0103 	orr.w	r1, r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	430a      	orrs	r2, r1
 80054be:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054ca:	f023 030f 	bic.w	r3, r3, #15
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6851      	ldr	r1, [r2, #4]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6892      	ldr	r2, [r2, #8]
 80054d6:	4311      	orrs	r1, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68d2      	ldr	r2, [r2, #12]
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6992      	ldr	r2, [r2, #24]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d161      	bne.n	80055bc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a38      	ldr	r2, [pc, #224]	@ (80055dc <HAL_I2S_Init+0x274>)
 80054fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a37      	ldr	r2, [pc, #220]	@ (80055e0 <HAL_I2S_Init+0x278>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d101      	bne.n	800550c <HAL_I2S_Init+0x1a4>
 8005508:	4b36      	ldr	r3, [pc, #216]	@ (80055e4 <HAL_I2S_Init+0x27c>)
 800550a:	e001      	b.n	8005510 <HAL_I2S_Init+0x1a8>
 800550c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	4932      	ldr	r1, [pc, #200]	@ (80055e0 <HAL_I2S_Init+0x278>)
 8005518:	428a      	cmp	r2, r1
 800551a:	d101      	bne.n	8005520 <HAL_I2S_Init+0x1b8>
 800551c:	4a31      	ldr	r2, [pc, #196]	@ (80055e4 <HAL_I2S_Init+0x27c>)
 800551e:	e001      	b.n	8005524 <HAL_I2S_Init+0x1bc>
 8005520:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005524:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005528:	f023 030f 	bic.w	r3, r3, #15
 800552c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2b      	ldr	r2, [pc, #172]	@ (80055e0 <HAL_I2S_Init+0x278>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_I2S_Init+0x1d4>
 8005538:	4b2a      	ldr	r3, [pc, #168]	@ (80055e4 <HAL_I2S_Init+0x27c>)
 800553a:	e001      	b.n	8005540 <HAL_I2S_Init+0x1d8>
 800553c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005540:	2202      	movs	r2, #2
 8005542:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	@ (80055e0 <HAL_I2S_Init+0x278>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d101      	bne.n	8005552 <HAL_I2S_Init+0x1ea>
 800554e:	4b25      	ldr	r3, [pc, #148]	@ (80055e4 <HAL_I2S_Init+0x27c>)
 8005550:	e001      	b.n	8005556 <HAL_I2S_Init+0x1ee>
 8005552:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005562:	d003      	beq.n	800556c <HAL_I2S_Init+0x204>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800556c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e001      	b.n	8005578 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005582:	4313      	orrs	r3, r2
 8005584:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800558c:	4313      	orrs	r3, r2
 800558e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005596:	4313      	orrs	r3, r2
 8005598:	b29a      	uxth	r2, r3
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	4313      	orrs	r3, r2
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80055a4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a0d      	ldr	r2, [pc, #52]	@ (80055e0 <HAL_I2S_Init+0x278>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_I2S_Init+0x24c>
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <HAL_I2S_Init+0x27c>)
 80055b2:	e001      	b.n	80055b8 <HAL_I2S_Init+0x250>
 80055b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055b8:	897a      	ldrh	r2, [r7, #10]
 80055ba:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	080058d5 	.word	0x080058d5
 80055d8:	cccccccd 	.word	0xcccccccd
 80055dc:	080059e9 	.word	0x080059e9
 80055e0:	40003800 	.word	0x40003800
 80055e4:	40003400 	.word	0x40003400

080055e8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_I2S_Transmit_DMA+0x1a>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e08a      	b.n	800571c <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	e082      	b.n	800571c <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_I2S_Transmit_DMA+0x3e>
 8005622:	2302      	movs	r3, #2
 8005624:	e07a      	b.n	800571c <HAL_I2S_Transmit_DMA+0x134>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2203      	movs	r2, #3
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b03      	cmp	r3, #3
 8005652:	d002      	beq.n	800565a <HAL_I2S_Transmit_DMA+0x72>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d10a      	bne.n	8005670 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800566e:	e005      	b.n	800567c <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	4a28      	ldr	r2, [pc, #160]	@ (8005724 <HAL_I2S_Transmit_DMA+0x13c>)
 8005682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	4a27      	ldr	r2, [pc, #156]	@ (8005728 <HAL_I2S_Transmit_DMA+0x140>)
 800568a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	4a26      	ldr	r2, [pc, #152]	@ (800572c <HAL_I2S_Transmit_DMA+0x144>)
 8005692:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800569c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80056a4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80056ac:	f7fc fc02 	bl	8001eb4 <HAL_DMA_Start_IT>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00f      	beq.n	80056d6 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ba:	f043 0208 	orr.w	r2, r3, #8
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e022      	b.n	800571c <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d107      	bne.n	80056fc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0202 	orr.w	r2, r2, #2
 80056fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005718:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	080057b3 	.word	0x080057b3
 8005728:	08005771 	.word	0x08005771
 800572c:	080057cf 	.word	0x080057cf

08005730 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10e      	bne.n	80057a4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0202 	bic.w	r2, r2, #2
 8005794:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7fb fc87 	bl	80010b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fb fc89 	bl	80010d8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0203 	bic.w	r2, r2, #3
 80057ea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005804:	f043 0208 	orr.w	r2, r3, #8
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff ffa5 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10e      	bne.n	800586e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800585e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fb fc25 	bl	80010b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005888:	b292      	uxth	r2, r2
 800588a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10e      	bne.n	80058cc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff ff3e 	bl	8005748 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d13a      	bne.n	8005966 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d109      	bne.n	800590e <I2S_IRQHandler+0x3a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005904:	2b40      	cmp	r3, #64	@ 0x40
 8005906:	d102      	bne.n	800590e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ffb4 	bl	8005876 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	d126      	bne.n	8005966 <I2S_IRQHandler+0x92>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b20      	cmp	r3, #32
 8005924:	d11f      	bne.n	8005966 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005934:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005958:	f043 0202 	orr.w	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7ff fefb 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b03      	cmp	r3, #3
 8005970:	d136      	bne.n	80059e0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d109      	bne.n	8005990 <I2S_IRQHandler+0xbc>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005986:	2b80      	cmp	r3, #128	@ 0x80
 8005988:	d102      	bne.n	8005990 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ff45 	bl	800581a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b08      	cmp	r3, #8
 8005998:	d122      	bne.n	80059e0 <I2S_IRQHandler+0x10c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 0320 	and.w	r3, r3, #32
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d11b      	bne.n	80059e0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059b6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff febe 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059e0:	bf00      	nop
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a92      	ldr	r2, [pc, #584]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d101      	bne.n	8005a06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a02:	4b92      	ldr	r3, [pc, #584]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a04:	e001      	b.n	8005a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a8b      	ldr	r2, [pc, #556]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d101      	bne.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a20:	4b8a      	ldr	r3, [pc, #552]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a22:	e001      	b.n	8005a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a34:	d004      	beq.n	8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 8099 	bne.w	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d107      	bne.n	8005a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f925 	bl	8005ca4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d107      	bne.n	8005a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9c8 	bl	8005e04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d13a      	bne.n	8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d035      	beq.n	8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a6e      	ldr	r2, [pc, #440]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d101      	bne.n	8005a96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a92:	4b6e      	ldr	r3, [pc, #440]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a94:	e001      	b.n	8005a9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4969      	ldr	r1, [pc, #420]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aa2:	428b      	cmp	r3, r1
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005aa6:	4b69      	ldr	r3, [pc, #420]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aa8:	e001      	b.n	8005aae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005aaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ab2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ac2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	f043 0202 	orr.w	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fe34 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	f040 80c3 	bne.w	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80bd 	beq.w	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a49      	ldr	r2, [pc, #292]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b26:	4b49      	ldr	r3, [pc, #292]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b28:	e001      	b.n	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4944      	ldr	r1, [pc, #272]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b36:	428b      	cmp	r3, r1
 8005b38:	d101      	bne.n	8005b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b3a:	4b44      	ldr	r3, [pc, #272]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b3c:	e001      	b.n	8005b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	f043 0204 	orr.w	r2, r3, #4
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fdf6 	bl	800575c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b70:	e089      	b.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d107      	bne.n	8005b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8be 	bl	8005d08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f8fd 	bl	8005da0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b40      	cmp	r3, #64	@ 0x40
 8005bae:	d12f      	bne.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d02a      	beq.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1e      	ldr	r2, [pc, #120]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bd6:	e001      	b.n	8005bdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005bd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4919      	ldr	r1, [pc, #100]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d101      	bne.n	8005bec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005be8:	4b18      	ldr	r3, [pc, #96]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bea:	e001      	b.n	8005bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005bec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bf4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f043 0202 	orr.w	r2, r3, #2
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fda6 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d136      	bne.n	8005c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d031      	beq.n	8005c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a07      	ldr	r2, [pc, #28]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d101      	bne.n	8005c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c2e:	4b07      	ldr	r3, [pc, #28]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c30:	e001      	b.n	8005c36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4902      	ldr	r1, [pc, #8]	@ (8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c3e:	428b      	cmp	r3, r1
 8005c40:	d106      	bne.n	8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c42:	4b02      	ldr	r3, [pc, #8]	@ (8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c44:	e006      	b.n	8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c46:	bf00      	nop
 8005c48:	40003800 	.word	0x40003800
 8005c4c:	40003400 	.word	0x40003400
 8005c50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c58:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	f043 0204 	orr.w	r2, r3, #4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fd6c 	bl	800575c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c84:	e000      	b.n	8005c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c86:	bf00      	nop
}
 8005c88:	bf00      	nop
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	1c99      	adds	r1, r3, #2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d113      	bne.n	8005cfe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffc9 	bl	8005c90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d14:	1c99      	adds	r1, r3, #2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6251      	str	r1, [r2, #36]	@ 0x24
 8005d1a:	8819      	ldrh	r1, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	@ (8005d98 <I2SEx_TxISR_I2SExt+0x90>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d101      	bne.n	8005d2a <I2SEx_TxISR_I2SExt+0x22>
 8005d26:	4b1d      	ldr	r3, [pc, #116]	@ (8005d9c <I2SEx_TxISR_I2SExt+0x94>)
 8005d28:	e001      	b.n	8005d2e <I2SEx_TxISR_I2SExt+0x26>
 8005d2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d2e:	460a      	mov	r2, r1
 8005d30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d121      	bne.n	8005d8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a12      	ldr	r2, [pc, #72]	@ (8005d98 <I2SEx_TxISR_I2SExt+0x90>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d101      	bne.n	8005d58 <I2SEx_TxISR_I2SExt+0x50>
 8005d54:	4b11      	ldr	r3, [pc, #68]	@ (8005d9c <I2SEx_TxISR_I2SExt+0x94>)
 8005d56:	e001      	b.n	8005d5c <I2SEx_TxISR_I2SExt+0x54>
 8005d58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	490d      	ldr	r1, [pc, #52]	@ (8005d98 <I2SEx_TxISR_I2SExt+0x90>)
 8005d64:	428b      	cmp	r3, r1
 8005d66:	d101      	bne.n	8005d6c <I2SEx_TxISR_I2SExt+0x64>
 8005d68:	4b0c      	ldr	r3, [pc, #48]	@ (8005d9c <I2SEx_TxISR_I2SExt+0x94>)
 8005d6a:	e001      	b.n	8005d70 <I2SEx_TxISR_I2SExt+0x68>
 8005d6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d106      	bne.n	8005d8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff81 	bl	8005c90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40003800 	.word	0x40003800
 8005d9c:	40003400 	.word	0x40003400

08005da0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68d8      	ldr	r0, [r3, #12]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	1c99      	adds	r1, r3, #2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005db8:	b282      	uxth	r2, r0
 8005dba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d113      	bne.n	8005dfc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005de2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff ff4a 	bl	8005c90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a20      	ldr	r2, [pc, #128]	@ (8005e94 <I2SEx_RxISR_I2SExt+0x90>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <I2SEx_RxISR_I2SExt+0x16>
 8005e16:	4b20      	ldr	r3, [pc, #128]	@ (8005e98 <I2SEx_RxISR_I2SExt+0x94>)
 8005e18:	e001      	b.n	8005e1e <I2SEx_RxISR_I2SExt+0x1a>
 8005e1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e1e:	68d8      	ldr	r0, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e24:	1c99      	adds	r1, r3, #2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005e2a:	b282      	uxth	r2, r0
 8005e2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d121      	bne.n	8005e8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a12      	ldr	r2, [pc, #72]	@ (8005e94 <I2SEx_RxISR_I2SExt+0x90>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d101      	bne.n	8005e54 <I2SEx_RxISR_I2SExt+0x50>
 8005e50:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <I2SEx_RxISR_I2SExt+0x94>)
 8005e52:	e001      	b.n	8005e58 <I2SEx_RxISR_I2SExt+0x54>
 8005e54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	490d      	ldr	r1, [pc, #52]	@ (8005e94 <I2SEx_RxISR_I2SExt+0x90>)
 8005e60:	428b      	cmp	r3, r1
 8005e62:	d101      	bne.n	8005e68 <I2SEx_RxISR_I2SExt+0x64>
 8005e64:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <I2SEx_RxISR_I2SExt+0x94>)
 8005e66:	e001      	b.n	8005e6c <I2SEx_RxISR_I2SExt+0x68>
 8005e68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d106      	bne.n	8005e8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ff03 	bl	8005c90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40003800 	.word	0x40003800
 8005e98:	40003400 	.word	0x40003400

08005e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e267      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d075      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005eba:	4b88      	ldr	r3, [pc, #544]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec6:	4b85      	ldr	r3, [pc, #532]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d112      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed2:	4b82      	ldr	r3, [pc, #520]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ede:	d10b      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05b      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x108>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d157      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e242      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	d106      	bne.n	8005f10 <HAL_RCC_OscConfig+0x74>
 8005f02:	4b76      	ldr	r3, [pc, #472]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a75      	ldr	r2, [pc, #468]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e01d      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x98>
 8005f1a:	4b70      	ldr	r3, [pc, #448]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a6f      	ldr	r2, [pc, #444]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b6d      	ldr	r3, [pc, #436]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a6c      	ldr	r2, [pc, #432]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f34:	4b69      	ldr	r3, [pc, #420]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a68      	ldr	r2, [pc, #416]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b66      	ldr	r3, [pc, #408]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a65      	ldr	r2, [pc, #404]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f54:	f7fb fdbe 	bl	8001ad4 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fb fdba 	bl	8001ad4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e207      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0xc0>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fb fdaa 	bl	8001ad4 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fb fda6 	bl	8001ad4 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	@ 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e1f3      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f96:	4b51      	ldr	r3, [pc, #324]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0xe8>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d063      	beq.n	800607a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fb2:	4b4a      	ldr	r3, [pc, #296]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fbe:	4b47      	ldr	r3, [pc, #284]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d11c      	bne.n	8006004 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fca:	4b44      	ldr	r3, [pc, #272]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d116      	bne.n	8006004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd6:	4b41      	ldr	r3, [pc, #260]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_RCC_OscConfig+0x152>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e1c7      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fee:	4b3b      	ldr	r3, [pc, #236]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4937      	ldr	r1, [pc, #220]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006002:	e03a      	b.n	800607a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d020      	beq.n	800604e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800600c:	4b34      	ldr	r3, [pc, #208]	@ (80060e0 <HAL_RCC_OscConfig+0x244>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fb fd5f 	bl	8001ad4 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800601a:	f7fb fd5b 	bl	8001ad4 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e1a8      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602c:	4b2b      	ldr	r3, [pc, #172]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006038:	4b28      	ldr	r3, [pc, #160]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4925      	ldr	r1, [pc, #148]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8006048:	4313      	orrs	r3, r2
 800604a:	600b      	str	r3, [r1, #0]
 800604c:	e015      	b.n	800607a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800604e:	4b24      	ldr	r3, [pc, #144]	@ (80060e0 <HAL_RCC_OscConfig+0x244>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fb fd3e 	bl	8001ad4 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605c:	f7fb fd3a 	bl	8001ad4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e187      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606e:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d036      	beq.n	80060f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800608e:	4b15      	ldr	r3, [pc, #84]	@ (80060e4 <HAL_RCC_OscConfig+0x248>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fb fd1e 	bl	8001ad4 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800609c:	f7fb fd1a 	bl	8001ad4 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e167      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ae:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <HAL_RCC_OscConfig+0x240>)
 80060b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0x200>
 80060ba:	e01b      	b.n	80060f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060bc:	4b09      	ldr	r3, [pc, #36]	@ (80060e4 <HAL_RCC_OscConfig+0x248>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c2:	f7fb fd07 	bl	8001ad4 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c8:	e00e      	b.n	80060e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060ca:	f7fb fd03 	bl	8001ad4 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d907      	bls.n	80060e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e150      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
 80060dc:	40023800 	.word	0x40023800
 80060e0:	42470000 	.word	0x42470000
 80060e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e8:	4b88      	ldr	r3, [pc, #544]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1ea      	bne.n	80060ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8097 	beq.w	8006230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006106:	4b81      	ldr	r3, [pc, #516]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10f      	bne.n	8006132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	4b7d      	ldr	r3, [pc, #500]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	4a7c      	ldr	r2, [pc, #496]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006120:	6413      	str	r3, [r2, #64]	@ 0x40
 8006122:	4b7a      	ldr	r3, [pc, #488]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006132:	4b77      	ldr	r3, [pc, #476]	@ (8006310 <HAL_RCC_OscConfig+0x474>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613a:	2b00      	cmp	r3, #0
 800613c:	d118      	bne.n	8006170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800613e:	4b74      	ldr	r3, [pc, #464]	@ (8006310 <HAL_RCC_OscConfig+0x474>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a73      	ldr	r2, [pc, #460]	@ (8006310 <HAL_RCC_OscConfig+0x474>)
 8006144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614a:	f7fb fcc3 	bl	8001ad4 <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006152:	f7fb fcbf 	bl	8001ad4 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e10c      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006164:	4b6a      	ldr	r3, [pc, #424]	@ (8006310 <HAL_RCC_OscConfig+0x474>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d106      	bne.n	8006186 <HAL_RCC_OscConfig+0x2ea>
 8006178:	4b64      	ldr	r3, [pc, #400]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617c:	4a63      	ldr	r2, [pc, #396]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6713      	str	r3, [r2, #112]	@ 0x70
 8006184:	e01c      	b.n	80061c0 <HAL_RCC_OscConfig+0x324>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b05      	cmp	r3, #5
 800618c:	d10c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x30c>
 800618e:	4b5f      	ldr	r3, [pc, #380]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006192:	4a5e      	ldr	r2, [pc, #376]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006194:	f043 0304 	orr.w	r3, r3, #4
 8006198:	6713      	str	r3, [r2, #112]	@ 0x70
 800619a:	4b5c      	ldr	r3, [pc, #368]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619e:	4a5b      	ldr	r2, [pc, #364]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80061a6:	e00b      	b.n	80061c0 <HAL_RCC_OscConfig+0x324>
 80061a8:	4b58      	ldr	r3, [pc, #352]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ac:	4a57      	ldr	r2, [pc, #348]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061ae:	f023 0301 	bic.w	r3, r3, #1
 80061b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80061b4:	4b55      	ldr	r3, [pc, #340]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b8:	4a54      	ldr	r2, [pc, #336]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061ba:	f023 0304 	bic.w	r3, r3, #4
 80061be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d015      	beq.n	80061f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fb fc84 	bl	8001ad4 <HAL_GetTick>
 80061cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ce:	e00a      	b.n	80061e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d0:	f7fb fc80 	bl	8001ad4 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e0cb      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061e6:	4b49      	ldr	r3, [pc, #292]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0ee      	beq.n	80061d0 <HAL_RCC_OscConfig+0x334>
 80061f2:	e014      	b.n	800621e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061f4:	f7fb fc6e 	bl	8001ad4 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fc:	f7fb fc6a 	bl	8001ad4 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e0b5      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006212:	4b3e      	ldr	r3, [pc, #248]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ee      	bne.n	80061fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d105      	bne.n	8006230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006224:	4b39      	ldr	r3, [pc, #228]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	4a38      	ldr	r2, [pc, #224]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800622a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800622e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80a1 	beq.w	800637c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800623a:	4b34      	ldr	r3, [pc, #208]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 030c 	and.w	r3, r3, #12
 8006242:	2b08      	cmp	r3, #8
 8006244:	d05c      	beq.n	8006300 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d141      	bne.n	80062d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b31      	ldr	r3, [pc, #196]	@ (8006314 <HAL_RCC_OscConfig+0x478>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006254:	f7fb fc3e 	bl	8001ad4 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800625c:	f7fb fc3a 	bl	8001ad4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e087      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800626e:	4b27      	ldr	r3, [pc, #156]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	019b      	lsls	r3, r3, #6
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	3b01      	subs	r3, #1
 8006294:	041b      	lsls	r3, r3, #16
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629c:	061b      	lsls	r3, r3, #24
 800629e:	491b      	ldr	r1, [pc, #108]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006314 <HAL_RCC_OscConfig+0x478>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062aa:	f7fb fc13 	bl	8001ad4 <HAL_GetTick>
 80062ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b2:	f7fb fc0f 	bl	8001ad4 <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e05c      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c4:	4b11      	ldr	r3, [pc, #68]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d0f0      	beq.n	80062b2 <HAL_RCC_OscConfig+0x416>
 80062d0:	e054      	b.n	800637c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <HAL_RCC_OscConfig+0x478>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d8:	f7fb fbfc 	bl	8001ad4 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e0:	f7fb fbf8 	bl	8001ad4 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e045      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f2:	4b06      	ldr	r3, [pc, #24]	@ (800630c <HAL_RCC_OscConfig+0x470>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f0      	bne.n	80062e0 <HAL_RCC_OscConfig+0x444>
 80062fe:	e03d      	b.n	800637c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e038      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
 800630c:	40023800 	.word	0x40023800
 8006310:	40007000 	.word	0x40007000
 8006314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006318:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <HAL_RCC_OscConfig+0x4ec>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d028      	beq.n	8006378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006330:	429a      	cmp	r2, r3
 8006332:	d121      	bne.n	8006378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800633e:	429a      	cmp	r2, r3
 8006340:	d11a      	bne.n	8006378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006348:	4013      	ands	r3, r2
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800634e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006350:	4293      	cmp	r3, r2
 8006352:	d111      	bne.n	8006378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	3b01      	subs	r3, #1
 8006362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006364:	429a      	cmp	r2, r3
 8006366:	d107      	bne.n	8006378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0cc      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b68      	ldr	r3, [pc, #416]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d90c      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b65      	ldr	r3, [pc, #404]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b63      	ldr	r3, [pc, #396]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0b8      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e0:	4b59      	ldr	r3, [pc, #356]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a58      	ldr	r2, [pc, #352]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	4b53      	ldr	r3, [pc, #332]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a52      	ldr	r2, [pc, #328]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006404:	4b50      	ldr	r3, [pc, #320]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	494d      	ldr	r1, [pc, #308]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d044      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b47      	ldr	r3, [pc, #284]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e07f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d003      	beq.n	800644a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006446:	2b03      	cmp	r3, #3
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b3f      	ldr	r3, [pc, #252]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e06f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3b      	ldr	r3, [pc, #236]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e067      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b37      	ldr	r3, [pc, #220]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4934      	ldr	r1, [pc, #208]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fb fb2a 	bl	8001ad4 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fb fb26 	bl	8001ad4 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e04f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2b      	ldr	r3, [pc, #172]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b25      	ldr	r3, [pc, #148]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d20c      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b22      	ldr	r3, [pc, #136]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	@ (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e032      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b19      	ldr	r3, [pc, #100]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4916      	ldr	r1, [pc, #88]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4b12      	ldr	r3, [pc, #72]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490e      	ldr	r1, [pc, #56]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006512:	f000 f821 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490a      	ldr	r1, [pc, #40]	@ (800654c <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a09      	ldr	r2, [pc, #36]	@ (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fb fa8a 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023c00 	.word	0x40023c00
 8006548:	40023800 	.word	0x40023800
 800654c:	0800b714 	.word	0x0800b714
 8006550:	20000004 	.word	0x20000004
 8006554:	20000008 	.word	0x20000008

08006558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800655c:	b094      	sub	sp, #80	@ 0x50
 800655e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006570:	4b79      	ldr	r3, [pc, #484]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d00d      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x40>
 800657c:	2b08      	cmp	r3, #8
 800657e:	f200 80e1 	bhi.w	8006744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_RCC_GetSysClockFreq+0x34>
 8006586:	2b04      	cmp	r3, #4
 8006588:	d003      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x3a>
 800658a:	e0db      	b.n	8006744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800658c:	4b73      	ldr	r3, [pc, #460]	@ (800675c <HAL_RCC_GetSysClockFreq+0x204>)
 800658e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006590:	e0db      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006592:	4b73      	ldr	r3, [pc, #460]	@ (8006760 <HAL_RCC_GetSysClockFreq+0x208>)
 8006594:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006596:	e0d8      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006598:	4b6f      	ldr	r3, [pc, #444]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d063      	beq.n	8006676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	099b      	lsrs	r3, r3, #6
 80065b4:	2200      	movs	r2, #0
 80065b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c2:	2300      	movs	r3, #0
 80065c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80065ca:	4622      	mov	r2, r4
 80065cc:	462b      	mov	r3, r5
 80065ce:	f04f 0000 	mov.w	r0, #0
 80065d2:	f04f 0100 	mov.w	r1, #0
 80065d6:	0159      	lsls	r1, r3, #5
 80065d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065dc:	0150      	lsls	r0, r2, #5
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4621      	mov	r1, r4
 80065e4:	1a51      	subs	r1, r2, r1
 80065e6:	6139      	str	r1, [r7, #16]
 80065e8:	4629      	mov	r1, r5
 80065ea:	eb63 0301 	sbc.w	r3, r3, r1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065fc:	4659      	mov	r1, fp
 80065fe:	018b      	lsls	r3, r1, #6
 8006600:	4651      	mov	r1, sl
 8006602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006606:	4651      	mov	r1, sl
 8006608:	018a      	lsls	r2, r1, #6
 800660a:	4651      	mov	r1, sl
 800660c:	ebb2 0801 	subs.w	r8, r2, r1
 8006610:	4659      	mov	r1, fp
 8006612:	eb63 0901 	sbc.w	r9, r3, r1
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800662a:	4690      	mov	r8, r2
 800662c:	4699      	mov	r9, r3
 800662e:	4623      	mov	r3, r4
 8006630:	eb18 0303 	adds.w	r3, r8, r3
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	462b      	mov	r3, r5
 8006638:	eb49 0303 	adc.w	r3, r9, r3
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800664a:	4629      	mov	r1, r5
 800664c:	024b      	lsls	r3, r1, #9
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006654:	4621      	mov	r1, r4
 8006656:	024a      	lsls	r2, r1, #9
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665e:	2200      	movs	r2, #0
 8006660:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006662:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006668:	f7fa fa2c 	bl	8000ac4 <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4613      	mov	r3, r2
 8006672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006674:	e058      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006676:	4b38      	ldr	r3, [pc, #224]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	099b      	lsrs	r3, r3, #6
 800667c:	2200      	movs	r2, #0
 800667e:	4618      	mov	r0, r3
 8006680:	4611      	mov	r1, r2
 8006682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006686:	623b      	str	r3, [r7, #32]
 8006688:	2300      	movs	r3, #0
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
 800668c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f04f 0100 	mov.w	r1, #0
 800669c:	0159      	lsls	r1, r3, #5
 800669e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066a2:	0150      	lsls	r0, r2, #5
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4641      	mov	r1, r8
 80066aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80066ae:	4649      	mov	r1, r9
 80066b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066c8:	ebb2 040a 	subs.w	r4, r2, sl
 80066cc:	eb63 050b 	sbc.w	r5, r3, fp
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	00eb      	lsls	r3, r5, #3
 80066da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066de:	00e2      	lsls	r2, r4, #3
 80066e0:	4614      	mov	r4, r2
 80066e2:	461d      	mov	r5, r3
 80066e4:	4643      	mov	r3, r8
 80066e6:	18e3      	adds	r3, r4, r3
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	464b      	mov	r3, r9
 80066ec:	eb45 0303 	adc.w	r3, r5, r3
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066fe:	4629      	mov	r1, r5
 8006700:	028b      	lsls	r3, r1, #10
 8006702:	4621      	mov	r1, r4
 8006704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006708:	4621      	mov	r1, r4
 800670a:	028a      	lsls	r2, r1, #10
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006712:	2200      	movs	r2, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	61fa      	str	r2, [r7, #28]
 8006718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800671c:	f7fa f9d2 	bl	8000ac4 <__aeabi_uldivmod>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	4613      	mov	r3, r2
 8006726:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006728:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <HAL_RCC_GetSysClockFreq+0x200>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006738:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800673a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006742:	e002      	b.n	800674a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <HAL_RCC_GetSysClockFreq+0x204>)
 8006746:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800674a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800674c:	4618      	mov	r0, r3
 800674e:	3750      	adds	r7, #80	@ 0x50
 8006750:	46bd      	mov	sp, r7
 8006752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800
 800675c:	00f42400 	.word	0x00f42400
 8006760:	007a1200 	.word	0x007a1200

08006764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006768:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <HAL_RCC_GetHCLKFreq+0x14>)
 800676a:	681b      	ldr	r3, [r3, #0]
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20000004 	.word	0x20000004

0800677c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006780:	f7ff fff0 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b05      	ldr	r3, [pc, #20]	@ (800679c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	0a9b      	lsrs	r3, r3, #10
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	4903      	ldr	r1, [pc, #12]	@ (80067a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006798:	4618      	mov	r0, r3
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40023800 	.word	0x40023800
 80067a0:	0800b724 	.word	0x0800b724

080067a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d035      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067cc:	4b62      	ldr	r3, [pc, #392]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067d2:	f7fb f97f 	bl	8001ad4 <HAL_GetTick>
 80067d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d8:	e008      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067da:	f7fb f97b 	bl	8001ad4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e0b0      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067ec:	4b5b      	ldr	r3, [pc, #364]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f0      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	019a      	lsls	r2, r3, #6
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	071b      	lsls	r3, r3, #28
 8006804:	4955      	ldr	r1, [pc, #340]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800680c:	4b52      	ldr	r3, [pc, #328]	@ (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800680e:	2201      	movs	r2, #1
 8006810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006812:	f7fb f95f 	bl	8001ad4 <HAL_GetTick>
 8006816:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006818:	e008      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800681a:	f7fb f95b 	bl	8001ad4 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e090      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800682c:	4b4b      	ldr	r3, [pc, #300]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d0f0      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8083 	beq.w	800694c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4b44      	ldr	r3, [pc, #272]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	4a43      	ldr	r2, [pc, #268]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006854:	6413      	str	r3, [r2, #64]	@ 0x40
 8006856:	4b41      	ldr	r3, [pc, #260]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006862:	4b3f      	ldr	r3, [pc, #252]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a3e      	ldr	r2, [pc, #248]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800686e:	f7fb f931 	bl	8001ad4 <HAL_GetTick>
 8006872:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006874:	e008      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006876:	f7fb f92d 	bl	8001ad4 <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d901      	bls.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e062      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006888:	4b35      	ldr	r3, [pc, #212]	@ (8006960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006890:	2b00      	cmp	r3, #0
 8006892:	d0f0      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006894:	4b31      	ldr	r3, [pc, #196]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800689c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02f      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d028      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068b2:	4b2a      	ldr	r3, [pc, #168]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068bc:	4b29      	ldr	r3, [pc, #164]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068c2:	4b28      	ldr	r3, [pc, #160]	@ (8006964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068c8:	4a24      	ldr	r2, [pc, #144]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068ce:	4b23      	ldr	r3, [pc, #140]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d114      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068da:	f7fb f8fb 	bl	8001ad4 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e0:	e00a      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e2:	f7fb f8f7 	bl	8001ad4 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e02a      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f8:	4b18      	ldr	r3, [pc, #96]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0ee      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006910:	d10d      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006912:	4b12      	ldr	r3, [pc, #72]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006926:	490d      	ldr	r1, [pc, #52]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006928:	4313      	orrs	r3, r2
 800692a:	608b      	str	r3, [r1, #8]
 800692c:	e005      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	4a0a      	ldr	r2, [pc, #40]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006934:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006938:	6093      	str	r3, [r2, #8]
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800693c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006946:	4905      	ldr	r1, [pc, #20]	@ (800695c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006948:	4313      	orrs	r3, r2
 800694a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	42470068 	.word	0x42470068
 800695c:	40023800 	.word	0x40023800
 8006960:	40007000 	.word	0x40007000
 8006964:	42470e40 	.word	0x42470e40

08006968 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d13f      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800698e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d006      	beq.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800699c:	d12f      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800699e:	4b1f      	ldr	r3, [pc, #124]	@ (8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80069a0:	617b      	str	r3, [r7, #20]
          break;
 80069a2:	e02f      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069b0:	d108      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069b2:	4b19      	ldr	r3, [pc, #100]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ba:	4a19      	ldr	r2, [pc, #100]	@ (8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e007      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069c4:	4b14      	ldr	r3, [pc, #80]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069cc:	4a15      	ldr	r2, [pc, #84]	@ (8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80069d4:	4b10      	ldr	r3, [pc, #64]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069da:	099b      	lsrs	r3, r3, #6
 80069dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ee:	0f1b      	lsrs	r3, r3, #28
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	617b      	str	r3, [r7, #20]
          break;
 80069fc:	e002      	b.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	617b      	str	r3, [r7, #20]
          break;
 8006a02:	bf00      	nop
        }
      }
      break;
 8006a04:	e000      	b.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006a06:	bf00      	nop
    }
  }
  return frequency;
 8006a08:	697b      	ldr	r3, [r7, #20]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	00bb8000 	.word	0x00bb8000
 8006a20:	007a1200 	.word	0x007a1200
 8006a24:	00f42400 	.word	0x00f42400

08006a28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a28:	b084      	sub	sp, #16
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	f107 001c 	add.w	r0, r7, #28
 8006a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d123      	bne.n	8006a8a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d105      	bne.n	8006a7e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f9dc 	bl	8006e3c <USB_CoreReset>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e01b      	b.n	8006ac2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9d0 	bl	8006e3c <USB_CoreReset>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ab4:	e005      	b.n	8006ac2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ac2:	7fbb      	ldrb	r3, [r7, #30]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d10b      	bne.n	8006ae0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f043 0206 	orr.w	r2, r3, #6
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aec:	b004      	add	sp, #16
 8006aee:	4770      	bx	lr

08006af0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f043 0201 	orr.w	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f023 0201 	bic.w	r2, r3, #1
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d115      	bne.n	8006b82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b62:	200a      	movs	r0, #10
 8006b64:	f7fa ffc2 	bl	8001aec <HAL_Delay>
      ms += 10U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	330a      	adds	r3, #10
 8006b6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f956 	bl	8006e20 <USB_GetMode>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d01e      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b7e:	d9f0      	bls.n	8006b62 <USB_SetCurrentMode+0x2e>
 8006b80:	e01a      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d115      	bne.n	8006bb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b94:	200a      	movs	r0, #10
 8006b96:	f7fa ffa9 	bl	8001aec <HAL_Delay>
      ms += 10U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	330a      	adds	r3, #10
 8006b9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f93d 	bl	8006e20 <USB_GetMode>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USB_SetCurrentMode+0x84>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bb0:	d9f0      	bls.n	8006b94 <USB_SetCurrentMode+0x60>
 8006bb2:	e001      	b.n	8006bb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e005      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2bc8      	cmp	r3, #200	@ 0xc8
 8006bbc:	d101      	bne.n	8006bc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006be6:	d901      	bls.n	8006bec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e01b      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	daf2      	bge.n	8006bda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	019b      	lsls	r3, r3, #6
 8006bfc:	f043 0220 	orr.w	r2, r3, #32
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c10:	d901      	bls.n	8006c16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e006      	b.n	8006c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d0f0      	beq.n	8006c04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c48:	d901      	bls.n	8006c4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e018      	b.n	8006c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	daf2      	bge.n	8006c3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2210      	movs	r2, #16
 8006c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c6c:	d901      	bls.n	8006c72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e006      	b.n	8006c80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0310 	and.w	r3, r3, #16
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d0f0      	beq.n	8006c60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b089      	sub	sp, #36	@ 0x24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	4611      	mov	r1, r2
 8006c98:	461a      	mov	r2, r3
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	71fb      	strb	r3, [r7, #7]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006caa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d123      	bne.n	8006cfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006cb2:	88bb      	ldrh	r3, [r7, #4]
 8006cb4:	3303      	adds	r3, #3
 8006cb6:	089b      	lsrs	r3, r3, #2
 8006cb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e018      	b.n	8006cf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	031a      	lsls	r2, r3, #12
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ccc:	461a      	mov	r2, r3
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d3e2      	bcc.n	8006cc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3724      	adds	r7, #36	@ 0x24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08b      	sub	sp, #44	@ 0x2c
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	089b      	lsrs	r3, r3, #2
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
 8006d32:	e014      	b.n	8006d5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	3301      	adds	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	3301      	adds	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	3301      	adds	r3, #1
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d54:	3301      	adds	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	623b      	str	r3, [r7, #32]
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d3e6      	bcc.n	8006d34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d66:	8bfb      	ldrh	r3, [r7, #30]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d01e      	beq.n	8006daa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d76:	461a      	mov	r2, r3
 8006d78:	f107 0310 	add.w	r3, r7, #16
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	701a      	strb	r2, [r3, #0]
      i++;
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	3301      	adds	r3, #1
 8006d96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d9e:	8bfb      	ldrh	r3, [r7, #30]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006da4:	8bfb      	ldrh	r3, [r7, #30]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ea      	bne.n	8006d80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	372c      	adds	r7, #44	@ 0x2c
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	4013      	ands	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e12:	68bb      	ldr	r3, [r7, #8]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e54:	d901      	bls.n	8006e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e01b      	b.n	8006e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	daf2      	bge.n	8006e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f043 0201 	orr.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e7e:	d901      	bls.n	8006e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e006      	b.n	8006e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d0f0      	beq.n	8006e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
	...

08006ea0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d119      	bne.n	8006f2a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d10a      	bne.n	8006f14 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f0c:	f043 0304 	orr.w	r3, r3, #4
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e014      	b.n	8006f3e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f22:	f023 0304 	bic.w	r3, r3, #4
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	e009      	b.n	8006f3e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006f38:	f023 0304 	bic.w	r3, r3, #4
 8006f3c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f3e:	2110      	movs	r1, #16
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fe43 	bl	8006bcc <USB_FlushTxFifo>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff fe6d 	bl	8006c30 <USB_FlushRxFifo>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f60:	2300      	movs	r3, #0
 8006f62:	613b      	str	r3, [r7, #16]
 8006f64:	e015      	b.n	8006f92 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f72:	461a      	mov	r2, r3
 8006f74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f78:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f86:	461a      	mov	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f96:	461a      	mov	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d3e3      	bcc.n	8006f66 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006faa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	@ (8007010 <USB_HostInit+0x170>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10b      	bne.n	8006fcc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <USB_HostInit+0x174>)
 8006fc0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a14      	ldr	r2, [pc, #80]	@ (8007018 <USB_HostInit+0x178>)
 8006fc6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006fca:	e009      	b.n	8006fe0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2280      	movs	r2, #128	@ 0x80
 8006fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a11      	ldr	r2, [pc, #68]	@ (800701c <USB_HostInit+0x17c>)
 8006fd6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a11      	ldr	r2, [pc, #68]	@ (8007020 <USB_HostInit+0x180>)
 8006fdc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d105      	bne.n	8006ff4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f043 0210 	orr.w	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <USB_HostInit+0x184>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800700c:	b004      	add	sp, #16
 800700e:	4770      	bx	lr
 8007010:	40040000 	.word	0x40040000
 8007014:	01000200 	.word	0x01000200
 8007018:	00e00300 	.word	0x00e00300
 800701c:	00600080 	.word	0x00600080
 8007020:	004000e0 	.word	0x004000e0
 8007024:	a3200008 	.word	0xa3200008

08007028 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	68f9      	ldr	r1, [r7, #12]
 800705c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007060:	4313      	orrs	r3, r2
 8007062:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d107      	bne.n	800707a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007070:	461a      	mov	r2, r3
 8007072:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007076:	6053      	str	r3, [r2, #4]
 8007078:	e00c      	b.n	8007094 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	2b02      	cmp	r3, #2
 800707e:	d107      	bne.n	8007090 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007086:	461a      	mov	r2, r3
 8007088:	f241 7370 	movw	r3, #6000	@ 0x1770
 800708c:	6053      	str	r3, [r2, #4]
 800708e:	e001      	b.n	8007094 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80070c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070d2:	2064      	movs	r0, #100	@ 0x64
 80070d4:	f7fa fd0a 	bl	8001aec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80070e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070e4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070e6:	200a      	movs	r0, #10
 80070e8:	f7fa fd00 	bl	8001aec <HAL_Delay>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b085      	sub	sp, #20
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800711a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <USB_DriveVbus+0x44>
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d106      	bne.n	800713a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007138:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007144:	d109      	bne.n	800715a <USB_DriveVbus+0x64>
 8007146:	78fb      	ldrb	r3, [r7, #3]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007154:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007158:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0c5b      	lsrs	r3, r3, #17
 8007186:	f003 0303 	and.w	r3, r3, #3
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	b29b      	uxth	r3, r3
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	4608      	mov	r0, r1
 80071c2:	4611      	mov	r1, r2
 80071c4:	461a      	mov	r2, r3
 80071c6:	4603      	mov	r3, r0
 80071c8:	70fb      	strb	r3, [r7, #3]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70bb      	strb	r3, [r7, #2]
 80071ce:	4613      	mov	r3, r2
 80071d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	015a      	lsls	r2, r3, #5
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	4413      	add	r3, r2
 80071e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e6:	461a      	mov	r2, r3
 80071e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d87c      	bhi.n	80072f0 <USB_HC_Init+0x138>
 80071f6:	a201      	add	r2, pc, #4	@ (adr r2, 80071fc <USB_HC_Init+0x44>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	080072b3 	.word	0x080072b3
 8007204:	0800720d 	.word	0x0800720d
 8007208:	08007275 	.word	0x08007275
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007218:	461a      	mov	r2, r3
 800721a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800721e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007220:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da10      	bge.n	800724a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	4413      	add	r3, r2
 8007230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	78fa      	ldrb	r2, [r7, #3]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	440a      	add	r2, r1
 800723e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007246:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007248:	e055      	b.n	80072f6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a6f      	ldr	r2, [pc, #444]	@ (800740c <USB_HC_Init+0x254>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d151      	bne.n	80072f6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800726c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007270:	60d3      	str	r3, [r2, #12]
      break;
 8007272:	e040      	b.n	80072f6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007280:	461a      	mov	r2, r3
 8007282:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007286:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	da34      	bge.n	80072fa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	4413      	add	r3, r2
 8007298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072b0:	e023      	b.n	80072fa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072be:	461a      	mov	r2, r3
 80072c0:	f240 2325 	movw	r3, #549	@ 0x225
 80072c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da17      	bge.n	80072fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072e8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80072ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072ee:	e006      	b.n	80072fe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	77fb      	strb	r3, [r7, #31]
      break;
 80072f4:	e004      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072f6:	bf00      	nop
 80072f8:	e002      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072fa:	bf00      	nop
 80072fc:	e000      	b.n	8007300 <USB_HC_Init+0x148>
      break;
 80072fe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	78fa      	ldrb	r2, [r7, #3]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	440a      	add	r2, r1
 8007328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800732c:	f043 0302 	orr.w	r3, r3, #2
 8007330:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	78fb      	ldrb	r3, [r7, #3]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	2101      	movs	r1, #1
 8007342:	fa01 f303 	lsl.w	r3, r1, r3
 8007346:	6939      	ldr	r1, [r7, #16]
 8007348:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800734c:	4313      	orrs	r3, r2
 800734e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800735c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da03      	bge.n	800736c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007364:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e001      	b.n	8007370 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fef9 	bl	8007168 <USB_GetHostSpeed>
 8007376:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007378:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800737c:	2b02      	cmp	r3, #2
 800737e:	d106      	bne.n	800738e <USB_HC_Init+0x1d6>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d003      	beq.n	800738e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e001      	b.n	8007392 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007392:	787b      	ldrb	r3, [r7, #1]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800739a:	78bb      	ldrb	r3, [r7, #2]
 800739c:	02db      	lsls	r3, r3, #11
 800739e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073a2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073a8:	049b      	lsls	r3, r3, #18
 80073aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80073b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80073b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073b6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80073cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073d0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80073d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d003      	beq.n	80073e2 <USB_HC_Init+0x22a>
 80073da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10f      	bne.n	8007402 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	015a      	lsls	r2, r3, #5
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	4413      	add	r3, r2
 80073ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	78fa      	ldrb	r2, [r7, #3]
 80073f2:	0151      	lsls	r1, r2, #5
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	440a      	add	r2, r1
 80073f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007400:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007402:	7ffb      	ldrb	r3, [r7, #31]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40040000 	.word	0x40040000

08007410 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	@ 0x30
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007428:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800742c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4a5d      	ldr	r2, [pc, #372]	@ (80075a8 <USB_HC_StartXfer+0x198>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d12f      	bne.n	8007496 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d11c      	bne.n	8007476 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	7c9b      	ldrb	r3, [r3, #18]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USB_HC_StartXfer+0x3c>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	7c9b      	ldrb	r3, [r3, #18]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d124      	bne.n	8007496 <USB_HC_StartXfer+0x86>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	799b      	ldrb	r3, [r3, #6]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d120      	bne.n	8007496 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	440a      	add	r2, r1
 800746a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800746e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007472:	60d3      	str	r3, [r2, #12]
 8007474:	e00f      	b.n	8007496 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <USB_HC_StartXfer+0x86>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	795b      	ldrb	r3, [r3, #5]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d107      	bne.n	8007496 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 fb6b 	bl	8007b68 <USB_DoPing>
        return HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	e232      	b.n	80078fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	799b      	ldrb	r3, [r3, #6]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d158      	bne.n	8007550 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800749e:	2301      	movs	r3, #1
 80074a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	78db      	ldrb	r3, [r3, #3]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d007      	beq.n	80074ba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	8a92      	ldrh	r2, [r2, #20]
 80074b0:	fb03 f202 	mul.w	r2, r3, r2
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	61da      	str	r2, [r3, #28]
 80074b8:	e07c      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	7c9b      	ldrb	r3, [r3, #18]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d130      	bne.n	8007524 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80074c8:	d918      	bls.n	80074fc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	8a9b      	ldrh	r3, [r3, #20]
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d003      	beq.n	80074ec <USB_HC_StartXfer+0xdc>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d103      	bne.n	80074f4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2202      	movs	r2, #2
 80074f0:	60da      	str	r2, [r3, #12]
 80074f2:	e05f      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2201      	movs	r2, #1
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e05b      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	6a1a      	ldr	r2, [r3, #32]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d007      	beq.n	800751c <USB_HC_StartXfer+0x10c>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b02      	cmp	r3, #2
 8007512:	d003      	beq.n	800751c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2204      	movs	r2, #4
 8007518:	60da      	str	r2, [r3, #12]
 800751a:	e04b      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2203      	movs	r2, #3
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	e047      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d10d      	bne.n	8007546 <USB_HC_StartXfer+0x136>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	8a92      	ldrh	r2, [r2, #20]
 8007532:	4293      	cmp	r3, r2
 8007534:	d907      	bls.n	8007546 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	8a92      	ldrh	r2, [r2, #20]
 800753c:	fb03 f202 	mul.w	r2, r3, r2
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	61da      	str	r2, [r3, #28]
 8007544:	e036      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6a1a      	ldr	r2, [r3, #32]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	61da      	str	r2, [r3, #28]
 800754e:	e031      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d018      	beq.n	800758a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	8a92      	ldrh	r2, [r2, #20]
 8007560:	4413      	add	r3, r2
 8007562:	3b01      	subs	r3, #1
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	8a92      	ldrh	r2, [r2, #20]
 8007568:	fbb3 f3f2 	udiv	r3, r3, r2
 800756c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800756e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007570:	8b7b      	ldrh	r3, [r7, #26]
 8007572:	429a      	cmp	r2, r3
 8007574:	d90b      	bls.n	800758e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007576:	8b7b      	ldrh	r3, [r7, #26]
 8007578:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800757a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	8a92      	ldrh	r2, [r2, #20]
 8007580:	fb03 f202 	mul.w	r2, r3, r2
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	61da      	str	r2, [r3, #28]
 8007588:	e001      	b.n	800758e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800758a:	2301      	movs	r3, #1
 800758c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007596:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	8a92      	ldrh	r2, [r2, #20]
 800759c:	fb03 f202 	mul.w	r2, r3, r2
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	61da      	str	r2, [r3, #28]
 80075a4:	e006      	b.n	80075b4 <USB_HC_StartXfer+0x1a4>
 80075a6:	bf00      	nop
 80075a8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6a1a      	ldr	r2, [r3, #32]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075be:	04d9      	lsls	r1, r3, #19
 80075c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007850 <USB_HC_StartXfer+0x440>)
 80075c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7d9b      	ldrb	r3, [r3, #22]
 80075ca:	075b      	lsls	r3, r3, #29
 80075cc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	0148      	lsls	r0, r1, #5
 80075d4:	6a39      	ldr	r1, [r7, #32]
 80075d6:	4401      	add	r1, r0
 80075d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80075dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80075de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6999      	ldr	r1, [r3, #24]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f6:	460a      	mov	r2, r1
 80075f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf0c      	ite	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	2300      	movne	r3, #0
 800760e:	b2db      	uxtb	r3, r3
 8007610:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	6a3a      	ldr	r2, [r7, #32]
 8007626:	440a      	add	r2, r1
 8007628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800762c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007630:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	7e7b      	ldrb	r3, [r7, #25]
 8007642:	075b      	lsls	r3, r3, #29
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	0148      	lsls	r0, r1, #5
 8007648:	6a39      	ldr	r1, [r7, #32]
 800764a:	4401      	add	r1, r0
 800764c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007650:	4313      	orrs	r3, r2
 8007652:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	799b      	ldrb	r3, [r3, #6]
 8007658:	2b01      	cmp	r3, #1
 800765a:	f040 80c3 	bne.w	80077e4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	7c5b      	ldrb	r3, [r3, #17]
 8007662:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007668:	4313      	orrs	r3, r2
 800766a:	69fa      	ldr	r2, [r7, #28]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	440a      	add	r2, r1
 8007672:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007676:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800767a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	69fa      	ldr	r2, [r7, #28]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	6a3a      	ldr	r2, [r7, #32]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007696:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800769a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	79db      	ldrb	r3, [r3, #7]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d123      	bne.n	80076ec <USB_HC_StartXfer+0x2dc>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	78db      	ldrb	r3, [r3, #3]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d11f      	bne.n	80076ec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	6a3b      	ldr	r3, [r7, #32]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	6a3a      	ldr	r2, [r7, #32]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	69fa      	ldr	r2, [r7, #28]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	7c9b      	ldrb	r3, [r3, #18]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d003      	beq.n	80076fc <USB_HC_StartXfer+0x2ec>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	7c9b      	ldrb	r3, [r3, #18]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d117      	bne.n	800772c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007700:	2b01      	cmp	r3, #1
 8007702:	d113      	bne.n	800772c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	78db      	ldrb	r3, [r3, #3]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d10f      	bne.n	800772c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	440a      	add	r2, r1
 8007722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	7c9b      	ldrb	r3, [r3, #18]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d162      	bne.n	80077fa <USB_HC_StartXfer+0x3ea>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	78db      	ldrb	r3, [r3, #3]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d15e      	bne.n	80077fa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	3b01      	subs	r3, #1
 8007742:	2b03      	cmp	r3, #3
 8007744:	d858      	bhi.n	80077f8 <USB_HC_StartXfer+0x3e8>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <USB_HC_StartXfer+0x33c>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	0800775d 	.word	0x0800775d
 8007750:	0800777f 	.word	0x0800777f
 8007754:	080077a1 	.word	0x080077a1
 8007758:	080077c3 	.word	0x080077c3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	4413      	add	r3, r2
 8007764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	69fa      	ldr	r2, [r7, #28]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	440a      	add	r2, r1
 8007772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777a:	6053      	str	r3, [r2, #4]
          break;
 800777c:	e03d      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	6a3a      	ldr	r2, [r7, #32]
 8007792:	440a      	add	r2, r1
 8007794:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007798:	f043 030e 	orr.w	r3, r3, #14
 800779c:	6053      	str	r3, [r2, #4]
          break;
 800779e:	e02c      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	69fa      	ldr	r2, [r7, #28]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	6a3a      	ldr	r2, [r7, #32]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077be:	6053      	str	r3, [r2, #4]
          break;
 80077c0:	e01b      	b.n	80077fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80077e0:	6053      	str	r3, [r2, #4]
          break;
 80077e2:	e00a      	b.n	80077fa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6053      	str	r3, [r2, #4]
 80077f6:	e000      	b.n	80077fa <USB_HC_StartXfer+0x3ea>
          break;
 80077f8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	4413      	add	r3, r2
 8007802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007810:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	78db      	ldrb	r3, [r3, #3]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e003      	b.n	800782c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800782a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007832:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	4413      	add	r3, r2
 800783c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007840:	461a      	mov	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d003      	beq.n	8007854 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e055      	b.n	80078fc <USB_HC_StartXfer+0x4ec>
 8007850:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	78db      	ldrb	r3, [r3, #3]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d14e      	bne.n	80078fa <USB_HC_StartXfer+0x4ea>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04a      	beq.n	80078fa <USB_HC_StartXfer+0x4ea>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	79db      	ldrb	r3, [r3, #7]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d146      	bne.n	80078fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	7c9b      	ldrb	r3, [r3, #18]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d831      	bhi.n	80078d8 <USB_HC_StartXfer+0x4c8>
 8007874:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <USB_HC_StartXfer+0x46c>)
 8007876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787a:	bf00      	nop
 800787c:	0800788d 	.word	0x0800788d
 8007880:	080078b1 	.word	0x080078b1
 8007884:	0800788d 	.word	0x0800788d
 8007888:	080078b1 	.word	0x080078b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	3303      	adds	r3, #3
 8007892:	089b      	lsrs	r3, r3, #2
 8007894:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007896:	8afa      	ldrh	r2, [r7, #22]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789c:	b29b      	uxth	r3, r3
 800789e:	429a      	cmp	r2, r3
 80078a0:	d91c      	bls.n	80078dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f043 0220 	orr.w	r2, r3, #32
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80078ae:	e015      	b.n	80078dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	3303      	adds	r3, #3
 80078b6:	089b      	lsrs	r3, r3, #2
 80078b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80078ba:	8afa      	ldrh	r2, [r7, #22]
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d90a      	bls.n	80078e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80078d6:	e003      	b.n	80078e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80078d8:	bf00      	nop
 80078da:	e002      	b.n	80078e2 <USB_HC_StartXfer+0x4d2>
        break;
 80078dc:	bf00      	nop
 80078de:	e000      	b.n	80078e2 <USB_HC_StartXfer+0x4d2>
        break;
 80078e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6999      	ldr	r1, [r3, #24]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785a      	ldrb	r2, [r3, #1]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2000      	movs	r0, #0
 80078f2:	9000      	str	r0, [sp, #0]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7ff f9c9 	bl	8006c8c <USB_WritePacket>
  }

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3728      	adds	r7, #40	@ 0x28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	b29b      	uxth	r3, r3
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007926:	b480      	push	{r7}
 8007928:	b089      	sub	sp, #36	@ 0x24
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	0c9b      	lsrs	r3, r3, #18
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	0fdb      	lsrs	r3, r3, #31
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	0fdb      	lsrs	r3, r3, #31
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 0320 	and.w	r3, r3, #32
 8007988:	2b20      	cmp	r3, #32
 800798a:	d10d      	bne.n	80079a8 <USB_HC_Halt+0x82>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <USB_HC_Halt+0x82>
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d002      	beq.n	80079a4 <USB_HC_Halt+0x7e>
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d101      	bne.n	80079a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e0d8      	b.n	8007b5a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <USB_HC_Halt+0x8e>
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d173      	bne.n	8007a9c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0320 	and.w	r3, r3, #32
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d14a      	bne.n	8007a76 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d133      	bne.n	8007a54 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a0a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69ba      	ldr	r2, [r7, #24]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a2a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a38:	d82e      	bhi.n	8007a98 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a50:	d0ec      	beq.n	8007a2c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a52:	e081      	b.n	8007b58 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a72:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a74:	e070      	b.n	8007b58 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a94:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a96:	e05f      	b.n	8007b58 <USB_HC_Halt+0x232>
            break;
 8007a98:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a9a:	e05d      	b.n	8007b58 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d133      	bne.n	8007b34 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ae6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b0a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b18:	d81d      	bhi.n	8007b56 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b30:	d0ec      	beq.n	8007b0c <USB_HC_Halt+0x1e6>
 8007b32:	e011      	b.n	8007b58 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	0151      	lsls	r1, r2, #5
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	440a      	add	r2, r1
 8007b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	e000      	b.n	8007b58 <USB_HC_Halt+0x232>
          break;
 8007b56:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3724      	adds	r7, #36	@ 0x24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	04da      	lsls	r2, r3, #19
 8007b84:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <USB_DoPing+0x74>)
 8007b86:	4013      	ands	r3, r2
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	697a      	ldr	r2, [r7, #20]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b98:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007bb0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bb8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	1ff80000 	.word	0x1ff80000

08007be0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe ff8c 	bl	8006b12 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bfa:	2110      	movs	r1, #16
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7fe ffe5 	bl	8006bcc <USB_FlushTxFifo>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff f80f 	bl	8006c30 <USB_FlushRxFifo>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	e01f      	b.n	8007c62 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c38:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c40:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c48:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	461a      	mov	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	61bb      	str	r3, [r7, #24]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	2b0f      	cmp	r3, #15
 8007c66:	d9dc      	bls.n	8007c22 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e034      	b.n	8007cd8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c84:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c8c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c94:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb4:	d80c      	bhi.n	8007cd0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ccc:	d0ec      	beq.n	8007ca8 <USB_StopHost+0xc8>
 8007cce:	e000      	b.n	8007cd2 <USB_StopHost+0xf2>
        break;
 8007cd0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	61bb      	str	r3, [r7, #24]
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	d9c7      	bls.n	8007c6e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cf2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7fe fefb 	bl	8006af0 <USB_EnableGlobalInt>

  return ret;
 8007cfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b089      	sub	sp, #36	@ 0x24
 8007d08:	af04      	add	r7, sp, #16
 8007d0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	2102      	movs	r1, #2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fc85 	bl	8008622 <USBH_FindInterface>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2bff      	cmp	r3, #255	@ 0xff
 8007d20:	d002      	beq.n	8007d28 <USBH_CDC_InterfaceInit+0x24>
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d901      	bls.n	8007d2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e13d      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fc5a 	bl	80085ea <USBH_SelectInterface>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007d40:	2302      	movs	r3, #2
 8007d42:	e131      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007d4a:	2050      	movs	r0, #80	@ 0x50
 8007d4c:	f002 fb64 	bl	800a418 <malloc>
 8007d50:	4603      	mov	r3, r0
 8007d52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d64:	2302      	movs	r3, #2
 8007d66:	e11f      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d68:	2250      	movs	r2, #80	@ 0x50
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68b8      	ldr	r0, [r7, #8]
 8007d6e:	f002 fc11 	bl	800a594 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	211a      	movs	r1, #26
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	b25b      	sxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da15      	bge.n	8007db6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	211a      	movs	r1, #26
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	211a      	movs	r1, #26
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 ffbe 	bl	8009d3e <USBH_AllocPipe>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	7819      	ldrb	r1, [r3, #0]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	7858      	ldrb	r0, [r3, #1]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	8952      	ldrh	r2, [r2, #10]
 8007de2:	9202      	str	r2, [sp, #8]
 8007de4:	2203      	movs	r2, #3
 8007de6:	9201      	str	r2, [sp, #4]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4623      	mov	r3, r4
 8007dec:	4602      	mov	r2, r0
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 ff76 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f002 fa85 	bl	800a30c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e02:	2300      	movs	r3, #0
 8007e04:	2200      	movs	r2, #0
 8007e06:	210a      	movs	r1, #10
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc0a 	bl	8008622 <USBH_FindInterface>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	2bff      	cmp	r3, #255	@ 0xff
 8007e16:	d002      	beq.n	8007e1e <USBH_CDC_InterfaceInit+0x11a>
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d901      	bls.n	8007e22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0c2      	b.n	8007fa8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	211a      	movs	r1, #26
 8007e28:	fb01 f303 	mul.w	r3, r1, r3
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	b25b      	sxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	da16      	bge.n	8007e68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	211a      	movs	r1, #26
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e4a:	781a      	ldrb	r2, [r3, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	211a      	movs	r1, #26
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e60:	881a      	ldrh	r2, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	835a      	strh	r2, [r3, #26]
 8007e66:	e015      	b.n	8007e94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	211a      	movs	r1, #26
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	211a      	movs	r1, #26
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	211a      	movs	r1, #26
 8007e9a:	fb01 f303 	mul.w	r3, r1, r3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b25b      	sxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da16      	bge.n	8007eda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	211a      	movs	r1, #26
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007ed2:	881a      	ldrh	r2, [r3, #0]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	835a      	strh	r2, [r3, #26]
 8007ed8:	e015      	b.n	8007f06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	211a      	movs	r1, #26
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007eea:	781a      	ldrb	r2, [r3, #0]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	211a      	movs	r1, #26
 8007ef6:	fb01 f303 	mul.w	r3, r1, r3
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007f00:	881a      	ldrh	r2, [r3, #0]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	7b9b      	ldrb	r3, [r3, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 ff16 	bl	8009d3e <USBH_AllocPipe>
 8007f12:	4603      	mov	r3, r0
 8007f14:	461a      	mov	r2, r3
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	7bdb      	ldrb	r3, [r3, #15]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 ff0c 	bl	8009d3e <USBH_AllocPipe>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	7b59      	ldrb	r1, [r3, #13]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	7b98      	ldrb	r0, [r3, #14]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	8b12      	ldrh	r2, [r2, #24]
 8007f46:	9202      	str	r2, [sp, #8]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4623      	mov	r3, r4
 8007f50:	4602      	mov	r2, r0
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fec4 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	7b19      	ldrb	r1, [r3, #12]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	7bd8      	ldrb	r0, [r3, #15]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	8b52      	ldrh	r2, [r2, #26]
 8007f70:	9202      	str	r2, [sp, #8]
 8007f72:	2202      	movs	r2, #2
 8007f74:	9201      	str	r2, [sp, #4]
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	4623      	mov	r3, r4
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 feaf 	bl	8009ce0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	7b5b      	ldrb	r3, [r3, #13]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f002 f9ba 	bl	800a30c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7b1b      	ldrb	r3, [r3, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f002 f9b3 	bl	800a30c <USBH_LL_SetToggle>

  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd90      	pop	{r4, r7, pc}

08007fb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00e      	beq.n	8007fe8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 fea4 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 fecf 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	7b1b      	ldrb	r3, [r3, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	7b1b      	ldrb	r3, [r3, #12]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fe91 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	7b1b      	ldrb	r3, [r3, #12]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 febc 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	7b5b      	ldrb	r3, [r3, #13]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00e      	beq.n	8008034 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	7b5b      	ldrb	r3, [r3, #13]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 fe7e 	bl	8009d1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	7b5b      	ldrb	r3, [r3, #13]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 fea9 	bl	8009d80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	4618      	mov	r0, r3
 800804a:	f002 f9ed 	bl	800a428 <free>
    phost->pActiveClass->pData = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008054:	2200      	movs	r2, #0
 8008056:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3340      	adds	r3, #64	@ 0x40
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8b1 	bl	80081e2 <GetLineCoding>
 8008080:	4603      	mov	r3, r0
 8008082:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008090:	2102      	movs	r1, #2
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008096:	7afb      	ldrb	r3, [r7, #11]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d877      	bhi.n	80081b4 <USBH_CDC_Process+0x114>
 80080c4:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <USBH_CDC_Process+0x2c>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080e1 	.word	0x080080e1
 80080d0:	080080e7 	.word	0x080080e7
 80080d4:	08008117 	.word	0x08008117
 80080d8:	0800818b 	.word	0x0800818b
 80080dc:	08008199 	.word	0x08008199
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73fb      	strb	r3, [r7, #15]
      break;
 80080e4:	e06d      	b.n	80081c2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f897 	bl	8008220 <SetLineCoding>
 80080f2:	4603      	mov	r3, r0
 80080f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008104:	e058      	b.n	80081b8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d055      	beq.n	80081b8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2204      	movs	r2, #4
 8008110:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008114:	e050      	b.n	80081b8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	3340      	adds	r3, #64	@ 0x40
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f860 	bl	80081e2 <GetLineCoding>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d126      	bne.n	800817a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813e:	791b      	ldrb	r3, [r3, #4]
 8008140:	429a      	cmp	r2, r3
 8008142:	d13b      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800814e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008150:	429a      	cmp	r2, r3
 8008152:	d133      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800815e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008160:	429a      	cmp	r2, r3
 8008162:	d12b      	bne.n	80081bc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800816c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800816e:	429a      	cmp	r2, r3
 8008170:	d124      	bne.n	80081bc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f958 	bl	8008428 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008178:	e020      	b.n	80081bc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d01d      	beq.n	80081bc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2204      	movs	r2, #4
 8008184:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008188:	e018      	b.n	80081bc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f867 	bl	800825e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8da 	bl	800834a <CDC_ProcessReception>
      break;
 8008196:	e014      	b.n	80081c2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008198:	2100      	movs	r1, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f81a 	bl	80091d4 <USBH_ClrFeature>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80081b2:	e005      	b.n	80081c0 <USBH_CDC_Process+0x120>

    default:
      break;
 80081b4:	bf00      	nop
 80081b6:	e004      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081b8:	bf00      	nop
 80081ba:	e002      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081bc:	bf00      	nop
 80081be:	e000      	b.n	80081c2 <USBH_CDC_Process+0x122>
      break;
 80081c0:	bf00      	nop

  }

  return status;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	22a1      	movs	r2, #161	@ 0xa1
 80081f0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2221      	movs	r2, #33	@ 0x21
 80081f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2207      	movs	r2, #7
 8008208:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2207      	movs	r2, #7
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f001 fb14 	bl	800983e <USBH_CtlReq>
 8008216:	4603      	mov	r3, r0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2221      	movs	r2, #33	@ 0x21
 800822e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2207      	movs	r2, #7
 8008246:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2207      	movs	r2, #7
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 faf5 	bl	800983e <USBH_CtlReq>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af02      	add	r7, sp, #8
 8008264:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008270:	2300      	movs	r3, #0
 8008272:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800827a:	2b01      	cmp	r3, #1
 800827c:	d002      	beq.n	8008284 <CDC_ProcessTransmission+0x26>
 800827e:	2b02      	cmp	r3, #2
 8008280:	d023      	beq.n	80082ca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008282:	e05e      	b.n	8008342 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	8b12      	ldrh	r2, [r2, #24]
 800828c:	4293      	cmp	r3, r2
 800828e:	d90b      	bls.n	80082a8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	69d9      	ldr	r1, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8b1a      	ldrh	r2, [r3, #24]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	7b5b      	ldrb	r3, [r3, #13]
 800829c:	2001      	movs	r0, #1
 800829e:	9000      	str	r0, [sp, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 fcda 	bl	8009c5a <USBH_BulkSendData>
 80082a6:	e00b      	b.n	80082c0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	7b5b      	ldrb	r3, [r3, #13]
 80082b6:	2001      	movs	r0, #1
 80082b8:	9000      	str	r0, [sp, #0]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fccd 	bl	8009c5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80082c8:	e03b      	b.n	8008342 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	7b5b      	ldrb	r3, [r3, #13]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 fff1 	bl	800a2b8 <USBH_LL_GetURBState>
 80082d6:	4603      	mov	r3, r0
 80082d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d128      	bne.n	8008332 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	8b12      	ldrh	r2, [r2, #24]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d90e      	bls.n	800830a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	8b12      	ldrh	r2, [r2, #24]
 80082f4:	1a9a      	subs	r2, r3, r2
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	8b12      	ldrh	r2, [r2, #24]
 8008302:	441a      	add	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	61da      	str	r2, [r3, #28]
 8008308:	e002      	b.n	8008310 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008320:	e00e      	b.n	8008340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f868 	bl	8008400 <USBH_CDC_TransmitCallback>
      break;
 8008330:	e006      	b.n	8008340 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d103      	bne.n	8008340 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008340:	bf00      	nop
  }
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800835c:	2300      	movs	r3, #0
 800835e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008366:	2b03      	cmp	r3, #3
 8008368:	d002      	beq.n	8008370 <CDC_ProcessReception+0x26>
 800836a:	2b04      	cmp	r3, #4
 800836c:	d00e      	beq.n	800838c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800836e:	e043      	b.n	80083f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	6a19      	ldr	r1, [r3, #32]
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	8b5a      	ldrh	r2, [r3, #26]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	7b1b      	ldrb	r3, [r3, #12]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fc91 	bl	8009ca4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2204      	movs	r2, #4
 8008386:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800838a:	e035      	b.n	80083f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	7b1b      	ldrb	r3, [r3, #12]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 ff90 	bl	800a2b8 <USBH_LL_GetURBState>
 8008398:	4603      	mov	r3, r0
 800839a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800839c:	7cfb      	ldrb	r3, [r7, #19]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d129      	bne.n	80083f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	7b1b      	ldrb	r3, [r3, #12]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 fef3 	bl	800a194 <USBH_LL_GetLastXferSize>
 80083ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d016      	beq.n	80083e8 <CDC_ProcessReception+0x9e>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	8b5b      	ldrh	r3, [r3, #26]
 80083be:	461a      	mov	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d110      	bne.n	80083e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	1ad2      	subs	r2, r2, r3
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	441a      	add	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2203      	movs	r2, #3
 80083e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80083e6:	e006      	b.n	80083f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f80f 	bl	8008414 <USBH_CDC_ReceiveCallback>
      break;
 80083f6:	bf00      	nop
  }
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008450:	2302      	movs	r3, #2
 8008452:	e029      	b.n	80084a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	79fa      	ldrb	r2, [r7, #7]
 8008458:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f81f 	bl	80084b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f001 fdc3 	bl	800a02c <USBH_LL_Init>

  return USBH_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	e009      	b.n	80084d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	33e0      	adds	r3, #224	@ 0xe0
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3301      	adds	r3, #1
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b0f      	cmp	r3, #15
 80084da:	d9f2      	bls.n	80084c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e009      	b.n	80084f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084fc:	d3f1      	bcc.n	80084e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2240      	movs	r2, #64	@ 0x40
 8008522:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	331c      	adds	r3, #28
 800854e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f002 f81d 	bl	800a594 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008564:	2100      	movs	r1, #0
 8008566:	4618      	mov	r0, r3
 8008568:	f002 f814 	bl	800a594 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008572:	2212      	movs	r2, #18
 8008574:	2100      	movs	r1, #0
 8008576:	4618      	mov	r0, r3
 8008578:	f002 f80c 	bl	800a594 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008582:	223e      	movs	r2, #62	@ 0x3e
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f002 f804 	bl	800a594 <memset>

  return USBH_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008596:	b480      	push	{r7}
 8008598:	b085      	sub	sp, #20
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d016      	beq.n	80085d8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10e      	bne.n	80085d2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80085ba:	1c59      	adds	r1, r3, #1
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	33de      	adds	r3, #222	@ 0xde
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
 80085d0:	e004      	b.n	80085dc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085d2:	2302      	movs	r3, #2
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	e001      	b.n	80085dc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b085      	sub	sp, #20
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	429a      	cmp	r2, r3
 8008604:	d204      	bcs.n	8008610 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800860e:	e001      	b.n	8008614 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008610:	2302      	movs	r3, #2
 8008612:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800864a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800864c:	e025      	b.n	800869a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	221a      	movs	r2, #26
 8008652:	fb02 f303 	mul.w	r3, r2, r3
 8008656:	3308      	adds	r3, #8
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4413      	add	r3, r2
 800865c:	3302      	adds	r3, #2
 800865e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	795b      	ldrb	r3, [r3, #5]
 8008664:	78fa      	ldrb	r2, [r7, #3]
 8008666:	429a      	cmp	r2, r3
 8008668:	d002      	beq.n	8008670 <USBH_FindInterface+0x4e>
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2bff      	cmp	r3, #255	@ 0xff
 800866e:	d111      	bne.n	8008694 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008674:	78ba      	ldrb	r2, [r7, #2]
 8008676:	429a      	cmp	r2, r3
 8008678:	d002      	beq.n	8008680 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800867a:	78bb      	ldrb	r3, [r7, #2]
 800867c:	2bff      	cmp	r3, #255	@ 0xff
 800867e:	d109      	bne.n	8008694 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008684:	787a      	ldrb	r2, [r7, #1]
 8008686:	429a      	cmp	r2, r3
 8008688:	d002      	beq.n	8008690 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800868a:	787b      	ldrb	r3, [r7, #1]
 800868c:	2bff      	cmp	r3, #255	@ 0xff
 800868e:	d101      	bne.n	8008694 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	e006      	b.n	80086a2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	3301      	adds	r3, #1
 8008698:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d9d6      	bls.n	800864e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80086a0:	23ff      	movs	r3, #255	@ 0xff
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b082      	sub	sp, #8
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f001 fcf4 	bl	800a0a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80086bc:	2101      	movs	r1, #1
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fe0d 	bl	800a2de <USBH_LL_DriverVBUS>

  return USBH_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2203      	movs	r2, #3
 80086f0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b0b      	cmp	r3, #11
 80086fa:	f200 81bb 	bhi.w	8008a74 <USBH_Process+0x3a4>
 80086fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <USBH_Process+0x34>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008735 	.word	0x08008735
 8008708:	08008767 	.word	0x08008767
 800870c:	080087cf 	.word	0x080087cf
 8008710:	08008a0f 	.word	0x08008a0f
 8008714:	08008a75 	.word	0x08008a75
 8008718:	0800886f 	.word	0x0800886f
 800871c:	080089b5 	.word	0x080089b5
 8008720:	080088a5 	.word	0x080088a5
 8008724:	080088c5 	.word	0x080088c5
 8008728:	080088e3 	.word	0x080088e3
 800872c:	08008927 	.word	0x08008927
 8008730:	080089f7 	.word	0x080089f7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 819b 	beq.w	8008a78 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008748:	20c8      	movs	r0, #200	@ 0xc8
 800874a:	f001 fe12 	bl	800a372 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fd05 	bl	800a15e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008764:	e188      	b.n	8008a78 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800876c:	2b01      	cmp	r3, #1
 800876e:	d107      	bne.n	8008780 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2202      	movs	r2, #2
 800877c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800877e:	e18a      	b.n	8008a96 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800878a:	d914      	bls.n	80087b6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008792:	3301      	adds	r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d903      	bls.n	80087ae <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	220d      	movs	r2, #13
 80087aa:	701a      	strb	r2, [r3, #0]
      break;
 80087ac:	e173      	b.n	8008a96 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
      break;
 80087b4:	e16f      	b.n	8008a96 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80087bc:	f103 020a 	add.w	r2, r3, #10
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80087c6:	200a      	movs	r0, #10
 80087c8:	f001 fdd3 	bl	800a372 <USBH_Delay>
      break;
 80087cc:	e163      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087de:	2104      	movs	r1, #4
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80087e4:	2064      	movs	r0, #100	@ 0x64
 80087e6:	f001 fdc4 	bl	800a372 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 fc90 	bl	800a110 <USBH_LL_GetSpeed>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2205      	movs	r2, #5
 80087fe:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008800:	2100      	movs	r1, #0
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fa9b 	bl	8009d3e <USBH_AllocPipe>
 8008808:	4603      	mov	r3, r0
 800880a:	461a      	mov	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008810:	2180      	movs	r1, #128	@ 0x80
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 fa93 	bl	8009d3e <USBH_AllocPipe>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	7919      	ldrb	r1, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	9201      	str	r2, [sp, #4]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	2280      	movs	r2, #128	@ 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fa4d 	bl	8009ce0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	7959      	ldrb	r1, [r3, #5]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800885a:	9202      	str	r2, [sp, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	9201      	str	r2, [sp, #4]
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	4603      	mov	r3, r0
 8008864:	2200      	movs	r2, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fa3a 	bl	8009ce0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800886c:	e113      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f916 	bl	8008aa0 <USBH_HandleEnum>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 80fd 	bne.w	8008a7c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008890:	2b01      	cmp	r3, #1
 8008892:	d103      	bne.n	800889c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2208      	movs	r2, #8
 8008898:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800889a:	e0ef      	b.n	8008a7c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2207      	movs	r2, #7
 80088a0:	701a      	strb	r2, [r3, #0]
      break;
 80088a2:	e0eb      	b.n	8008a7c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80e8 	beq.w	8008a80 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088b6:	2101      	movs	r1, #1
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2208      	movs	r2, #8
 80088c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80088c2:	e0dd      	b.n	8008a80 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc3a 	bl	8009146 <USBH_SetCfg>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 80d5 	bne.w	8008a84 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2209      	movs	r2, #9
 80088de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088e0:	e0d0      	b.n	8008a84 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d016      	beq.n	800891e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80088f0:	2101      	movs	r1, #1
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc4a 	bl	800918c <USBH_SetFeature>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d103      	bne.n	800890c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	220a      	movs	r2, #10
 8008908:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800890a:	e0bd      	b.n	8008a88 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b03      	cmp	r3, #3
 8008912:	f040 80b9 	bne.w	8008a88 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	220a      	movs	r2, #10
 800891a:	701a      	strb	r2, [r3, #0]
      break;
 800891c:	e0b4      	b.n	8008a88 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	220a      	movs	r2, #10
 8008922:	701a      	strb	r2, [r3, #0]
      break;
 8008924:	e0b0      	b.n	8008a88 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80ad 	beq.w	8008a8c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800893a:	2300      	movs	r3, #0
 800893c:	73fb      	strb	r3, [r7, #15]
 800893e:	e016      	b.n	800896e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008940:	7bfa      	ldrb	r2, [r7, #15]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	32de      	adds	r2, #222	@ 0xde
 8008946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800894a:	791a      	ldrb	r2, [r3, #4]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008952:	429a      	cmp	r2, r3
 8008954:	d108      	bne.n	8008968 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008956:	7bfa      	ldrb	r2, [r7, #15]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	32de      	adds	r2, #222	@ 0xde
 800895c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008966:	e005      	b.n	8008974 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	3301      	adds	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0e5      	beq.n	8008940 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d016      	beq.n	80089ac <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	4798      	blx	r3
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2206      	movs	r2, #6
 8008994:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800899c:	2103      	movs	r1, #3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089a2:	e073      	b.n	8008a8c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	220d      	movs	r2, #13
 80089a8:	701a      	strb	r2, [r3, #0]
      break;
 80089aa:	e06f      	b.n	8008a8c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	220d      	movs	r2, #13
 80089b0:	701a      	strb	r2, [r3, #0]
      break;
 80089b2:	e06b      	b.n	8008a8c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d017      	beq.n	80089ee <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	4798      	blx	r3
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	220b      	movs	r2, #11
 80089da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089dc:	e058      	b.n	8008a90 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d154      	bne.n	8008a90 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	220d      	movs	r2, #13
 80089ea:	701a      	strb	r2, [r3, #0]
      break;
 80089ec:	e050      	b.n	8008a90 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	220d      	movs	r2, #13
 80089f2:	701a      	strb	r2, [r3, #0]
      break;
 80089f4:	e04c      	b.n	8008a90 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d049      	beq.n	8008a94 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	4798      	blx	r3
      }
      break;
 8008a0c:	e042      	b.n	8008a94 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff fd4a 	bl	80084b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d005      	beq.n	8008a50 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a4a:	2105      	movs	r1, #5
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d107      	bne.n	8008a6c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7ff fe22 	bl	80086ae <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a6a:	e014      	b.n	8008a96 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fb19 	bl	800a0a4 <USBH_LL_Start>
      break;
 8008a72:	e010      	b.n	8008a96 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a74:	bf00      	nop
 8008a76:	e00e      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a78:	bf00      	nop
 8008a7a:	e00c      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a7c:	bf00      	nop
 8008a7e:	e00a      	b.n	8008a96 <USBH_Process+0x3c6>
    break;
 8008a80:	bf00      	nop
 8008a82:	e008      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a84:	bf00      	nop
 8008a86:	e006      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e004      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <USBH_Process+0x3c6>
      break;
 8008a94:	bf00      	nop
  }
  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b07      	cmp	r3, #7
 8008ab6:	f200 81bd 	bhi.w	8008e34 <USBH_HandleEnum+0x394>
 8008aba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac0 <USBH_HandleEnum+0x20>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008ae1 	.word	0x08008ae1
 8008ac4:	08008b9b 	.word	0x08008b9b
 8008ac8:	08008c05 	.word	0x08008c05
 8008acc:	08008c8f 	.word	0x08008c8f
 8008ad0:	08008cf9 	.word	0x08008cf9
 8008ad4:	08008d69 	.word	0x08008d69
 8008ad8:	08008daf 	.word	0x08008daf
 8008adc:	08008df5 	.word	0x08008df5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008ae0:	2108      	movs	r1, #8
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa4c 	bl	8008f80 <USBH_Get_DevDesc>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d12e      	bne.n	8008b50 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7919      	ldrb	r1, [r3, #4]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b16:	9202      	str	r2, [sp, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	9201      	str	r2, [sp, #4]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2280      	movs	r2, #128	@ 0x80
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f001 f8dc 	bl	8009ce0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	7959      	ldrb	r1, [r3, #5]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b3c:	9202      	str	r2, [sp, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	9201      	str	r2, [sp, #4]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	4603      	mov	r3, r0
 8008b46:	2200      	movs	r2, #0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f001 f8c9 	bl	8009ce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b4e:	e173      	b.n	8008e38 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	f040 8170 	bne.w	8008e38 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b5e:	3301      	adds	r3, #1
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d903      	bls.n	8008b7a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	220d      	movs	r2, #13
 8008b76:	701a      	strb	r2, [r3, #0]
      break;
 8008b78:	e15e      	b.n	8008e38 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	795b      	ldrb	r3, [r3, #5]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f8fd 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	791b      	ldrb	r3, [r3, #4]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 f8f7 	bl	8009d80 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
      break;
 8008b98:	e14e      	b.n	8008e38 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f9ef 	bl	8008f80 <USBH_Get_DevDesc>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d103      	bne.n	8008bb4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bb2:	e143      	b.n	8008e3c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	f040 8140 	bne.w	8008e3c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d903      	bls.n	8008bde <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	220d      	movs	r2, #13
 8008bda:	701a      	strb	r2, [r3, #0]
      break;
 8008bdc:	e12e      	b.n	8008e3c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	795b      	ldrb	r3, [r3, #5]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f8cb 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	791b      	ldrb	r3, [r3, #4]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 f8c5 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
      break;
 8008c02:	e11b      	b.n	8008e3c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008c04:	2101      	movs	r1, #1
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa79 	bl	80090fe <USBH_SetAddress>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d130      	bne.n	8008c78 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008c16:	2002      	movs	r0, #2
 8008c18:	f001 fbab 	bl	800a372 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2203      	movs	r2, #3
 8008c28:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7919      	ldrb	r1, [r3, #4]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c3e:	9202      	str	r2, [sp, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	9201      	str	r2, [sp, #4]
 8008c44:	9300      	str	r3, [sp, #0]
 8008c46:	4603      	mov	r3, r0
 8008c48:	2280      	movs	r2, #128	@ 0x80
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f001 f848 	bl	8009ce0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	7959      	ldrb	r1, [r3, #5]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c64:	9202      	str	r2, [sp, #8]
 8008c66:	2200      	movs	r2, #0
 8008c68:	9201      	str	r2, [sp, #4]
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2200      	movs	r2, #0
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f835 	bl	8009ce0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c76:	e0e3      	b.n	8008e40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c78:	7bbb      	ldrb	r3, [r7, #14]
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	f040 80e0 	bne.w	8008e40 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	220d      	movs	r2, #13
 8008c84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	705a      	strb	r2, [r3, #1]
      break;
 8008c8c:	e0d8      	b.n	8008e40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c8e:	2109      	movs	r1, #9
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 f9a1 	bl	8008fd8 <USBH_Get_CfgDesc>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ca6:	e0cd      	b.n	8008e44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	f040 80ca 	bne.w	8008e44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d903      	bls.n	8008cd2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	220d      	movs	r2, #13
 8008cce:	701a      	strb	r2, [r3, #0]
      break;
 8008cd0:	e0b8      	b.n	8008e44 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	795b      	ldrb	r3, [r3, #5]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f851 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	791b      	ldrb	r3, [r3, #4]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f84b 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
      break;
 8008cf6:	e0a5      	b.n	8008e44 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f969 	bl	8008fd8 <USBH_Get_CfgDesc>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2205      	movs	r2, #5
 8008d14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d16:	e097      	b.n	8008e48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	f040 8094 	bne.w	8008e48 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d26:	3301      	adds	r3, #1
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d903      	bls.n	8008d42 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	220d      	movs	r2, #13
 8008d3e:	701a      	strb	r2, [r3, #0]
      break;
 8008d40:	e082      	b.n	8008e48 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	795b      	ldrb	r3, [r3, #5]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f819 	bl	8009d80 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	791b      	ldrb	r3, [r3, #4]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f813 	bl	8009d80 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	701a      	strb	r2, [r3, #0]
      break;
 8008d66:	e06f      	b.n	8008e48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d019      	beq.n	8008da6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008d7e:	23ff      	movs	r3, #255	@ 0xff
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f953 	bl	800902c <USBH_Get_StringDesc>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2206      	movs	r2, #6
 8008d94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d96:	e059      	b.n	8008e4c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b03      	cmp	r3, #3
 8008d9c:	d156      	bne.n	8008e4c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2206      	movs	r2, #6
 8008da2:	705a      	strb	r2, [r3, #1]
      break;
 8008da4:	e052      	b.n	8008e4c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2206      	movs	r2, #6
 8008daa:	705a      	strb	r2, [r3, #1]
      break;
 8008dac:	e04e      	b.n	8008e4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d019      	beq.n	8008dec <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008dc4:	23ff      	movs	r3, #255	@ 0xff
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f930 	bl	800902c <USBH_Get_StringDesc>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d103      	bne.n	8008dde <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2207      	movs	r2, #7
 8008dda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ddc:	e038      	b.n	8008e50 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d135      	bne.n	8008e50 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2207      	movs	r2, #7
 8008de8:	705a      	strb	r2, [r3, #1]
      break;
 8008dea:	e031      	b.n	8008e50 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2207      	movs	r2, #7
 8008df0:	705a      	strb	r2, [r3, #1]
      break;
 8008df2:	e02d      	b.n	8008e50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d017      	beq.n	8008e2e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e0a:	23ff      	movs	r3, #255	@ 0xff
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f90d 	bl	800902c <USBH_Get_StringDesc>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008e20:	e018      	b.n	8008e54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d115      	bne.n	8008e54 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2c:	e012      	b.n	8008e54 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
      break;
 8008e32:	e00f      	b.n	8008e54 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008e34:	bf00      	nop
 8008e36:	e00e      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e38:	bf00      	nop
 8008e3a:	e00c      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e3c:	bf00      	nop
 8008e3e:	e00a      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e40:	bf00      	nop
 8008e42:	e008      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e44:	bf00      	nop
 8008e46:	e006      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e48:	bf00      	nop
 8008e4a:	e004      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e4c:	bf00      	nop
 8008e4e:	e002      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e50:	bf00      	nop
 8008e52:	e000      	b.n	8008e56 <USBH_HandleEnum+0x3b6>
      break;
 8008e54:	bf00      	nop
  }
  return Status;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f804 	bl	8008ea2 <USBH_HandleSof>
}
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b0b      	cmp	r3, #11
 8008eb2:	d10a      	bne.n	8008eca <USBH_HandleSof+0x28>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d005      	beq.n	8008eca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
  }
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ee2:	bf00      	nop
}
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008efe:	bf00      	nop
}
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f8be 	bl	800a0da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	791b      	ldrb	r3, [r3, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 ff0b 	bl	8009d80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	795b      	ldrb	r3, [r3, #5]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 ff05 	bl	8009d80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	460b      	mov	r3, r1
 8008f8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008f8c:	887b      	ldrh	r3, [r7, #2]
 8008f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f92:	d901      	bls.n	8008f98 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e01b      	b.n	8008fd0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008f9e:	887b      	ldrh	r3, [r7, #2]
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fa8:	2100      	movs	r1, #0
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f872 	bl	8009094 <USBH_GetDescriptor>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008fc0:	887a      	ldrh	r2, [r7, #2]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f929 	bl	800921c <USBH_ParseDevDesc>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af02      	add	r7, sp, #8
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008fea:	887b      	ldrh	r3, [r7, #2]
 8008fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff0:	d901      	bls.n	8008ff6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e016      	b.n	8009024 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ff6:	887b      	ldrh	r3, [r7, #2]
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f846 	bl	8009094 <USBH_GetDescriptor>
 8009008:	4603      	mov	r3, r0
 800900a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d107      	bne.n	8009022 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9af 	bl	800937c <USBH_ParseCfgDesc>
 800901e:	4603      	mov	r3, r0
 8009020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	461a      	mov	r2, r3
 8009038:	460b      	mov	r3, r1
 800903a:	72fb      	strb	r3, [r7, #11]
 800903c:	4613      	mov	r3, r2
 800903e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009040:	893b      	ldrh	r3, [r7, #8]
 8009042:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009046:	d802      	bhi.n	800904e <USBH_Get_StringDesc+0x22>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d101      	bne.n	8009052 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800904e:	2303      	movs	r3, #3
 8009050:	e01c      	b.n	800908c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	b29b      	uxth	r3, r3
 8009056:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800905a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009062:	893b      	ldrh	r3, [r7, #8]
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	460b      	mov	r3, r1
 8009068:	2100      	movs	r1, #0
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f812 	bl	8009094 <USBH_GetDescriptor>
 8009070:	4603      	mov	r3, r0
 8009072:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009074:	7dfb      	ldrb	r3, [r7, #23]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d107      	bne.n	800908a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009080:	893a      	ldrh	r2, [r7, #8]
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fb8d 	bl	80097a4 <USBH_ParseStringDesc>
  }

  return status;
 800908a:	7dfb      	ldrb	r3, [r7, #23]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	607b      	str	r3, [r7, #4]
 800909e:	460b      	mov	r3, r1
 80090a0:	72fb      	strb	r3, [r7, #11]
 80090a2:	4613      	mov	r3, r2
 80090a4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	789b      	ldrb	r3, [r3, #2]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d11c      	bne.n	80090e8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090b4:	b2da      	uxtb	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2206      	movs	r2, #6
 80090be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	893a      	ldrh	r2, [r7, #8]
 80090c4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80090c6:	893b      	ldrh	r3, [r7, #8]
 80090c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80090cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090d0:	d104      	bne.n	80090dc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f240 4209 	movw	r2, #1033	@ 0x409
 80090d8:	829a      	strh	r2, [r3, #20]
 80090da:	e002      	b.n	80090e2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	8b3a      	ldrh	r2, [r7, #24]
 80090e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090e8:	8b3b      	ldrh	r3, [r7, #24]
 80090ea:	461a      	mov	r2, r3
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fba5 	bl	800983e <USBH_CtlReq>
 80090f4:	4603      	mov	r3, r0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	789b      	ldrb	r3, [r3, #2]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d10f      	bne.n	8009132 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2205      	movs	r2, #5
 800911c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009132:	2200      	movs	r2, #0
 8009134:	2100      	movs	r1, #0
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb81 	bl	800983e <USBH_CtlReq>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b082      	sub	sp, #8
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	460b      	mov	r3, r1
 8009150:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d10e      	bne.n	8009178 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2209      	movs	r2, #9
 8009164:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	887a      	ldrh	r2, [r7, #2]
 800916a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009178:	2200      	movs	r2, #0
 800917a:	2100      	movs	r1, #0
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fb5e 	bl	800983e <USBH_CtlReq>
 8009182:	4603      	mov	r3, r0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d10f      	bne.n	80091c0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2203      	movs	r2, #3
 80091aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80091ac:	78fb      	ldrb	r3, [r7, #3]
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091c0:	2200      	movs	r2, #0
 80091c2:	2100      	movs	r1, #0
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fb3a 	bl	800983e <USBH_CtlReq>
 80091ca:	4603      	mov	r3, r0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d10f      	bne.n	8009208 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fb16 	bl	800983e <USBH_CtlReq>
 8009212:	4603      	mov	r3, r0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009230:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800923c:	2302      	movs	r3, #2
 800923e:	e094      	b.n	800936a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	781a      	ldrb	r2, [r3, #0]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	785a      	ldrb	r2, [r3, #1]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3302      	adds	r3, #2
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	461a      	mov	r2, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	3303      	adds	r3, #3
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	b29b      	uxth	r3, r3
 8009262:	4313      	orrs	r3, r2
 8009264:	b29a      	uxth	r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	791a      	ldrb	r2, [r3, #4]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	795a      	ldrb	r2, [r3, #5]
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	799a      	ldrb	r2, [r3, #6]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	79da      	ldrb	r2, [r3, #7]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800929a:	2b01      	cmp	r3, #1
 800929c:	d11b      	bne.n	80092d6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	79db      	ldrb	r3, [r3, #7]
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	dc0f      	bgt.n	80092c6 <USBH_ParseDevDesc+0xaa>
 80092a6:	2b08      	cmp	r3, #8
 80092a8:	db0f      	blt.n	80092ca <USBH_ParseDevDesc+0xae>
 80092aa:	3b08      	subs	r3, #8
 80092ac:	4a32      	ldr	r2, [pc, #200]	@ (8009378 <USBH_ParseDevDesc+0x15c>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bf14      	ite	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	2300      	moveq	r3, #0
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d106      	bne.n	80092d2 <USBH_ParseDevDesc+0xb6>
 80092c4:	e001      	b.n	80092ca <USBH_ParseDevDesc+0xae>
 80092c6:	2b40      	cmp	r3, #64	@ 0x40
 80092c8:	d003      	beq.n	80092d2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2208      	movs	r2, #8
 80092ce:	71da      	strb	r2, [r3, #7]
        break;
 80092d0:	e000      	b.n	80092d4 <USBH_ParseDevDesc+0xb8>
        break;
 80092d2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80092d4:	e00e      	b.n	80092f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d107      	bne.n	80092f0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	79db      	ldrb	r3, [r3, #7]
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	d005      	beq.n	80092f4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	2208      	movs	r2, #8
 80092ec:	71da      	strb	r2, [r3, #7]
 80092ee:	e001      	b.n	80092f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092f0:	2303      	movs	r3, #3
 80092f2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80092f4:	88fb      	ldrh	r3, [r7, #6]
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d936      	bls.n	8009368 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3308      	adds	r3, #8
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	3309      	adds	r3, #9
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b29b      	uxth	r3, r3
 800930c:	4313      	orrs	r3, r2
 800930e:	b29a      	uxth	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	330a      	adds	r3, #10
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	330b      	adds	r3, #11
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	021b      	lsls	r3, r3, #8
 8009324:	b29b      	uxth	r3, r3
 8009326:	4313      	orrs	r3, r2
 8009328:	b29a      	uxth	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	330c      	adds	r3, #12
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	330d      	adds	r3, #13
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	b29b      	uxth	r3, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	b29a      	uxth	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	7b9a      	ldrb	r2, [r3, #14]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	7bda      	ldrb	r2, [r3, #15]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	7c1a      	ldrb	r2, [r3, #16]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	7c5a      	ldrb	r2, [r3, #17]
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
}
 800936a:	4618      	mov	r0, r3
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	01000101 	.word	0x01000101

0800937c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	@ 0x30
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009390:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009398:	2300      	movs	r3, #0
 800939a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80093aa:	2302      	movs	r3, #2
 80093ac:	e0da      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	d002      	beq.n	80093c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80093ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093bc:	2209      	movs	r2, #9
 80093be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	785a      	ldrb	r2, [r3, #1]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	3302      	adds	r3, #2
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	3303      	adds	r3, #3
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	4313      	orrs	r3, r2
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093ea:	bf28      	it	cs
 80093ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	791a      	ldrb	r2, [r3, #4]
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	795a      	ldrb	r2, [r3, #5]
 8009402:	6a3b      	ldr	r3, [r7, #32]
 8009404:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	799a      	ldrb	r2, [r3, #6]
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	79da      	ldrb	r2, [r3, #7]
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	7a1a      	ldrb	r2, [r3, #8]
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	2b09      	cmp	r3, #9
 8009422:	f240 809d 	bls.w	8009560 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009426:	2309      	movs	r3, #9
 8009428:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800942e:	e081      	b.n	8009534 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009430:	f107 0316 	add.w	r3, r7, #22
 8009434:	4619      	mov	r1, r3
 8009436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009438:	f000 f9e7 	bl	800980a <USBH_GetNextDesc>
 800943c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	785b      	ldrb	r3, [r3, #1]
 8009442:	2b04      	cmp	r3, #4
 8009444:	d176      	bne.n	8009534 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b09      	cmp	r3, #9
 800944c:	d002      	beq.n	8009454 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	2209      	movs	r2, #9
 8009452:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009458:	221a      	movs	r2, #26
 800945a:	fb02 f303 	mul.w	r3, r2, r3
 800945e:	3308      	adds	r3, #8
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	4413      	add	r3, r2
 8009464:	3302      	adds	r3, #2
 8009466:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800946a:	69f8      	ldr	r0, [r7, #28]
 800946c:	f000 f87e 	bl	800956c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009476:	2300      	movs	r3, #0
 8009478:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800947a:	e043      	b.n	8009504 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800947c:	f107 0316 	add.w	r3, r7, #22
 8009480:	4619      	mov	r1, r3
 8009482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009484:	f000 f9c1 	bl	800980a <USBH_GetNextDesc>
 8009488:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b05      	cmp	r3, #5
 8009490:	d138      	bne.n	8009504 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	795b      	ldrb	r3, [r3, #5]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d113      	bne.n	80094c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d003      	beq.n	80094aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	799b      	ldrb	r3, [r3, #6]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d10b      	bne.n	80094c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	79db      	ldrb	r3, [r3, #7]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10b      	bne.n	80094ca <USBH_ParseCfgDesc+0x14e>
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d007      	beq.n	80094ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	2209      	movs	r2, #9
 80094be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094c0:	e003      	b.n	80094ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	2207      	movs	r2, #7
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	e000      	b.n	80094cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80094ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80094cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80094d4:	3201      	adds	r2, #1
 80094d6:	00d2      	lsls	r2, r2, #3
 80094d8:	211a      	movs	r1, #26
 80094da:	fb01 f303 	mul.w	r3, r1, r3
 80094de:	4413      	add	r3, r2
 80094e0:	3308      	adds	r3, #8
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	4413      	add	r3, r2
 80094e6:	3304      	adds	r3, #4
 80094e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 f870 	bl	80095d4 <USBH_ParseEPDesc>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80094fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80094fe:	3301      	adds	r3, #1
 8009500:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	791b      	ldrb	r3, [r3, #4]
 8009508:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800950c:	429a      	cmp	r2, r3
 800950e:	d204      	bcs.n	800951a <USBH_ParseCfgDesc+0x19e>
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	885a      	ldrh	r2, [r3, #2]
 8009514:	8afb      	ldrh	r3, [r7, #22]
 8009516:	429a      	cmp	r2, r3
 8009518:	d8b0      	bhi.n	800947c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	791b      	ldrb	r3, [r3, #4]
 800951e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009522:	429a      	cmp	r2, r3
 8009524:	d201      	bcs.n	800952a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009526:	2303      	movs	r3, #3
 8009528:	e01c      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800952a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800952e:	3301      	adds	r3, #1
 8009530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009538:	2b01      	cmp	r3, #1
 800953a:	d805      	bhi.n	8009548 <USBH_ParseCfgDesc+0x1cc>
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	885a      	ldrh	r2, [r3, #2]
 8009540:	8afb      	ldrh	r3, [r7, #22]
 8009542:	429a      	cmp	r2, r3
 8009544:	f63f af74 	bhi.w	8009430 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	791b      	ldrb	r3, [r3, #4]
 800954c:	2b02      	cmp	r3, #2
 800954e:	bf28      	it	cs
 8009550:	2302      	movcs	r3, #2
 8009552:	b2db      	uxtb	r3, r3
 8009554:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009558:	429a      	cmp	r2, r3
 800955a:	d201      	bcs.n	8009560 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800955c:	2303      	movs	r3, #3
 800955e:	e001      	b.n	8009564 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009560:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009564:	4618      	mov	r0, r3
 8009566:	3730      	adds	r7, #48	@ 0x30
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	785a      	ldrb	r2, [r3, #1]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	789a      	ldrb	r2, [r3, #2]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	78da      	ldrb	r2, [r3, #3]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b02      	cmp	r3, #2
 800959e:	bf28      	it	cs
 80095a0:	2302      	movcs	r3, #2
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	795a      	ldrb	r2, [r3, #5]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	799a      	ldrb	r2, [r3, #6]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	79da      	ldrb	r2, [r3, #7]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	7a1a      	ldrb	r2, [r3, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	721a      	strb	r2, [r3, #8]
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	781a      	ldrb	r2, [r3, #0]
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	785a      	ldrb	r2, [r3, #1]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	789a      	ldrb	r2, [r3, #2]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	78da      	ldrb	r2, [r3, #3]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3305      	adds	r3, #5
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	4313      	orrs	r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	799a      	ldrb	r2, [r3, #6]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	889b      	ldrh	r3, [r3, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009636:	d804      	bhi.n	8009642 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800963c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009640:	d901      	bls.n	8009646 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009642:	2303      	movs	r3, #3
 8009644:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800964c:	2b00      	cmp	r3, #0
 800964e:	d136      	bne.n	80096be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	78db      	ldrb	r3, [r3, #3]
 8009654:	f003 0303 	and.w	r3, r3, #3
 8009658:	2b02      	cmp	r3, #2
 800965a:	d108      	bne.n	800966e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	889b      	ldrh	r3, [r3, #4]
 8009660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009664:	f240 8097 	bls.w	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009668:	2303      	movs	r3, #3
 800966a:	75fb      	strb	r3, [r7, #23]
 800966c:	e093      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	78db      	ldrb	r3, [r3, #3]
 8009672:	f003 0303 	and.w	r3, r3, #3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d107      	bne.n	800968a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	889b      	ldrh	r3, [r3, #4]
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	f240 8089 	bls.w	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
 8009688:	e085      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	78db      	ldrb	r3, [r3, #3]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b01      	cmp	r3, #1
 8009694:	d005      	beq.n	80096a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	78db      	ldrb	r3, [r3, #3]
 800969a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d10a      	bne.n	80096b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	799b      	ldrb	r3, [r3, #6]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <USBH_ParseEPDesc+0xde>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	799b      	ldrb	r3, [r3, #6]
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d970      	bls.n	8009794 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80096b2:	2303      	movs	r3, #3
 80096b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096b6:	e06d      	b.n	8009794 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80096b8:	2303      	movs	r3, #3
 80096ba:	75fb      	strb	r3, [r7, #23]
 80096bc:	e06b      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d13c      	bne.n	8009742 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	78db      	ldrb	r3, [r3, #3]
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	d005      	beq.n	80096e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	78db      	ldrb	r3, [r3, #3]
 80096d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	889b      	ldrh	r3, [r3, #4]
 80096e4:	2b40      	cmp	r3, #64	@ 0x40
 80096e6:	d956      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80096e8:	2303      	movs	r3, #3
 80096ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80096ec:	e053      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	78db      	ldrb	r3, [r3, #3]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10e      	bne.n	8009718 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	799b      	ldrb	r3, [r3, #6]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009706:	2b10      	cmp	r3, #16
 8009708:	d803      	bhi.n	8009712 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800970e:	2b40      	cmp	r3, #64	@ 0x40
 8009710:	d941      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009712:	2303      	movs	r3, #3
 8009714:	75fb      	strb	r3, [r7, #23]
 8009716:	e03e      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	78db      	ldrb	r3, [r3, #3]
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d10b      	bne.n	800973c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	799b      	ldrb	r3, [r3, #6]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <USBH_ParseEPDesc+0x162>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	889b      	ldrh	r3, [r3, #4]
 8009730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009734:	d32f      	bcc.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009736:	2303      	movs	r3, #3
 8009738:	75fb      	strb	r3, [r7, #23]
 800973a:	e02c      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800973c:	2303      	movs	r3, #3
 800973e:	75fb      	strb	r3, [r7, #23]
 8009740:	e029      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009748:	2b02      	cmp	r3, #2
 800974a:	d120      	bne.n	800978e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	78db      	ldrb	r3, [r3, #3]
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	889b      	ldrh	r3, [r3, #4]
 800975c:	2b08      	cmp	r3, #8
 800975e:	d01a      	beq.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009760:	2303      	movs	r3, #3
 8009762:	75fb      	strb	r3, [r7, #23]
 8009764:	e017      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	78db      	ldrb	r3, [r3, #3]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	2b03      	cmp	r3, #3
 8009770:	d10a      	bne.n	8009788 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	799b      	ldrb	r3, [r3, #6]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <USBH_ParseEPDesc+0x1ae>
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	889b      	ldrh	r3, [r3, #4]
 800977e:	2b08      	cmp	r3, #8
 8009780:	d909      	bls.n	8009796 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009782:	2303      	movs	r3, #3
 8009784:	75fb      	strb	r3, [r7, #23]
 8009786:	e006      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009788:	2303      	movs	r3, #3
 800978a:	75fb      	strb	r3, [r7, #23]
 800978c:	e003      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800978e:	2303      	movs	r3, #3
 8009790:	75fb      	strb	r3, [r7, #23]
 8009792:	e000      	b.n	8009796 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009794:	bf00      	nop
  }

  return status;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
}
 8009798:	4618      	mov	r0, r3
 800979a:	371c      	adds	r7, #28
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b087      	sub	sp, #28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3301      	adds	r3, #1
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d120      	bne.n	80097fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	1e9a      	subs	r2, r3, #2
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	4293      	cmp	r3, r2
 80097c6:	bf28      	it	cs
 80097c8:	4613      	movcs	r3, r2
 80097ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3302      	adds	r3, #2
 80097d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80097d2:	2300      	movs	r3, #0
 80097d4:	82fb      	strh	r3, [r7, #22]
 80097d6:	e00b      	b.n	80097f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80097d8:	8afb      	ldrh	r3, [r7, #22]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	4413      	add	r3, r2
 80097de:	781a      	ldrb	r2, [r3, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80097ea:	8afb      	ldrh	r3, [r7, #22]
 80097ec:	3302      	adds	r3, #2
 80097ee:	82fb      	strh	r3, [r7, #22]
 80097f0:	8afa      	ldrh	r2, [r7, #22]
 80097f2:	8abb      	ldrh	r3, [r7, #20]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d3ef      	bcc.n	80097d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
  }
}
 80097fe:	bf00      	nop
 8009800:	371c      	adds	r7, #28
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800980a:	b480      	push	{r7}
 800980c:	b085      	sub	sp, #20
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	4413      	add	r3, r2
 800981e:	b29a      	uxth	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4413      	add	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009830:	68fb      	ldr	r3, [r7, #12]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	60f8      	str	r0, [r7, #12]
 8009846:	60b9      	str	r1, [r7, #8]
 8009848:	4613      	mov	r3, r2
 800984a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800984c:	2301      	movs	r3, #1
 800984e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	789b      	ldrb	r3, [r3, #2]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d002      	beq.n	800985e <USBH_CtlReq+0x20>
 8009858:	2b02      	cmp	r3, #2
 800985a:	d00f      	beq.n	800987c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800985c:	e027      	b.n	80098ae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2202      	movs	r2, #2
 8009874:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009876:	2301      	movs	r3, #1
 8009878:	75fb      	strb	r3, [r7, #23]
      break;
 800987a:	e018      	b.n	80098ae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 f81b 	bl	80098b8 <USBH_HandleControl>
 8009882:	4603      	mov	r3, r0
 8009884:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009886:	7dfb      	ldrb	r3, [r7, #23]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <USBH_CtlReq+0x54>
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	2b03      	cmp	r3, #3
 8009890:	d106      	bne.n	80098a0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2201      	movs	r2, #1
 8009896:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	761a      	strb	r2, [r3, #24]
      break;
 800989e:	e005      	b.n	80098ac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d102      	bne.n	80098ac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	709a      	strb	r2, [r3, #2]
      break;
 80098ac:	bf00      	nop
  }
  return status;
 80098ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3718      	adds	r7, #24
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af02      	add	r7, sp, #8
 80098be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	7e1b      	ldrb	r3, [r3, #24]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	2b0a      	cmp	r3, #10
 80098d0:	f200 8156 	bhi.w	8009b80 <USBH_HandleControl+0x2c8>
 80098d4:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBH_HandleControl+0x24>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	08009909 	.word	0x08009909
 80098e0:	08009923 	.word	0x08009923
 80098e4:	0800998d 	.word	0x0800998d
 80098e8:	080099b3 	.word	0x080099b3
 80098ec:	080099eb 	.word	0x080099eb
 80098f0:	08009a15 	.word	0x08009a15
 80098f4:	08009a67 	.word	0x08009a67
 80098f8:	08009a89 	.word	0x08009a89
 80098fc:	08009ac5 	.word	0x08009ac5
 8009900:	08009aeb 	.word	0x08009aeb
 8009904:	08009b29 	.word	0x08009b29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f103 0110 	add.w	r1, r3, #16
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	795b      	ldrb	r3, [r3, #5]
 8009912:	461a      	mov	r2, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f943 	bl	8009ba0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	761a      	strb	r2, [r3, #24]
      break;
 8009920:	e139      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	795b      	ldrb	r3, [r3, #5]
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fcc5 	bl	800a2b8 <USBH_LL_GetURBState>
 800992e:	4603      	mov	r3, r0
 8009930:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d11e      	bne.n	8009976 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7c1b      	ldrb	r3, [r3, #16]
 800993c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009940:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	8adb      	ldrh	r3, [r3, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00a      	beq.n	8009960 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800994a:	7b7b      	ldrb	r3, [r7, #13]
 800994c:	2b80      	cmp	r3, #128	@ 0x80
 800994e:	d103      	bne.n	8009958 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2203      	movs	r2, #3
 8009954:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009956:	e115      	b.n	8009b84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2205      	movs	r2, #5
 800995c:	761a      	strb	r2, [r3, #24]
      break;
 800995e:	e111      	b.n	8009b84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009960:	7b7b      	ldrb	r3, [r7, #13]
 8009962:	2b80      	cmp	r3, #128	@ 0x80
 8009964:	d103      	bne.n	800996e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2209      	movs	r2, #9
 800996a:	761a      	strb	r2, [r3, #24]
      break;
 800996c:	e10a      	b.n	8009b84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2207      	movs	r2, #7
 8009972:	761a      	strb	r2, [r3, #24]
      break;
 8009974:	e106      	b.n	8009b84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d003      	beq.n	8009984 <USBH_HandleControl+0xcc>
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	2b02      	cmp	r3, #2
 8009980:	f040 8100 	bne.w	8009b84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	220b      	movs	r2, #11
 8009988:	761a      	strb	r2, [r3, #24]
      break;
 800998a:	e0fb      	b.n	8009b84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6899      	ldr	r1, [r3, #8]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	899a      	ldrh	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	791b      	ldrb	r3, [r3, #4]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f93a 	bl	8009c1e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2204      	movs	r2, #4
 80099ae:	761a      	strb	r2, [r3, #24]
      break;
 80099b0:	e0f1      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	791b      	ldrb	r3, [r3, #4]
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc7d 	bl	800a2b8 <USBH_LL_GetURBState>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d102      	bne.n	80099ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2209      	movs	r2, #9
 80099cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	d102      	bne.n	80099da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80099d4:	2303      	movs	r3, #3
 80099d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099d8:	e0d6      	b.n	8009b88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b04      	cmp	r3, #4
 80099de:	f040 80d3 	bne.w	8009b88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	220b      	movs	r2, #11
 80099e6:	761a      	strb	r2, [r3, #24]
      break;
 80099e8:	e0ce      	b.n	8009b88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6899      	ldr	r1, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	899a      	ldrh	r2, [r3, #12]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	795b      	ldrb	r3, [r3, #5]
 80099f6:	2001      	movs	r0, #1
 80099f8:	9000      	str	r0, [sp, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f8ea 	bl	8009bd4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2206      	movs	r2, #6
 8009a10:	761a      	strb	r2, [r3, #24]
      break;
 8009a12:	e0c0      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	795b      	ldrb	r3, [r3, #5]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc4c 	bl	800a2b8 <USBH_LL_GetURBState>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d103      	bne.n	8009a32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2207      	movs	r2, #7
 8009a2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a30:	e0ac      	b.n	8009b8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009a32:	7bbb      	ldrb	r3, [r7, #14]
 8009a34:	2b05      	cmp	r3, #5
 8009a36:	d105      	bne.n	8009a44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	220c      	movs	r2, #12
 8009a3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	73fb      	strb	r3, [r7, #15]
      break;
 8009a42:	e0a3      	b.n	8009b8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d103      	bne.n	8009a52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2205      	movs	r2, #5
 8009a4e:	761a      	strb	r2, [r3, #24]
      break;
 8009a50:	e09c      	b.n	8009b8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009a52:	7bbb      	ldrb	r3, [r7, #14]
 8009a54:	2b04      	cmp	r3, #4
 8009a56:	f040 8099 	bne.w	8009b8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	220b      	movs	r2, #11
 8009a5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009a60:	2302      	movs	r3, #2
 8009a62:	73fb      	strb	r3, [r7, #15]
      break;
 8009a64:	e092      	b.n	8009b8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	791b      	ldrb	r3, [r3, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f8d5 	bl	8009c1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2208      	movs	r2, #8
 8009a84:	761a      	strb	r2, [r3, #24]

      break;
 8009a86:	e086      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	791b      	ldrb	r3, [r3, #4]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fc12 	bl	800a2b8 <USBH_LL_GetURBState>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d105      	bne.n	8009aaa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	220d      	movs	r2, #13
 8009aa2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009aa8:	e072      	b.n	8009b90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009aaa:	7bbb      	ldrb	r3, [r7, #14]
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d103      	bne.n	8009ab8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	220b      	movs	r2, #11
 8009ab4:	761a      	strb	r2, [r3, #24]
      break;
 8009ab6:	e06b      	b.n	8009b90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	2b05      	cmp	r3, #5
 8009abc:	d168      	bne.n	8009b90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ac2:	e065      	b.n	8009b90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	795b      	ldrb	r3, [r3, #5]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	9200      	str	r2, [sp, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	2100      	movs	r1, #0
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f87f 	bl	8009bd4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	761a      	strb	r2, [r3, #24]
      break;
 8009ae8:	e055      	b.n	8009b96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	795b      	ldrb	r3, [r3, #5]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fbe1 	bl	800a2b8 <USBH_LL_GetURBState>
 8009af6:	4603      	mov	r3, r0
 8009af8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009afa:	7bbb      	ldrb	r3, [r7, #14]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d105      	bne.n	8009b0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	220d      	movs	r2, #13
 8009b08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b0a:	e043      	b.n	8009b94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d103      	bne.n	8009b1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2209      	movs	r2, #9
 8009b16:	761a      	strb	r2, [r3, #24]
      break;
 8009b18:	e03c      	b.n	8009b94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d139      	bne.n	8009b94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	220b      	movs	r2, #11
 8009b24:	761a      	strb	r2, [r3, #24]
      break;
 8009b26:	e035      	b.n	8009b94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7e5b      	ldrb	r3, [r3, #25]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	765a      	strb	r2, [r3, #25]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7e5b      	ldrb	r3, [r3, #25]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d806      	bhi.n	8009b4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009b48:	e025      	b.n	8009b96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b50:	2106      	movs	r1, #6
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	795b      	ldrb	r3, [r3, #5]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f90c 	bl	8009d80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	791b      	ldrb	r3, [r3, #4]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f906 	bl	8009d80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b7e:	e00a      	b.n	8009b96 <USBH_HandleControl+0x2de>

    default:
      break;
 8009b80:	bf00      	nop
 8009b82:	e008      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b84:	bf00      	nop
 8009b86:	e006      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b88:	bf00      	nop
 8009b8a:	e004      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e002      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b90:	bf00      	nop
 8009b92:	e000      	b.n	8009b96 <USBH_HandleControl+0x2de>
      break;
 8009b94:	bf00      	nop
  }

  return status;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af04      	add	r7, sp, #16
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bae:	79f9      	ldrb	r1, [r7, #7]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9303      	str	r3, [sp, #12]
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	9302      	str	r3, [sp, #8]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fb46 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af04      	add	r7, sp, #16
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	4611      	mov	r1, r2
 8009be0:	461a      	mov	r2, r3
 8009be2:	460b      	mov	r3, r1
 8009be4:	80fb      	strh	r3, [r7, #6]
 8009be6:	4613      	mov	r3, r2
 8009be8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bf8:	7979      	ldrb	r1, [r7, #5]
 8009bfa:	7e3b      	ldrb	r3, [r7, #24]
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	2301      	movs	r3, #1
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 fb21 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af04      	add	r7, sp, #16
 8009c24:	60f8      	str	r0, [r7, #12]
 8009c26:	60b9      	str	r1, [r7, #8]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	80fb      	strh	r3, [r7, #6]
 8009c30:	4613      	mov	r3, r2
 8009c32:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c34:	7979      	ldrb	r1, [r7, #5]
 8009c36:	2300      	movs	r3, #0
 8009c38:	9303      	str	r3, [sp, #12]
 8009c3a:	88fb      	ldrh	r3, [r7, #6]
 8009c3c:	9302      	str	r3, [sp, #8]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	2300      	movs	r3, #0
 8009c48:	2201      	movs	r2, #1
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fb03 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c50:	2300      	movs	r3, #0

}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b088      	sub	sp, #32
 8009c5e:	af04      	add	r7, sp, #16
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	4611      	mov	r1, r2
 8009c66:	461a      	mov	r2, r3
 8009c68:	460b      	mov	r3, r1
 8009c6a:	80fb      	strh	r3, [r7, #6]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c7e:	7979      	ldrb	r1, [r7, #5]
 8009c80:	7e3b      	ldrb	r3, [r7, #24]
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	88fb      	ldrh	r3, [r7, #6]
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	2302      	movs	r3, #2
 8009c92:	2200      	movs	r2, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fade 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	80fb      	strh	r3, [r7, #6]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cba:	7979      	ldrb	r1, [r7, #5]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9303      	str	r3, [sp, #12]
 8009cc0:	88fb      	ldrh	r3, [r7, #6]
 8009cc2:	9302      	str	r3, [sp, #8]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	2301      	movs	r3, #1
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2302      	movs	r3, #2
 8009cce:	2201      	movs	r2, #1
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 fac0 	bl	800a256 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af04      	add	r7, sp, #16
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	4608      	mov	r0, r1
 8009cea:	4611      	mov	r1, r2
 8009cec:	461a      	mov	r2, r3
 8009cee:	4603      	mov	r3, r0
 8009cf0:	70fb      	strb	r3, [r7, #3]
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	70bb      	strb	r3, [r7, #2]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009cfa:	7878      	ldrb	r0, [r7, #1]
 8009cfc:	78ba      	ldrb	r2, [r7, #2]
 8009cfe:	78f9      	ldrb	r1, [r7, #3]
 8009d00:	8b3b      	ldrh	r3, [r7, #24]
 8009d02:	9302      	str	r3, [sp, #8]
 8009d04:	7d3b      	ldrb	r3, [r7, #20]
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	7c3b      	ldrb	r3, [r7, #16]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fa53 	bl	800a1ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009d2a:	78fb      	ldrb	r3, [r7, #3]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fa72 	bl	800a218 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	460b      	mov	r3, r1
 8009d48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f836 	bl	8009dbc <USBH_GetFreePipe>
 8009d50:	4603      	mov	r3, r0
 8009d52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009d54:	89fb      	ldrh	r3, [r7, #14]
 8009d56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00a      	beq.n	8009d74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009d5e:	78fa      	ldrb	r2, [r7, #3]
 8009d60:	89fb      	ldrh	r3, [r7, #14]
 8009d62:	f003 030f 	and.w	r3, r3, #15
 8009d66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	33e0      	adds	r3, #224	@ 0xe0
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009d74:	89fb      	ldrh	r3, [r7, #14]
 8009d76:	b2db      	uxtb	r3, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009d8c:	78fb      	ldrb	r3, [r7, #3]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d80d      	bhi.n	8009dae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	33e0      	adds	r3, #224	@ 0xe0
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	33e0      	adds	r3, #224	@ 0xe0
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	440b      	add	r3, r1
 8009dac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009dc8:	2300      	movs	r3, #0
 8009dca:	73fb      	strb	r3, [r7, #15]
 8009dcc:	e00f      	b.n	8009dee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	33e0      	adds	r3, #224	@ 0xe0
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d102      	bne.n	8009de8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	e007      	b.n	8009df8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	3301      	adds	r3, #1
 8009dec:	73fb      	strb	r3, [r7, #15]
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b0f      	cmp	r3, #15
 8009df2:	d9ec      	bls.n	8009dce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009df4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	490e      	ldr	r1, [pc, #56]	@ (8009e44 <MX_USB_HOST_Init+0x40>)
 8009e0c:	480e      	ldr	r0, [pc, #56]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e0e:	f7fe fb15 	bl	800843c <USBH_Init>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009e18:	f7f7 fc04 	bl	8001624 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009e1c:	490b      	ldr	r1, [pc, #44]	@ (8009e4c <MX_USB_HOST_Init+0x48>)
 8009e1e:	480a      	ldr	r0, [pc, #40]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e20:	f7fe fbb9 	bl	8008596 <USBH_RegisterClass>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009e2a:	f7f7 fbfb 	bl	8001624 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009e2e:	4806      	ldr	r0, [pc, #24]	@ (8009e48 <MX_USB_HOST_Init+0x44>)
 8009e30:	f7fe fc3d 	bl	80086ae <USBH_Start>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009e3a:	f7f7 fbf3 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009e3e:	bf00      	nop
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	08009e65 	.word	0x08009e65
 8009e48:	20000354 	.word	0x20000354
 8009e4c:	20000010 	.word	0x20000010

08009e50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009e54:	4802      	ldr	r0, [pc, #8]	@ (8009e60 <MX_USB_HOST_Process+0x10>)
 8009e56:	f7fe fc3b 	bl	80086d0 <USBH_Process>
}
 8009e5a:	bf00      	nop
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	20000354 	.word	0x20000354

08009e64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d819      	bhi.n	8009eac <USBH_UserProcess+0x48>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <USBH_UserProcess+0x1c>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009e9d 	.word	0x08009e9d
 8009e88:	08009ead 	.word	0x08009ead
 8009e8c:	08009ea5 	.word	0x08009ea5
 8009e90:	08009e95 	.word	0x08009e95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009e94:	4b09      	ldr	r3, [pc, #36]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009e96:	2203      	movs	r2, #3
 8009e98:	701a      	strb	r2, [r3, #0]
  break;
 8009e9a:	e008      	b.n	8009eae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009e9c:	4b07      	ldr	r3, [pc, #28]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
  break;
 8009ea2:	e004      	b.n	8009eae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ea4:	4b05      	ldr	r3, [pc, #20]	@ (8009ebc <USBH_UserProcess+0x58>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	701a      	strb	r2, [r3, #0]
  break;
 8009eaa:	e000      	b.n	8009eae <USBH_UserProcess+0x4a>

  default:
  break;
 8009eac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	2000072c 	.word	0x2000072c

08009ec0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b08a      	sub	sp, #40	@ 0x28
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ec8:	f107 0314 	add.w	r3, r7, #20
 8009ecc:	2200      	movs	r2, #0
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	605a      	str	r2, [r3, #4]
 8009ed2:	609a      	str	r2, [r3, #8]
 8009ed4:	60da      	str	r2, [r3, #12]
 8009ed6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ee0:	d147      	bne.n	8009f72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	613b      	str	r3, [r7, #16]
 8009ee6:	4b25      	ldr	r3, [pc, #148]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eea:	4a24      	ldr	r2, [pc, #144]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009eec:	f043 0301 	orr.w	r3, r3, #1
 8009ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ef2:	4b22      	ldr	r3, [pc, #136]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	613b      	str	r3, [r7, #16]
 8009efc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009efe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f04:	2300      	movs	r3, #0
 8009f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009f0c:	f107 0314 	add.w	r3, r7, #20
 8009f10:	4619      	mov	r1, r3
 8009f12:	481b      	ldr	r0, [pc, #108]	@ (8009f80 <HAL_HCD_MspInit+0xc0>)
 8009f14:	f7f8 fa90 	bl	8002438 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009f18:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f26:	2300      	movs	r3, #0
 8009f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009f2a:	230a      	movs	r3, #10
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f2e:	f107 0314 	add.w	r3, r7, #20
 8009f32:	4619      	mov	r1, r3
 8009f34:	4812      	ldr	r0, [pc, #72]	@ (8009f80 <HAL_HCD_MspInit+0xc0>)
 8009f36:	f7f8 fa7f 	bl	8002438 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f3a:	4b10      	ldr	r3, [pc, #64]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f44:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
 8009f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4e:	4a0b      	ldr	r2, [pc, #44]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <HAL_HCD_MspInit+0xbc>)
 8009f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f62:	2200      	movs	r2, #0
 8009f64:	2100      	movs	r1, #0
 8009f66:	2043      	movs	r0, #67	@ 0x43
 8009f68:	f7f7 febf 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f6c:	2043      	movs	r0, #67	@ 0x43
 8009f6e:	f7f7 fed8 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f72:	bf00      	nop
 8009f74:	3728      	adds	r7, #40	@ 0x28
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	40023800 	.word	0x40023800
 8009f80:	40020000 	.word	0x40020000

08009f84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fe ff73 	bl	8008e7e <USBH_LL_IncTimer>
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe ffab 	bl	8008f0a <USBH_LL_Connect>
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe ffb4 	bl	8008f38 <USBH_LL_Disconnect>
}
 8009fd0:	bf00      	nop
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	70fb      	strb	r3, [r7, #3]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a002:	4618      	mov	r0, r3
 800a004:	f7fe ff65 	bl	8008ed2 <USBH_LL_PortEnabled>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe ff65 	bl	8008eee <USBH_LL_PortDisabled>
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d12a      	bne.n	800a094 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a03e:	4a18      	ldr	r2, [pc, #96]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a15      	ldr	r2, [pc, #84]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a04a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a04e:	4b14      	ldr	r3, [pc, #80]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a050:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a054:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a056:	4b12      	ldr	r3, [pc, #72]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a058:	2208      	movs	r2, #8
 800a05a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a05c:	4b10      	ldr	r3, [pc, #64]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a05e:	2201      	movs	r2, #1
 800a060:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a062:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a064:	2200      	movs	r2, #0
 800a066:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a068:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a06a:	2202      	movs	r2, #2
 800a06c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a06e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a070:	2200      	movs	r2, #0
 800a072:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a074:	480a      	ldr	r0, [pc, #40]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a076:	f7f8 fb94 	bl	80027a2 <HAL_HCD_Init>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a080:	f7f7 fad0 	bl	8001624 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a084:	4806      	ldr	r0, [pc, #24]	@ (800a0a0 <USBH_LL_Init+0x74>)
 800a086:	f7f8 fff5 	bl	8003074 <HAL_HCD_GetCurrentFrame>
 800a08a:	4603      	mov	r3, r0
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7fe fee6 	bl	8008e60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	20000730 	.word	0x20000730

0800a0a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f8 ff62 	bl	8002f84 <HAL_HCD_Start>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 f95e 	bl	800a388 <USBH_Get_USB_Status>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7f8 ff6a 	bl	8002fca <HAL_HCD_Stop>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 f943 	bl	800a388 <USBH_Get_USB_Status>
 800a102:	4603      	mov	r3, r0
 800a104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a106:	7bbb      	ldrb	r3, [r7, #14]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a122:	4618      	mov	r0, r3
 800a124:	f7f8 ffb4 	bl	8003090 <HAL_HCD_GetCurrentSpeed>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d00c      	beq.n	800a148 <USBH_LL_GetSpeed+0x38>
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d80d      	bhi.n	800a14e <USBH_LL_GetSpeed+0x3e>
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <USBH_LL_GetSpeed+0x2c>
 800a136:	2b01      	cmp	r3, #1
 800a138:	d003      	beq.n	800a142 <USBH_LL_GetSpeed+0x32>
 800a13a:	e008      	b.n	800a14e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
    break;
 800a140:	e008      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a142:	2301      	movs	r3, #1
 800a144:	73fb      	strb	r3, [r7, #15]
    break;
 800a146:	e005      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a148:	2302      	movs	r3, #2
 800a14a:	73fb      	strb	r3, [r7, #15]
    break;
 800a14c:	e002      	b.n	800a154 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]
    break;
 800a152:	bf00      	nop
  }
  return  speed;
 800a154:	7bfb      	ldrb	r3, [r7, #15]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3710      	adds	r7, #16
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a174:	4618      	mov	r0, r3
 800a176:	f7f8 ff45 	bl	8003004 <HAL_HCD_ResetPort>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	4618      	mov	r0, r3
 800a182:	f000 f901 	bl	800a388 <USBH_Get_USB_Status>
 800a186:	4603      	mov	r3, r0
 800a188:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a18a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	460b      	mov	r3, r1
 800a19e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1a6:	78fa      	ldrb	r2, [r7, #3]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f8 ff4d 	bl	800304a <HAL_HCD_HC_GetXferCount>
 800a1b0:	4603      	mov	r3, r0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1ba:	b590      	push	{r4, r7, lr}
 800a1bc:	b089      	sub	sp, #36	@ 0x24
 800a1be:	af04      	add	r7, sp, #16
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	4608      	mov	r0, r1
 800a1c4:	4611      	mov	r1, r2
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	70fb      	strb	r3, [r7, #3]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70bb      	strb	r3, [r7, #2]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a1e2:	787c      	ldrb	r4, [r7, #1]
 800a1e4:	78ba      	ldrb	r2, [r7, #2]
 800a1e6:	78f9      	ldrb	r1, [r7, #3]
 800a1e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	f7f8 fb39 	bl	8002870 <HAL_HCD_HC_Init>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f8bf 	bl	800a388 <USBH_Get_USB_Status>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	bd90      	pop	{r4, r7, pc}

0800a218 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7f8 fbd2 	bl	80029e0 <HAL_HCD_HC_Halt>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f8a0 	bl	800a388 <USBH_Get_USB_Status>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a256:	b590      	push	{r4, r7, lr}
 800a258:	b089      	sub	sp, #36	@ 0x24
 800a25a:	af04      	add	r7, sp, #16
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	4608      	mov	r0, r1
 800a260:	4611      	mov	r1, r2
 800a262:	461a      	mov	r2, r3
 800a264:	4603      	mov	r3, r0
 800a266:	70fb      	strb	r3, [r7, #3]
 800a268:	460b      	mov	r3, r1
 800a26a:	70bb      	strb	r3, [r7, #2]
 800a26c:	4613      	mov	r3, r2
 800a26e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a27e:	787c      	ldrb	r4, [r7, #1]
 800a280:	78ba      	ldrb	r2, [r7, #2]
 800a282:	78f9      	ldrb	r1, [r7, #3]
 800a284:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a28c:	9302      	str	r3, [sp, #8]
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a296:	9300      	str	r3, [sp, #0]
 800a298:	4623      	mov	r3, r4
 800a29a:	f7f8 fbc5 	bl	8002a28 <HAL_HCD_HC_SubmitRequest>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 f86f 	bl	800a388 <USBH_Get_USB_Status>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd90      	pop	{r4, r7, pc}

0800a2b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2ca:	78fa      	ldrb	r2, [r7, #3]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7f8 fea6 	bl	8003020 <HAL_HCD_HC_GetURBState>
 800a2d4:	4603      	mov	r3, r0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d103      	bne.n	800a2fc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a2f4:	78fb      	ldrb	r3, [r7, #3]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f872 	bl	800a3e0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a2fc:	20c8      	movs	r0, #200	@ 0xc8
 800a2fe:	f7f7 fbf5 	bl	8001aec <HAL_Delay>
  return USBH_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
 800a318:	4613      	mov	r3, r2
 800a31a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a322:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a324:	78fa      	ldrb	r2, [r7, #3]
 800a326:	68f9      	ldr	r1, [r7, #12]
 800a328:	4613      	mov	r3, r2
 800a32a:	011b      	lsls	r3, r3, #4
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	3317      	adds	r3, #23
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a33a:	78fa      	ldrb	r2, [r7, #3]
 800a33c:	68f9      	ldr	r1, [r7, #12]
 800a33e:	4613      	mov	r3, r2
 800a340:	011b      	lsls	r3, r3, #4
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	440b      	add	r3, r1
 800a348:	333c      	adds	r3, #60	@ 0x3c
 800a34a:	78ba      	ldrb	r2, [r7, #2]
 800a34c:	701a      	strb	r2, [r3, #0]
 800a34e:	e009      	b.n	800a364 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a350:	78fa      	ldrb	r2, [r7, #3]
 800a352:	68f9      	ldr	r1, [r7, #12]
 800a354:	4613      	mov	r3, r2
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	440b      	add	r3, r1
 800a35e:	333d      	adds	r3, #61	@ 0x3d
 800a360:	78ba      	ldrb	r2, [r7, #2]
 800a362:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7f7 fbb6 	bl	8001aec <HAL_Delay>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d817      	bhi.n	800a3cc <USBH_Get_USB_Status+0x44>
 800a39c:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a4 <USBH_Get_USB_Status+0x1c>)
 800a39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a2:	bf00      	nop
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3bb 	.word	0x0800a3bb
 800a3ac:	0800a3c1 	.word	0x0800a3c1
 800a3b0:	0800a3c7 	.word	0x0800a3c7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b8:	e00b      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a3be:	e008      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c4:	e005      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3ca:	e002      	b.n	800a3d2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a3d0:	bf00      	nop
  }
  return usb_status;
 800a3d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d102      	bne.n	800a3fa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	73fb      	strb	r3, [r7, #15]
 800a3f8:	e001      	b.n	800a3fe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a3fe:	7bfb      	ldrb	r3, [r7, #15]
 800a400:	461a      	mov	r2, r3
 800a402:	2101      	movs	r1, #1
 800a404:	4803      	ldr	r0, [pc, #12]	@ (800a414 <MX_DriverVbusFS+0x34>)
 800a406:	f7f8 f9b3 	bl	8002770 <HAL_GPIO_WritePin>
}
 800a40a:	bf00      	nop
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	40020800 	.word	0x40020800

0800a418 <malloc>:
 800a418:	4b02      	ldr	r3, [pc, #8]	@ (800a424 <malloc+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f000 b82d 	b.w	800a47c <_malloc_r>
 800a422:	bf00      	nop
 800a424:	20000030 	.word	0x20000030

0800a428 <free>:
 800a428:	4b02      	ldr	r3, [pc, #8]	@ (800a434 <free+0xc>)
 800a42a:	4601      	mov	r1, r0
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	f000 b8f5 	b.w	800a61c <_free_r>
 800a432:	bf00      	nop
 800a434:	20000030 	.word	0x20000030

0800a438 <sbrk_aligned>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	4e0f      	ldr	r6, [pc, #60]	@ (800a478 <sbrk_aligned+0x40>)
 800a43c:	460c      	mov	r4, r1
 800a43e:	6831      	ldr	r1, [r6, #0]
 800a440:	4605      	mov	r5, r0
 800a442:	b911      	cbnz	r1, 800a44a <sbrk_aligned+0x12>
 800a444:	f000 f8ae 	bl	800a5a4 <_sbrk_r>
 800a448:	6030      	str	r0, [r6, #0]
 800a44a:	4621      	mov	r1, r4
 800a44c:	4628      	mov	r0, r5
 800a44e:	f000 f8a9 	bl	800a5a4 <_sbrk_r>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d103      	bne.n	800a45e <sbrk_aligned+0x26>
 800a456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a45a:	4620      	mov	r0, r4
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	1cc4      	adds	r4, r0, #3
 800a460:	f024 0403 	bic.w	r4, r4, #3
 800a464:	42a0      	cmp	r0, r4
 800a466:	d0f8      	beq.n	800a45a <sbrk_aligned+0x22>
 800a468:	1a21      	subs	r1, r4, r0
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 f89a 	bl	800a5a4 <_sbrk_r>
 800a470:	3001      	adds	r0, #1
 800a472:	d1f2      	bne.n	800a45a <sbrk_aligned+0x22>
 800a474:	e7ef      	b.n	800a456 <sbrk_aligned+0x1e>
 800a476:	bf00      	nop
 800a478:	20000b10 	.word	0x20000b10

0800a47c <_malloc_r>:
 800a47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a480:	1ccd      	adds	r5, r1, #3
 800a482:	f025 0503 	bic.w	r5, r5, #3
 800a486:	3508      	adds	r5, #8
 800a488:	2d0c      	cmp	r5, #12
 800a48a:	bf38      	it	cc
 800a48c:	250c      	movcc	r5, #12
 800a48e:	2d00      	cmp	r5, #0
 800a490:	4606      	mov	r6, r0
 800a492:	db01      	blt.n	800a498 <_malloc_r+0x1c>
 800a494:	42a9      	cmp	r1, r5
 800a496:	d904      	bls.n	800a4a2 <_malloc_r+0x26>
 800a498:	230c      	movs	r3, #12
 800a49a:	6033      	str	r3, [r6, #0]
 800a49c:	2000      	movs	r0, #0
 800a49e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a578 <_malloc_r+0xfc>
 800a4a6:	f000 f869 	bl	800a57c <__malloc_lock>
 800a4aa:	f8d8 3000 	ldr.w	r3, [r8]
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	bb44      	cbnz	r4, 800a504 <_malloc_r+0x88>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff ffbf 	bl	800a438 <sbrk_aligned>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	4604      	mov	r4, r0
 800a4be:	d158      	bne.n	800a572 <_malloc_r+0xf6>
 800a4c0:	f8d8 4000 	ldr.w	r4, [r8]
 800a4c4:	4627      	mov	r7, r4
 800a4c6:	2f00      	cmp	r7, #0
 800a4c8:	d143      	bne.n	800a552 <_malloc_r+0xd6>
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d04b      	beq.n	800a566 <_malloc_r+0xea>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	eb04 0903 	add.w	r9, r4, r3
 800a4d8:	f000 f864 	bl	800a5a4 <_sbrk_r>
 800a4dc:	4581      	cmp	r9, r0
 800a4de:	d142      	bne.n	800a566 <_malloc_r+0xea>
 800a4e0:	6821      	ldr	r1, [r4, #0]
 800a4e2:	1a6d      	subs	r5, r5, r1
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	f7ff ffa6 	bl	800a438 <sbrk_aligned>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d03a      	beq.n	800a566 <_malloc_r+0xea>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	442b      	add	r3, r5
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	bb62      	cbnz	r2, 800a558 <_malloc_r+0xdc>
 800a4fe:	f8c8 7000 	str.w	r7, [r8]
 800a502:	e00f      	b.n	800a524 <_malloc_r+0xa8>
 800a504:	6822      	ldr	r2, [r4, #0]
 800a506:	1b52      	subs	r2, r2, r5
 800a508:	d420      	bmi.n	800a54c <_malloc_r+0xd0>
 800a50a:	2a0b      	cmp	r2, #11
 800a50c:	d917      	bls.n	800a53e <_malloc_r+0xc2>
 800a50e:	1961      	adds	r1, r4, r5
 800a510:	42a3      	cmp	r3, r4
 800a512:	6025      	str	r5, [r4, #0]
 800a514:	bf18      	it	ne
 800a516:	6059      	strne	r1, [r3, #4]
 800a518:	6863      	ldr	r3, [r4, #4]
 800a51a:	bf08      	it	eq
 800a51c:	f8c8 1000 	streq.w	r1, [r8]
 800a520:	5162      	str	r2, [r4, r5]
 800a522:	604b      	str	r3, [r1, #4]
 800a524:	4630      	mov	r0, r6
 800a526:	f000 f82f 	bl	800a588 <__malloc_unlock>
 800a52a:	f104 000b 	add.w	r0, r4, #11
 800a52e:	1d23      	adds	r3, r4, #4
 800a530:	f020 0007 	bic.w	r0, r0, #7
 800a534:	1ac2      	subs	r2, r0, r3
 800a536:	bf1c      	itt	ne
 800a538:	1a1b      	subne	r3, r3, r0
 800a53a:	50a3      	strne	r3, [r4, r2]
 800a53c:	e7af      	b.n	800a49e <_malloc_r+0x22>
 800a53e:	6862      	ldr	r2, [r4, #4]
 800a540:	42a3      	cmp	r3, r4
 800a542:	bf0c      	ite	eq
 800a544:	f8c8 2000 	streq.w	r2, [r8]
 800a548:	605a      	strne	r2, [r3, #4]
 800a54a:	e7eb      	b.n	800a524 <_malloc_r+0xa8>
 800a54c:	4623      	mov	r3, r4
 800a54e:	6864      	ldr	r4, [r4, #4]
 800a550:	e7ae      	b.n	800a4b0 <_malloc_r+0x34>
 800a552:	463c      	mov	r4, r7
 800a554:	687f      	ldr	r7, [r7, #4]
 800a556:	e7b6      	b.n	800a4c6 <_malloc_r+0x4a>
 800a558:	461a      	mov	r2, r3
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	42a3      	cmp	r3, r4
 800a55e:	d1fb      	bne.n	800a558 <_malloc_r+0xdc>
 800a560:	2300      	movs	r3, #0
 800a562:	6053      	str	r3, [r2, #4]
 800a564:	e7de      	b.n	800a524 <_malloc_r+0xa8>
 800a566:	230c      	movs	r3, #12
 800a568:	6033      	str	r3, [r6, #0]
 800a56a:	4630      	mov	r0, r6
 800a56c:	f000 f80c 	bl	800a588 <__malloc_unlock>
 800a570:	e794      	b.n	800a49c <_malloc_r+0x20>
 800a572:	6005      	str	r5, [r0, #0]
 800a574:	e7d6      	b.n	800a524 <_malloc_r+0xa8>
 800a576:	bf00      	nop
 800a578:	20000b14 	.word	0x20000b14

0800a57c <__malloc_lock>:
 800a57c:	4801      	ldr	r0, [pc, #4]	@ (800a584 <__malloc_lock+0x8>)
 800a57e:	f000 b84b 	b.w	800a618 <__retarget_lock_acquire_recursive>
 800a582:	bf00      	nop
 800a584:	20000c50 	.word	0x20000c50

0800a588 <__malloc_unlock>:
 800a588:	4801      	ldr	r0, [pc, #4]	@ (800a590 <__malloc_unlock+0x8>)
 800a58a:	f000 b846 	b.w	800a61a <__retarget_lock_release_recursive>
 800a58e:	bf00      	nop
 800a590:	20000c50 	.word	0x20000c50

0800a594 <memset>:
 800a594:	4402      	add	r2, r0
 800a596:	4603      	mov	r3, r0
 800a598:	4293      	cmp	r3, r2
 800a59a:	d100      	bne.n	800a59e <memset+0xa>
 800a59c:	4770      	bx	lr
 800a59e:	f803 1b01 	strb.w	r1, [r3], #1
 800a5a2:	e7f9      	b.n	800a598 <memset+0x4>

0800a5a4 <_sbrk_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d06      	ldr	r5, [pc, #24]	@ (800a5c0 <_sbrk_r+0x1c>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	602b      	str	r3, [r5, #0]
 800a5b0:	f7f7 f9b8 	bl	8001924 <_sbrk>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_sbrk_r+0x1a>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_sbrk_r+0x1a>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20000c54 	.word	0x20000c54

0800a5c4 <__errno>:
 800a5c4:	4b01      	ldr	r3, [pc, #4]	@ (800a5cc <__errno+0x8>)
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20000030 	.word	0x20000030

0800a5d0 <__libc_init_array>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a608 <__libc_init_array+0x38>)
 800a5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a60c <__libc_init_array+0x3c>)
 800a5d6:	1b64      	subs	r4, r4, r5
 800a5d8:	10a4      	asrs	r4, r4, #2
 800a5da:	2600      	movs	r6, #0
 800a5dc:	42a6      	cmp	r6, r4
 800a5de:	d109      	bne.n	800a5f4 <__libc_init_array+0x24>
 800a5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a610 <__libc_init_array+0x40>)
 800a5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a614 <__libc_init_array+0x44>)
 800a5e4:	f001 f888 	bl	800b6f8 <_init>
 800a5e8:	1b64      	subs	r4, r4, r5
 800a5ea:	10a4      	asrs	r4, r4, #2
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	42a6      	cmp	r6, r4
 800a5f0:	d105      	bne.n	800a5fe <__libc_init_array+0x2e>
 800a5f2:	bd70      	pop	{r4, r5, r6, pc}
 800a5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f8:	4798      	blx	r3
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	e7ee      	b.n	800a5dc <__libc_init_array+0xc>
 800a5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a602:	4798      	blx	r3
 800a604:	3601      	adds	r6, #1
 800a606:	e7f2      	b.n	800a5ee <__libc_init_array+0x1e>
 800a608:	0800b918 	.word	0x0800b918
 800a60c:	0800b918 	.word	0x0800b918
 800a610:	0800b918 	.word	0x0800b918
 800a614:	0800b91c 	.word	0x0800b91c

0800a618 <__retarget_lock_acquire_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_release_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <_free_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4605      	mov	r5, r0
 800a620:	2900      	cmp	r1, #0
 800a622:	d041      	beq.n	800a6a8 <_free_r+0x8c>
 800a624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a628:	1f0c      	subs	r4, r1, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	bfb8      	it	lt
 800a62e:	18e4      	addlt	r4, r4, r3
 800a630:	f7ff ffa4 	bl	800a57c <__malloc_lock>
 800a634:	4a1d      	ldr	r2, [pc, #116]	@ (800a6ac <_free_r+0x90>)
 800a636:	6813      	ldr	r3, [r2, #0]
 800a638:	b933      	cbnz	r3, 800a648 <_free_r+0x2c>
 800a63a:	6063      	str	r3, [r4, #4]
 800a63c:	6014      	str	r4, [r2, #0]
 800a63e:	4628      	mov	r0, r5
 800a640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a644:	f7ff bfa0 	b.w	800a588 <__malloc_unlock>
 800a648:	42a3      	cmp	r3, r4
 800a64a:	d908      	bls.n	800a65e <_free_r+0x42>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	1821      	adds	r1, r4, r0
 800a650:	428b      	cmp	r3, r1
 800a652:	bf01      	itttt	eq
 800a654:	6819      	ldreq	r1, [r3, #0]
 800a656:	685b      	ldreq	r3, [r3, #4]
 800a658:	1809      	addeq	r1, r1, r0
 800a65a:	6021      	streq	r1, [r4, #0]
 800a65c:	e7ed      	b.n	800a63a <_free_r+0x1e>
 800a65e:	461a      	mov	r2, r3
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	b10b      	cbz	r3, 800a668 <_free_r+0x4c>
 800a664:	42a3      	cmp	r3, r4
 800a666:	d9fa      	bls.n	800a65e <_free_r+0x42>
 800a668:	6811      	ldr	r1, [r2, #0]
 800a66a:	1850      	adds	r0, r2, r1
 800a66c:	42a0      	cmp	r0, r4
 800a66e:	d10b      	bne.n	800a688 <_free_r+0x6c>
 800a670:	6820      	ldr	r0, [r4, #0]
 800a672:	4401      	add	r1, r0
 800a674:	1850      	adds	r0, r2, r1
 800a676:	4283      	cmp	r3, r0
 800a678:	6011      	str	r1, [r2, #0]
 800a67a:	d1e0      	bne.n	800a63e <_free_r+0x22>
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	6053      	str	r3, [r2, #4]
 800a682:	4408      	add	r0, r1
 800a684:	6010      	str	r0, [r2, #0]
 800a686:	e7da      	b.n	800a63e <_free_r+0x22>
 800a688:	d902      	bls.n	800a690 <_free_r+0x74>
 800a68a:	230c      	movs	r3, #12
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	e7d6      	b.n	800a63e <_free_r+0x22>
 800a690:	6820      	ldr	r0, [r4, #0]
 800a692:	1821      	adds	r1, r4, r0
 800a694:	428b      	cmp	r3, r1
 800a696:	bf04      	itt	eq
 800a698:	6819      	ldreq	r1, [r3, #0]
 800a69a:	685b      	ldreq	r3, [r3, #4]
 800a69c:	6063      	str	r3, [r4, #4]
 800a69e:	bf04      	itt	eq
 800a6a0:	1809      	addeq	r1, r1, r0
 800a6a2:	6021      	streq	r1, [r4, #0]
 800a6a4:	6054      	str	r4, [r2, #4]
 800a6a6:	e7ca      	b.n	800a63e <_free_r+0x22>
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20000b14 	.word	0x20000b14

0800a6b0 <sin>:
 800a6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6b2:	ec53 2b10 	vmov	r2, r3, d0
 800a6b6:	4826      	ldr	r0, [pc, #152]	@ (800a750 <sin+0xa0>)
 800a6b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a6bc:	4281      	cmp	r1, r0
 800a6be:	d807      	bhi.n	800a6d0 <sin+0x20>
 800a6c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a748 <sin+0x98>
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	b005      	add	sp, #20
 800a6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6cc:	f000 be58 	b.w	800b380 <__kernel_sin>
 800a6d0:	4820      	ldr	r0, [pc, #128]	@ (800a754 <sin+0xa4>)
 800a6d2:	4281      	cmp	r1, r0
 800a6d4:	d908      	bls.n	800a6e8 <sin+0x38>
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f7f5 fd79 	bl	80001d0 <__aeabi_dsub>
 800a6de:	ec41 0b10 	vmov	d0, r0, r1
 800a6e2:	b005      	add	sp, #20
 800a6e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6e8:	4668      	mov	r0, sp
 800a6ea:	f000 f835 	bl	800a758 <__ieee754_rem_pio2>
 800a6ee:	f000 0003 	and.w	r0, r0, #3
 800a6f2:	2801      	cmp	r0, #1
 800a6f4:	d00c      	beq.n	800a710 <sin+0x60>
 800a6f6:	2802      	cmp	r0, #2
 800a6f8:	d011      	beq.n	800a71e <sin+0x6e>
 800a6fa:	b9e8      	cbnz	r0, 800a738 <sin+0x88>
 800a6fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a700:	ed9d 0b00 	vldr	d0, [sp]
 800a704:	2001      	movs	r0, #1
 800a706:	f000 fe3b 	bl	800b380 <__kernel_sin>
 800a70a:	ec51 0b10 	vmov	r0, r1, d0
 800a70e:	e7e6      	b.n	800a6de <sin+0x2e>
 800a710:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a714:	ed9d 0b00 	vldr	d0, [sp]
 800a718:	f000 fd6a 	bl	800b1f0 <__kernel_cos>
 800a71c:	e7f5      	b.n	800a70a <sin+0x5a>
 800a71e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a722:	ed9d 0b00 	vldr	d0, [sp]
 800a726:	2001      	movs	r0, #1
 800a728:	f000 fe2a 	bl	800b380 <__kernel_sin>
 800a72c:	ec53 2b10 	vmov	r2, r3, d0
 800a730:	4610      	mov	r0, r2
 800a732:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a736:	e7d2      	b.n	800a6de <sin+0x2e>
 800a738:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a73c:	ed9d 0b00 	vldr	d0, [sp]
 800a740:	f000 fd56 	bl	800b1f0 <__kernel_cos>
 800a744:	e7f2      	b.n	800a72c <sin+0x7c>
 800a746:	bf00      	nop
	...
 800a750:	3fe921fb 	.word	0x3fe921fb
 800a754:	7fefffff 	.word	0x7fefffff

0800a758 <__ieee754_rem_pio2>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	ec57 6b10 	vmov	r6, r7, d0
 800a760:	4bc5      	ldr	r3, [pc, #788]	@ (800aa78 <__ieee754_rem_pio2+0x320>)
 800a762:	b08d      	sub	sp, #52	@ 0x34
 800a764:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a768:	4598      	cmp	r8, r3
 800a76a:	4604      	mov	r4, r0
 800a76c:	9704      	str	r7, [sp, #16]
 800a76e:	d807      	bhi.n	800a780 <__ieee754_rem_pio2+0x28>
 800a770:	2200      	movs	r2, #0
 800a772:	2300      	movs	r3, #0
 800a774:	ed80 0b00 	vstr	d0, [r0]
 800a778:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a77c:	2500      	movs	r5, #0
 800a77e:	e028      	b.n	800a7d2 <__ieee754_rem_pio2+0x7a>
 800a780:	4bbe      	ldr	r3, [pc, #760]	@ (800aa7c <__ieee754_rem_pio2+0x324>)
 800a782:	4598      	cmp	r8, r3
 800a784:	d878      	bhi.n	800a878 <__ieee754_rem_pio2+0x120>
 800a786:	9b04      	ldr	r3, [sp, #16]
 800a788:	4dbd      	ldr	r5, [pc, #756]	@ (800aa80 <__ieee754_rem_pio2+0x328>)
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	4630      	mov	r0, r6
 800a78e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2e8>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	4639      	mov	r1, r7
 800a796:	dd38      	ble.n	800a80a <__ieee754_rem_pio2+0xb2>
 800a798:	f7f5 fd1a 	bl	80001d0 <__aeabi_dsub>
 800a79c:	45a8      	cmp	r8, r5
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	d01a      	beq.n	800a7da <__ieee754_rem_pio2+0x82>
 800a7a4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f0>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd11 	bl	80001d0 <__aeabi_dsub>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4680      	mov	r8, r0
 800a7b4:	4689      	mov	r9, r1
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f5 fd09 	bl	80001d0 <__aeabi_dsub>
 800a7be:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f0>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 fd04 	bl	80001d0 <__aeabi_dsub>
 800a7c8:	e9c4 8900 	strd	r8, r9, [r4]
 800a7cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7d0:	2501      	movs	r5, #1
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	b00d      	add	sp, #52	@ 0x34
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	a39d      	add	r3, pc, #628	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x2f8>)
 800a7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e0:	f7f5 fcf6 	bl	80001d0 <__aeabi_dsub>
 800a7e4:	a39c      	add	r3, pc, #624	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x300>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	f7f5 fcef 	bl	80001d0 <__aeabi_dsub>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f5 fce7 	bl	80001d0 <__aeabi_dsub>
 800a802:	a395      	add	r3, pc, #596	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x300>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	e7dc      	b.n	800a7c4 <__ieee754_rem_pio2+0x6c>
 800a80a:	f7f5 fce3 	bl	80001d4 <__adddf3>
 800a80e:	45a8      	cmp	r8, r5
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	d018      	beq.n	800a848 <__ieee754_rem_pio2+0xf0>
 800a816:	a38c      	add	r3, pc, #560	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f0>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	f7f5 fcda 	bl	80001d4 <__adddf3>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4680      	mov	r8, r0
 800a826:	4689      	mov	r9, r1
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f5 fcd0 	bl	80001d0 <__aeabi_dsub>
 800a830:	a385      	add	r3, pc, #532	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f0>)
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 fccd 	bl	80001d4 <__adddf3>
 800a83a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a83e:	e9c4 8900 	strd	r8, r9, [r4]
 800a842:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a846:	e7c4      	b.n	800a7d2 <__ieee754_rem_pio2+0x7a>
 800a848:	a381      	add	r3, pc, #516	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x2f8>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f7f5 fcc1 	bl	80001d4 <__adddf3>
 800a852:	a381      	add	r3, pc, #516	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x300>)
 800a854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	f7f5 fcba 	bl	80001d4 <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4680      	mov	r8, r0
 800a866:	4689      	mov	r9, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fcb0 	bl	80001d0 <__aeabi_dsub>
 800a870:	a379      	add	r3, pc, #484	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x300>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	e7de      	b.n	800a836 <__ieee754_rem_pio2+0xde>
 800a878:	4b82      	ldr	r3, [pc, #520]	@ (800aa84 <__ieee754_rem_pio2+0x32c>)
 800a87a:	4598      	cmp	r8, r3
 800a87c:	f200 80d1 	bhi.w	800aa22 <__ieee754_rem_pio2+0x2ca>
 800a880:	f000 fe38 	bl	800b4f4 <fabs>
 800a884:	ec57 6b10 	vmov	r6, r7, d0
 800a888:	a375      	add	r3, pc, #468	@ (adr r3, 800aa60 <__ieee754_rem_pio2+0x308>)
 800a88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7f5 fe55 	bl	8000540 <__aeabi_dmul>
 800a896:	4b7c      	ldr	r3, [pc, #496]	@ (800aa88 <__ieee754_rem_pio2+0x330>)
 800a898:	2200      	movs	r2, #0
 800a89a:	f7f5 fc9b 	bl	80001d4 <__adddf3>
 800a89e:	f7f6 f8e9 	bl	8000a74 <__aeabi_d2iz>
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	f7f5 fde2 	bl	800046c <__aeabi_i2d>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8b0:	a363      	add	r3, pc, #396	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2e8>)
 800a8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b6:	f7f5 fe43 	bl	8000540 <__aeabi_dmul>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4630      	mov	r0, r6
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	f7f5 fc85 	bl	80001d0 <__aeabi_dsub>
 800a8c6:	a360      	add	r3, pc, #384	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f0>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	4682      	mov	sl, r0
 800a8ce:	468b      	mov	fp, r1
 800a8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8d4:	f7f5 fe34 	bl	8000540 <__aeabi_dmul>
 800a8d8:	2d1f      	cmp	r5, #31
 800a8da:	4606      	mov	r6, r0
 800a8dc:	460f      	mov	r7, r1
 800a8de:	dc0c      	bgt.n	800a8fa <__ieee754_rem_pio2+0x1a2>
 800a8e0:	4b6a      	ldr	r3, [pc, #424]	@ (800aa8c <__ieee754_rem_pio2+0x334>)
 800a8e2:	1e6a      	subs	r2, r5, #1
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	4543      	cmp	r3, r8
 800a8ea:	d006      	beq.n	800a8fa <__ieee754_rem_pio2+0x1a2>
 800a8ec:	4632      	mov	r2, r6
 800a8ee:	463b      	mov	r3, r7
 800a8f0:	4650      	mov	r0, sl
 800a8f2:	4659      	mov	r1, fp
 800a8f4:	f7f5 fc6c 	bl	80001d0 <__aeabi_dsub>
 800a8f8:	e00e      	b.n	800a918 <__ieee754_rem_pio2+0x1c0>
 800a8fa:	463b      	mov	r3, r7
 800a8fc:	4632      	mov	r2, r6
 800a8fe:	4650      	mov	r0, sl
 800a900:	4659      	mov	r1, fp
 800a902:	f7f5 fc65 	bl	80001d0 <__aeabi_dsub>
 800a906:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a910:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a914:	2b10      	cmp	r3, #16
 800a916:	dc02      	bgt.n	800a91e <__ieee754_rem_pio2+0x1c6>
 800a918:	e9c4 0100 	strd	r0, r1, [r4]
 800a91c:	e039      	b.n	800a992 <__ieee754_rem_pio2+0x23a>
 800a91e:	a34c      	add	r3, pc, #304	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x2f8>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a928:	f7f5 fe0a 	bl	8000540 <__aeabi_dmul>
 800a92c:	4606      	mov	r6, r0
 800a92e:	460f      	mov	r7, r1
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4650      	mov	r0, sl
 800a936:	4659      	mov	r1, fp
 800a938:	f7f5 fc4a 	bl	80001d0 <__aeabi_dsub>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4680      	mov	r8, r0
 800a942:	4689      	mov	r9, r1
 800a944:	4650      	mov	r0, sl
 800a946:	4659      	mov	r1, fp
 800a948:	f7f5 fc42 	bl	80001d0 <__aeabi_dsub>
 800a94c:	4632      	mov	r2, r6
 800a94e:	463b      	mov	r3, r7
 800a950:	f7f5 fc3e 	bl	80001d0 <__aeabi_dsub>
 800a954:	a340      	add	r3, pc, #256	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x300>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	4606      	mov	r6, r0
 800a95c:	460f      	mov	r7, r1
 800a95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a962:	f7f5 fded 	bl	8000540 <__aeabi_dmul>
 800a966:	4632      	mov	r2, r6
 800a968:	463b      	mov	r3, r7
 800a96a:	f7f5 fc31 	bl	80001d0 <__aeabi_dsub>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4606      	mov	r6, r0
 800a974:	460f      	mov	r7, r1
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	f7f5 fc29 	bl	80001d0 <__aeabi_dsub>
 800a97e:	9a05      	ldr	r2, [sp, #20]
 800a980:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	2b31      	cmp	r3, #49	@ 0x31
 800a988:	dc20      	bgt.n	800a9cc <__ieee754_rem_pio2+0x274>
 800a98a:	e9c4 0100 	strd	r0, r1, [r4]
 800a98e:	46c2      	mov	sl, r8
 800a990:	46cb      	mov	fp, r9
 800a992:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a996:	4650      	mov	r0, sl
 800a998:	4642      	mov	r2, r8
 800a99a:	464b      	mov	r3, r9
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fc17 	bl	80001d0 <__aeabi_dsub>
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	f7f5 fc13 	bl	80001d0 <__aeabi_dsub>
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9b2:	f6bf af0e 	bge.w	800a7d2 <__ieee754_rem_pio2+0x7a>
 800a9b6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a9ba:	6063      	str	r3, [r4, #4]
 800a9bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9c0:	f8c4 8000 	str.w	r8, [r4]
 800a9c4:	60a0      	str	r0, [r4, #8]
 800a9c6:	60e3      	str	r3, [r4, #12]
 800a9c8:	426d      	negs	r5, r5
 800a9ca:	e702      	b.n	800a7d2 <__ieee754_rem_pio2+0x7a>
 800a9cc:	a326      	add	r3, pc, #152	@ (adr r3, 800aa68 <__ieee754_rem_pio2+0x310>)
 800a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d6:	f7f5 fdb3 	bl	8000540 <__aeabi_dmul>
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	f7f5 fbf3 	bl	80001d0 <__aeabi_dsub>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f5 fbeb 	bl	80001d0 <__aeabi_dsub>
 800a9fa:	4632      	mov	r2, r6
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	f7f5 fbe7 	bl	80001d0 <__aeabi_dsub>
 800aa02:	a31b      	add	r3, pc, #108	@ (adr r3, 800aa70 <__ieee754_rem_pio2+0x318>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4606      	mov	r6, r0
 800aa0a:	460f      	mov	r7, r1
 800aa0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa10:	f7f5 fd96 	bl	8000540 <__aeabi_dmul>
 800aa14:	4632      	mov	r2, r6
 800aa16:	463b      	mov	r3, r7
 800aa18:	f7f5 fbda 	bl	80001d0 <__aeabi_dsub>
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	e764      	b.n	800a8ec <__ieee754_rem_pio2+0x194>
 800aa22:	4b1b      	ldr	r3, [pc, #108]	@ (800aa90 <__ieee754_rem_pio2+0x338>)
 800aa24:	4598      	cmp	r8, r3
 800aa26:	d935      	bls.n	800aa94 <__ieee754_rem_pio2+0x33c>
 800aa28:	4632      	mov	r2, r6
 800aa2a:	463b      	mov	r3, r7
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f5 fbce 	bl	80001d0 <__aeabi_dsub>
 800aa34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa38:	e9c4 0100 	strd	r0, r1, [r4]
 800aa3c:	e69e      	b.n	800a77c <__ieee754_rem_pio2+0x24>
 800aa3e:	bf00      	nop
 800aa40:	54400000 	.word	0x54400000
 800aa44:	3ff921fb 	.word	0x3ff921fb
 800aa48:	1a626331 	.word	0x1a626331
 800aa4c:	3dd0b461 	.word	0x3dd0b461
 800aa50:	1a600000 	.word	0x1a600000
 800aa54:	3dd0b461 	.word	0x3dd0b461
 800aa58:	2e037073 	.word	0x2e037073
 800aa5c:	3ba3198a 	.word	0x3ba3198a
 800aa60:	6dc9c883 	.word	0x6dc9c883
 800aa64:	3fe45f30 	.word	0x3fe45f30
 800aa68:	2e000000 	.word	0x2e000000
 800aa6c:	3ba3198a 	.word	0x3ba3198a
 800aa70:	252049c1 	.word	0x252049c1
 800aa74:	397b839a 	.word	0x397b839a
 800aa78:	3fe921fb 	.word	0x3fe921fb
 800aa7c:	4002d97b 	.word	0x4002d97b
 800aa80:	3ff921fb 	.word	0x3ff921fb
 800aa84:	413921fb 	.word	0x413921fb
 800aa88:	3fe00000 	.word	0x3fe00000
 800aa8c:	0800b734 	.word	0x0800b734
 800aa90:	7fefffff 	.word	0x7fefffff
 800aa94:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aa98:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800aa9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	460f      	mov	r7, r1
 800aaa4:	f7f5 ffe6 	bl	8000a74 <__aeabi_d2iz>
 800aaa8:	f7f5 fce0 	bl	800046c <__aeabi_i2d>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aab8:	f7f5 fb8a 	bl	80001d0 <__aeabi_dsub>
 800aabc:	4b22      	ldr	r3, [pc, #136]	@ (800ab48 <__ieee754_rem_pio2+0x3f0>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	f7f5 fd3e 	bl	8000540 <__aeabi_dmul>
 800aac4:	460f      	mov	r7, r1
 800aac6:	4606      	mov	r6, r0
 800aac8:	f7f5 ffd4 	bl	8000a74 <__aeabi_d2iz>
 800aacc:	f7f5 fcce 	bl	800046c <__aeabi_i2d>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4630      	mov	r0, r6
 800aad6:	4639      	mov	r1, r7
 800aad8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aadc:	f7f5 fb78 	bl	80001d0 <__aeabi_dsub>
 800aae0:	4b19      	ldr	r3, [pc, #100]	@ (800ab48 <__ieee754_rem_pio2+0x3f0>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	f7f5 fd2c 	bl	8000540 <__aeabi_dmul>
 800aae8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aaec:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aaf0:	f04f 0803 	mov.w	r8, #3
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	2700      	movs	r7, #0
 800aaf8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aafc:	4632      	mov	r2, r6
 800aafe:	463b      	mov	r3, r7
 800ab00:	46c2      	mov	sl, r8
 800ab02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ab06:	f7f5 ff83 	bl	8000a10 <__aeabi_dcmpeq>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1f4      	bne.n	800aaf8 <__ieee754_rem_pio2+0x3a0>
 800ab0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab4c <__ieee754_rem_pio2+0x3f4>)
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	2302      	movs	r3, #2
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	462a      	mov	r2, r5
 800ab18:	4653      	mov	r3, sl
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	a806      	add	r0, sp, #24
 800ab1e:	f000 f817 	bl	800ab50 <__kernel_rem_pio2>
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	4605      	mov	r5, r0
 800ab28:	f6bf ae53 	bge.w	800a7d2 <__ieee754_rem_pio2+0x7a>
 800ab2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ab30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab34:	e9c4 2300 	strd	r2, r3, [r4]
 800ab38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab44:	e740      	b.n	800a9c8 <__ieee754_rem_pio2+0x270>
 800ab46:	bf00      	nop
 800ab48:	41700000 	.word	0x41700000
 800ab4c:	0800b7b4 	.word	0x0800b7b4

0800ab50 <__kernel_rem_pio2>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	ed2d 8b02 	vpush	{d8}
 800ab58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ab5c:	f112 0f14 	cmn.w	r2, #20
 800ab60:	9306      	str	r3, [sp, #24]
 800ab62:	9104      	str	r1, [sp, #16]
 800ab64:	4bc2      	ldr	r3, [pc, #776]	@ (800ae70 <__kernel_rem_pio2+0x320>)
 800ab66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ab68:	9008      	str	r0, [sp, #32]
 800ab6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ab76:	bfa8      	it	ge
 800ab78:	1ed4      	subge	r4, r2, #3
 800ab7a:	9305      	str	r3, [sp, #20]
 800ab7c:	bfb2      	itee	lt
 800ab7e:	2400      	movlt	r4, #0
 800ab80:	2318      	movge	r3, #24
 800ab82:	fb94 f4f3 	sdivge	r4, r4, r3
 800ab86:	f06f 0317 	mvn.w	r3, #23
 800ab8a:	fb04 3303 	mla	r3, r4, r3, r3
 800ab8e:	eb03 0b02 	add.w	fp, r3, r2
 800ab92:	9b00      	ldr	r3, [sp, #0]
 800ab94:	9a05      	ldr	r2, [sp, #20]
 800ab96:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800ae60 <__kernel_rem_pio2+0x310>
 800ab9a:	eb03 0802 	add.w	r8, r3, r2
 800ab9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aba0:	1aa7      	subs	r7, r4, r2
 800aba2:	ae20      	add	r6, sp, #128	@ 0x80
 800aba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aba8:	2500      	movs	r5, #0
 800abaa:	4545      	cmp	r5, r8
 800abac:	dd12      	ble.n	800abd4 <__kernel_rem_pio2+0x84>
 800abae:	9b06      	ldr	r3, [sp, #24]
 800abb0:	aa20      	add	r2, sp, #128	@ 0x80
 800abb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800abb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800abba:	2700      	movs	r7, #0
 800abbc:	9b00      	ldr	r3, [sp, #0]
 800abbe:	429f      	cmp	r7, r3
 800abc0:	dc2e      	bgt.n	800ac20 <__kernel_rem_pio2+0xd0>
 800abc2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800ae60 <__kernel_rem_pio2+0x310>
 800abc6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800abca:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abce:	46a8      	mov	r8, r5
 800abd0:	2600      	movs	r6, #0
 800abd2:	e01b      	b.n	800ac0c <__kernel_rem_pio2+0xbc>
 800abd4:	42ef      	cmn	r7, r5
 800abd6:	d407      	bmi.n	800abe8 <__kernel_rem_pio2+0x98>
 800abd8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800abdc:	f7f5 fc46 	bl	800046c <__aeabi_i2d>
 800abe0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800abe4:	3501      	adds	r5, #1
 800abe6:	e7e0      	b.n	800abaa <__kernel_rem_pio2+0x5a>
 800abe8:	ec51 0b18 	vmov	r0, r1, d8
 800abec:	e7f8      	b.n	800abe0 <__kernel_rem_pio2+0x90>
 800abee:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800abf2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800abf6:	f7f5 fca3 	bl	8000540 <__aeabi_dmul>
 800abfa:	4602      	mov	r2, r0
 800abfc:	460b      	mov	r3, r1
 800abfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac02:	f7f5 fae7 	bl	80001d4 <__adddf3>
 800ac06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac0a:	3601      	adds	r6, #1
 800ac0c:	9b05      	ldr	r3, [sp, #20]
 800ac0e:	429e      	cmp	r6, r3
 800ac10:	dded      	ble.n	800abee <__kernel_rem_pio2+0x9e>
 800ac12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac16:	3701      	adds	r7, #1
 800ac18:	ecaa 7b02 	vstmia	sl!, {d7}
 800ac1c:	3508      	adds	r5, #8
 800ac1e:	e7cd      	b.n	800abbc <__kernel_rem_pio2+0x6c>
 800ac20:	9b00      	ldr	r3, [sp, #0]
 800ac22:	f8dd 8000 	ldr.w	r8, [sp]
 800ac26:	aa0c      	add	r2, sp, #48	@ 0x30
 800ac28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ac30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac34:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ac3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac3c:	ab98      	add	r3, sp, #608	@ 0x260
 800ac3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ac46:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac4a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ac4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ac4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ac52:	46a1      	mov	r9, r4
 800ac54:	46c2      	mov	sl, r8
 800ac56:	f1ba 0f00 	cmp.w	sl, #0
 800ac5a:	dc77      	bgt.n	800ad4c <__kernel_rem_pio2+0x1fc>
 800ac5c:	4658      	mov	r0, fp
 800ac5e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ac62:	f000 fc51 	bl	800b508 <scalbn>
 800ac66:	ec57 6b10 	vmov	r6, r7, d0
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ac70:	4630      	mov	r0, r6
 800ac72:	4639      	mov	r1, r7
 800ac74:	f7f5 fc64 	bl	8000540 <__aeabi_dmul>
 800ac78:	ec41 0b10 	vmov	d0, r0, r1
 800ac7c:	f000 fcc0 	bl	800b600 <floor>
 800ac80:	4b7c      	ldr	r3, [pc, #496]	@ (800ae74 <__kernel_rem_pio2+0x324>)
 800ac82:	ec51 0b10 	vmov	r0, r1, d0
 800ac86:	2200      	movs	r2, #0
 800ac88:	f7f5 fc5a 	bl	8000540 <__aeabi_dmul>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4630      	mov	r0, r6
 800ac92:	4639      	mov	r1, r7
 800ac94:	f7f5 fa9c 	bl	80001d0 <__aeabi_dsub>
 800ac98:	460f      	mov	r7, r1
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	f7f5 feea 	bl	8000a74 <__aeabi_d2iz>
 800aca0:	9002      	str	r0, [sp, #8]
 800aca2:	f7f5 fbe3 	bl	800046c <__aeabi_i2d>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7f5 fa8f 	bl	80001d0 <__aeabi_dsub>
 800acb2:	f1bb 0f00 	cmp.w	fp, #0
 800acb6:	4606      	mov	r6, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	dd6c      	ble.n	800ad96 <__kernel_rem_pio2+0x246>
 800acbc:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800acc0:	ab0c      	add	r3, sp, #48	@ 0x30
 800acc2:	9d02      	ldr	r5, [sp, #8]
 800acc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acc8:	f1cb 0018 	rsb	r0, fp, #24
 800accc:	fa43 f200 	asr.w	r2, r3, r0
 800acd0:	4415      	add	r5, r2
 800acd2:	4082      	lsls	r2, r0
 800acd4:	1a9b      	subs	r3, r3, r2
 800acd6:	aa0c      	add	r2, sp, #48	@ 0x30
 800acd8:	9502      	str	r5, [sp, #8]
 800acda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800acde:	f1cb 0217 	rsb	r2, fp, #23
 800ace2:	fa43 f902 	asr.w	r9, r3, r2
 800ace6:	f1b9 0f00 	cmp.w	r9, #0
 800acea:	dd64      	ble.n	800adb6 <__kernel_rem_pio2+0x266>
 800acec:	9b02      	ldr	r3, [sp, #8]
 800acee:	2200      	movs	r2, #0
 800acf0:	3301      	adds	r3, #1
 800acf2:	9302      	str	r3, [sp, #8]
 800acf4:	4615      	mov	r5, r2
 800acf6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800acfa:	4590      	cmp	r8, r2
 800acfc:	f300 80a1 	bgt.w	800ae42 <__kernel_rem_pio2+0x2f2>
 800ad00:	f1bb 0f00 	cmp.w	fp, #0
 800ad04:	dd07      	ble.n	800ad16 <__kernel_rem_pio2+0x1c6>
 800ad06:	f1bb 0f01 	cmp.w	fp, #1
 800ad0a:	f000 80c1 	beq.w	800ae90 <__kernel_rem_pio2+0x340>
 800ad0e:	f1bb 0f02 	cmp.w	fp, #2
 800ad12:	f000 80c8 	beq.w	800aea6 <__kernel_rem_pio2+0x356>
 800ad16:	f1b9 0f02 	cmp.w	r9, #2
 800ad1a:	d14c      	bne.n	800adb6 <__kernel_rem_pio2+0x266>
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	463b      	mov	r3, r7
 800ad20:	4955      	ldr	r1, [pc, #340]	@ (800ae78 <__kernel_rem_pio2+0x328>)
 800ad22:	2000      	movs	r0, #0
 800ad24:	f7f5 fa54 	bl	80001d0 <__aeabi_dsub>
 800ad28:	4606      	mov	r6, r0
 800ad2a:	460f      	mov	r7, r1
 800ad2c:	2d00      	cmp	r5, #0
 800ad2e:	d042      	beq.n	800adb6 <__kernel_rem_pio2+0x266>
 800ad30:	4658      	mov	r0, fp
 800ad32:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800ae68 <__kernel_rem_pio2+0x318>
 800ad36:	f000 fbe7 	bl	800b508 <scalbn>
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	ec53 2b10 	vmov	r2, r3, d0
 800ad42:	f7f5 fa45 	bl	80001d0 <__aeabi_dsub>
 800ad46:	4606      	mov	r6, r0
 800ad48:	460f      	mov	r7, r1
 800ad4a:	e034      	b.n	800adb6 <__kernel_rem_pio2+0x266>
 800ad4c:	4b4b      	ldr	r3, [pc, #300]	@ (800ae7c <__kernel_rem_pio2+0x32c>)
 800ad4e:	2200      	movs	r2, #0
 800ad50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad54:	f7f5 fbf4 	bl	8000540 <__aeabi_dmul>
 800ad58:	f7f5 fe8c 	bl	8000a74 <__aeabi_d2iz>
 800ad5c:	f7f5 fb86 	bl	800046c <__aeabi_i2d>
 800ad60:	4b47      	ldr	r3, [pc, #284]	@ (800ae80 <__kernel_rem_pio2+0x330>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	4606      	mov	r6, r0
 800ad66:	460f      	mov	r7, r1
 800ad68:	f7f5 fbea 	bl	8000540 <__aeabi_dmul>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	460b      	mov	r3, r1
 800ad70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad74:	f7f5 fa2c 	bl	80001d0 <__aeabi_dsub>
 800ad78:	f7f5 fe7c 	bl	8000a74 <__aeabi_d2iz>
 800ad7c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ad80:	f849 0b04 	str.w	r0, [r9], #4
 800ad84:	4639      	mov	r1, r7
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7f5 fa24 	bl	80001d4 <__adddf3>
 800ad8c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ad90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad94:	e75f      	b.n	800ac56 <__kernel_rem_pio2+0x106>
 800ad96:	d107      	bne.n	800ada8 <__kernel_rem_pio2+0x258>
 800ad98:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800ad9c:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ada2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ada6:	e79e      	b.n	800ace6 <__kernel_rem_pio2+0x196>
 800ada8:	4b36      	ldr	r3, [pc, #216]	@ (800ae84 <__kernel_rem_pio2+0x334>)
 800adaa:	2200      	movs	r2, #0
 800adac:	f7f5 fe4e 	bl	8000a4c <__aeabi_dcmpge>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d143      	bne.n	800ae3c <__kernel_rem_pio2+0x2ec>
 800adb4:	4681      	mov	r9, r0
 800adb6:	2200      	movs	r2, #0
 800adb8:	2300      	movs	r3, #0
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 fe27 	bl	8000a10 <__aeabi_dcmpeq>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	f000 80c1 	beq.w	800af4a <__kernel_rem_pio2+0x3fa>
 800adc8:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800adcc:	2200      	movs	r2, #0
 800adce:	9900      	ldr	r1, [sp, #0]
 800add0:	428b      	cmp	r3, r1
 800add2:	da70      	bge.n	800aeb6 <__kernel_rem_pio2+0x366>
 800add4:	2a00      	cmp	r2, #0
 800add6:	f000 808b 	beq.w	800aef0 <__kernel_rem_pio2+0x3a0>
 800adda:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800adde:	ab0c      	add	r3, sp, #48	@ 0x30
 800ade0:	f1ab 0b18 	sub.w	fp, fp, #24
 800ade4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d0f6      	beq.n	800adda <__kernel_rem_pio2+0x28a>
 800adec:	4658      	mov	r0, fp
 800adee:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800ae68 <__kernel_rem_pio2+0x318>
 800adf2:	f000 fb89 	bl	800b508 <scalbn>
 800adf6:	f108 0301 	add.w	r3, r8, #1
 800adfa:	00da      	lsls	r2, r3, #3
 800adfc:	9205      	str	r2, [sp, #20]
 800adfe:	ec55 4b10 	vmov	r4, r5, d0
 800ae02:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ae04:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800ae7c <__kernel_rem_pio2+0x32c>
 800ae08:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ae0c:	4646      	mov	r6, r8
 800ae0e:	f04f 0a00 	mov.w	sl, #0
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	f280 80d1 	bge.w	800afba <__kernel_rem_pio2+0x46a>
 800ae18:	4644      	mov	r4, r8
 800ae1a:	2c00      	cmp	r4, #0
 800ae1c:	f2c0 80ff 	blt.w	800b01e <__kernel_rem_pio2+0x4ce>
 800ae20:	4b19      	ldr	r3, [pc, #100]	@ (800ae88 <__kernel_rem_pio2+0x338>)
 800ae22:	461f      	mov	r7, r3
 800ae24:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ae26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae2a:	9306      	str	r3, [sp, #24]
 800ae2c:	f04f 0a00 	mov.w	sl, #0
 800ae30:	f04f 0b00 	mov.w	fp, #0
 800ae34:	2600      	movs	r6, #0
 800ae36:	eba8 0504 	sub.w	r5, r8, r4
 800ae3a:	e0e4      	b.n	800b006 <__kernel_rem_pio2+0x4b6>
 800ae3c:	f04f 0902 	mov.w	r9, #2
 800ae40:	e754      	b.n	800acec <__kernel_rem_pio2+0x19c>
 800ae42:	f854 3b04 	ldr.w	r3, [r4], #4
 800ae46:	bb0d      	cbnz	r5, 800ae8c <__kernel_rem_pio2+0x33c>
 800ae48:	b123      	cbz	r3, 800ae54 <__kernel_rem_pio2+0x304>
 800ae4a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800ae4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae52:	2301      	movs	r3, #1
 800ae54:	3201      	adds	r2, #1
 800ae56:	461d      	mov	r5, r3
 800ae58:	e74f      	b.n	800acfa <__kernel_rem_pio2+0x1aa>
 800ae5a:	bf00      	nop
 800ae5c:	f3af 8000 	nop.w
	...
 800ae6c:	3ff00000 	.word	0x3ff00000
 800ae70:	0800b900 	.word	0x0800b900
 800ae74:	40200000 	.word	0x40200000
 800ae78:	3ff00000 	.word	0x3ff00000
 800ae7c:	3e700000 	.word	0x3e700000
 800ae80:	41700000 	.word	0x41700000
 800ae84:	3fe00000 	.word	0x3fe00000
 800ae88:	0800b8c0 	.word	0x0800b8c0
 800ae8c:	1acb      	subs	r3, r1, r3
 800ae8e:	e7de      	b.n	800ae4e <__kernel_rem_pio2+0x2fe>
 800ae90:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800ae94:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae9e:	a90c      	add	r1, sp, #48	@ 0x30
 800aea0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aea4:	e737      	b.n	800ad16 <__kernel_rem_pio2+0x1c6>
 800aea6:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 800aeaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800aeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aeb4:	e7f3      	b.n	800ae9e <__kernel_rem_pio2+0x34e>
 800aeb6:	a90c      	add	r1, sp, #48	@ 0x30
 800aeb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aebc:	3b01      	subs	r3, #1
 800aebe:	430a      	orrs	r2, r1
 800aec0:	e785      	b.n	800adce <__kernel_rem_pio2+0x27e>
 800aec2:	3401      	adds	r4, #1
 800aec4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	d0fa      	beq.n	800aec2 <__kernel_rem_pio2+0x372>
 800aecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aece:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800aed2:	eb0d 0503 	add.w	r5, sp, r3
 800aed6:	9b06      	ldr	r3, [sp, #24]
 800aed8:	aa20      	add	r2, sp, #128	@ 0x80
 800aeda:	4443      	add	r3, r8
 800aedc:	f108 0701 	add.w	r7, r8, #1
 800aee0:	3d98      	subs	r5, #152	@ 0x98
 800aee2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800aee6:	4444      	add	r4, r8
 800aee8:	42bc      	cmp	r4, r7
 800aeea:	da04      	bge.n	800aef6 <__kernel_rem_pio2+0x3a6>
 800aeec:	46a0      	mov	r8, r4
 800aeee:	e6a2      	b.n	800ac36 <__kernel_rem_pio2+0xe6>
 800aef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aef2:	2401      	movs	r4, #1
 800aef4:	e7e6      	b.n	800aec4 <__kernel_rem_pio2+0x374>
 800aef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800aefc:	f7f5 fab6 	bl	800046c <__aeabi_i2d>
 800af00:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800b1c0 <__kernel_rem_pio2+0x670>
 800af04:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af10:	46b2      	mov	sl, r6
 800af12:	f04f 0800 	mov.w	r8, #0
 800af16:	9b05      	ldr	r3, [sp, #20]
 800af18:	4598      	cmp	r8, r3
 800af1a:	dd05      	ble.n	800af28 <__kernel_rem_pio2+0x3d8>
 800af1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af20:	3701      	adds	r7, #1
 800af22:	eca5 7b02 	vstmia	r5!, {d7}
 800af26:	e7df      	b.n	800aee8 <__kernel_rem_pio2+0x398>
 800af28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800af2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af30:	f7f5 fb06 	bl	8000540 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3c:	f7f5 f94a 	bl	80001d4 <__adddf3>
 800af40:	f108 0801 	add.w	r8, r8, #1
 800af44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af48:	e7e5      	b.n	800af16 <__kernel_rem_pio2+0x3c6>
 800af4a:	f1cb 0000 	rsb	r0, fp, #0
 800af4e:	ec47 6b10 	vmov	d0, r6, r7
 800af52:	f000 fad9 	bl	800b508 <scalbn>
 800af56:	ec55 4b10 	vmov	r4, r5, d0
 800af5a:	4b9b      	ldr	r3, [pc, #620]	@ (800b1c8 <__kernel_rem_pio2+0x678>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	4620      	mov	r0, r4
 800af60:	4629      	mov	r1, r5
 800af62:	f7f5 fd73 	bl	8000a4c <__aeabi_dcmpge>
 800af66:	b300      	cbz	r0, 800afaa <__kernel_rem_pio2+0x45a>
 800af68:	4b98      	ldr	r3, [pc, #608]	@ (800b1cc <__kernel_rem_pio2+0x67c>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	4620      	mov	r0, r4
 800af6e:	4629      	mov	r1, r5
 800af70:	f7f5 fae6 	bl	8000540 <__aeabi_dmul>
 800af74:	f7f5 fd7e 	bl	8000a74 <__aeabi_d2iz>
 800af78:	4606      	mov	r6, r0
 800af7a:	f7f5 fa77 	bl	800046c <__aeabi_i2d>
 800af7e:	4b92      	ldr	r3, [pc, #584]	@ (800b1c8 <__kernel_rem_pio2+0x678>)
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fadd 	bl	8000540 <__aeabi_dmul>
 800af86:	460b      	mov	r3, r1
 800af88:	4602      	mov	r2, r0
 800af8a:	4629      	mov	r1, r5
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7f5 f91f 	bl	80001d0 <__aeabi_dsub>
 800af92:	f7f5 fd6f 	bl	8000a74 <__aeabi_d2iz>
 800af96:	ab0c      	add	r3, sp, #48	@ 0x30
 800af98:	f10b 0b18 	add.w	fp, fp, #24
 800af9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800afa0:	f108 0801 	add.w	r8, r8, #1
 800afa4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800afa8:	e720      	b.n	800adec <__kernel_rem_pio2+0x29c>
 800afaa:	4620      	mov	r0, r4
 800afac:	4629      	mov	r1, r5
 800afae:	f7f5 fd61 	bl	8000a74 <__aeabi_d2iz>
 800afb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800afb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800afb8:	e718      	b.n	800adec <__kernel_rem_pio2+0x29c>
 800afba:	ab0c      	add	r3, sp, #48	@ 0x30
 800afbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afc0:	f7f5 fa54 	bl	800046c <__aeabi_i2d>
 800afc4:	4622      	mov	r2, r4
 800afc6:	462b      	mov	r3, r5
 800afc8:	f7f5 faba 	bl	8000540 <__aeabi_dmul>
 800afcc:	4652      	mov	r2, sl
 800afce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800afd2:	465b      	mov	r3, fp
 800afd4:	4620      	mov	r0, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7f5 fab2 	bl	8000540 <__aeabi_dmul>
 800afdc:	3e01      	subs	r6, #1
 800afde:	4604      	mov	r4, r0
 800afe0:	460d      	mov	r5, r1
 800afe2:	e716      	b.n	800ae12 <__kernel_rem_pio2+0x2c2>
 800afe4:	9906      	ldr	r1, [sp, #24]
 800afe6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800afea:	9106      	str	r1, [sp, #24]
 800afec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800aff0:	f7f5 faa6 	bl	8000540 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4650      	mov	r0, sl
 800affa:	4659      	mov	r1, fp
 800affc:	f7f5 f8ea 	bl	80001d4 <__adddf3>
 800b000:	3601      	adds	r6, #1
 800b002:	4682      	mov	sl, r0
 800b004:	468b      	mov	fp, r1
 800b006:	9b00      	ldr	r3, [sp, #0]
 800b008:	429e      	cmp	r6, r3
 800b00a:	dc01      	bgt.n	800b010 <__kernel_rem_pio2+0x4c0>
 800b00c:	42ae      	cmp	r6, r5
 800b00e:	dde9      	ble.n	800afe4 <__kernel_rem_pio2+0x494>
 800b010:	ab48      	add	r3, sp, #288	@ 0x120
 800b012:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b016:	e9c5 ab00 	strd	sl, fp, [r5]
 800b01a:	3c01      	subs	r4, #1
 800b01c:	e6fd      	b.n	800ae1a <__kernel_rem_pio2+0x2ca>
 800b01e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b020:	2b02      	cmp	r3, #2
 800b022:	dc0b      	bgt.n	800b03c <__kernel_rem_pio2+0x4ec>
 800b024:	2b00      	cmp	r3, #0
 800b026:	dc35      	bgt.n	800b094 <__kernel_rem_pio2+0x544>
 800b028:	d059      	beq.n	800b0de <__kernel_rem_pio2+0x58e>
 800b02a:	9b02      	ldr	r3, [sp, #8]
 800b02c:	f003 0007 	and.w	r0, r3, #7
 800b030:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b034:	ecbd 8b02 	vpop	{d8}
 800b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b03c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d1f3      	bne.n	800b02a <__kernel_rem_pio2+0x4da>
 800b042:	9b05      	ldr	r3, [sp, #20]
 800b044:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b048:	eb0d 0403 	add.w	r4, sp, r3
 800b04c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b050:	4625      	mov	r5, r4
 800b052:	46c2      	mov	sl, r8
 800b054:	f1ba 0f00 	cmp.w	sl, #0
 800b058:	dc69      	bgt.n	800b12e <__kernel_rem_pio2+0x5de>
 800b05a:	4645      	mov	r5, r8
 800b05c:	2d01      	cmp	r5, #1
 800b05e:	f300 8087 	bgt.w	800b170 <__kernel_rem_pio2+0x620>
 800b062:	9c05      	ldr	r4, [sp, #20]
 800b064:	ab48      	add	r3, sp, #288	@ 0x120
 800b066:	441c      	add	r4, r3
 800b068:	2000      	movs	r0, #0
 800b06a:	2100      	movs	r1, #0
 800b06c:	f1b8 0f01 	cmp.w	r8, #1
 800b070:	f300 809c 	bgt.w	800b1ac <__kernel_rem_pio2+0x65c>
 800b074:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800b078:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800b07c:	f1b9 0f00 	cmp.w	r9, #0
 800b080:	f040 80a6 	bne.w	800b1d0 <__kernel_rem_pio2+0x680>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	e9c3 5600 	strd	r5, r6, [r3]
 800b08a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b08e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b092:	e7ca      	b.n	800b02a <__kernel_rem_pio2+0x4da>
 800b094:	9d05      	ldr	r5, [sp, #20]
 800b096:	ab48      	add	r3, sp, #288	@ 0x120
 800b098:	441d      	add	r5, r3
 800b09a:	4644      	mov	r4, r8
 800b09c:	2000      	movs	r0, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	2c00      	cmp	r4, #0
 800b0a2:	da35      	bge.n	800b110 <__kernel_rem_pio2+0x5c0>
 800b0a4:	f1b9 0f00 	cmp.w	r9, #0
 800b0a8:	d038      	beq.n	800b11c <__kernel_rem_pio2+0x5cc>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0b0:	9c04      	ldr	r4, [sp, #16]
 800b0b2:	e9c4 2300 	strd	r2, r3, [r4]
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b0be:	f7f5 f887 	bl	80001d0 <__aeabi_dsub>
 800b0c2:	ad4a      	add	r5, sp, #296	@ 0x128
 800b0c4:	2401      	movs	r4, #1
 800b0c6:	45a0      	cmp	r8, r4
 800b0c8:	da2b      	bge.n	800b122 <__kernel_rem_pio2+0x5d2>
 800b0ca:	f1b9 0f00 	cmp.w	r9, #0
 800b0ce:	d002      	beq.n	800b0d6 <__kernel_rem_pio2+0x586>
 800b0d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b0dc:	e7a5      	b.n	800b02a <__kernel_rem_pio2+0x4da>
 800b0de:	9c05      	ldr	r4, [sp, #20]
 800b0e0:	ab48      	add	r3, sp, #288	@ 0x120
 800b0e2:	441c      	add	r4, r3
 800b0e4:	2000      	movs	r0, #0
 800b0e6:	2100      	movs	r1, #0
 800b0e8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ec:	da09      	bge.n	800b102 <__kernel_rem_pio2+0x5b2>
 800b0ee:	f1b9 0f00 	cmp.w	r9, #0
 800b0f2:	d002      	beq.n	800b0fa <__kernel_rem_pio2+0x5aa>
 800b0f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	e9c3 0100 	strd	r0, r1, [r3]
 800b100:	e793      	b.n	800b02a <__kernel_rem_pio2+0x4da>
 800b102:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b106:	f7f5 f865 	bl	80001d4 <__adddf3>
 800b10a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b10e:	e7eb      	b.n	800b0e8 <__kernel_rem_pio2+0x598>
 800b110:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b114:	f7f5 f85e 	bl	80001d4 <__adddf3>
 800b118:	3c01      	subs	r4, #1
 800b11a:	e7c1      	b.n	800b0a0 <__kernel_rem_pio2+0x550>
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	e7c6      	b.n	800b0b0 <__kernel_rem_pio2+0x560>
 800b122:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b126:	f7f5 f855 	bl	80001d4 <__adddf3>
 800b12a:	3401      	adds	r4, #1
 800b12c:	e7cb      	b.n	800b0c6 <__kernel_rem_pio2+0x576>
 800b12e:	ed35 7b02 	vldmdb	r5!, {d7}
 800b132:	ed8d 7b00 	vstr	d7, [sp]
 800b136:	ed95 7b02 	vldr	d7, [r5, #8]
 800b13a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b13e:	ec53 2b17 	vmov	r2, r3, d7
 800b142:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b146:	f7f5 f845 	bl	80001d4 <__adddf3>
 800b14a:	4602      	mov	r2, r0
 800b14c:	460b      	mov	r3, r1
 800b14e:	4606      	mov	r6, r0
 800b150:	460f      	mov	r7, r1
 800b152:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b156:	f7f5 f83b 	bl	80001d0 <__aeabi_dsub>
 800b15a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b15e:	f7f5 f839 	bl	80001d4 <__adddf3>
 800b162:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b166:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b16a:	e9c5 6700 	strd	r6, r7, [r5]
 800b16e:	e771      	b.n	800b054 <__kernel_rem_pio2+0x504>
 800b170:	ed34 7b02 	vldmdb	r4!, {d7}
 800b174:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b178:	ec51 0b17 	vmov	r0, r1, d7
 800b17c:	4652      	mov	r2, sl
 800b17e:	465b      	mov	r3, fp
 800b180:	ed8d 7b00 	vstr	d7, [sp]
 800b184:	f7f5 f826 	bl	80001d4 <__adddf3>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	4606      	mov	r6, r0
 800b18e:	460f      	mov	r7, r1
 800b190:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b194:	f7f5 f81c 	bl	80001d0 <__aeabi_dsub>
 800b198:	4652      	mov	r2, sl
 800b19a:	465b      	mov	r3, fp
 800b19c:	f7f5 f81a 	bl	80001d4 <__adddf3>
 800b1a0:	3d01      	subs	r5, #1
 800b1a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1a6:	e9c4 6700 	strd	r6, r7, [r4]
 800b1aa:	e757      	b.n	800b05c <__kernel_rem_pio2+0x50c>
 800b1ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1b0:	f7f5 f810 	bl	80001d4 <__adddf3>
 800b1b4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b1b8:	e758      	b.n	800b06c <__kernel_rem_pio2+0x51c>
 800b1ba:	bf00      	nop
 800b1bc:	f3af 8000 	nop.w
	...
 800b1c8:	41700000 	.word	0x41700000
 800b1cc:	3e700000 	.word	0x3e700000
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	9a04      	ldr	r2, [sp, #16]
 800b1d4:	601d      	str	r5, [r3, #0]
 800b1d6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800b1da:	605c      	str	r4, [r3, #4]
 800b1dc:	609f      	str	r7, [r3, #8]
 800b1de:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800b1e2:	60d3      	str	r3, [r2, #12]
 800b1e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1e8:	6110      	str	r0, [r2, #16]
 800b1ea:	6153      	str	r3, [r2, #20]
 800b1ec:	e71d      	b.n	800b02a <__kernel_rem_pio2+0x4da>
 800b1ee:	bf00      	nop

0800b1f0 <__kernel_cos>:
 800b1f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f4:	ec57 6b10 	vmov	r6, r7, d0
 800b1f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b1fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b200:	ed8d 1b00 	vstr	d1, [sp]
 800b204:	d206      	bcs.n	800b214 <__kernel_cos+0x24>
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 fc33 	bl	8000a74 <__aeabi_d2iz>
 800b20e:	2800      	cmp	r0, #0
 800b210:	f000 8088 	beq.w	800b324 <__kernel_cos+0x134>
 800b214:	4632      	mov	r2, r6
 800b216:	463b      	mov	r3, r7
 800b218:	4630      	mov	r0, r6
 800b21a:	4639      	mov	r1, r7
 800b21c:	f7f5 f990 	bl	8000540 <__aeabi_dmul>
 800b220:	4b51      	ldr	r3, [pc, #324]	@ (800b368 <__kernel_cos+0x178>)
 800b222:	2200      	movs	r2, #0
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	f7f5 f98a 	bl	8000540 <__aeabi_dmul>
 800b22c:	a340      	add	r3, pc, #256	@ (adr r3, 800b330 <__kernel_cos+0x140>)
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	4682      	mov	sl, r0
 800b234:	468b      	mov	fp, r1
 800b236:	4620      	mov	r0, r4
 800b238:	4629      	mov	r1, r5
 800b23a:	f7f5 f981 	bl	8000540 <__aeabi_dmul>
 800b23e:	a33e      	add	r3, pc, #248	@ (adr r3, 800b338 <__kernel_cos+0x148>)
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f7f4 ffc6 	bl	80001d4 <__adddf3>
 800b248:	4622      	mov	r2, r4
 800b24a:	462b      	mov	r3, r5
 800b24c:	f7f5 f978 	bl	8000540 <__aeabi_dmul>
 800b250:	a33b      	add	r3, pc, #236	@ (adr r3, 800b340 <__kernel_cos+0x150>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f4 ffbb 	bl	80001d0 <__aeabi_dsub>
 800b25a:	4622      	mov	r2, r4
 800b25c:	462b      	mov	r3, r5
 800b25e:	f7f5 f96f 	bl	8000540 <__aeabi_dmul>
 800b262:	a339      	add	r3, pc, #228	@ (adr r3, 800b348 <__kernel_cos+0x158>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f4 ffb4 	bl	80001d4 <__adddf3>
 800b26c:	4622      	mov	r2, r4
 800b26e:	462b      	mov	r3, r5
 800b270:	f7f5 f966 	bl	8000540 <__aeabi_dmul>
 800b274:	a336      	add	r3, pc, #216	@ (adr r3, 800b350 <__kernel_cos+0x160>)
 800b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27a:	f7f4 ffa9 	bl	80001d0 <__aeabi_dsub>
 800b27e:	4622      	mov	r2, r4
 800b280:	462b      	mov	r3, r5
 800b282:	f7f5 f95d 	bl	8000540 <__aeabi_dmul>
 800b286:	a334      	add	r3, pc, #208	@ (adr r3, 800b358 <__kernel_cos+0x168>)
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f7f4 ffa2 	bl	80001d4 <__adddf3>
 800b290:	4622      	mov	r2, r4
 800b292:	462b      	mov	r3, r5
 800b294:	f7f5 f954 	bl	8000540 <__aeabi_dmul>
 800b298:	4622      	mov	r2, r4
 800b29a:	462b      	mov	r3, r5
 800b29c:	f7f5 f950 	bl	8000540 <__aeabi_dmul>
 800b2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	460d      	mov	r5, r1
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 f948 	bl	8000540 <__aeabi_dmul>
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f7f4 ff8a 	bl	80001d0 <__aeabi_dsub>
 800b2bc:	4b2b      	ldr	r3, [pc, #172]	@ (800b36c <__kernel_cos+0x17c>)
 800b2be:	4598      	cmp	r8, r3
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	d810      	bhi.n	800b2e8 <__kernel_cos+0xf8>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	4650      	mov	r0, sl
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	f7f4 ff7f 	bl	80001d0 <__aeabi_dsub>
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4926      	ldr	r1, [pc, #152]	@ (800b370 <__kernel_cos+0x180>)
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	2000      	movs	r0, #0
 800b2da:	f7f4 ff79 	bl	80001d0 <__aeabi_dsub>
 800b2de:	ec41 0b10 	vmov	d0, r0, r1
 800b2e2:	b003      	add	sp, #12
 800b2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e8:	4b22      	ldr	r3, [pc, #136]	@ (800b374 <__kernel_cos+0x184>)
 800b2ea:	4921      	ldr	r1, [pc, #132]	@ (800b370 <__kernel_cos+0x180>)
 800b2ec:	4598      	cmp	r8, r3
 800b2ee:	bf8c      	ite	hi
 800b2f0:	4d21      	ldrhi	r5, [pc, #132]	@ (800b378 <__kernel_cos+0x188>)
 800b2f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b2f6:	2400      	movs	r4, #0
 800b2f8:	4622      	mov	r2, r4
 800b2fa:	462b      	mov	r3, r5
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	f7f4 ff67 	bl	80001d0 <__aeabi_dsub>
 800b302:	4622      	mov	r2, r4
 800b304:	4680      	mov	r8, r0
 800b306:	4689      	mov	r9, r1
 800b308:	462b      	mov	r3, r5
 800b30a:	4650      	mov	r0, sl
 800b30c:	4659      	mov	r1, fp
 800b30e:	f7f4 ff5f 	bl	80001d0 <__aeabi_dsub>
 800b312:	4632      	mov	r2, r6
 800b314:	463b      	mov	r3, r7
 800b316:	f7f4 ff5b 	bl	80001d0 <__aeabi_dsub>
 800b31a:	4602      	mov	r2, r0
 800b31c:	460b      	mov	r3, r1
 800b31e:	4640      	mov	r0, r8
 800b320:	4649      	mov	r1, r9
 800b322:	e7da      	b.n	800b2da <__kernel_cos+0xea>
 800b324:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b360 <__kernel_cos+0x170>
 800b328:	e7db      	b.n	800b2e2 <__kernel_cos+0xf2>
 800b32a:	bf00      	nop
 800b32c:	f3af 8000 	nop.w
 800b330:	be8838d4 	.word	0xbe8838d4
 800b334:	bda8fae9 	.word	0xbda8fae9
 800b338:	bdb4b1c4 	.word	0xbdb4b1c4
 800b33c:	3e21ee9e 	.word	0x3e21ee9e
 800b340:	809c52ad 	.word	0x809c52ad
 800b344:	3e927e4f 	.word	0x3e927e4f
 800b348:	19cb1590 	.word	0x19cb1590
 800b34c:	3efa01a0 	.word	0x3efa01a0
 800b350:	16c15177 	.word	0x16c15177
 800b354:	3f56c16c 	.word	0x3f56c16c
 800b358:	5555554c 	.word	0x5555554c
 800b35c:	3fa55555 	.word	0x3fa55555
 800b360:	00000000 	.word	0x00000000
 800b364:	3ff00000 	.word	0x3ff00000
 800b368:	3fe00000 	.word	0x3fe00000
 800b36c:	3fd33332 	.word	0x3fd33332
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	3fe90000 	.word	0x3fe90000
 800b378:	3fd20000 	.word	0x3fd20000
 800b37c:	00000000 	.word	0x00000000

0800b380 <__kernel_sin>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	ec55 4b10 	vmov	r4, r5, d0
 800b388:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b38c:	b085      	sub	sp, #20
 800b38e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b392:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b396:	4680      	mov	r8, r0
 800b398:	d205      	bcs.n	800b3a6 <__kernel_sin+0x26>
 800b39a:	4620      	mov	r0, r4
 800b39c:	4629      	mov	r1, r5
 800b39e:	f7f5 fb69 	bl	8000a74 <__aeabi_d2iz>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d052      	beq.n	800b44c <__kernel_sin+0xcc>
 800b3a6:	4622      	mov	r2, r4
 800b3a8:	462b      	mov	r3, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f7f5 f8c7 	bl	8000540 <__aeabi_dmul>
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	468b      	mov	fp, r1
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7f5 f8bf 	bl	8000540 <__aeabi_dmul>
 800b3c2:	a342      	add	r3, pc, #264	@ (adr r3, 800b4cc <__kernel_sin+0x14c>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b3cc:	4650      	mov	r0, sl
 800b3ce:	4659      	mov	r1, fp
 800b3d0:	f7f5 f8b6 	bl	8000540 <__aeabi_dmul>
 800b3d4:	a33f      	add	r3, pc, #252	@ (adr r3, 800b4d4 <__kernel_sin+0x154>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f7f4 fef9 	bl	80001d0 <__aeabi_dsub>
 800b3de:	4652      	mov	r2, sl
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	f7f5 f8ad 	bl	8000540 <__aeabi_dmul>
 800b3e6:	a33d      	add	r3, pc, #244	@ (adr r3, 800b4dc <__kernel_sin+0x15c>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f4 fef2 	bl	80001d4 <__adddf3>
 800b3f0:	4652      	mov	r2, sl
 800b3f2:	465b      	mov	r3, fp
 800b3f4:	f7f5 f8a4 	bl	8000540 <__aeabi_dmul>
 800b3f8:	a33a      	add	r3, pc, #232	@ (adr r3, 800b4e4 <__kernel_sin+0x164>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	f7f4 fee7 	bl	80001d0 <__aeabi_dsub>
 800b402:	4652      	mov	r2, sl
 800b404:	465b      	mov	r3, fp
 800b406:	f7f5 f89b 	bl	8000540 <__aeabi_dmul>
 800b40a:	a338      	add	r3, pc, #224	@ (adr r3, 800b4ec <__kernel_sin+0x16c>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f4 fee0 	bl	80001d4 <__adddf3>
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	f1b8 0f00 	cmp.w	r8, #0
 800b41c:	d11b      	bne.n	800b456 <__kernel_sin+0xd6>
 800b41e:	4602      	mov	r2, r0
 800b420:	460b      	mov	r3, r1
 800b422:	4650      	mov	r0, sl
 800b424:	4659      	mov	r1, fp
 800b426:	f7f5 f88b 	bl	8000540 <__aeabi_dmul>
 800b42a:	a325      	add	r3, pc, #148	@ (adr r3, 800b4c0 <__kernel_sin+0x140>)
 800b42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b430:	f7f4 fece 	bl	80001d0 <__aeabi_dsub>
 800b434:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b438:	f7f5 f882 	bl	8000540 <__aeabi_dmul>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f4 fec6 	bl	80001d4 <__adddf3>
 800b448:	4604      	mov	r4, r0
 800b44a:	460d      	mov	r5, r1
 800b44c:	ec45 4b10 	vmov	d0, r4, r5
 800b450:	b005      	add	sp, #20
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c8 <__kernel_sin+0x148>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	f7f5 f86f 	bl	8000540 <__aeabi_dmul>
 800b462:	4632      	mov	r2, r6
 800b464:	4680      	mov	r8, r0
 800b466:	4689      	mov	r9, r1
 800b468:	463b      	mov	r3, r7
 800b46a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b46e:	f7f5 f867 	bl	8000540 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4640      	mov	r0, r8
 800b478:	4649      	mov	r1, r9
 800b47a:	f7f4 fea9 	bl	80001d0 <__aeabi_dsub>
 800b47e:	4652      	mov	r2, sl
 800b480:	465b      	mov	r3, fp
 800b482:	f7f5 f85d 	bl	8000540 <__aeabi_dmul>
 800b486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b48a:	f7f4 fea1 	bl	80001d0 <__aeabi_dsub>
 800b48e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b4c0 <__kernel_sin+0x140>)
 800b490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b494:	4606      	mov	r6, r0
 800b496:	460f      	mov	r7, r1
 800b498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b49c:	f7f5 f850 	bl	8000540 <__aeabi_dmul>
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4630      	mov	r0, r6
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	f7f4 fe94 	bl	80001d4 <__adddf3>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f4 fe8c 	bl	80001d0 <__aeabi_dsub>
 800b4b8:	e7c6      	b.n	800b448 <__kernel_sin+0xc8>
 800b4ba:	bf00      	nop
 800b4bc:	f3af 8000 	nop.w
 800b4c0:	55555549 	.word	0x55555549
 800b4c4:	3fc55555 	.word	0x3fc55555
 800b4c8:	3fe00000 	.word	0x3fe00000
 800b4cc:	5acfd57c 	.word	0x5acfd57c
 800b4d0:	3de5d93a 	.word	0x3de5d93a
 800b4d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b4d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b4dc:	57b1fe7d 	.word	0x57b1fe7d
 800b4e0:	3ec71de3 	.word	0x3ec71de3
 800b4e4:	19c161d5 	.word	0x19c161d5
 800b4e8:	3f2a01a0 	.word	0x3f2a01a0
 800b4ec:	1110f8a6 	.word	0x1110f8a6
 800b4f0:	3f811111 	.word	0x3f811111

0800b4f4 <fabs>:
 800b4f4:	ec51 0b10 	vmov	r0, r1, d0
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b4fe:	ec43 2b10 	vmov	d0, r2, r3
 800b502:	4770      	bx	lr
 800b504:	0000      	movs	r0, r0
	...

0800b508 <scalbn>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	ec55 4b10 	vmov	r4, r5, d0
 800b50e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b512:	4606      	mov	r6, r0
 800b514:	462b      	mov	r3, r5
 800b516:	b991      	cbnz	r1, 800b53e <scalbn+0x36>
 800b518:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b51c:	4323      	orrs	r3, r4
 800b51e:	d03b      	beq.n	800b598 <scalbn+0x90>
 800b520:	4b33      	ldr	r3, [pc, #204]	@ (800b5f0 <scalbn+0xe8>)
 800b522:	4620      	mov	r0, r4
 800b524:	4629      	mov	r1, r5
 800b526:	2200      	movs	r2, #0
 800b528:	f7f5 f80a 	bl	8000540 <__aeabi_dmul>
 800b52c:	4b31      	ldr	r3, [pc, #196]	@ (800b5f4 <scalbn+0xec>)
 800b52e:	429e      	cmp	r6, r3
 800b530:	4604      	mov	r4, r0
 800b532:	460d      	mov	r5, r1
 800b534:	da0f      	bge.n	800b556 <scalbn+0x4e>
 800b536:	a326      	add	r3, pc, #152	@ (adr r3, 800b5d0 <scalbn+0xc8>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	e01e      	b.n	800b57c <scalbn+0x74>
 800b53e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b542:	4291      	cmp	r1, r2
 800b544:	d10b      	bne.n	800b55e <scalbn+0x56>
 800b546:	4622      	mov	r2, r4
 800b548:	4620      	mov	r0, r4
 800b54a:	4629      	mov	r1, r5
 800b54c:	f7f4 fe42 	bl	80001d4 <__adddf3>
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	e020      	b.n	800b598 <scalbn+0x90>
 800b556:	460b      	mov	r3, r1
 800b558:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b55c:	3936      	subs	r1, #54	@ 0x36
 800b55e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b562:	4296      	cmp	r6, r2
 800b564:	dd0d      	ble.n	800b582 <scalbn+0x7a>
 800b566:	2d00      	cmp	r5, #0
 800b568:	a11b      	add	r1, pc, #108	@ (adr r1, 800b5d8 <scalbn+0xd0>)
 800b56a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b56e:	da02      	bge.n	800b576 <scalbn+0x6e>
 800b570:	a11b      	add	r1, pc, #108	@ (adr r1, 800b5e0 <scalbn+0xd8>)
 800b572:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b576:	a318      	add	r3, pc, #96	@ (adr r3, 800b5d8 <scalbn+0xd0>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	f7f4 ffe0 	bl	8000540 <__aeabi_dmul>
 800b580:	e7e6      	b.n	800b550 <scalbn+0x48>
 800b582:	1872      	adds	r2, r6, r1
 800b584:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b588:	428a      	cmp	r2, r1
 800b58a:	dcec      	bgt.n	800b566 <scalbn+0x5e>
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	dd06      	ble.n	800b59e <scalbn+0x96>
 800b590:	f36f 531e 	bfc	r3, #20, #11
 800b594:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b598:	ec45 4b10 	vmov	d0, r4, r5
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b5a2:	da08      	bge.n	800b5b6 <scalbn+0xae>
 800b5a4:	2d00      	cmp	r5, #0
 800b5a6:	a10a      	add	r1, pc, #40	@ (adr r1, 800b5d0 <scalbn+0xc8>)
 800b5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ac:	dac3      	bge.n	800b536 <scalbn+0x2e>
 800b5ae:	a10e      	add	r1, pc, #56	@ (adr r1, 800b5e8 <scalbn+0xe0>)
 800b5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5b4:	e7bf      	b.n	800b536 <scalbn+0x2e>
 800b5b6:	3236      	adds	r2, #54	@ 0x36
 800b5b8:	f36f 531e 	bfc	r3, #20, #11
 800b5bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f8 <scalbn+0xf0>)
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	e7d8      	b.n	800b57c <scalbn+0x74>
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	c2f8f359 	.word	0xc2f8f359
 800b5d4:	01a56e1f 	.word	0x01a56e1f
 800b5d8:	8800759c 	.word	0x8800759c
 800b5dc:	7e37e43c 	.word	0x7e37e43c
 800b5e0:	8800759c 	.word	0x8800759c
 800b5e4:	fe37e43c 	.word	0xfe37e43c
 800b5e8:	c2f8f359 	.word	0xc2f8f359
 800b5ec:	81a56e1f 	.word	0x81a56e1f
 800b5f0:	43500000 	.word	0x43500000
 800b5f4:	ffff3cb0 	.word	0xffff3cb0
 800b5f8:	3c900000 	.word	0x3c900000
 800b5fc:	00000000 	.word	0x00000000

0800b600 <floor>:
 800b600:	ec51 0b10 	vmov	r0, r1, d0
 800b604:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b60c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b610:	2e13      	cmp	r6, #19
 800b612:	460c      	mov	r4, r1
 800b614:	4605      	mov	r5, r0
 800b616:	4680      	mov	r8, r0
 800b618:	dc34      	bgt.n	800b684 <floor+0x84>
 800b61a:	2e00      	cmp	r6, #0
 800b61c:	da17      	bge.n	800b64e <floor+0x4e>
 800b61e:	a332      	add	r3, pc, #200	@ (adr r3, 800b6e8 <floor+0xe8>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f4 fdd6 	bl	80001d4 <__adddf3>
 800b628:	2200      	movs	r2, #0
 800b62a:	2300      	movs	r3, #0
 800b62c:	f7f5 fa18 	bl	8000a60 <__aeabi_dcmpgt>
 800b630:	b150      	cbz	r0, 800b648 <floor+0x48>
 800b632:	2c00      	cmp	r4, #0
 800b634:	da55      	bge.n	800b6e2 <floor+0xe2>
 800b636:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b63a:	432c      	orrs	r4, r5
 800b63c:	2500      	movs	r5, #0
 800b63e:	42ac      	cmp	r4, r5
 800b640:	4c2b      	ldr	r4, [pc, #172]	@ (800b6f0 <floor+0xf0>)
 800b642:	bf08      	it	eq
 800b644:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b648:	4621      	mov	r1, r4
 800b64a:	4628      	mov	r0, r5
 800b64c:	e023      	b.n	800b696 <floor+0x96>
 800b64e:	4f29      	ldr	r7, [pc, #164]	@ (800b6f4 <floor+0xf4>)
 800b650:	4137      	asrs	r7, r6
 800b652:	ea01 0307 	and.w	r3, r1, r7
 800b656:	4303      	orrs	r3, r0
 800b658:	d01d      	beq.n	800b696 <floor+0x96>
 800b65a:	a323      	add	r3, pc, #140	@ (adr r3, 800b6e8 <floor+0xe8>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fdb8 	bl	80001d4 <__adddf3>
 800b664:	2200      	movs	r2, #0
 800b666:	2300      	movs	r3, #0
 800b668:	f7f5 f9fa 	bl	8000a60 <__aeabi_dcmpgt>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d0eb      	beq.n	800b648 <floor+0x48>
 800b670:	2c00      	cmp	r4, #0
 800b672:	bfbe      	ittt	lt
 800b674:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b678:	4133      	asrlt	r3, r6
 800b67a:	18e4      	addlt	r4, r4, r3
 800b67c:	ea24 0407 	bic.w	r4, r4, r7
 800b680:	2500      	movs	r5, #0
 800b682:	e7e1      	b.n	800b648 <floor+0x48>
 800b684:	2e33      	cmp	r6, #51	@ 0x33
 800b686:	dd0a      	ble.n	800b69e <floor+0x9e>
 800b688:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b68c:	d103      	bne.n	800b696 <floor+0x96>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	f7f4 fd9f 	bl	80001d4 <__adddf3>
 800b696:	ec41 0b10 	vmov	d0, r0, r1
 800b69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b6a2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b6a6:	40df      	lsrs	r7, r3
 800b6a8:	4207      	tst	r7, r0
 800b6aa:	d0f4      	beq.n	800b696 <floor+0x96>
 800b6ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800b6e8 <floor+0xe8>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fd8f 	bl	80001d4 <__adddf3>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	f7f5 f9d1 	bl	8000a60 <__aeabi_dcmpgt>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d0c2      	beq.n	800b648 <floor+0x48>
 800b6c2:	2c00      	cmp	r4, #0
 800b6c4:	da0a      	bge.n	800b6dc <floor+0xdc>
 800b6c6:	2e14      	cmp	r6, #20
 800b6c8:	d101      	bne.n	800b6ce <floor+0xce>
 800b6ca:	3401      	adds	r4, #1
 800b6cc:	e006      	b.n	800b6dc <floor+0xdc>
 800b6ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	40b3      	lsls	r3, r6
 800b6d6:	441d      	add	r5, r3
 800b6d8:	4545      	cmp	r5, r8
 800b6da:	d3f6      	bcc.n	800b6ca <floor+0xca>
 800b6dc:	ea25 0507 	bic.w	r5, r5, r7
 800b6e0:	e7b2      	b.n	800b648 <floor+0x48>
 800b6e2:	2500      	movs	r5, #0
 800b6e4:	462c      	mov	r4, r5
 800b6e6:	e7af      	b.n	800b648 <floor+0x48>
 800b6e8:	8800759c 	.word	0x8800759c
 800b6ec:	7e37e43c 	.word	0x7e37e43c
 800b6f0:	bff00000 	.word	0xbff00000
 800b6f4:	000fffff 	.word	0x000fffff

0800b6f8 <_init>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	bf00      	nop
 800b6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6fe:	bc08      	pop	{r3}
 800b700:	469e      	mov	lr, r3
 800b702:	4770      	bx	lr

0800b704 <_fini>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	bf00      	nop
 800b708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70a:	bc08      	pop	{r3}
 800b70c:	469e      	mov	lr, r3
 800b70e:	4770      	bx	lr
