
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008734  08008734  00009734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008754  08008754  0000a01c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008754  08008754  00009754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800875c  0800875c  0000a01c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800875c  0800875c  0000975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008760  08008760  00009760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08008764  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a01c  2**0
                  CONTENTS
 10 .bss          00000ca4  2000001c  2000001c  0000a01c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000cc0  20000cc0  0000a01c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a01c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f546  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c90  00000000  00000000  00029592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  0002e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153a  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c01  00000000  00000000  000312b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c22  00000000  00000000  00057eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b95  00000000  00000000  0007bad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015f66a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007278  00000000  00000000  0015f6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00166928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800871c 	.word	0x0800871c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800871c 	.word	0x0800871c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000508:	4a22      	ldr	r2, [pc, #136]	@ (8000594 <MX_ADC1_Init+0xa0>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800051a:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800052e:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000536:	4b16      	ldr	r3, [pc, #88]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000538:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000546:	2201      	movs	r2, #1
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_ADC1_Init+0x9c>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	480d      	ldr	r0, [pc, #52]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800055a:	f001 fc67 	bl	8001e2c <HAL_ADC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000564:	f000 fd96 	bl	8001094 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000568:	2301      	movs	r3, #1
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000570:	2304      	movs	r3, #4
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_ADC1_Init+0x9c>)
 800057a:	f001 fecf 	bl	800231c <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000584:	f000 fd86 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000038 	.word	0x20000038
 8000594:	40012000 	.word	0x40012000

08000598 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a33      	ldr	r2, [pc, #204]	@ (8000684 <HAL_ADC_MspInit+0xec>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d160      	bne.n	800067c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b32      	ldr	r3, [pc, #200]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c2:	4a31      	ldr	r2, [pc, #196]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80005ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a2a      	ldr	r2, [pc, #168]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <HAL_ADC_MspInit+0xf0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005f2:	2302      	movs	r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005f6:	2303      	movs	r3, #3
 80005f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	4821      	ldr	r0, [pc, #132]	@ (800068c <HAL_ADC_MspInit+0xf4>)
 8000606:	f002 fdb5 	bl	8003174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800060a:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <HAL_ADC_MspInit+0xfc>)
 800060e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000610:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800061c:	4b1c      	ldr	r3, [pc, #112]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000622:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000628:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 800062c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000630:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000632:	4b17      	ldr	r3, [pc, #92]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000638:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 800063c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000640:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000644:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000648:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000650:	480f      	ldr	r0, [pc, #60]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000652:	f002 fa1f 	bl	8002a94 <HAL_DMA_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800065c:	f000 fd1a 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4a0b      	ldr	r2, [pc, #44]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000664:	639a      	str	r2, [r3, #56]	@ 0x38
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <HAL_ADC_MspInit+0xf8>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2012      	movs	r0, #18
 8000672:	f002 f9d8 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000676:	2012      	movs	r0, #18
 8000678:	f002 f9f1 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067c:	bf00      	nop
 800067e:	3728      	adds	r7, #40	@ 0x28
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40012000 	.word	0x40012000
 8000688:	40023800 	.word	0x40023800
 800068c:	40020000 	.word	0x40020000
 8000690:	20000080 	.word	0x20000080
 8000694:	40026410 	.word	0x40026410

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_DMA_Init+0x78>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <MX_DMA_Init+0x78>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_DMA_Init+0x78>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	603b      	str	r3, [r7, #0]
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_DMA_Init+0x78>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <MX_DMA_Init+0x78>)
 80006c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_DMA_Init+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200b      	movs	r0, #11
 80006dc:	f002 f9a3 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006e0:	200b      	movs	r0, #11
 80006e2:	f002 f9bc 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	202f      	movs	r0, #47	@ 0x2f
 80006ec:	f002 f99b 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80006f0:	202f      	movs	r0, #47	@ 0x2f
 80006f2:	f002 f9b4 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2038      	movs	r0, #56	@ 0x38
 80006fc:	f002 f993 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000700:	2038      	movs	r0, #56	@ 0x38
 8000702:	f002 f9ac 	bl	8002a5e <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800

08000714 <MX_GPIO_Init>:
     PC3   ------> I2S2_SD
     PA4   ------> COMP_DAC1_group
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	@ 0x30
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	4b78      	ldr	r3, [pc, #480]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a77      	ldr	r2, [pc, #476]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b75      	ldr	r3, [pc, #468]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	4b71      	ldr	r3, [pc, #452]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a70      	ldr	r2, [pc, #448]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b6e      	ldr	r3, [pc, #440]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b6a      	ldr	r3, [pc, #424]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a69      	ldr	r2, [pc, #420]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b67      	ldr	r3, [pc, #412]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b63      	ldr	r3, [pc, #396]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a62      	ldr	r2, [pc, #392]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b60      	ldr	r3, [pc, #384]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b5c      	ldr	r3, [pc, #368]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a5b      	ldr	r2, [pc, #364]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b59      	ldr	r3, [pc, #356]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b55      	ldr	r3, [pc, #340]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a54      	ldr	r2, [pc, #336]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b52      	ldr	r3, [pc, #328]	@ (8000910 <MX_GPIO_Init+0x1fc>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0308 	and.w	r3, r3, #8
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	484f      	ldr	r0, [pc, #316]	@ (8000914 <MX_GPIO_Init+0x200>)
 80007d8:	f002 ff64 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	484d      	ldr	r0, [pc, #308]	@ (8000918 <MX_GPIO_Init+0x204>)
 80007e2:	f002 ff5f 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	2200      	movs	r2, #0
 80007e8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007ec:	484b      	ldr	r0, [pc, #300]	@ (800091c <MX_GPIO_Init+0x208>)
 80007ee:	f002 ff59 	bl	80036a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4842      	ldr	r0, [pc, #264]	@ (8000914 <MX_GPIO_Init+0x200>)
 800080a:	f002 fcb3 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800080e:	2301      	movs	r3, #1
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	483c      	ldr	r0, [pc, #240]	@ (8000918 <MX_GPIO_Init+0x204>)
 8000826:	f002 fca5 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800083a:	2305      	movs	r3, #5
 800083c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4834      	ldr	r0, [pc, #208]	@ (8000918 <MX_GPIO_Init+0x204>)
 8000846:	f002 fc95 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	2301      	movs	r3, #1
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800084e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4830      	ldr	r0, [pc, #192]	@ (8000920 <MX_GPIO_Init+0x20c>)
 8000860:	f002 fc88 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000864:	2310      	movs	r3, #16
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000868:	2303      	movs	r3, #3
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	482a      	ldr	r0, [pc, #168]	@ (8000920 <MX_GPIO_Init+0x20c>)
 8000878:	f002 fc7c 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800087c:	2304      	movs	r3, #4
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4825      	ldr	r0, [pc, #148]	@ (8000924 <MX_GPIO_Init+0x210>)
 8000890:	f002 fc70 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	481c      	ldr	r0, [pc, #112]	@ (8000924 <MX_GPIO_Init+0x210>)
 80008b2:	f002 fc5f 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_GPIO_Init+0x208>)
 80008d0:	f002 fc50 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480d      	ldr	r0, [pc, #52]	@ (800091c <MX_GPIO_Init+0x208>)
 80008e8:	f002 fc44 	bl	8003174 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	@ (8000914 <MX_GPIO_Init+0x200>)
 8000902:	f002 fc37 	bl	8003174 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	@ 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020800 	.word	0x40020800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020400 	.word	0x40020400

08000928 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x50>)
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <MX_I2C1_Init+0x54>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000934:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_I2C1_Init+0x58>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800094a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_I2C1_Init+0x50>)
 8000966:	f002 fed1 	bl	800370c <HAL_I2C_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000970:	f000 fb90 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200000e0 	.word	0x200000e0
 800097c:	40005400 	.word	0x40005400
 8000980:	000186a0 	.word	0x000186a0

08000984 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_I2C3_Init+0x50>)
 800098a:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_I2C3_Init+0x54>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_I2C3_Init+0x50>)
 8000990:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <MX_I2C3_Init+0x58>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_I2C3_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_I2C3_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_I2C3_Init+0x50>)
 80009c2:	f002 fea3 	bl	800370c <HAL_I2C_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009cc:	f000 fb62 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000134 	.word	0x20000134
 80009d8:	40005c00 	.word	0x40005c00
 80009dc:	000186a0 	.word	0x000186a0

080009e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a42      	ldr	r2, [pc, #264]	@ (8000b08 <HAL_I2C_MspInit+0x128>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12d      	bne.n	8000a5e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b41      	ldr	r3, [pc, #260]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a40      	ldr	r2, [pc, #256]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a1e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4835      	ldr	r0, [pc, #212]	@ (8000b10 <HAL_I2C_MspInit+0x130>)
 8000a3c:	f002 fb9a 	bl	8003174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a48:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000a5c:	e050      	b.n	8000b00 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a2c      	ldr	r2, [pc, #176]	@ (8000b14 <HAL_I2C_MspInit+0x134>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d14b      	bne.n	8000b00 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a70:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a78:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa6:	2312      	movs	r3, #18
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4816      	ldr	r0, [pc, #88]	@ (8000b18 <HAL_I2C_MspInit+0x138>)
 8000abe:	f002 fb59 	bl	8003174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac8:	2312      	movs	r3, #18
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <HAL_I2C_MspInit+0x13c>)
 8000ae0:	f002 fb48 	bl	8003174 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000aee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000af2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af4:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_I2C_MspInit+0x12c>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	@ 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40005c00 	.word	0x40005c00
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020000 	.word	0x40020000

08000b20 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a15      	ldr	r2, [pc, #84]	@ (8000b84 <HAL_I2C_MspDeInit+0x64>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10f      	bne.n	8000b52 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_I2C_MspDeInit+0x68>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <HAL_I2C_MspDeInit+0x68>)
 8000b38:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b3c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8000b3e:	2140      	movs	r1, #64	@ 0x40
 8000b40:	4812      	ldr	r0, [pc, #72]	@ (8000b8c <HAL_I2C_MspDeInit+0x6c>)
 8000b42:	f002 fcb3 	bl	80034ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8000b46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b4a:	4810      	ldr	r0, [pc, #64]	@ (8000b8c <HAL_I2C_MspDeInit+0x6c>)
 8000b4c:	f002 fcae 	bl	80034ac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000b50:	e014      	b.n	8000b7c <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a0e      	ldr	r2, [pc, #56]	@ (8000b90 <HAL_I2C_MspDeInit+0x70>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d10f      	bne.n	8000b7c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_I2C_MspDeInit+0x68>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <HAL_I2C_MspDeInit+0x68>)
 8000b62:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8000b68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b6c:	4809      	ldr	r0, [pc, #36]	@ (8000b94 <HAL_I2C_MspDeInit+0x74>)
 8000b6e:	f002 fc9d 	bl	80034ac <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8000b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b76:	4808      	ldr	r0, [pc, #32]	@ (8000b98 <HAL_I2C_MspDeInit+0x78>)
 8000b78:	f002 fc98 	bl	80034ac <HAL_GPIO_DeInit>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400
 8000b90:	40005c00 	.word	0x40005c00
 8000b94:	40020800 	.word	0x40020800
 8000b98:	40020000 	.word	0x40020000

08000b9c <MX_I2S3_Init>:
DMA_HandleTypeDef hdma_i2s3_ext_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000ba2:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <MX_I2S3_Init+0x58>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bc4:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000bc8:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_I2S3_Init+0x54>)
 8000bde:	f003 fa81 	bl	80040e4 <HAL_I2S_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000be8:	f000 fa54 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	40003c00 	.word	0x40003c00

08000bf8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	@ 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a70      	ldr	r2, [pc, #448]	@ (8000de4 <HAL_I2S_MspInit+0x1ec>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	f040 80d8 	bne.w	8000dda <HAL_I2S_MspInit+0x1e2>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000c2e:	2332      	movs	r3, #50	@ 0x32
 8000c30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fc8c 	bl	8006558 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000c46:	f000 fa25 	bl	8001094 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b66      	ldr	r3, [pc, #408]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	4a65      	ldr	r2, [pc, #404]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5a:	4b63      	ldr	r3, [pc, #396]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a5e      	ldr	r2, [pc, #376]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b5c      	ldr	r3, [pc, #368]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b58      	ldr	r3, [pc, #352]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a57      	ldr	r2, [pc, #348]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b55      	ldr	r3, [pc, #340]	@ (8000de8 <HAL_I2S_MspInit+0x1f0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c9e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484c      	ldr	r0, [pc, #304]	@ (8000dec <HAL_I2S_MspInit+0x1f4>)
 8000cbc:	f002 fa5a 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4844      	ldr	r0, [pc, #272]	@ (8000df0 <HAL_I2S_MspInit+0x1f8>)
 8000cde:	f002 fa49 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000cf4:	2305      	movs	r3, #5
 8000cf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	483b      	ldr	r0, [pc, #236]	@ (8000dec <HAL_I2S_MspInit+0x1f4>)
 8000d00:	f002 fa38 	bl	8003174 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000d04:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d06:	4a3c      	ldr	r2, [pc, #240]	@ (8000df8 <HAL_I2S_MspInit+0x200>)
 8000d08:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d0c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000d10:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d12:	4b38      	ldr	r3, [pc, #224]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d18:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1e:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d24:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d26:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d2c:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d2e:	4b31      	ldr	r3, [pc, #196]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000d36:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d3c:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d44:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d46:	4b2b      	ldr	r3, [pc, #172]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000d4c:	4829      	ldr	r0, [pc, #164]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d4e:	f001 fea1 	bl	8002a94 <HAL_DMA_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8000d58:	f000 f99c 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s3_ext_rx);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a25      	ldr	r2, [pc, #148]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d62:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <HAL_I2S_MspInit+0x1fc>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d6a:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <HAL_I2S_MspInit+0x208>)
 8000d6c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d76:	2240      	movs	r2, #64	@ 0x40
 8000d78:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d86:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d88:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d8e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d96:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000d9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d9e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000da2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000da6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da8:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dae:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000db0:	f001 fe70 	bl	8002a94 <HAL_DMA_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000dba:	f000 f96b 	bl	8001094 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000dc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <HAL_I2S_MspInit+0x204>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2033      	movs	r0, #51	@ 0x33
 8000dd0:	f001 fe29 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dd4:	2033      	movs	r0, #51	@ 0x33
 8000dd6:	f001 fe42 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3738      	adds	r7, #56	@ 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40003c00 	.word	0x40003c00
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	200001d0 	.word	0x200001d0
 8000df8:	40026010 	.word	0x40026010
 8000dfc:	20000230 	.word	0x20000230
 8000e00:	400260b8 	.word	0x400260b8

08000e04 <processData>:
    for (uint16_t i = 0; i < DAC_BUFFER_SIZE; i++) {
        printf("dacData[%d] = %u\n", i, (uint16_t)dacData[i]);
    }
}

void processData() {
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
////		printf("RightOut[%u]: %hd\n", n+1, (int16_t) (16 * rightOut));
//	}
    static int16_t squareWaveValue = 30000; // Amplitude
    static uint8_t toggle = 0;

    for (uint8_t n = 0; n < (AUDIO_BLOCK_SIZE / 2) - 1; n += 2) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e037      	b.n	8000e80 <processData+0x7c>
        // Alternate between +Amplitude and -Amplitude every few samples
        if (n % 50 == 0) { // Adjust 100 to control tone frequency
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4a20      	ldr	r2, [pc, #128]	@ (8000e94 <processData+0x90>)
 8000e14:	fba2 1203 	umull	r1, r2, r2, r3
 8000e18:	0912      	lsrs	r2, r2, #4
 8000e1a:	2132      	movs	r1, #50	@ 0x32
 8000e1c:	fb01 f202 	mul.w	r2, r1, r2
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d109      	bne.n	8000e3c <processData+0x38>
            toggle = !toggle;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <processData+0x94>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <processData+0x94>)
 8000e3a:	701a      	strb	r2, [r3, #0]
        }

        int16_t sample = toggle ? squareWaveValue : -squareWaveValue;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <processData+0x94>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <processData+0x50>
 8000e44:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <processData+0x98>)
 8000e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	e002      	b.n	8000e5a <processData+0x56>
 8000e54:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <processData+0x98>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	80bb      	strh	r3, [r7, #4]

        // Left channel
        outBufPtr[n] = sample;
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <processData+0x9c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	88ba      	ldrh	r2, [r7, #4]
 8000e68:	801a      	strh	r2, [r3, #0]

        // Right channel
        outBufPtr[n + 1] = sample;
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <processData+0x9c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3301      	adds	r3, #1
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	88ba      	ldrh	r2, [r7, #4]
 8000e78:	801a      	strh	r2, [r3, #0]
    for (uint8_t n = 0; n < (AUDIO_BLOCK_SIZE / 2) - 1; n += 2) {
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b7e      	cmp	r3, #126	@ 0x7e
 8000e84:	d9c4      	bls.n	8000e10 <processData+0xc>
    }
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	20000694 	.word	0x20000694
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <HAL_I2S_TxHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[0];
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <HAL_I2S_TxHalfCpltCallback+0x30>)
 8000eb0:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[0];
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_I2S_TxHalfCpltCallback+0x34>)
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <HAL_I2S_TxHalfCpltCallback+0x38>)
 8000eb6:	601a      	str	r2, [r3, #0]

	processData();
 8000eb8:	f7ff ffa4 	bl	8000e04 <processData>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000ebc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ec0:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <HAL_I2S_TxHalfCpltCallback+0x3c>)
 8000ec2:	f002 fc08 	bl	80036d6 <HAL_GPIO_TogglePin>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000690 	.word	0x20000690
 8000ed4:	20000290 	.word	0x20000290
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000490 	.word	0x20000490
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[ADC_BUFFER_SIZE / 2];
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_I2S_TxCpltCallback+0x20>)
 8000eee:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_I2S_TxCpltCallback+0x24>)
 8000ef0:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[DAC_BUFFER_SIZE / 2];
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_I2S_TxCpltCallback+0x28>)
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_I2S_TxCpltCallback+0x2c>)
 8000ef6:	601a      	str	r2, [r3, #0]

	processData();
 8000ef8:	f7ff ff84 	bl	8000e04 <processData>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000690 	.word	0x20000690
 8000f08:	20000390 	.word	0x20000390
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000590 	.word	0x20000590

08000f14 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
//    printf("ADC Half Complete\n");
    // call your processData() here
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
//    printf("ADC Complete\n");
    // call your processData() here

}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fede 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f83c 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f7ff fbe4 	bl	8000714 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f7ff fba4 	bl	8000698 <MX_DMA_Init>
  MX_I2C1_Init();
 8000f50:	f7ff fcea 	bl	8000928 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000f54:	f7ff fe22 	bl	8000b9c <MX_I2S3_Init>
  MX_ADC1_Init();
 8000f58:	f7ff facc 	bl	80004f4 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f5c:	f000 faea 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000f60:	f000 f9c2 	bl	80012e8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000f64:	f000 fa52 	bl	800140c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000f68:	f000 f89a 	bl	80010a0 <MX_SPI1_Init>
  MX_I2C3_Init();
 8000f6c:	f7ff fd0a 	bl	8000984 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_Init(CS43L22_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 100, AUDIO_FREQUENCY_48K);
 8000f70:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000f74:	2264      	movs	r2, #100	@ 0x64
 8000f76:	2102      	movs	r1, #2
 8000f78:	2094      	movs	r0, #148	@ 0x94
 8000f7a:	f000 fb95 	bl	80016a8 <cs43l22_Init>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)dacData, DAC_BUFFER_SIZE);
 8000f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f82:	490a      	ldr	r1, [pc, #40]	@ (8000fac <main+0x70>)
 8000f84:	480a      	ldr	r0, [pc, #40]	@ (8000fb0 <main+0x74>)
 8000f86:	f003 f9ed 	bl	8004364 <HAL_I2S_Transmit_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcData, ADC_BUFFER_SIZE);
 8000f8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8e:	4909      	ldr	r1, [pc, #36]	@ (8000fb4 <main+0x78>)
 8000f90:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <main+0x7c>)
 8000f92:	f001 f89f 	bl	80020d4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <main+0x80>)
 8000f98:	f005 fcf6 	bl	8006988 <HAL_TIM_Base_Start>
  cs43l22_Play(CS43L22_I2C_ADDRESS, (uint16_t*)dacData, DAC_BUFFER_SIZE);
 8000f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa0:	4902      	ldr	r1, [pc, #8]	@ (8000fac <main+0x70>)
 8000fa2:	2094      	movs	r0, #148	@ 0x94
 8000fa4:	f000 fc64 	bl	8001870 <cs43l22_Play>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <main+0x6c>
 8000fac:	20000490 	.word	0x20000490
 8000fb0:	20000188 	.word	0x20000188
 8000fb4:	20000290 	.word	0x20000290
 8000fb8:	20000038 	.word	0x20000038
 8000fbc:	200006f0 	.word	0x200006f0

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2230      	movs	r2, #48	@ 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 fb77 	bl	80086c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	4b28      	ldr	r3, [pc, #160]	@ (800108c <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a27      	ldr	r2, [pc, #156]	@ (800108c <SystemClock_Config+0xcc>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b25      	ldr	r3, [pc, #148]	@ (800108c <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a21      	ldr	r2, [pc, #132]	@ (8001090 <SystemClock_Config+0xd0>)
 800100a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001020:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001026:	2302      	movs	r3, #2
 8001028:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800102e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001030:	2308      	movs	r3, #8
 8001032:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001034:	23a8      	movs	r3, #168	@ 0xa8
 8001036:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800103c:	2307      	movs	r3, #7
 800103e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fdf1 	bl	8005c2c <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001050:	f000 f820 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001054:	230f      	movs	r3, #15
 8001056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001058:	2302      	movs	r3, #2
 800105a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001060:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2105      	movs	r1, #5
 8001072:	4618      	mov	r0, r3
 8001074:	f005 f852 	bl	800611c <HAL_RCC_ClockConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800107e:	f000 f809 	bl	8001094 <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	3750      	adds	r7, #80	@ 0x50
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40007000 	.word	0x40007000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <Error_Handler+0x8>

080010a0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_SPI1_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_SPI1_Init+0x64>)
 80010f2:	f005 fb71 	bl	80067d8 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010fc:	f7ff ffca 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000698 	.word	0x20000698
 8001108:	40013000 	.word	0x40013000

0800110c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08a      	sub	sp, #40	@ 0x28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a19      	ldr	r2, [pc, #100]	@ (8001190 <HAL_SPI_MspInit+0x84>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d12b      	bne.n	8001186 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001138:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001166:	23e0      	movs	r3, #224	@ 0xe0
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001176:	2305      	movs	r3, #5
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_SPI_MspInit+0x8c>)
 8001182:	f001 fff7 	bl	8003174 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40013000 	.word	0x40013000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011da:	2007      	movs	r0, #7
 80011dc:	f001 fc18 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 fdaf 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <DMA1_Stream0_IRQHandler+0x10>)
 8001252:	f001 fd25 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001d0 	.word	0x200001d0

08001260 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <ADC_IRQHandler+0x10>)
 8001266:	f000 fe24 	bl	8001eb2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000038 	.word	0x20000038

08001274 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <DMA1_Stream7_IRQHandler+0x10>)
 800127a:	f001 fd11 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000230 	.word	0x20000230

08001288 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 800128c:	4802      	ldr	r0, [pc, #8]	@ (8001298 <SPI3_IRQHandler+0x10>)
 800128e:	f003 f90d 	bl	80044ac <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000188 	.word	0x20000188

0800129c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <DMA2_Stream0_IRQHandler+0x10>)
 80012a2:	f001 fcfd 	bl	8002ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000080 	.word	0x20000080

080012b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <OTG_FS_IRQHandler+0x10>)
 80012b6:	f003 fdaa 	bl	8004e0e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000780 	.word	0x20000780

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	@ 0x38
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001318:	4b2b      	ldr	r3, [pc, #172]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800131a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800131e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 8001322:	2205      	movs	r2, #5
 8001324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b28      	ldr	r3, [pc, #160]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 291;
 800132c:	4b26      	ldr	r3, [pc, #152]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800132e:	f240 1223 	movw	r2, #291	@ 0x123
 8001332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b24      	ldr	r3, [pc, #144]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b23      	ldr	r3, [pc, #140]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001340:	4821      	ldr	r0, [pc, #132]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 8001342:	f005 fad2 	bl	80068ea <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800134c:	f7ff fea2 	bl	8001094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800135a:	4619      	mov	r1, r3
 800135c:	481a      	ldr	r0, [pc, #104]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800135e:	f005 fc97 	bl	8006c90 <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001368:	f7ff fe94 	bl	8001094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800136c:	4816      	ldr	r0, [pc, #88]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800136e:	f005 fb73 	bl	8006a58 <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001378:	f7ff fe8c 	bl	8001094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800137c:	2320      	movs	r3, #32
 800137e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	4619      	mov	r1, r3
 800138a:	480f      	ldr	r0, [pc, #60]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 800138c:	f006 f83e 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001396:	f7ff fe7d 	bl	8001094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	@ 0x60
 800139c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_TIM2_Init+0xe0>)
 80013b2:	f005 fbab 	bl	8006b0c <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013bc:	f7ff fe6a 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c0:	bf00      	nop
 80013c2:	3738      	adds	r7, #56	@ 0x38
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200006f0 	.word	0x200006f0

080013cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013dc:	d10d      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	4a08      	ldr	r2, [pc, #32]	@ (8001408 <HAL_TIM_Base_MspInit+0x3c>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_TIM_Base_MspInit+0x3c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <MX_USART3_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_USART3_UART_Init+0x4c>)
 8001444:	f006 f85e 	bl	8007504 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f7ff fe21 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000738 	.word	0x20000738
 800145c:	40004800 	.word	0x40004800

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a29      	ldr	r2, [pc, #164]	@ (8001524 <HAL_UART_MspInit+0xc4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d14b      	bne.n	800151a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b28      	ldr	r3, [pc, #160]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a27      	ldr	r2, [pc, #156]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a20      	ldr	r2, [pc, #128]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <HAL_UART_MspInit+0xc8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <HAL_UART_MspInit+0xcc>)
 80014f4:	f001 fe3e 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800150a:	2307      	movs	r3, #7
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	@ (8001530 <HAL_UART_MspInit+0xd0>)
 8001516:	f001 fe2d 	bl	8003174 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40004800 	.word	0x40004800
 8001528:	40023800 	.word	0x40023800
 800152c:	40020400 	.word	0x40020400
 8001530:	40020c00 	.word	0x40020c00

08001534 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800153e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2204      	movs	r2, #4
 8001544:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2202      	movs	r2, #2
 8001556:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	2201      	movs	r2, #1
 800156e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	f003 fb3a 	bl	8004bf0 <HAL_PCD_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001582:	f7ff fd87 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000780 	.word	0x20000780

08001590 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b0:	d147      	bne.n	8001642 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b25      	ldr	r3, [pc, #148]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a24      	ldr	r2, [pc, #144]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b22      	ldr	r3, [pc, #136]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80015ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	481b      	ldr	r0, [pc, #108]	@ (8001650 <HAL_PCD_MspInit+0xc0>)
 80015e4:	f001 fdc6 	bl	8003174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80015e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80015ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015fa:	230a      	movs	r3, #10
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4812      	ldr	r0, [pc, #72]	@ (8001650 <HAL_PCD_MspInit+0xc0>)
 8001606:	f001 fdb5 	bl	8003174 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 800160c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160e:	4a0f      	ldr	r2, [pc, #60]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001614:	6353      	str	r3, [r2, #52]	@ 0x34
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a0b      	ldr	r2, [pc, #44]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <HAL_PCD_MspInit+0xbc>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2043      	movs	r0, #67	@ 0x43
 8001638:	f001 f9f5 	bl	8002a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800163c:	2043      	movs	r0, #67	@ 0x43
 800163e:	f001 fa0e 	bl	8002a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40020000 	.word	0x40020000

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001658:	f7ff fe34 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f007 f827 	bl	80086d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fc59 	bl	8000f3c <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001698:	08008764 	.word	0x08008764
  ldr r2, =_sbss
 800169c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80016a0:	20000cc0 	.word	0x20000cc0

080016a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <CAN1_RX0_IRQHandler>
	...

080016a8 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	4603      	mov	r3, r0
 80016b2:	81fb      	strh	r3, [r7, #14]
 80016b4:	460b      	mov	r3, r1
 80016b6:	81bb      	strh	r3, [r7, #12]
 80016b8:	4613      	mov	r3, r2
 80016ba:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80016c0:	f000 fa9a 	bl	8001bf8 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2201      	movs	r2, #1
 80016ca:	2102      	movs	r1, #2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f9c5 	bl	8001a5c <CODEC_IO_Write>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	4413      	add	r3, r2
 80016da:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80016dc:	89bb      	ldrh	r3, [r7, #12]
 80016de:	3b01      	subs	r3, #1
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d81b      	bhi.n	800171c <cs43l22_Init+0x74>
 80016e4:	a201      	add	r2, pc, #4	@ (adr r2, 80016ec <cs43l22_Init+0x44>)
 80016e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ea:	bf00      	nop
 80016ec:	080016fd 	.word	0x080016fd
 80016f0:	08001705 	.word	0x08001705
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	08001715 	.word	0x08001715
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80016fc:	4b5b      	ldr	r3, [pc, #364]	@ (800186c <cs43l22_Init+0x1c4>)
 80016fe:	22fa      	movs	r2, #250	@ 0xfa
 8001700:	701a      	strb	r2, [r3, #0]
    break;
 8001702:	e00f      	b.n	8001724 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8001704:	4b59      	ldr	r3, [pc, #356]	@ (800186c <cs43l22_Init+0x1c4>)
 8001706:	22af      	movs	r2, #175	@ 0xaf
 8001708:	701a      	strb	r2, [r3, #0]
    break;
 800170a:	e00b      	b.n	8001724 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 800170c:	4b57      	ldr	r3, [pc, #348]	@ (800186c <cs43l22_Init+0x1c4>)
 800170e:	22aa      	movs	r2, #170	@ 0xaa
 8001710:	701a      	strb	r2, [r3, #0]
    break;
 8001712:	e007      	b.n	8001724 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8001714:	4b55      	ldr	r3, [pc, #340]	@ (800186c <cs43l22_Init+0x1c4>)
 8001716:	2205      	movs	r2, #5
 8001718:	701a      	strb	r2, [r3, #0]
    break;    
 800171a:	e003      	b.n	8001724 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800171c:	4b53      	ldr	r3, [pc, #332]	@ (800186c <cs43l22_Init+0x1c4>)
 800171e:	2205      	movs	r2, #5
 8001720:	701a      	strb	r2, [r3, #0]
    break;    
 8001722:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	4a50      	ldr	r2, [pc, #320]	@ (800186c <cs43l22_Init+0x1c4>)
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	2104      	movs	r1, #4
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f993 	bl	8001a5c <CODEC_IO_Write>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4413      	add	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2281      	movs	r2, #129	@ 0x81
 8001746:	2105      	movs	r1, #5
 8001748:	4618      	mov	r0, r3
 800174a:	f000 f987 	bl	8001a5c <CODEC_IO_Write>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2204      	movs	r2, #4
 800175e:	2106      	movs	r1, #6
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f97b 	bl	8001a5c <CODEC_IO_Write>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001770:	7afa      	ldrb	r2, [r7, #11]
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f000 f8b4 	bl	80018e4 <cs43l22_SetVolume>
 800177c:	4602      	mov	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4413      	add	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001784:	89bb      	ldrh	r3, [r7, #12]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d023      	beq.n	80017d2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800178a:	89fb      	ldrh	r3, [r7, #14]
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2206      	movs	r2, #6
 8001790:	210f      	movs	r1, #15
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f962 	bl	8001a5c <CODEC_IO_Write>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	2124      	movs	r1, #36	@ 0x24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f956 	bl	8001a5c <CODEC_IO_Write>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	2125      	movs	r1, #37	@ 0x25
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f94a 	bl	8001a5c <CODEC_IO_Write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	210a      	movs	r1, #10
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f93e 	bl	8001a5c <CODEC_IO_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	4413      	add	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2204      	movs	r2, #4
 80017f0:	210e      	movs	r1, #14
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f932 	bl	8001a5c <CODEC_IO_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2200      	movs	r2, #0
 8001808:	2127      	movs	r1, #39	@ 0x27
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f926 	bl	8001a5c <CODEC_IO_Write>
 8001810:	4603      	mov	r3, r0
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4413      	add	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	220f      	movs	r2, #15
 8001820:	211f      	movs	r1, #31
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f91a 	bl	8001a5c <CODEC_IO_Write>
 8001828:	4603      	mov	r3, r0
 800182a:	461a      	mov	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	220a      	movs	r2, #10
 8001838:	211a      	movs	r1, #26
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f90e 	bl	8001a5c <CODEC_IO_Write>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	220a      	movs	r2, #10
 8001850:	211b      	movs	r1, #27
 8001852:	4618      	mov	r0, r3
 8001854:	f000 f902 	bl	8001a5c <CODEC_IO_Write>
 8001858:	4603      	mov	r3, r0
 800185a:	461a      	mov	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001862:	697b      	ldr	r3, [r7, #20]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000c64 	.word	0x20000c64

08001870 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	80fb      	strh	r3, [r7, #6]
 800187c:	4613      	mov	r3, r2
 800187e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001884:	4b16      	ldr	r3, [pc, #88]	@ (80018e0 <cs43l22_Play+0x70>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d123      	bne.n	80018d4 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2206      	movs	r2, #6
 8001892:	210e      	movs	r1, #14
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f8e1 	bl	8001a5c <CODEC_IO_Write>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 f879 	bl	80019a0 <cs43l22_SetMute>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	229e      	movs	r2, #158	@ 0x9e
 80018bc:	2102      	movs	r1, #2
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f8cc 	bl	8001a5c <CODEC_IO_Write>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <cs43l22_Play+0x70>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 80018d4:	68fb      	ldr	r3, [r7, #12]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	460a      	mov	r2, r1
 80018ee:	80fb      	strh	r3, [r7, #6]
 80018f0:	4613      	mov	r3, r2
 80018f2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80018f8:	797b      	ldrb	r3, [r7, #5]
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d80b      	bhi.n	8001916 <cs43l22_SetVolume+0x32>
 80018fe:	797a      	ldrb	r2, [r7, #5]
 8001900:	4613      	mov	r3, r2
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	4a25      	ldr	r2, [pc, #148]	@ (800199c <cs43l22_SetVolume+0xb8>)
 8001908:	fb82 1203 	smull	r1, r2, r2, r3
 800190c:	1152      	asrs	r2, r2, #5
 800190e:	17db      	asrs	r3, r3, #31
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	e000      	b.n	8001918 <cs43l22_SetVolume+0x34>
 8001916:	23ff      	movs	r3, #255	@ 0xff
 8001918:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	2be6      	cmp	r3, #230	@ 0xe6
 800191e:	d91c      	bls.n	800195a <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	3319      	adds	r3, #25
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	2120      	movs	r1, #32
 800192e:	f000 f895 	bl	8001a5c <CODEC_IO_Write>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4413      	add	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2d8      	uxtb	r0, r3
 8001940:	7afb      	ldrb	r3, [r7, #11]
 8001942:	3319      	adds	r3, #25
 8001944:	b2db      	uxtb	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	2121      	movs	r1, #33	@ 0x21
 800194a:	f000 f887 	bl	8001a5c <CODEC_IO_Write>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e01b      	b.n	8001992 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	b2d8      	uxtb	r0, r3
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	3319      	adds	r3, #25
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	2120      	movs	r1, #32
 8001968:	f000 f878 	bl	8001a5c <CODEC_IO_Write>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	b2d8      	uxtb	r0, r3
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	3319      	adds	r3, #25
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	2121      	movs	r1, #33	@ 0x21
 8001984:	f000 f86a 	bl	8001a5c <CODEC_IO_Write>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	51eb851f 	.word	0x51eb851f

080019a0 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d124      	bne.n	8001a00 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	22ff      	movs	r2, #255	@ 0xff
 80019bc:	2104      	movs	r1, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f84c 	bl	8001a5c <CODEC_IO_Write>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 80019ce:	88fb      	ldrh	r3, [r7, #6]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2201      	movs	r2, #1
 80019d4:	2122      	movs	r1, #34	@ 0x22
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f840 	bl	8001a5c <CODEC_IO_Write>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2201      	movs	r2, #1
 80019ec:	2123      	movs	r1, #35	@ 0x23
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f834 	bl	8001a5c <CODEC_IO_Write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4413      	add	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e025      	b.n	8001a4c <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	2122      	movs	r1, #34	@ 0x22
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f827 	bl	8001a5c <CODEC_IO_Write>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	461a      	mov	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4413      	add	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2123      	movs	r1, #35	@ 0x23
 8001a20:	4618      	mov	r0, r3
 8001a22:	f000 f81b 	bl	8001a5c <CODEC_IO_Write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <cs43l22_SetMute+0xb8>)
 8001a36:	7812      	ldrb	r2, [r2, #0]
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f80d 	bl	8001a5c <CODEC_IO_Write>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000c64 	.word	0x20000c64

08001a5c <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	460b      	mov	r3, r1
 8001a68:	71bb      	strb	r3, [r7, #6]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001a72:	797a      	ldrb	r2, [r7, #5]
 8001a74:	79b9      	ldrb	r1, [r7, #6]
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f8f5 	bl	8001c68 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	b2db      	uxtb	r3, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001a90:	480e      	ldr	r0, [pc, #56]	@ (8001acc <I2Cx_Init+0x40>)
 8001a92:	f002 f8a9 	bl	8003be8 <HAL_I2C_GetState>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d114      	bne.n	8001ac6 <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <I2Cx_Init+0x40>)
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <I2Cx_Init+0x44>)
 8001aa0:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <I2Cx_Init+0x40>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <I2Cx_Init+0x40>)
 8001aaa:	2233      	movs	r2, #51	@ 0x33
 8001aac:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <I2Cx_Init+0x40>)
 8001ab0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab4:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <I2Cx_Init+0x40>)
 8001ab8:	4a06      	ldr	r2, [pc, #24]	@ (8001ad4 <I2Cx_Init+0x48>)
 8001aba:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001abc:	f000 f848 	bl	8001b50 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <I2Cx_Init+0x40>)
 8001ac2:	f001 fe23 	bl	800370c <HAL_I2C_Init>
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000c68 	.word	0x20000c68
 8001ad0:	000186a0 	.word	0x000186a0
 8001ad4:	40005400 	.word	0x40005400

08001ad8 <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	71bb      	strb	r3, [r7, #6]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	79bb      	ldrb	r3, [r7, #6]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <I2Cx_WriteData+0x50>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	2301      	movs	r3, #1
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	1d7b      	adds	r3, r7, #5
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <I2Cx_WriteData+0x54>)
 8001b08:	f001 ff74 	bl	80039f4 <HAL_I2C_Mem_Write>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f809 	bl	8001b30 <I2Cx_Error>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	20000c68 	.word	0x20000c68

08001b30 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 8001b3a:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <I2Cx_Error+0x1c>)
 8001b3c:	f001 ff2a 	bl	8003994 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8001b40:	f7ff ffa4 	bl	8001a8c <I2Cx_Init>
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000c68 	.word	0x20000c68

08001b50 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a24      	ldr	r2, [pc, #144]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8001b72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b84:	2304      	movs	r3, #4
 8001b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4819      	ldr	r0, [pc, #100]	@ (8001bf4 <I2Cx_MspInit+0xa4>)
 8001b90:	f001 faf0 	bl	8003174 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001b9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001bb6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bba:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <I2Cx_MspInit+0xa0>)
 8001bc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001bc6:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2100      	movs	r1, #0
 8001bcc:	201f      	movs	r0, #31
 8001bce:	f000 ff2a 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001bd2:	201f      	movs	r0, #31
 8001bd4:	f000 ff43 	bl	8002a5e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2020      	movs	r0, #32
 8001bde:	f000 ff22 	bl	8002a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001be2:	2020      	movs	r0, #32
 8001be4:	f000 ff3b 	bl	8002a5e <HAL_NVIC_EnableIRQ>
}
 8001be8:	bf00      	nop
 8001bea:	3720      	adds	r7, #32
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400

08001bf8 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <AUDIO_IO_Init+0x68>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <AUDIO_IO_Init+0x68>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <AUDIO_IO_Init+0x68>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001c22:	2302      	movs	r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <AUDIO_IO_Init+0x6c>)
 8001c30:	f001 faa0 	bl	8003174 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001c34:	f7ff ff2a 	bl	8001a8c <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4809      	ldr	r0, [pc, #36]	@ (8001c64 <AUDIO_IO_Init+0x6c>)
 8001c3e:	f001 fd31 	bl	80036a4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001c42:	2005      	movs	r0, #5
 8001c44:	f000 f8ce 	bl	8001de4 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <AUDIO_IO_Init+0x6c>)
 8001c4e:	f001 fd29 	bl	80036a4 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001c52:	2005      	movs	r0, #5
 8001c54:	f000 f8c6 	bl	8001de4 <HAL_Delay>
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020c00 	.word	0x40020c00

08001c68 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	460b      	mov	r3, r1
 8001c74:	71bb      	strb	r3, [r7, #6]
 8001c76:	4613      	mov	r3, r2
 8001c78:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001c7a:	797a      	ldrb	r2, [r7, #5]
 8001c7c:	79b9      	ldrb	r1, [r7, #6]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff29 	bl	8001ad8 <I2Cx_WriteData>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001ca4:	f000 f804 	bl	8001cb0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_I2S_ErrorCallback+0x2c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001cde:	f7ff ffd6 	bl	8001c8e <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a05      	ldr	r2, [pc, #20]	@ (8001cfc <HAL_I2S_ErrorCallback+0x30>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d101      	bne.n	8001cf0 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001cec:	f7ff ffe7 	bl	8001cbe <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40003c00 	.word	0x40003c00
 8001cfc:	40003800 	.word	0x40003800

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	@ (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	@ (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 fe71 	bl	8002a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f000 f808 	bl	8001d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fa32 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x54>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0x58>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fe89 	bl	8002a7a <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d80:	f000 fe51 	bl	8002a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	@ (8001da0 <HAL_InitTick+0x5c>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000018 	.word	0x20000018
 8001da0:	20000014 	.word	0x20000014

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000018 	.word	0x20000018
 8001dc8:	20000cbc 	.word	0x20000cbc

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000cbc 	.word	0x20000cbc

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000018 	.word	0x20000018

08001e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e033      	b.n	8001eaa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fba4 	bl	8000598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d118      	bne.n	8001e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e72:	f023 0302 	bic.w	r3, r3, #2
 8001e76:	f043 0202 	orr.w	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fb6e 	bl	8002560 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f023 0303 	bic.w	r3, r3, #3
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e9a:	e001      	b.n	8001ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f003 0320 	and.w	r3, r3, #32
 8001ee0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d049      	beq.n	8001f7c <HAL_ADC_IRQHandler+0xca>
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d046      	beq.n	8001f7c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d12b      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d127      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d119      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0220 	bic.w	r2, r2, #32
 8001f46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe ffdb 	bl	8000f28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f06f 0212 	mvn.w	r2, #18
 8001f7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d057      	beq.n	8002042 <HAL_ADC_IRQHandler+0x190>
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d054      	beq.n	8002042 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d139      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12b      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d124      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d11d      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d119      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800200c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fc12 	bl	800285c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 020c 	mvn.w	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <HAL_ADC_IRQHandler+0x1d6>
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d014      	beq.n	8002088 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10d      	bne.n	8002088 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f93b 	bl	80022f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f06f 0201 	mvn.w	r2, #1
 8002086:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0320 	and.w	r3, r3, #32
 800208e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002096:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_ADC_IRQHandler+0x218>
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d012      	beq.n	80020ca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a8:	f043 0202 	orr.w	r2, r3, #2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0220 	mvn.w	r2, #32
 80020b8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f924 	bl	8002308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0220 	mvn.w	r2, #32
 80020c8:	601a      	str	r2, [r3, #0]
  }
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Start_DMA+0x1e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e0e9      	b.n	80022c6 <HAL_ADC_Start_DMA+0x1f2>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d018      	beq.n	800213a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002118:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <HAL_ADC_Start_DMA+0x1fc>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6d      	ldr	r2, [pc, #436]	@ (80022d4 <HAL_ADC_Start_DMA+0x200>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9a      	lsrs	r2, r3, #18
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3b01      	subs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002148:	d107      	bne.n	800215a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002158:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 80a1 	bne.w	80022ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002194:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f023 0206 	bic.w	r2, r3, #6
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021b6:	e002      	b.n	80021be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c6:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <HAL_ADC_Start_DMA+0x204>)
 80021c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ce:	4a43      	ldr	r2, [pc, #268]	@ (80022dc <HAL_ADC_Start_DMA+0x208>)
 80021d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	4a42      	ldr	r2, [pc, #264]	@ (80022e0 <HAL_ADC_Start_DMA+0x20c>)
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	4a41      	ldr	r2, [pc, #260]	@ (80022e4 <HAL_ADC_Start_DMA+0x210>)
 80021e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021fa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	334c      	adds	r3, #76	@ 0x4c
 8002216:	4619      	mov	r1, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f000 fce8 	bl	8002bf0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	2b00      	cmp	r3, #0
 800222a:	d12a      	bne.n	8002282 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2d      	ldr	r2, [pc, #180]	@ (80022e8 <HAL_ADC_Start_DMA+0x214>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d015      	beq.n	8002262 <HAL_ADC_Start_DMA+0x18e>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <HAL_ADC_Start_DMA+0x218>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d105      	bne.n	800224c <HAL_ADC_Start_DMA+0x178>
 8002240:	4b25      	ldr	r3, [pc, #148]	@ (80022d8 <HAL_ADC_Start_DMA+0x204>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a27      	ldr	r2, [pc, #156]	@ (80022f0 <HAL_ADC_Start_DMA+0x21c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d136      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
 8002256:	4b20      	ldr	r3, [pc, #128]	@ (80022d8 <HAL_ADC_Start_DMA+0x204>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d130      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d129      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	e020      	b.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_ADC_Start_DMA+0x214>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d11b      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d114      	bne.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	e00b      	b.n	80022c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	431bde83 	.word	0x431bde83
 80022d8:	40012300 	.word	0x40012300
 80022dc:	08002759 	.word	0x08002759
 80022e0:	08002813 	.word	0x08002813
 80022e4:	0800282f 	.word	0x0800282f
 80022e8:	40012000 	.word	0x40012000
 80022ec:	40012100 	.word	0x40012100
 80022f0:	40012200 	.word	0x40012200

080022f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e105      	b.n	8002544 <HAL_ADC_ConfigChannel+0x228>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d925      	bls.n	8002394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	2207      	movs	r2, #7
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43da      	mvns	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	400a      	ands	r2, r1
 800236c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	b29b      	uxth	r3, r3
 800237e:	4618      	mov	r0, r3
 8002380:	4603      	mov	r3, r0
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4403      	add	r3, r0
 8002386:	3b1e      	subs	r3, #30
 8002388:	409a      	lsls	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	e022      	b.n	80023da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6919      	ldr	r1, [r3, #16]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	2207      	movs	r2, #7
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4403      	add	r3, r0
 80023d0:	409a      	lsls	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d824      	bhi.n	800242c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b05      	subs	r3, #5
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b05      	subs	r3, #5
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	@ 0x34
 800242a:	e04c      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d824      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b23      	subs	r3, #35	@ 0x23
 8002446:	221f      	movs	r2, #31
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43da      	mvns	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	400a      	ands	r2, r1
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b29b      	uxth	r3, r3
 8002462:	4618      	mov	r0, r3
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b23      	subs	r3, #35	@ 0x23
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
 800247c:	e023      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	3b41      	subs	r3, #65	@ 0x41
 8002490:	221f      	movs	r2, #31
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43da      	mvns	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	400a      	ands	r2, r1
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	4618      	mov	r0, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b41      	subs	r3, #65	@ 0x41
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c6:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <HAL_ADC_ConfigChannel+0x234>)
 80024c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <HAL_ADC_ConfigChannel+0x238>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1cc>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b12      	cmp	r3, #18
 80024da:	d105      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <HAL_ADC_ConfigChannel+0x238>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d123      	bne.n	800253a <HAL_ADC_ConfigChannel+0x21e>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d003      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x1e6>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b11      	cmp	r3, #17
 8002500:	d11b      	bne.n	800253a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2b10      	cmp	r3, #16
 8002514:	d111      	bne.n	800253a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_ADC_ConfigChannel+0x23c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <HAL_ADC_ConfigChannel+0x240>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	0c9a      	lsrs	r2, r3, #18
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800252c:	e002      	b.n	8002534 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	3b01      	subs	r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012300 	.word	0x40012300
 8002554:	40012000 	.word	0x40012000
 8002558:	20000008 	.word	0x20000008
 800255c:	431bde83 	.word	0x431bde83

08002560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002568:	4b79      	ldr	r3, [pc, #484]	@ (8002750 <ADC_Init+0x1f0>)
 800256a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	431a      	orrs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	4a58      	ldr	r2, [pc, #352]	@ (8002754 <ADC_Init+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d022      	beq.n	800263e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6899      	ldr	r1, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e00f      	b.n	800265e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800265c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0202 	bic.w	r2, r2, #2
 800266c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e1b      	ldrb	r3, [r3, #24]
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d01b      	beq.n	80026c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80026aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6859      	ldr	r1, [r3, #4]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b6:	3b01      	subs	r3, #1
 80026b8:	035a      	lsls	r2, r3, #13
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	e007      	b.n	80026d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	051a      	lsls	r2, r3, #20
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002716:	025a      	lsls	r2, r3, #9
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6899      	ldr	r1, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	029a      	lsls	r2, r3, #10
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40012300 	.word	0x40012300
 8002754:	0f000001 	.word	0x0f000001

08002758 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800276e:	2b00      	cmp	r3, #0
 8002770:	d13c      	bne.n	80027ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d12b      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d127      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d119      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0220 	bic.w	r2, r2, #32
 80027be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7fe fb9f 	bl	8000f28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027ea:	e00e      	b.n	800280a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f7ff fd85 	bl	8002308 <HAL_ADC_ErrorCallback>
}
 80027fe:	e004      	b.n	800280a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7fe fb77 	bl	8000f14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2240      	movs	r2, #64	@ 0x40
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	f043 0204 	orr.w	r2, r3, #4
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff fd5a 	bl	8002308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	@ (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4907      	ldr	r1, [pc, #28]	@ (800290c <__NVIC_EnableIRQ+0x38>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000e100 	.word	0xe000e100

08002910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	6039      	str	r1, [r7, #0]
 800291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	2b00      	cmp	r3, #0
 8002922:	db0a      	blt.n	800293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	b2da      	uxtb	r2, r3
 8002928:	490c      	ldr	r1, [pc, #48]	@ (800295c <__NVIC_SetPriority+0x4c>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	0112      	lsls	r2, r2, #4
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	440b      	add	r3, r1
 8002934:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002938:	e00a      	b.n	8002950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4908      	ldr	r1, [pc, #32]	@ (8002960 <__NVIC_SetPriority+0x50>)
 8002940:	79fb      	ldrb	r3, [r7, #7]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	3b04      	subs	r3, #4
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	440b      	add	r3, r1
 800294e:	761a      	strb	r2, [r3, #24]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000e100 	.word	0xe000e100
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002964:	b480      	push	{r7}
 8002966:	b089      	sub	sp, #36	@ 0x24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f1c3 0307 	rsb	r3, r3, #7
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf28      	it	cs
 8002982:	2304      	movcs	r3, #4
 8002984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3304      	adds	r3, #4
 800298a:	2b06      	cmp	r3, #6
 800298c:	d902      	bls.n	8002994 <NVIC_EncodePriority+0x30>
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3b03      	subs	r3, #3
 8002992:	e000      	b.n	8002996 <NVIC_EncodePriority+0x32>
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	401a      	ands	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43d9      	mvns	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	4313      	orrs	r3, r2
         );
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3724      	adds	r7, #36	@ 0x24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029dc:	d301      	bcc.n	80029e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029de:	2301      	movs	r3, #1
 80029e0:	e00f      	b.n	8002a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029e2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a0c <SysTick_Config+0x40>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ea:	210f      	movs	r1, #15
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029f0:	f7ff ff8e 	bl	8002910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <SysTick_Config+0x40>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029fa:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <SysTick_Config+0x40>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	e000e010 	.word	0xe000e010

08002a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff29 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b086      	sub	sp, #24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
 8002a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a38:	f7ff ff3e 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 8002a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7ff ff8e 	bl	8002964 <NVIC_EncodePriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff ff5d 	bl	8002910 <__NVIC_SetPriority>
}
 8002a56:	bf00      	nop
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff31 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffa2 	bl	80029cc <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa0:	f7ff f994 	bl	8001dcc <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e099      	b.n	8002be4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0201 	bic.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad0:	e00f      	b.n	8002af2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad2:	f7ff f97b 	bl	8001dcc <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	d908      	bls.n	8002af2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e078      	b.n	8002be4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e8      	bne.n	8002ad2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <HAL_DMA_Init+0x158>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	4313      	orrs	r3, r2
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0307 	bic.w	r3, r3, #7
 8002b72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d117      	bne.n	8002bb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00e      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa6f 	bl	800307c <DMA_CheckFifoParam>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2240      	movs	r2, #64	@ 0x40
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e016      	b.n	8002be4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fa26 	bl	8003010 <DMA_CalcBaseAndBitshift>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	223f      	movs	r2, #63	@ 0x3f
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	f010803f 	.word	0xf010803f

08002bf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_DMA_Start_IT+0x26>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e040      	b.n	8002c98 <HAL_DMA_Start_IT+0xa8>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d12f      	bne.n	8002c8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9b8 	bl	8002fb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c48:	223f      	movs	r2, #63	@ 0x3f
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0216 	orr.w	r2, r2, #22
 8002c5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e005      	b.n	8002c96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cac:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee8 <HAL_DMA_IRQHandler+0x248>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8e      	ldr	r2, [pc, #568]	@ (8002eec <HAL_DMA_IRQHandler+0x24c>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a9b      	lsrs	r3, r3, #10
 8002cb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	2208      	movs	r2, #8
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0204 	bic.w	r2, r2, #4
 8002cf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d04:	f043 0201 	orr.w	r2, r3, #1
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d10:	2201      	movs	r2, #1
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2201      	movs	r2, #1
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d46:	2204      	movs	r2, #4
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d012      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d64:	2204      	movs	r2, #4
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	f043 0204 	orr.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d043      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03c      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d024      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	4798      	blx	r3
 8002dce:	e01f      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4798      	blx	r3
 8002de0:	e016      	b.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0208 	bic.w	r2, r2, #8
 8002dfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e14:	2220      	movs	r2, #32
 8002e16:	409a      	lsls	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 808f 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8087 	beq.w	8002f40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	2220      	movs	r2, #32
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d136      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_IRQHandler+0x1da>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	223f      	movs	r2, #63	@ 0x3f
 8002e90:	409a      	lsls	r2, r3
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d07e      	beq.n	8002fac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
        }
        return;
 8002eb6:	e079      	b.n	8002fac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10d      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d031      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e02c      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
 8002ee6:	bf00      	nop
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d023      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
 8002f00:	e01e      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0210 	bic.w	r2, r2, #16
 8002f1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d032      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2205      	movs	r2, #5
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d307      	bcc.n	8002f88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f2      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x2cc>
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	4798      	blx	r3
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fac:	bf00      	nop
    }
  }
}
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b40      	cmp	r3, #64	@ 0x40
 8002fe0:	d108      	bne.n	8002ff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ff2:	e007      	b.n	8003004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3b10      	subs	r3, #16
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <DMA_CalcBaseAndBitshift+0x64>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800302a:	4a13      	ldr	r2, [pc, #76]	@ (8003078 <DMA_CalcBaseAndBitshift+0x68>)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d909      	bls.n	8003052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003046:	f023 0303 	bic.w	r3, r3, #3
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003050:	e007      	b.n	8003062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800305a:	f023 0303 	bic.w	r3, r3, #3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	aaaaaaab 	.word	0xaaaaaaab
 8003078:	0800874c 	.word	0x0800874c

0800307c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d11f      	bne.n	80030d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d856      	bhi.n	800314a <DMA_CheckFifoParam+0xce>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <DMA_CheckFifoParam+0x28>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030c7 	.word	0x080030c7
 80030ac:	080030b5 	.word	0x080030b5
 80030b0:	0800314b 	.word	0x0800314b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d046      	beq.n	800314e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e043      	b.n	800314e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030ce:	d140      	bne.n	8003152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d4:	e03d      	b.n	8003152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030de:	d121      	bne.n	8003124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d837      	bhi.n	8003156 <DMA_CheckFifoParam+0xda>
 80030e6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <DMA_CheckFifoParam+0x70>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	08003103 	.word	0x08003103
 80030f4:	080030fd 	.word	0x080030fd
 80030f8:	08003115 	.word	0x08003115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003100:	e030      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003106:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d025      	beq.n	800315a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003112:	e022      	b.n	800315a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800311c:	d11f      	bne.n	800315e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003122:	e01c      	b.n	800315e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d903      	bls.n	8003132 <DMA_CheckFifoParam+0xb6>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d003      	beq.n	8003138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003130:	e018      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      break;
 8003136:	e015      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      break;
 8003148:	e00b      	b.n	8003162 <DMA_CheckFifoParam+0xe6>
      break;
 800314a:	bf00      	nop
 800314c:	e00a      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 800314e:	bf00      	nop
 8003150:	e008      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003152:	bf00      	nop
 8003154:	e006      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;   
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
    }
  } 
  
  return status; 
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003174:	b480      	push	{r7}
 8003176:	b089      	sub	sp, #36	@ 0x24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	e16b      	b.n	8003468 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003190:	2201      	movs	r2, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	f040 815a 	bne.w	8003462 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d005      	beq.n	80031c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d130      	bne.n	8003228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	2203      	movs	r2, #3
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	091b      	lsrs	r3, r3, #4
 8003212:	f003 0201 	and.w	r2, r3, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	2b03      	cmp	r3, #3
 8003232:	d017      	beq.n	8003264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d123      	bne.n	80032b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	220f      	movs	r2, #15
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	69b9      	ldr	r1, [r7, #24]
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2203      	movs	r2, #3
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 0203 	and.w	r2, r3, #3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80b4 	beq.w	8003462 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b60      	ldr	r3, [pc, #384]	@ (8003480 <HAL_GPIO_Init+0x30c>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	4a5f      	ldr	r2, [pc, #380]	@ (8003480 <HAL_GPIO_Init+0x30c>)
 8003304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003308:	6453      	str	r3, [r2, #68]	@ 0x44
 800330a:	4b5d      	ldr	r3, [pc, #372]	@ (8003480 <HAL_GPIO_Init+0x30c>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003316:	4a5b      	ldr	r2, [pc, #364]	@ (8003484 <HAL_GPIO_Init+0x310>)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	3302      	adds	r3, #2
 800331e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a52      	ldr	r2, [pc, #328]	@ (8003488 <HAL_GPIO_Init+0x314>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d02b      	beq.n	800339a <HAL_GPIO_Init+0x226>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a51      	ldr	r2, [pc, #324]	@ (800348c <HAL_GPIO_Init+0x318>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d025      	beq.n	8003396 <HAL_GPIO_Init+0x222>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a50      	ldr	r2, [pc, #320]	@ (8003490 <HAL_GPIO_Init+0x31c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x21e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4f      	ldr	r2, [pc, #316]	@ (8003494 <HAL_GPIO_Init+0x320>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x21a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4e      	ldr	r2, [pc, #312]	@ (8003498 <HAL_GPIO_Init+0x324>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x216>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4d      	ldr	r2, [pc, #308]	@ (800349c <HAL_GPIO_Init+0x328>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x212>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4c      	ldr	r2, [pc, #304]	@ (80034a0 <HAL_GPIO_Init+0x32c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x20e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4b      	ldr	r2, [pc, #300]	@ (80034a4 <HAL_GPIO_Init+0x330>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x20a>
 800337a:	2307      	movs	r3, #7
 800337c:	e00e      	b.n	800339c <HAL_GPIO_Init+0x228>
 800337e:	2308      	movs	r3, #8
 8003380:	e00c      	b.n	800339c <HAL_GPIO_Init+0x228>
 8003382:	2306      	movs	r3, #6
 8003384:	e00a      	b.n	800339c <HAL_GPIO_Init+0x228>
 8003386:	2305      	movs	r3, #5
 8003388:	e008      	b.n	800339c <HAL_GPIO_Init+0x228>
 800338a:	2304      	movs	r3, #4
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x228>
 800338e:	2303      	movs	r3, #3
 8003390:	e004      	b.n	800339c <HAL_GPIO_Init+0x228>
 8003392:	2302      	movs	r3, #2
 8003394:	e002      	b.n	800339c <HAL_GPIO_Init+0x228>
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x228>
 800339a:	2300      	movs	r3, #0
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	f002 0203 	and.w	r2, r2, #3
 80033a2:	0092      	lsls	r2, r2, #2
 80033a4:	4093      	lsls	r3, r2
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033ac:	4935      	ldr	r1, [pc, #212]	@ (8003484 <HAL_GPIO_Init+0x310>)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	089b      	lsrs	r3, r3, #2
 80033b2:	3302      	adds	r3, #2
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ba:	4b3b      	ldr	r3, [pc, #236]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033de:	4a32      	ldr	r2, [pc, #200]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033e4:	4b30      	ldr	r3, [pc, #192]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003408:	4a27      	ldr	r2, [pc, #156]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800340e:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003432:	4a1d      	ldr	r2, [pc, #116]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800345c:	4a12      	ldr	r2, [pc, #72]	@ (80034a8 <HAL_GPIO_Init+0x334>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3301      	adds	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	f67f ae90 	bls.w	8003190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	40013800 	.word	0x40013800
 8003488:	40020000 	.word	0x40020000
 800348c:	40020400 	.word	0x40020400
 8003490:	40020800 	.word	0x40020800
 8003494:	40020c00 	.word	0x40020c00
 8003498:	40021000 	.word	0x40021000
 800349c:	40021400 	.word	0x40021400
 80034a0:	40021800 	.word	0x40021800
 80034a4:	40021c00 	.word	0x40021c00
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e0cd      	b.n	8003664 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034c8:	2201      	movs	r2, #1
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	f040 80bd 	bne.w	800365e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80034e4:	4a65      	ldr	r2, [pc, #404]	@ (800367c <HAL_GPIO_DeInit+0x1d0>)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	089b      	lsrs	r3, r3, #2
 80034ea:	3302      	adds	r3, #2
 80034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a5d      	ldr	r2, [pc, #372]	@ (8003680 <HAL_GPIO_DeInit+0x1d4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02b      	beq.n	8003566 <HAL_GPIO_DeInit+0xba>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a5c      	ldr	r2, [pc, #368]	@ (8003684 <HAL_GPIO_DeInit+0x1d8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d025      	beq.n	8003562 <HAL_GPIO_DeInit+0xb6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a5b      	ldr	r2, [pc, #364]	@ (8003688 <HAL_GPIO_DeInit+0x1dc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01f      	beq.n	800355e <HAL_GPIO_DeInit+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a5a      	ldr	r2, [pc, #360]	@ (800368c <HAL_GPIO_DeInit+0x1e0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d019      	beq.n	800355a <HAL_GPIO_DeInit+0xae>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a59      	ldr	r2, [pc, #356]	@ (8003690 <HAL_GPIO_DeInit+0x1e4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <HAL_GPIO_DeInit+0xaa>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a58      	ldr	r2, [pc, #352]	@ (8003694 <HAL_GPIO_DeInit+0x1e8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00d      	beq.n	8003552 <HAL_GPIO_DeInit+0xa6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a57      	ldr	r2, [pc, #348]	@ (8003698 <HAL_GPIO_DeInit+0x1ec>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d007      	beq.n	800354e <HAL_GPIO_DeInit+0xa2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a56      	ldr	r2, [pc, #344]	@ (800369c <HAL_GPIO_DeInit+0x1f0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_GPIO_DeInit+0x9e>
 8003546:	2307      	movs	r3, #7
 8003548:	e00e      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 800354a:	2308      	movs	r3, #8
 800354c:	e00c      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 800354e:	2306      	movs	r3, #6
 8003550:	e00a      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 8003552:	2305      	movs	r3, #5
 8003554:	e008      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 8003556:	2304      	movs	r3, #4
 8003558:	e006      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 800355a:	2303      	movs	r3, #3
 800355c:	e004      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 800355e:	2302      	movs	r3, #2
 8003560:	e002      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_GPIO_DeInit+0xbc>
 8003566:	2300      	movs	r3, #0
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	f002 0203 	and.w	r2, r2, #3
 800356e:	0092      	lsls	r2, r2, #2
 8003570:	4093      	lsls	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d132      	bne.n	80035de <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003578:	4b49      	ldr	r3, [pc, #292]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	4947      	ldr	r1, [pc, #284]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 8003582:	4013      	ands	r3, r2
 8003584:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003586:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	43db      	mvns	r3, r3
 800358e:	4944      	ldr	r1, [pc, #272]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 8003590:	4013      	ands	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003594:	4b42      	ldr	r3, [pc, #264]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	4940      	ldr	r1, [pc, #256]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 800359e:	4013      	ands	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035a2:	4b3f      	ldr	r3, [pc, #252]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	493d      	ldr	r1, [pc, #244]	@ (80036a0 <HAL_GPIO_DeInit+0x1f4>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80035c0:	4a2e      	ldr	r2, [pc, #184]	@ (800367c <HAL_GPIO_DeInit+0x1d0>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	3302      	adds	r3, #2
 80035c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	43da      	mvns	r2, r3
 80035d0:	482a      	ldr	r0, [pc, #168]	@ (800367c <HAL_GPIO_DeInit+0x1d0>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	400a      	ands	r2, r1
 80035d8:	3302      	adds	r3, #2
 80035da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	2103      	movs	r1, #3
 80035e8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ec:	43db      	mvns	r3, r3
 80035ee:	401a      	ands	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	220f      	movs	r2, #15
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	08d2      	lsrs	r2, r2, #3
 8003614:	4019      	ands	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2103      	movs	r1, #3
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	2101      	movs	r1, #1
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa01 f303 	lsl.w	r3, r1, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	401a      	ands	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2103      	movs	r1, #3
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	401a      	ands	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2b0f      	cmp	r3, #15
 8003668:	f67f af2e 	bls.w	80034c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40013800 	.word	0x40013800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400
 8003688:	40020800 	.word	0x40020800
 800368c:	40020c00 	.word	0x40020c00
 8003690:	40021000 	.word	0x40021000
 8003694:	40021400 	.word	0x40021400
 8003698:	40021800 	.word	0x40021800
 800369c:	40021c00 	.word	0x40021c00
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4013      	ands	r3, r2
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	400b      	ands	r3, r1
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	619a      	str	r2, [r3, #24]
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e12b      	b.n	8003976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fd f954 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2224      	movs	r2, #36	@ 0x24
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800375e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800376e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003770:	f002 feca 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 8003774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4a81      	ldr	r2, [pc, #516]	@ (8003980 <HAL_I2C_Init+0x274>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d807      	bhi.n	8003790 <HAL_I2C_Init+0x84>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a80      	ldr	r2, [pc, #512]	@ (8003984 <HAL_I2C_Init+0x278>)
 8003784:	4293      	cmp	r3, r2
 8003786:	bf94      	ite	ls
 8003788:	2301      	movls	r3, #1
 800378a:	2300      	movhi	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	e006      	b.n	800379e <HAL_I2C_Init+0x92>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a7d      	ldr	r2, [pc, #500]	@ (8003988 <HAL_I2C_Init+0x27c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e0e7      	b.n	8003976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a78      	ldr	r2, [pc, #480]	@ (800398c <HAL_I2C_Init+0x280>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0c9b      	lsrs	r3, r3, #18
 80037b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003980 <HAL_I2C_Init+0x274>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d802      	bhi.n	80037e0 <HAL_I2C_Init+0xd4>
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	3301      	adds	r3, #1
 80037de:	e009      	b.n	80037f4 <HAL_I2C_Init+0xe8>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_I2C_Init+0x284>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	3301      	adds	r3, #1
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	495c      	ldr	r1, [pc, #368]	@ (8003980 <HAL_I2C_Init+0x274>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d819      	bhi.n	8003848 <HAL_I2C_Init+0x13c>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e59      	subs	r1, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003822:	1c59      	adds	r1, r3, #1
 8003824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003828:	400b      	ands	r3, r1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_I2C_Init+0x138>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e59      	subs	r1, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fbb1 f3f3 	udiv	r3, r1, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003842:	e051      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003844:	2304      	movs	r3, #4
 8003846:	e04f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d111      	bne.n	8003874 <HAL_I2C_Init+0x168>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	440b      	add	r3, r1
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e012      	b.n	800389a <HAL_I2C_Init+0x18e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	0099      	lsls	r1, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Init+0x196>
 800389e:	2301      	movs	r3, #1
 80038a0:	e022      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10e      	bne.n	80038c8 <HAL_I2C_Init+0x1bc>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1e58      	subs	r0, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	440b      	add	r3, r1
 80038b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c6:	e00f      	b.n	80038e8 <HAL_I2C_Init+0x1dc>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e58      	subs	r0, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	0099      	lsls	r1, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	fbb0 f3f3 	udiv	r3, r0, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	6809      	ldr	r1, [r1, #0]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6911      	ldr	r1, [r2, #16]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68d2      	ldr	r2, [r2, #12]
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	430b      	orrs	r3, r1
 800392a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	000186a0 	.word	0x000186a0
 8003984:	001e847f 	.word	0x001e847f
 8003988:	003d08ff 	.word	0x003d08ff
 800398c:	431bde83 	.word	0x431bde83
 8003990:	10624dd3 	.word	0x10624dd3

08003994 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e021      	b.n	80039ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	@ 0x24
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd f8ae 	bl	8000b20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0e:	f7fe f9dd 	bl	8001dcc <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	f040 80d9 	bne.w	8003bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2319      	movs	r3, #25
 8003a28:	2201      	movs	r2, #1
 8003a2a:	496d      	ldr	r1, [pc, #436]	@ (8003be0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f97f 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Mem_Write+0x56>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0c5      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d007      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2221      	movs	r2, #33	@ 0x21
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a4d      	ldr	r2, [pc, #308]	@ (8003be4 <HAL_I2C_Mem_Write+0x1f0>)
 8003ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab2:	88f8      	ldrh	r0, [r7, #6]
 8003ab4:	893a      	ldrh	r2, [r7, #8]
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f89e 	bl	8003c04 <I2C_RequestMemoryWrite>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa44 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Mem_Write+0x180>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1aa      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fa37 	bl	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e016      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	461a      	mov	r2, r3
 8003c12:	4603      	mov	r3, r0
 8003c14:	817b      	strh	r3, [r7, #10]
 8003c16:	460b      	mov	r3, r1
 8003c18:	813b      	strh	r3, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f878 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00d      	beq.n	8003c62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c54:	d103      	bne.n	8003c5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e05f      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c62:	897b      	ldrh	r3, [r7, #10]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	6a3a      	ldr	r2, [r7, #32]
 8003c76:	492d      	ldr	r1, [pc, #180]	@ (8003d2c <I2C_RequestMemoryWrite+0x128>)
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f8d3 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e04c      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca0:	6a39      	ldr	r1, [r7, #32]
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f95e 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00d      	beq.n	8003cca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d107      	bne.n	8003cc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e02b      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	611a      	str	r2, [r3, #16]
 8003cda:	e021      	b.n	8003d20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f938 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e005      	b.n	8003d22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d16:	893b      	ldrh	r3, [r7, #8]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	00010002 	.word	0x00010002

08003d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d40:	e048      	b.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d48:	d044      	beq.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fe f83f 	bl	8001dcc <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d139      	bne.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10d      	bne.n	8003d86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	e00c      	b.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d116      	bne.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e023      	b.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10d      	bne.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	e00c      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	43da      	mvns	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4013      	ands	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d093      	beq.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e32:	e071      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e42:	d123      	bne.n	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	f043 0204 	orr.w	r2, r3, #4
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e067      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e92:	d041      	beq.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fd ff9a 	bl	8001dcc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d136      	bne.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10c      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e00b      	b.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e021      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10c      	bne.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e00b      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af6d 	bne.w	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f70:	e034      	b.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f886 	bl	8004084 <I2C_IsAcknowledgeFailed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e034      	b.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f88:	d028      	beq.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd ff1f 	bl	8001dcc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b80      	cmp	r3, #128	@ 0x80
 8003fac:	d016      	beq.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e007      	b.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe6:	2b80      	cmp	r3, #128	@ 0x80
 8003fe8:	d1c3      	bne.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004000:	e034      	b.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f83e 	bl	8004084 <I2C_IsAcknowledgeFailed>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e034      	b.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004018:	d028      	beq.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fd fed7 	bl	8001dcc <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11d      	bne.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d016      	beq.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e007      	b.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d1c3      	bne.n	8004002 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409a:	d11b      	bne.n	80040d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	f043 0204 	orr.w	r2, r3, #4
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
	...

080040e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e128      	b.n	8004348 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a90      	ldr	r2, [pc, #576]	@ (8004350 <HAL_I2S_Init+0x26c>)
 800410e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fc fd71 	bl	8000bf8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800412c:	f023 030f 	bic.w	r3, r3, #15
 8004130:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2202      	movs	r2, #2
 8004138:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d060      	beq.n	8004204 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800414a:	2310      	movs	r3, #16
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e001      	b.n	8004154 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004150:	2320      	movs	r3, #32
 8004152:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b20      	cmp	r3, #32
 800415a:	d802      	bhi.n	8004162 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004162:	2001      	movs	r0, #1
 8004164:	f002 fada 	bl	800671c <HAL_RCCEx_GetPeriphCLKFreq>
 8004168:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004172:	d125      	bne.n	80041c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d010      	beq.n	800419e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	fbb2 f2f3 	udiv	r2, r2, r3
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	3305      	adds	r3, #5
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	e01f      	b.n	80041de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ba:	3305      	adds	r3, #5
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	e00e      	b.n	80041de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	461a      	mov	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	3305      	adds	r3, #5
 80041dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4a5c      	ldr	r2, [pc, #368]	@ (8004354 <HAL_I2S_Init+0x270>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	08db      	lsrs	r3, r3, #3
 80041e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e003      	b.n	800420c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004204:	2302      	movs	r3, #2
 8004206:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d902      	bls.n	8004218 <HAL_I2S_Init+0x134>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2bff      	cmp	r3, #255	@ 0xff
 8004216:	d907      	bls.n	8004228 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	f043 0210 	orr.w	r2, r3, #16
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e08f      	b.n	8004348 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	ea42 0103 	orr.w	r1, r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	430a      	orrs	r2, r1
 800423a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6851      	ldr	r1, [r2, #4]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6892      	ldr	r2, [r2, #8]
 8004252:	4311      	orrs	r1, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68d2      	ldr	r2, [r2, #12]
 8004258:	4311      	orrs	r1, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6992      	ldr	r2, [r2, #24]
 800425e:	430a      	orrs	r2, r1
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800426a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d161      	bne.n	8004338 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a38      	ldr	r2, [pc, #224]	@ (8004358 <HAL_I2S_Init+0x274>)
 8004278:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a37      	ldr	r2, [pc, #220]	@ (800435c <HAL_I2S_Init+0x278>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d101      	bne.n	8004288 <HAL_I2S_Init+0x1a4>
 8004284:	4b36      	ldr	r3, [pc, #216]	@ (8004360 <HAL_I2S_Init+0x27c>)
 8004286:	e001      	b.n	800428c <HAL_I2S_Init+0x1a8>
 8004288:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	4932      	ldr	r1, [pc, #200]	@ (800435c <HAL_I2S_Init+0x278>)
 8004294:	428a      	cmp	r2, r1
 8004296:	d101      	bne.n	800429c <HAL_I2S_Init+0x1b8>
 8004298:	4a31      	ldr	r2, [pc, #196]	@ (8004360 <HAL_I2S_Init+0x27c>)
 800429a:	e001      	b.n	80042a0 <HAL_I2S_Init+0x1bc>
 800429c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80042a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042a4:	f023 030f 	bic.w	r3, r3, #15
 80042a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a2b      	ldr	r2, [pc, #172]	@ (800435c <HAL_I2S_Init+0x278>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_I2S_Init+0x1d4>
 80042b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004360 <HAL_I2S_Init+0x27c>)
 80042b6:	e001      	b.n	80042bc <HAL_I2S_Init+0x1d8>
 80042b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042bc:	2202      	movs	r2, #2
 80042be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a25      	ldr	r2, [pc, #148]	@ (800435c <HAL_I2S_Init+0x278>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_I2S_Init+0x1ea>
 80042ca:	4b25      	ldr	r3, [pc, #148]	@ (8004360 <HAL_I2S_Init+0x27c>)
 80042cc:	e001      	b.n	80042d2 <HAL_I2S_Init+0x1ee>
 80042ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042de:	d003      	beq.n	80042e8 <HAL_I2S_Init+0x204>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80042e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e001      	b.n	80042f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80042fe:	4313      	orrs	r3, r2
 8004300:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004308:	4313      	orrs	r3, r2
 800430a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004312:	4313      	orrs	r3, r2
 8004314:	b29a      	uxth	r2, r3
 8004316:	897b      	ldrh	r3, [r7, #10]
 8004318:	4313      	orrs	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004320:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a0d      	ldr	r2, [pc, #52]	@ (800435c <HAL_I2S_Init+0x278>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_I2S_Init+0x24c>
 800432c:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <HAL_I2S_Init+0x27c>)
 800432e:	e001      	b.n	8004334 <HAL_I2S_Init+0x250>
 8004330:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004334:	897a      	ldrh	r2, [r7, #10]
 8004336:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	08004629 	.word	0x08004629
 8004354:	cccccccd 	.word	0xcccccccd
 8004358:	0800473d 	.word	0x0800473d
 800435c:	40003800 	.word	0x40003800
 8004360:	40003400 	.word	0x40003400

08004364 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_I2S_Transmit_DMA+0x1a>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e08a      	b.n	8004498 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e082      	b.n	8004498 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2S_Transmit_DMA+0x3e>
 800439e:	2302      	movs	r3, #2
 80043a0:	e07a      	b.n	8004498 <HAL_I2S_Transmit_DMA+0x134>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2203      	movs	r2, #3
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d002      	beq.n	80043d6 <HAL_I2S_Transmit_DMA+0x72>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2b05      	cmp	r3, #5
 80043d4:	d10a      	bne.n	80043ec <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043ea:	e005      	b.n	80043f8 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	4a28      	ldr	r2, [pc, #160]	@ (80044a0 <HAL_I2S_Transmit_DMA+0x13c>)
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	4a27      	ldr	r2, [pc, #156]	@ (80044a4 <HAL_I2S_Transmit_DMA+0x140>)
 8004406:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	4a26      	ldr	r2, [pc, #152]	@ (80044a8 <HAL_I2S_Transmit_DMA+0x144>)
 800440e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004418:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004420:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004426:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004428:	f7fe fbe2 	bl	8002bf0 <HAL_DMA_Start_IT>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00f      	beq.n	8004452 <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004436:	f043 0208 	orr.w	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e022      	b.n	8004498 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d107      	bne.n	8004478 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0202 	orr.w	r2, r2, #2
 8004476:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004494:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	08004507 	.word	0x08004507
 80044a4:	080044c5 	.word	0x080044c5
 80044a8:	08004523 	.word	0x08004523

080044ac <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
}
 80044bc:	bf00      	nop
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10e      	bne.n	80044f8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0202 	bic.w	r2, r2, #2
 80044e8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7fc fcf3 	bl	8000ee4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004512:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7fc fcc5 	bl	8000ea4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0203 	bic.w	r2, r2, #3
 800453e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	f043 0208 	orr.w	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7fd fbb3 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004566:	bf00      	nop
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	1c9a      	adds	r2, r3, #2
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10e      	bne.n	80045c2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045b2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fc fc91 	bl	8000ee4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045dc:	b292      	uxth	r2, r2
 80045de:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	1c9a      	adds	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10e      	bne.n	8004620 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004610:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd fb3e 	bl	8001c9c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b04      	cmp	r3, #4
 8004642:	d13a      	bne.n	80046ba <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d109      	bne.n	8004662 <I2S_IRQHandler+0x3a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d102      	bne.n	8004662 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff ffb4 	bl	80045ca <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d126      	bne.n	80046ba <I2S_IRQHandler+0x92>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b20      	cmp	r3, #32
 8004678:	d11f      	bne.n	80046ba <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004688:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fd fb09 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d136      	bne.n	8004734 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d109      	bne.n	80046e4 <I2S_IRQHandler+0xbc>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d102      	bne.n	80046e4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f7ff ff45 	bl	800456e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d122      	bne.n	8004734 <I2S_IRQHandler+0x10c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d11b      	bne.n	8004734 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800470a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f043 0204 	orr.w	r2, r3, #4
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fd facc 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a92      	ldr	r2, [pc, #584]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004756:	4b92      	ldr	r3, [pc, #584]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004758:	e001      	b.n	800475e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800475a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a8b      	ldr	r2, [pc, #556]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004774:	4b8a      	ldr	r3, [pc, #552]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004776:	e001      	b.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004778:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004788:	d004      	beq.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 8099 	bne.w	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d107      	bne.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f925 	bl	80049f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d107      	bne.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9c8 	bl	8004b58 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d13a      	bne.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d035      	beq.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a6e      	ldr	r2, [pc, #440]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80047e6:	4b6e      	ldr	r3, [pc, #440]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e8:	e001      	b.n	80047ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80047ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4969      	ldr	r1, [pc, #420]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f6:	428b      	cmp	r3, r1
 80047f8:	d101      	bne.n	80047fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80047fa:	4b69      	ldr	r3, [pc, #420]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047fc:	e001      	b.n	8004802 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004802:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004806:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004816:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800483a:	f043 0202 	orr.w	r2, r3, #2
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fa42 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	f040 80c3 	bne.w	80049da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80bd 	beq.w	80049da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800486e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a49      	ldr	r2, [pc, #292]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800487a:	4b49      	ldr	r3, [pc, #292]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800487c:	e001      	b.n	8004882 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800487e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4944      	ldr	r1, [pc, #272]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800488a:	428b      	cmp	r3, r1
 800488c:	d101      	bne.n	8004892 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800488e:	4b44      	ldr	r3, [pc, #272]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004890:	e001      	b.n	8004896 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004892:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004896:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800489a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fa04 	bl	8001ccc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048c4:	e089      	b.n	80049da <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d107      	bne.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8be 	bl	8004a5c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d107      	bne.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8fd 	bl	8004af4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004900:	2b40      	cmp	r3, #64	@ 0x40
 8004902:	d12f      	bne.n	8004964 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02a      	beq.n	8004964 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800491c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1e      	ldr	r2, [pc, #120]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004928:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800492a:	e001      	b.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800492c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4919      	ldr	r1, [pc, #100]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d101      	bne.n	8004940 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800493c:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800493e:	e001      	b.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004944:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004948:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f043 0202 	orr.w	r2, r3, #2
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fd f9b4 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b08      	cmp	r3, #8
 800496c:	d136      	bne.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d031      	beq.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a07      	ldr	r2, [pc, #28]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004984:	e001      	b.n	800498a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004986:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4902      	ldr	r1, [pc, #8]	@ (800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004992:	428b      	cmp	r3, r1
 8004994:	d106      	bne.n	80049a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004996:	4b02      	ldr	r3, [pc, #8]	@ (80049a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004998:	e006      	b.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800499a:	bf00      	nop
 800499c:	40003800 	.word	0x40003800
 80049a0:	40003400 	.word	0x40003400
 80049a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049ac:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049bc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd f97a 	bl	8001ccc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	e000      	b.n	80049dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049da:	bf00      	nop
}
 80049dc:	bf00      	nop
 80049de:	3720      	adds	r7, #32
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	1c99      	adds	r1, r3, #2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d113      	bne.n	8004a52 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff ffc9 	bl	80049e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c99      	adds	r1, r3, #2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a6e:	8819      	ldrh	r1, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	@ (8004aec <I2SEx_TxISR_I2SExt+0x90>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <I2SEx_TxISR_I2SExt+0x22>
 8004a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004af0 <I2SEx_TxISR_I2SExt+0x94>)
 8004a7c:	e001      	b.n	8004a82 <I2SEx_TxISR_I2SExt+0x26>
 8004a7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a82:	460a      	mov	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a12      	ldr	r2, [pc, #72]	@ (8004aec <I2SEx_TxISR_I2SExt+0x90>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <I2SEx_TxISR_I2SExt+0x50>
 8004aa8:	4b11      	ldr	r3, [pc, #68]	@ (8004af0 <I2SEx_TxISR_I2SExt+0x94>)
 8004aaa:	e001      	b.n	8004ab0 <I2SEx_TxISR_I2SExt+0x54>
 8004aac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	490d      	ldr	r1, [pc, #52]	@ (8004aec <I2SEx_TxISR_I2SExt+0x90>)
 8004ab8:	428b      	cmp	r3, r1
 8004aba:	d101      	bne.n	8004ac0 <I2SEx_TxISR_I2SExt+0x64>
 8004abc:	4b0c      	ldr	r3, [pc, #48]	@ (8004af0 <I2SEx_TxISR_I2SExt+0x94>)
 8004abe:	e001      	b.n	8004ac4 <I2SEx_TxISR_I2SExt+0x68>
 8004ac0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ac4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ac8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff81 	bl	80049e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40003800 	.word	0x40003800
 8004af0:	40003400 	.word	0x40003400

08004af4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68d8      	ldr	r0, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	1c99      	adds	r1, r3, #2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b0c:	b282      	uxth	r2, r0
 8004b0e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d113      	bne.n	8004b50 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b36:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff ff4a 	bl	80049e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a20      	ldr	r2, [pc, #128]	@ (8004be8 <I2SEx_RxISR_I2SExt+0x90>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <I2SEx_RxISR_I2SExt+0x16>
 8004b6a:	4b20      	ldr	r3, [pc, #128]	@ (8004bec <I2SEx_RxISR_I2SExt+0x94>)
 8004b6c:	e001      	b.n	8004b72 <I2SEx_RxISR_I2SExt+0x1a>
 8004b6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b72:	68d8      	ldr	r0, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	1c99      	adds	r1, r3, #2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b7e:	b282      	uxth	r2, r0
 8004b80:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d121      	bne.n	8004bde <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a12      	ldr	r2, [pc, #72]	@ (8004be8 <I2SEx_RxISR_I2SExt+0x90>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <I2SEx_RxISR_I2SExt+0x50>
 8004ba4:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <I2SEx_RxISR_I2SExt+0x94>)
 8004ba6:	e001      	b.n	8004bac <I2SEx_RxISR_I2SExt+0x54>
 8004ba8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <I2SEx_RxISR_I2SExt+0x90>)
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	d101      	bne.n	8004bbc <I2SEx_RxISR_I2SExt+0x64>
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bec <I2SEx_RxISR_I2SExt+0x94>)
 8004bba:	e001      	b.n	8004bc0 <I2SEx_RxISR_I2SExt+0x68>
 8004bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bc0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004bc4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ff03 	bl	80049e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40003800 	.word	0x40003800
 8004bec:	40003400 	.word	0x40003400

08004bf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e101      	b.n	8004e06 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7fc fcb7 	bl	8001590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2203      	movs	r2, #3
 8004c26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c30:	d102      	bne.n	8004c38 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f003 f82b 	bl	8007c98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7c1a      	ldrb	r2, [r3, #16]
 8004c4a:	f88d 2000 	strb.w	r2, [sp]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c52:	f002 ff1b 	bl	8007a8c <USB_CoreInit>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0ce      	b.n	8004e06 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f003 f823 	bl	8007cba <USB_SetCurrentMode>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0bf      	b.n	8004e06 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
 8004c8a:	e04a      	b.n	8004d22 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	3315      	adds	r3, #21
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ca0:	7bfa      	ldrb	r2, [r7, #15]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	4413      	add	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	3314      	adds	r3, #20
 8004cb0:	7bfa      	ldrb	r2, [r7, #15]
 8004cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cb4:	7bfa      	ldrb	r2, [r7, #15]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	b298      	uxth	r0, r3
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	332e      	adds	r3, #46	@ 0x2e
 8004cc8:	4602      	mov	r2, r0
 8004cca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ccc:	7bfa      	ldrb	r2, [r7, #15]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3318      	adds	r3, #24
 8004cdc:	2200      	movs	r2, #0
 8004cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ce0:	7bfa      	ldrb	r2, [r7, #15]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	331c      	adds	r3, #28
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cf4:	7bfa      	ldrb	r2, [r7, #15]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3320      	adds	r3, #32
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	3324      	adds	r3, #36	@ 0x24
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	791b      	ldrb	r3, [r3, #4]
 8004d26:	7bfa      	ldrb	r2, [r7, #15]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d3af      	bcc.n	8004c8c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	73fb      	strb	r3, [r7, #15]
 8004d30:	e044      	b.n	8004dbc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004da0:	7bfa      	ldrb	r2, [r7, #15]
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	3301      	adds	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	791b      	ldrb	r3, [r3, #4]
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d3b5      	bcc.n	8004d32 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	7c1a      	ldrb	r2, [r3, #16]
 8004dce:	f88d 2000 	strb.w	r2, [sp]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dd6:	f002 ffbd 	bl	8007d54 <USB_DevInit>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e00c      	b.n	8004e06 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f003 faea 	bl	80083d8 <USB_DevDisconnect>

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e0e:	b590      	push	{r4, r7, lr}
 8004e10:	b08d      	sub	sp, #52	@ 0x34
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f003 fb8b 	bl	8008540 <USB_GetMode>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f040 848c 	bne.w	800574a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 faef 	bl	800841a <USB_ReadInterrupts>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8482 	beq.w	8005748 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f003 fadc 	bl	800841a <USB_ReadInterrupts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d107      	bne.n	8004e7c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f002 0202 	and.w	r2, r2, #2
 8004e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f003 faca 	bl	800841a <USB_ReadInterrupts>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b10      	cmp	r3, #16
 8004e8e:	d161      	bne.n	8004f54 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0210 	bic.w	r2, r2, #16
 8004e9e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f003 020f 	and.w	r2, r3, #15
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004ec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004eca:	d124      	bne.n	8004f16 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d035      	beq.n	8004f44 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6a38      	ldr	r0, [r7, #32]
 8004eec:	f003 fa1c 	bl	8008328 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004efc:	441a      	add	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f0e:	441a      	add	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	615a      	str	r2, [r3, #20]
 8004f14:	e016      	b.n	8004f44 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004f1c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f20:	d110      	bne.n	8004f44 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f28:	2208      	movs	r2, #8
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6a38      	ldr	r0, [r7, #32]
 8004f2e:	f003 f9fb 	bl	8008328 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f3e:	441a      	add	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0210 	orr.w	r2, r2, #16
 8004f52:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f003 fa5e 	bl	800841a <USB_ReadInterrupts>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f64:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f68:	f040 80a7 	bne.w	80050ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 fa63 	bl	8008440 <USB_ReadDevAllOutEpInterrupt>
 8004f7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f7c:	e099      	b.n	80050b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 808e 	beq.w	80050a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	4611      	mov	r1, r2
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 fa87 	bl	80084a8 <USB_ReadDevOutEPInterrupt>
 8004f9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fcfc 	bl	80059b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2308      	movs	r3, #8
 8004fda:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fdd2 	bl	8005b88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d030      	beq.n	800506c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d109      	bne.n	800502a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005024:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005028:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800502a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	78db      	ldrb	r3, [r3, #3]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d108      	bne.n	800505a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fbc5 	bl	80057e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005066:	461a      	mov	r2, r3
 8005068:	2302      	movs	r3, #2
 800506a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d008      	beq.n	8005088 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005082:	461a      	mov	r2, r3
 8005084:	2320      	movs	r3, #32
 8005086:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509e:	461a      	mov	r2, r3
 80050a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	3301      	adds	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80050ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af62 	bne.w	8004f7e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f003 f9ab 	bl	800841a <USB_ReadInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050ce:	f040 80db 	bne.w	8005288 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f003 f9cc 	bl	8008474 <USB_ReadDevAllInEpInterrupt>
 80050dc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80050e2:	e0cd      	b.n	8005280 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80c2 	beq.w	8005274 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f003 f9f2 	bl	80084e4 <USB_ReadDevInEPInterrupt>
 8005100:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d057      	beq.n	80051bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2201      	movs	r2, #1
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	43db      	mvns	r3, r3
 8005126:	69f9      	ldr	r1, [r7, #28]
 8005128:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800512c:	4013      	ands	r3, r2
 800512e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800513c:	461a      	mov	r2, r3
 800513e:	2301      	movs	r3, #1
 8005140:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	799b      	ldrb	r3, [r3, #6]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d132      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514e:	4613      	mov	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4413      	add	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	3320      	adds	r3, #32
 800515a:	6819      	ldr	r1, [r3, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4403      	add	r3, r0
 800516a:	331c      	adds	r3, #28
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4419      	add	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4403      	add	r3, r0
 800517e:	3320      	adds	r3, #32
 8005180:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	2b00      	cmp	r3, #0
 8005186:	d113      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x3a2>
 8005188:	6879      	ldr	r1, [r7, #4]
 800518a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	3324      	adds	r3, #36	@ 0x24
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051a8:	461a      	mov	r2, r3
 80051aa:	2101      	movs	r1, #1
 80051ac:	f003 f9fa 	bl	80085a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 fad6 	bl	8005768 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	2308      	movs	r3, #8
 80051d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ee:	461a      	mov	r2, r3
 80051f0:	2310      	movs	r3, #16
 80051f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520a:	461a      	mov	r2, r3
 800520c:	2340      	movs	r3, #64	@ 0x40
 800520e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800521a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800521c:	6a38      	ldr	r0, [r7, #32]
 800521e:	f002 fefd 	bl	800801c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005224:	4613      	mov	r3, r2
 8005226:	00db      	lsls	r3, r3, #3
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	3310      	adds	r3, #16
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	78db      	ldrb	r3, [r3, #3]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d108      	bne.n	8005250 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2200      	movs	r2, #0
 8005242:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	b2db      	uxtb	r3, r3
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fad6 	bl	80057fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525c:	461a      	mov	r2, r3
 800525e:	2302      	movs	r3, #2
 8005260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800526c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb15 	bl	800589e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	3301      	adds	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	f47f af2e 	bne.w	80050e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f003 f8c4 	bl	800841a <USB_ReadInterrupts>
 8005292:	4603      	mov	r3, r0
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800529c:	d122      	bne.n	80052e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d108      	bne.n	80052ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052c4:	2100      	movs	r1, #0
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fca4 	bl	8005c14 <HAL_PCDEx_LPM_Callback>
 80052cc:	e002      	b.n	80052d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa7e 	bl	80057d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695a      	ldr	r2, [r3, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80052e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f003 f896 	bl	800841a <USB_ReadInterrupts>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052f8:	d112      	bne.n	8005320 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b01      	cmp	r3, #1
 8005308:	d102      	bne.n	8005310 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa56 	bl	80057bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695a      	ldr	r2, [r3, #20]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800531e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f003 f878 	bl	800841a <USB_ReadInterrupts>
 800532a:	4603      	mov	r3, r0
 800532c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005334:	f040 80b7 	bne.w	80054a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2110      	movs	r1, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f002 fe62 	bl	800801c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800535c:	e046      	b.n	80053ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536a:	461a      	mov	r2, r3
 800536c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005370:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005390:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539e:	461a      	mov	r2, r3
 80053a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e8:	3301      	adds	r3, #1
 80053ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	791b      	ldrb	r3, [r3, #4]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d3b2      	bcc.n	800535e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005406:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800540a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7bdb      	ldrb	r3, [r3, #15]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d016      	beq.n	8005442 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005424:	f043 030b 	orr.w	r3, r3, #11
 8005428:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800543a:	f043 030b 	orr.w	r3, r3, #11
 800543e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005440:	e015      	b.n	800546e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005450:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005454:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005458:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005468:	f043 030b 	orr.w	r3, r3, #11
 800546c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005480:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005490:	461a      	mov	r2, r3
 8005492:	f003 f887 	bl	80085a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80054a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 ffb5 	bl	800841a <USB_ReadInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ba:	d123      	bne.n	8005504 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f003 f84b 	bl	800855c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 fe1f 	bl	800810e <USB_GetDevSpeed>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681c      	ldr	r4, [r3, #0]
 80054dc:	f001 f808 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 80054e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054e6:	461a      	mov	r2, r3
 80054e8:	4620      	mov	r0, r4
 80054ea:	f002 fb33 	bl	8007b54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f95a 	bl	80057a8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005502:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f002 ff86 	bl	800841a <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d10a      	bne.n	800552e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f93b 	bl	8005794 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f002 0208 	and.w	r2, r2, #8
 800552c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f002 ff71 	bl	800841a <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553e:	2b80      	cmp	r3, #128	@ 0x80
 8005540:	d123      	bne.n	800558a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800554e:	2301      	movs	r3, #1
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
 8005552:	e014      	b.n	800557e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d105      	bne.n	8005578 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800556c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556e:	b2db      	uxtb	r3, r3
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f962 	bl	800583c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	3301      	adds	r3, #1
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	791b      	ldrb	r3, [r3, #4]
 8005582:	461a      	mov	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	4293      	cmp	r3, r2
 8005588:	d3e4      	bcc.n	8005554 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f002 ff43 	bl	800841a <USB_ReadInterrupts>
 8005594:	4603      	mov	r3, r0
 8005596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800559a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800559e:	d13c      	bne.n	800561a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055a0:	2301      	movs	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a4:	e02b      	b.n	80055fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3318      	adds	r3, #24
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d115      	bne.n	80055f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da12      	bge.n	80055f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	3317      	adds	r3, #23
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f922 	bl	800583c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	3301      	adds	r3, #1
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	461a      	mov	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	4293      	cmp	r3, r2
 8005608:	d3cd      	bcc.n	80055a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695a      	ldr	r2, [r3, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f002 fefb 	bl	800841a <USB_ReadInterrupts>
 8005624:	4603      	mov	r3, r0
 8005626:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800562a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800562e:	d156      	bne.n	80056de <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
 8005634:	e045      	b.n	80056c2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d12e      	bne.n	80056bc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800565e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005660:	2b00      	cmp	r3, #0
 8005662:	da2b      	bge.n	80056bc <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005670:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005674:	429a      	cmp	r2, r3
 8005676:	d121      	bne.n	80056bc <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056b8:	6053      	str	r3, [r2, #4]
            break;
 80056ba:	e008      	b.n	80056ce <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	3301      	adds	r3, #1
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	791b      	ldrb	r3, [r3, #4]
 80056c6:	461a      	mov	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d3b3      	bcc.n	8005636 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80056dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f002 fe99 	bl	800841a <USB_ReadInterrupts>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f2:	d10a      	bne.n	800570a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f88d 	bl	8005814 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005708:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f002 fe83 	bl	800841a <USB_ReadInterrupts>
 8005714:	4603      	mov	r3, r0
 8005716:	f003 0304 	and.w	r3, r3, #4
 800571a:	2b04      	cmp	r3, #4
 800571c:	d115      	bne.n	800574a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 f879 	bl	8005828 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
 8005746:	e000      	b.n	800574a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005748:	bf00      	nop
    }
  }
}
 800574a:	3734      	adds	r7, #52	@ 0x34
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	460b      	mov	r3, r1
 800575a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800584c:	2b00      	cmp	r3, #0
 800584e:	da0c      	bge.n	800586a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 020f 	and.w	r2, r3, #15
 8005856:	4613      	mov	r3, r2
 8005858:	00db      	lsls	r3, r3, #3
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	3310      	adds	r3, #16
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	3304      	adds	r3, #4
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	e00c      	b.n	8005884 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800586a:	78fb      	ldrb	r3, [r7, #3]
 800586c:	f003 020f 	and.w	r2, r3, #15
 8005870:	4613      	mov	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	4413      	add	r3, r2
 8005880:	3304      	adds	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	4618      	mov	r0, r3
 800588c:	f002 fc64 	bl	8008158 <USB_EPStopXfer>
 8005890:	4603      	mov	r3, r0
 8005892:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005894:	7afb      	ldrb	r3, [r7, #11]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b08a      	sub	sp, #40	@ 0x28
 80058a2:	af02      	add	r7, sp, #8
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	3310      	adds	r3, #16
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	4413      	add	r3, r2
 80058c2:	3304      	adds	r3, #4
 80058c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d901      	bls.n	80058d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e06b      	b.n	80059ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d902      	bls.n	80058f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3303      	adds	r3, #3
 80058f6:	089b      	lsrs	r3, r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058fa:	e02a      	b.n	8005952 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	429a      	cmp	r2, r3
 8005910:	d902      	bls.n	8005918 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	3303      	adds	r3, #3
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68d9      	ldr	r1, [r3, #12]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4603      	mov	r3, r0
 8005934:	6978      	ldr	r0, [r7, #20]
 8005936:	f002 fcb9 	bl	80082ac <USB_WritePacket>

    ep->xfer_buff  += len;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	695a      	ldr	r2, [r3, #20]
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d809      	bhi.n	800597c <PCD_WriteEmptyTxFifo+0xde>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005970:	429a      	cmp	r2, r3
 8005972:	d203      	bcs.n	800597c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1bf      	bne.n	80058fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	429a      	cmp	r2, r3
 8005986:	d811      	bhi.n	80059ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	2201      	movs	r2, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	6939      	ldr	r1, [r7, #16]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a8:	4013      	ands	r3, r2
 80059aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
	...

080059b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	333c      	adds	r3, #60	@ 0x3c
 80059d0:	3304      	adds	r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	799b      	ldrb	r3, [r3, #6]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d17b      	bne.n	8005ae6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4a61      	ldr	r2, [pc, #388]	@ (8005b80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	f240 80b9 	bls.w	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80b3 	beq.w	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a20:	6093      	str	r3, [r2, #8]
 8005a22:	e0a7      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	6093      	str	r3, [r2, #8]
 8005a40:	e098      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f040 8093 	bne.w	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	4a4b      	ldr	r2, [pc, #300]	@ (8005b80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d90f      	bls.n	8005a76 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a72:	6093      	str	r3, [r2, #8]
 8005a74:	e07e      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	4413      	add	r3, r2
 8005a88:	3304      	adds	r3, #4
 8005a8a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1a      	ldr	r2, [r3, #32]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	0159      	lsls	r1, r3, #5
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	440b      	add	r3, r1
 8005a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d114      	bne.n	8005ad8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	f002 fd6e 	bl	80085a4 <USB_EP0_OutStart>
 8005ac8:	e006      	b.n	8005ad8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	441a      	add	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe36 	bl	8005750 <HAL_PCD_DataOutStageCallback>
 8005ae4:	e046      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	4a26      	ldr	r2, [pc, #152]	@ (8005b84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d124      	bne.n	8005b38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b04:	461a      	mov	r2, r3
 8005b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b0a:	6093      	str	r3, [r2, #8]
 8005b0c:	e032      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b24:	461a      	mov	r2, r3
 8005b26:	2320      	movs	r3, #32
 8005b28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fe0d 	bl	8005750 <HAL_PCD_DataOutStageCallback>
 8005b36:	e01d      	b.n	8005b74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d114      	bne.n	8005b68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d108      	bne.n	8005b68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b60:	461a      	mov	r2, r3
 8005b62:	2100      	movs	r1, #0
 8005b64:	f002 fd1e 	bl	80085a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fdee 	bl	8005750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3720      	adds	r7, #32
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	4f54300a 	.word	0x4f54300a
 8005b84:	4f54310a 	.word	0x4f54310a

08005b88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	333c      	adds	r3, #60	@ 0x3c
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	@ (8005c10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d90e      	bls.n	8005bdc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff fdcf 	bl	8005780 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <PCD_EP_OutSetupPacket_int+0x88>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d90c      	bls.n	8005c04 <PCD_EP_OutSetupPacket_int+0x7c>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	799b      	ldrb	r3, [r3, #6]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d108      	bne.n	8005c04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2101      	movs	r1, #1
 8005c00:	f002 fcd0 	bl	80085a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	4f54300a 	.word	0x4f54300a

08005c14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e267      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d075      	beq.n	8005d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c4a:	4b88      	ldr	r3, [pc, #544]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00c      	beq.n	8005c70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c56:	4b85      	ldr	r3, [pc, #532]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d112      	bne.n	8005c88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c62:	4b82      	ldr	r3, [pc, #520]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c6e:	d10b      	bne.n	8005c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c70:	4b7e      	ldr	r3, [pc, #504]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05b      	beq.n	8005d34 <HAL_RCC_OscConfig+0x108>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d157      	bne.n	8005d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e242      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c90:	d106      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x74>
 8005c92:	4b76      	ldr	r3, [pc, #472]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a75      	ldr	r2, [pc, #468]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e01d      	b.n	8005cdc <HAL_RCC_OscConfig+0xb0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x98>
 8005caa:	4b70      	ldr	r3, [pc, #448]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6f      	ldr	r2, [pc, #444]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6c      	ldr	r2, [pc, #432]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e00b      	b.n	8005cdc <HAL_RCC_OscConfig+0xb0>
 8005cc4:	4b69      	ldr	r3, [pc, #420]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a68      	ldr	r2, [pc, #416]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	4b66      	ldr	r3, [pc, #408]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a65      	ldr	r2, [pc, #404]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d013      	beq.n	8005d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce4:	f7fc f872 	bl	8001dcc <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cec:	f7fc f86e 	bl	8001dcc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b64      	cmp	r3, #100	@ 0x64
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e207      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0xc0>
 8005d0a:	e014      	b.n	8005d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fc f85e 	bl	8001dcc <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d14:	f7fc f85a 	bl	8001dcc <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b64      	cmp	r3, #100	@ 0x64
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e1f3      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d26:	4b51      	ldr	r3, [pc, #324]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0xe8>
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d063      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d42:	4b4a      	ldr	r3, [pc, #296]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b47      	ldr	r3, [pc, #284]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d11c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5a:	4b44      	ldr	r3, [pc, #272]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d116      	bne.n	8005d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d66:	4b41      	ldr	r3, [pc, #260]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_RCC_OscConfig+0x152>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e1c7      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4937      	ldr	r1, [pc, #220]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d92:	e03a      	b.n	8005e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d020      	beq.n	8005dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d9c:	4b34      	ldr	r3, [pc, #208]	@ (8005e70 <HAL_RCC_OscConfig+0x244>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fc f813 	bl	8001dcc <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da8:	e008      	b.n	8005dbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005daa:	f7fc f80f 	bl	8001dcc <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d901      	bls.n	8005dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e1a8      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d0f0      	beq.n	8005daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc8:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4925      	ldr	r1, [pc, #148]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]
 8005ddc:	e015      	b.n	8005e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dde:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <HAL_RCC_OscConfig+0x244>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de4:	f7fb fff2 	bl	8001dcc <HAL_GetTick>
 8005de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dec:	f7fb ffee 	bl	8001dcc <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e187      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1f0      	bne.n	8005dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d036      	beq.n	8005e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d016      	beq.n	8005e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e1e:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <HAL_RCC_OscConfig+0x248>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e24:	f7fb ffd2 	bl	8001dcc <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e2c:	f7fb ffce 	bl	8001dcc <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e167      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e6c <HAL_RCC_OscConfig+0x240>)
 8005e40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0x200>
 8005e4a:	e01b      	b.n	8005e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e4c:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <HAL_RCC_OscConfig+0x248>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e52:	f7fb ffbb 	bl	8001dcc <HAL_GetTick>
 8005e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e58:	e00e      	b.n	8005e78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5a:	f7fb ffb7 	bl	8001dcc <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d907      	bls.n	8005e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e150      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
 8005e6c:	40023800 	.word	0x40023800
 8005e70:	42470000 	.word	0x42470000
 8005e74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	4b88      	ldr	r3, [pc, #544]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ea      	bne.n	8005e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8097 	beq.w	8005fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e92:	2300      	movs	r3, #0
 8005e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e96:	4b81      	ldr	r3, [pc, #516]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60bb      	str	r3, [r7, #8]
 8005ea6:	4b7d      	ldr	r3, [pc, #500]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	4a7c      	ldr	r2, [pc, #496]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec2:	4b77      	ldr	r3, [pc, #476]	@ (80060a0 <HAL_RCC_OscConfig+0x474>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ece:	4b74      	ldr	r3, [pc, #464]	@ (80060a0 <HAL_RCC_OscConfig+0x474>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a73      	ldr	r2, [pc, #460]	@ (80060a0 <HAL_RCC_OscConfig+0x474>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eda:	f7fb ff77 	bl	8001dcc <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fb ff73 	bl	8001dcc <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e10c      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80060a0 <HAL_RCC_OscConfig+0x474>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x2ea>
 8005f08:	4b64      	ldr	r3, [pc, #400]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	4a63      	ldr	r2, [pc, #396]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f14:	e01c      	b.n	8005f50 <HAL_RCC_OscConfig+0x324>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x30c>
 8005f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	4a5e      	ldr	r2, [pc, #376]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f24:	f043 0304 	orr.w	r3, r3, #4
 8005f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f30:	f043 0301 	orr.w	r3, r3, #1
 8005f34:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f36:	e00b      	b.n	8005f50 <HAL_RCC_OscConfig+0x324>
 8005f38:	4b58      	ldr	r3, [pc, #352]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	4a57      	ldr	r2, [pc, #348]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f3e:	f023 0301 	bic.w	r3, r3, #1
 8005f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f44:	4b55      	ldr	r3, [pc, #340]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f48:	4a54      	ldr	r2, [pc, #336]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f023 0304 	bic.w	r3, r3, #4
 8005f4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fb ff38 	bl	8001dcc <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5e:	e00a      	b.n	8005f76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f60:	f7fb ff34 	bl	8001dcc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0cb      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f76:	4b49      	ldr	r3, [pc, #292]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0ee      	beq.n	8005f60 <HAL_RCC_OscConfig+0x334>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f84:	f7fb ff22 	bl	8001dcc <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8c:	f7fb ff1e 	bl	8001dcc <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e0b5      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1ee      	bne.n	8005f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fb4:	4b39      	ldr	r3, [pc, #228]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	4a38      	ldr	r2, [pc, #224]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80a1 	beq.w	800610c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fca:	4b34      	ldr	r3, [pc, #208]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 030c 	and.w	r3, r3, #12
 8005fd2:	2b08      	cmp	r3, #8
 8005fd4:	d05c      	beq.n	8006090 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d141      	bne.n	8006062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fde:	4b31      	ldr	r3, [pc, #196]	@ (80060a4 <HAL_RCC_OscConfig+0x478>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fb fef2 	bl	8001dcc <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fec:	f7fb feee 	bl	8001dcc <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e087      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	4b27      	ldr	r3, [pc, #156]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	3b01      	subs	r3, #1
 8006024:	041b      	lsls	r3, r3, #16
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	061b      	lsls	r3, r3, #24
 800602e:	491b      	ldr	r1, [pc, #108]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8006030:	4313      	orrs	r3, r2
 8006032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006034:	4b1b      	ldr	r3, [pc, #108]	@ (80060a4 <HAL_RCC_OscConfig+0x478>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603a:	f7fb fec7 	bl	8001dcc <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006042:	f7fb fec3 	bl	8001dcc <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e05c      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006054:	4b11      	ldr	r3, [pc, #68]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x416>
 8006060:	e054      	b.n	800610c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006062:	4b10      	ldr	r3, [pc, #64]	@ (80060a4 <HAL_RCC_OscConfig+0x478>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fb feb0 	bl	8001dcc <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006070:	f7fb feac 	bl	8001dcc <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b02      	cmp	r3, #2
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e045      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006082:	4b06      	ldr	r3, [pc, #24]	@ (800609c <HAL_RCC_OscConfig+0x470>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0x444>
 800608e:	e03d      	b.n	800610c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e038      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
 800609c:	40023800 	.word	0x40023800
 80060a0:	40007000 	.word	0x40007000
 80060a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006118 <HAL_RCC_OscConfig+0x4ec>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d028      	beq.n	8006108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d121      	bne.n	8006108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d11a      	bne.n	8006108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060d8:	4013      	ands	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d111      	bne.n	8006108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	3b01      	subs	r3, #1
 80060f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d107      	bne.n	8006108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800

0800611c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e0cc      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006130:	4b68      	ldr	r3, [pc, #416]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	d90c      	bls.n	8006158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800613e:	4b65      	ldr	r3, [pc, #404]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006146:	4b63      	ldr	r3, [pc, #396]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d001      	beq.n	8006158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e0b8      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006170:	4b59      	ldr	r3, [pc, #356]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	4a58      	ldr	r2, [pc, #352]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006176:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800617a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006188:	4b53      	ldr	r3, [pc, #332]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4a52      	ldr	r2, [pc, #328]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 800618e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006194:	4b50      	ldr	r3, [pc, #320]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	494d      	ldr	r1, [pc, #308]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d044      	beq.n	800623c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ba:	4b47      	ldr	r3, [pc, #284]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d119      	bne.n	80061fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e07f      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d003      	beq.n	80061da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061da:	4b3f      	ldr	r3, [pc, #252]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d109      	bne.n	80061fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e06f      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ea:	4b3b      	ldr	r3, [pc, #236]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e067      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061fa:	4b37      	ldr	r3, [pc, #220]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f023 0203 	bic.w	r2, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4934      	ldr	r1, [pc, #208]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800620c:	f7fb fdde 	bl	8001dcc <HAL_GetTick>
 8006210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006212:	e00a      	b.n	800622a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006214:	f7fb fdda 	bl	8001dcc <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006222:	4293      	cmp	r3, r2
 8006224:	d901      	bls.n	800622a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e04f      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622a:	4b2b      	ldr	r3, [pc, #172]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 020c 	and.w	r2, r3, #12
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	429a      	cmp	r2, r3
 800623a:	d1eb      	bne.n	8006214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800623c:	4b25      	ldr	r3, [pc, #148]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d20c      	bcs.n	8006264 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b22      	ldr	r3, [pc, #136]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b20      	ldr	r3, [pc, #128]	@ (80062d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e032      	b.n	80062ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006270:	4b19      	ldr	r3, [pc, #100]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4916      	ldr	r1, [pc, #88]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0308 	and.w	r3, r3, #8
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800628e:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	490e      	ldr	r1, [pc, #56]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062a2:	f000 f821 	bl	80062e8 <HAL_RCC_GetSysClockFreq>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	091b      	lsrs	r3, r3, #4
 80062ae:	f003 030f 	and.w	r3, r3, #15
 80062b2:	490a      	ldr	r1, [pc, #40]	@ (80062dc <HAL_RCC_ClockConfig+0x1c0>)
 80062b4:	5ccb      	ldrb	r3, [r1, r3]
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	4a09      	ldr	r2, [pc, #36]	@ (80062e0 <HAL_RCC_ClockConfig+0x1c4>)
 80062bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062be:	4b09      	ldr	r3, [pc, #36]	@ (80062e4 <HAL_RCC_ClockConfig+0x1c8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fb fd3e 	bl	8001d44 <HAL_InitTick>

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023c00 	.word	0x40023c00
 80062d8:	40023800 	.word	0x40023800
 80062dc:	08008734 	.word	0x08008734
 80062e0:	20000008 	.word	0x20000008
 80062e4:	20000014 	.word	0x20000014

080062e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062ec:	b094      	sub	sp, #80	@ 0x50
 80062ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006300:	4b79      	ldr	r3, [pc, #484]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b08      	cmp	r3, #8
 800630a:	d00d      	beq.n	8006328 <HAL_RCC_GetSysClockFreq+0x40>
 800630c:	2b08      	cmp	r3, #8
 800630e:	f200 80e1 	bhi.w	80064d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_RCC_GetSysClockFreq+0x34>
 8006316:	2b04      	cmp	r3, #4
 8006318:	d003      	beq.n	8006322 <HAL_RCC_GetSysClockFreq+0x3a>
 800631a:	e0db      	b.n	80064d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800631c:	4b73      	ldr	r3, [pc, #460]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x204>)
 800631e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006320:	e0db      	b.n	80064da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006322:	4b72      	ldr	r3, [pc, #456]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x204>)
 8006324:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006326:	e0d8      	b.n	80064da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006328:	4b6f      	ldr	r3, [pc, #444]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006330:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006332:	4b6d      	ldr	r3, [pc, #436]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d063      	beq.n	8006406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800633e:	4b6a      	ldr	r3, [pc, #424]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	2200      	movs	r2, #0
 8006346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006348:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800634a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800634c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006350:	633b      	str	r3, [r7, #48]	@ 0x30
 8006352:	2300      	movs	r3, #0
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
 8006356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	f04f 0000 	mov.w	r0, #0
 8006362:	f04f 0100 	mov.w	r1, #0
 8006366:	0159      	lsls	r1, r3, #5
 8006368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800636c:	0150      	lsls	r0, r2, #5
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4621      	mov	r1, r4
 8006374:	1a51      	subs	r1, r2, r1
 8006376:	6139      	str	r1, [r7, #16]
 8006378:	4629      	mov	r1, r5
 800637a:	eb63 0301 	sbc.w	r3, r3, r1
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800638c:	4659      	mov	r1, fp
 800638e:	018b      	lsls	r3, r1, #6
 8006390:	4651      	mov	r1, sl
 8006392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006396:	4651      	mov	r1, sl
 8006398:	018a      	lsls	r2, r1, #6
 800639a:	4651      	mov	r1, sl
 800639c:	ebb2 0801 	subs.w	r8, r2, r1
 80063a0:	4659      	mov	r1, fp
 80063a2:	eb63 0901 	sbc.w	r9, r3, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	4690      	mov	r8, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	eb18 0303 	adds.w	r3, r8, r3
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	462b      	mov	r3, r5
 80063c8:	eb49 0303 	adc.w	r3, r9, r3
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063da:	4629      	mov	r1, r5
 80063dc:	028b      	lsls	r3, r1, #10
 80063de:	4621      	mov	r1, r4
 80063e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e4:	4621      	mov	r1, r4
 80063e6:	028a      	lsls	r2, r1, #10
 80063e8:	4610      	mov	r0, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ee:	2200      	movs	r2, #0
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063f8:	f7f9 fee6 	bl	80001c8 <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4613      	mov	r3, r2
 8006402:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006404:	e058      	b.n	80064b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006406:	4b38      	ldr	r3, [pc, #224]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	099b      	lsrs	r3, r3, #6
 800640c:	2200      	movs	r2, #0
 800640e:	4618      	mov	r0, r3
 8006410:	4611      	mov	r1, r2
 8006412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	2300      	movs	r3, #0
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
 800641c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	0159      	lsls	r1, r3, #5
 800642e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006432:	0150      	lsls	r0, r2, #5
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4641      	mov	r1, r8
 800643a:	ebb2 0a01 	subs.w	sl, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb63 0b01 	sbc.w	fp, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006458:	ebb2 040a 	subs.w	r4, r2, sl
 800645c:	eb63 050b 	sbc.w	r5, r3, fp
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	00eb      	lsls	r3, r5, #3
 800646a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800646e:	00e2      	lsls	r2, r4, #3
 8006470:	4614      	mov	r4, r2
 8006472:	461d      	mov	r5, r3
 8006474:	4643      	mov	r3, r8
 8006476:	18e3      	adds	r3, r4, r3
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	464b      	mov	r3, r9
 800647c:	eb45 0303 	adc.w	r3, r5, r3
 8006480:	607b      	str	r3, [r7, #4]
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800648e:	4629      	mov	r1, r5
 8006490:	028b      	lsls	r3, r1, #10
 8006492:	4621      	mov	r1, r4
 8006494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006498:	4621      	mov	r1, r4
 800649a:	028a      	lsls	r2, r1, #10
 800649c:	4610      	mov	r0, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a2:	2200      	movs	r2, #0
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	61fa      	str	r2, [r7, #28]
 80064a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064ac:	f7f9 fe8c 	bl	80001c8 <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4613      	mov	r3, r2
 80064b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064b8:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	3301      	adds	r3, #1
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064d2:	e002      	b.n	80064da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064d4:	4b05      	ldr	r3, [pc, #20]	@ (80064ec <HAL_RCC_GetSysClockFreq+0x204>)
 80064d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3750      	adds	r7, #80	@ 0x50
 80064e0:	46bd      	mov	sp, r7
 80064e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e6:	bf00      	nop
 80064e8:	40023800 	.word	0x40023800
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064f4:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <HAL_RCC_GetHCLKFreq+0x14>)
 80064f6:	681b      	ldr	r3, [r3, #0]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000008 	.word	0x20000008

08006508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800650c:	f7ff fff0 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006510:	4602      	mov	r2, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4903      	ldr	r1, [pc, #12]	@ (800652c <HAL_RCC_GetPCLK1Freq+0x24>)
 800651e:	5ccb      	ldrb	r3, [r1, r3]
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40023800 	.word	0x40023800
 800652c:	08008744 	.word	0x08008744

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006534:	f7ff ffdc 	bl	80064f0 <HAL_RCC_GetHCLKFreq>
 8006538:	4602      	mov	r2, r0
 800653a:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	0b5b      	lsrs	r3, r3, #13
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	4903      	ldr	r1, [pc, #12]	@ (8006554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006546:	5ccb      	ldrb	r3, [r1, r3]
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40023800 	.word	0x40023800
 8006554:	08008744 	.word	0x08008744

08006558 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800657c:	2b00      	cmp	r3, #0
 800657e:	d035      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006580:	4b62      	ldr	r3, [pc, #392]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006586:	f7fb fc21 	bl	8001dcc <HAL_GetTick>
 800658a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800658c:	e008      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800658e:	f7fb fc1d 	bl	8001dcc <HAL_GetTick>
 8006592:	4602      	mov	r2, r0
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	2b02      	cmp	r3, #2
 800659a:	d901      	bls.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e0b0      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065a0:	4b5b      	ldr	r3, [pc, #364]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f0      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	019a      	lsls	r2, r3, #6
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	071b      	lsls	r3, r3, #28
 80065b8:	4955      	ldr	r1, [pc, #340]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065c0:	4b52      	ldr	r3, [pc, #328]	@ (800670c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c6:	f7fb fc01 	bl	8001dcc <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065cc:	e008      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ce:	f7fb fbfd 	bl	8001dcc <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e090      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8083 	beq.w	8006700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	4b44      	ldr	r3, [pc, #272]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006602:	4a43      	ldr	r2, [pc, #268]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006608:	6413      	str	r3, [r2, #64]	@ 0x40
 800660a:	4b41      	ldr	r3, [pc, #260]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006616:	4b3f      	ldr	r3, [pc, #252]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3e      	ldr	r2, [pc, #248]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006620:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006622:	f7fb fbd3 	bl	8001dcc <HAL_GetTick>
 8006626:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662a:	f7fb fbcf 	bl	8001dcc <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e062      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800663c:	4b35      	ldr	r3, [pc, #212]	@ (8006714 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006648:	4b31      	ldr	r3, [pc, #196]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006650:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d02f      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	429a      	cmp	r2, r3
 8006664:	d028      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006666:	4b2a      	ldr	r3, [pc, #168]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006670:	4b29      	ldr	r3, [pc, #164]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006676:	4b28      	ldr	r3, [pc, #160]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800667c:	4a24      	ldr	r2, [pc, #144]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006682:	4b23      	ldr	r3, [pc, #140]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d114      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800668e:	f7fb fb9d 	bl	8001dcc <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006694:	e00a      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fb fb99 	bl	8001dcc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e02a      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ac:	4b18      	ldr	r3, [pc, #96]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0ee      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066c4:	d10d      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80066c6:	4b12      	ldr	r3, [pc, #72]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066da:	490d      	ldr	r1, [pc, #52]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	608b      	str	r3, [r1, #8]
 80066e0:	e005      	b.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80066e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066e8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	4b08      	ldr	r3, [pc, #32]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fa:	4905      	ldr	r1, [pc, #20]	@ (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	42470068 	.word	0x42470068
 8006710:	40023800 	.word	0x40023800
 8006714:	40007000 	.word	0x40007000
 8006718:	42470e40 	.word	0x42470e40

0800671c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d13f      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800673a:	4b24      	ldr	r3, [pc, #144]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006742:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d006      	beq.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006750:	d12f      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006752:	4b1f      	ldr	r3, [pc, #124]	@ (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006754:	617b      	str	r3, [r7, #20]
          break;
 8006756:	e02f      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006758:	4b1c      	ldr	r3, [pc, #112]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006764:	d108      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006766:	4b19      	ldr	r3, [pc, #100]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800676e:	4a19      	ldr	r2, [pc, #100]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	e007      	b.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006778:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006780:	4a14      	ldr	r2, [pc, #80]	@ (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006788:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800678a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800678e:	099b      	lsrs	r3, r3, #6
 8006790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800679c:	4b0b      	ldr	r3, [pc, #44]	@ (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800679e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067a2:	0f1b      	lsrs	r3, r3, #28
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ae:	617b      	str	r3, [r7, #20]
          break;
 80067b0:	e002      	b.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
          break;
 80067b6:	bf00      	nop
        }
      }
      break;
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80067ba:	bf00      	nop
    }
  }
  return frequency;
 80067bc:	697b      	ldr	r3, [r7, #20]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	40023800 	.word	0x40023800
 80067d0:	00bb8000 	.word	0x00bb8000
 80067d4:	00f42400 	.word	0x00f42400

080067d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e07b      	b.n	80068e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d108      	bne.n	8006804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067fa:	d009      	beq.n	8006810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	61da      	str	r2, [r3, #28]
 8006802:	e005      	b.n	8006810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fa fc6e 	bl	800110c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006862:	431a      	orrs	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	69db      	ldr	r3, [r3, #28]
 8006886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006894:	ea42 0103 	orr.w	r1, r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0104 	and.w	r1, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	f003 0210 	and.w	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e041      	b.n	8006980 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fa fd5b 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f000 fa79 	bl	8006e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d001      	beq.n	80069a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e046      	b.n	8006a2e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <HAL_TIM_Base_Start+0xb4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d022      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d01d      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006a40 <HAL_TIM_Base_Start+0xb8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006a44 <HAL_TIM_Base_Start+0xbc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006a48 <HAL_TIM_Base_Start+0xc0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1b      	ldr	r2, [pc, #108]	@ (8006a4c <HAL_TIM_Base_Start+0xc4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <HAL_TIM_Base_Start+0xc8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_Base_Start+0x70>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <HAL_TIM_Base_Start+0xcc>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d111      	bne.n	8006a1c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d010      	beq.n	8006a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f042 0201 	orr.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1a:	e007      	b.n	8006a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40000400 	.word	0x40000400
 8006a44:	40000800 	.word	0x40000800
 8006a48:	40000c00 	.word	0x40000c00
 8006a4c:	40010400 	.word	0x40010400
 8006a50:	40014000 	.word	0x40014000
 8006a54:	40001800 	.word	0x40001800

08006a58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e041      	b.n	8006aee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f839 	bl	8006af6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3304      	adds	r3, #4
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f000 f9c2 	bl	8006e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b083      	sub	sp, #12
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
	...

08006b0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0ae      	b.n	8006c88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b0c      	cmp	r3, #12
 8006b36:	f200 809f 	bhi.w	8006c78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b75 	.word	0x08006b75
 8006b44:	08006c79 	.word	0x08006c79
 8006b48:	08006c79 	.word	0x08006c79
 8006b4c:	08006c79 	.word	0x08006c79
 8006b50:	08006bb5 	.word	0x08006bb5
 8006b54:	08006c79 	.word	0x08006c79
 8006b58:	08006c79 	.word	0x08006c79
 8006b5c:	08006c79 	.word	0x08006c79
 8006b60:	08006bf7 	.word	0x08006bf7
 8006b64:	08006c79 	.word	0x08006c79
 8006b68:	08006c79 	.word	0x08006c79
 8006b6c:	08006c79 	.word	0x08006c79
 8006b70:	08006c37 	.word	0x08006c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f000 f9fc 	bl	8006f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0208 	orr.w	r2, r2, #8
 8006b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6999      	ldr	r1, [r3, #24]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	619a      	str	r2, [r3, #24]
      break;
 8006bb2:	e064      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fa4c 	bl	8007058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6999      	ldr	r1, [r3, #24]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	021a      	lsls	r2, r3, #8
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	619a      	str	r2, [r3, #24]
      break;
 8006bf4:	e043      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68b9      	ldr	r1, [r7, #8]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 faa1 	bl	8007144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0208 	orr.w	r2, r2, #8
 8006c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0204 	bic.w	r2, r2, #4
 8006c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69d9      	ldr	r1, [r3, #28]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	61da      	str	r2, [r3, #28]
      break;
 8006c34:	e023      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 faf5 	bl	800722c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69d9      	ldr	r1, [r3, #28]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	021a      	lsls	r2, r3, #8
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	61da      	str	r2, [r3, #28]
      break;
 8006c76:	e002      	b.n	8006c7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_TIM_ConfigClockSource+0x1c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e0b4      	b.n	8006e16 <HAL_TIM_ConfigClockSource+0x186>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ce4:	d03e      	beq.n	8006d64 <HAL_TIM_ConfigClockSource+0xd4>
 8006ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cea:	f200 8087 	bhi.w	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cf2:	f000 8086 	beq.w	8006e02 <HAL_TIM_ConfigClockSource+0x172>
 8006cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cfa:	d87f      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b70      	cmp	r3, #112	@ 0x70
 8006cfe:	d01a      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0xa6>
 8006d00:	2b70      	cmp	r3, #112	@ 0x70
 8006d02:	d87b      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b60      	cmp	r3, #96	@ 0x60
 8006d06:	d050      	beq.n	8006daa <HAL_TIM_ConfigClockSource+0x11a>
 8006d08:	2b60      	cmp	r3, #96	@ 0x60
 8006d0a:	d877      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b50      	cmp	r3, #80	@ 0x50
 8006d0e:	d03c      	beq.n	8006d8a <HAL_TIM_ConfigClockSource+0xfa>
 8006d10:	2b50      	cmp	r3, #80	@ 0x50
 8006d12:	d873      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	d058      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x13a>
 8006d18:	2b40      	cmp	r3, #64	@ 0x40
 8006d1a:	d86f      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b30      	cmp	r3, #48	@ 0x30
 8006d1e:	d064      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15a>
 8006d20:	2b30      	cmp	r3, #48	@ 0x30
 8006d22:	d86b      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d24:	2b20      	cmp	r3, #32
 8006d26:	d060      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15a>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d867      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d05c      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15a>
 8006d30:	2b10      	cmp	r3, #16
 8006d32:	d05a      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0x15a>
 8006d34:	e062      	b.n	8006dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d46:	f000 fb41 	bl	80073cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	609a      	str	r2, [r3, #8]
      break;
 8006d62:	e04f      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d74:	f000 fb2a 	bl	80073cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d86:	609a      	str	r2, [r3, #8]
      break;
 8006d88:	e03c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d96:	461a      	mov	r2, r3
 8006d98:	f000 fa9e 	bl	80072d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2150      	movs	r1, #80	@ 0x50
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 faf7 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8006da8:	e02c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db6:	461a      	mov	r2, r3
 8006db8:	f000 fabd 	bl	8007336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2160      	movs	r1, #96	@ 0x60
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fae7 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8006dc8:	e01c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f000 fa7e 	bl	80072d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2140      	movs	r1, #64	@ 0x40
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fad7 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8006de8:	e00c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f000 face 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8006dfa:	e003      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e000      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a46      	ldr	r2, [pc, #280]	@ (8006f4c <TIM_Base_SetConfig+0x12c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e3e:	d00f      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a43      	ldr	r2, [pc, #268]	@ (8006f50 <TIM_Base_SetConfig+0x130>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00b      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a42      	ldr	r2, [pc, #264]	@ (8006f54 <TIM_Base_SetConfig+0x134>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a41      	ldr	r2, [pc, #260]	@ (8006f58 <TIM_Base_SetConfig+0x138>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_Base_SetConfig+0x40>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a40      	ldr	r2, [pc, #256]	@ (8006f5c <TIM_Base_SetConfig+0x13c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d108      	bne.n	8006e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a35      	ldr	r2, [pc, #212]	@ (8006f4c <TIM_Base_SetConfig+0x12c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d02b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e80:	d027      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a32      	ldr	r2, [pc, #200]	@ (8006f50 <TIM_Base_SetConfig+0x130>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d023      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	@ (8006f54 <TIM_Base_SetConfig+0x134>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01f      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a30      	ldr	r2, [pc, #192]	@ (8006f58 <TIM_Base_SetConfig+0x138>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8006f5c <TIM_Base_SetConfig+0x13c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d017      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8006f60 <TIM_Base_SetConfig+0x140>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d013      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a2d      	ldr	r2, [pc, #180]	@ (8006f64 <TIM_Base_SetConfig+0x144>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00f      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f68 <TIM_Base_SetConfig+0x148>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00b      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8006f6c <TIM_Base_SetConfig+0x14c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d007      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8006f70 <TIM_Base_SetConfig+0x150>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a29      	ldr	r2, [pc, #164]	@ (8006f74 <TIM_Base_SetConfig+0x154>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d108      	bne.n	8006ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	695b      	ldr	r3, [r3, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a10      	ldr	r2, [pc, #64]	@ (8006f4c <TIM_Base_SetConfig+0x12c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d003      	beq.n	8006f18 <TIM_Base_SetConfig+0xf8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a12      	ldr	r2, [pc, #72]	@ (8006f5c <TIM_Base_SetConfig+0x13c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d103      	bne.n	8006f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d105      	bne.n	8006f3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f023 0201 	bic.w	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	611a      	str	r2, [r3, #16]
  }
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40010400 	.word	0x40010400
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40014400 	.word	0x40014400
 8006f68:	40014800 	.word	0x40014800
 8006f6c:	40001800 	.word	0x40001800
 8006f70:	40001c00 	.word	0x40001c00
 8006f74:	40002000 	.word	0x40002000

08006f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	f023 0201 	bic.w	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 0302 	bic.w	r3, r3, #2
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a20      	ldr	r2, [pc, #128]	@ (8007050 <TIM_OC1_SetConfig+0xd8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <TIM_OC1_SetConfig+0x64>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8007054 <TIM_OC1_SetConfig+0xdc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10c      	bne.n	8006ff6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f023 0308 	bic.w	r3, r3, #8
 8006fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f023 0304 	bic.w	r3, r3, #4
 8006ff4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a15      	ldr	r2, [pc, #84]	@ (8007050 <TIM_OC1_SetConfig+0xd8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC1_SetConfig+0x8e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a14      	ldr	r2, [pc, #80]	@ (8007054 <TIM_OC1_SetConfig+0xdc>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d111      	bne.n	800702a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800700c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	371c      	adds	r7, #28
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400

08007058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	f023 0210 	bic.w	r2, r3, #16
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800708e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f023 0320 	bic.w	r3, r3, #32
 80070a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a22      	ldr	r2, [pc, #136]	@ (800713c <TIM_OC2_SetConfig+0xe4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_OC2_SetConfig+0x68>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a21      	ldr	r2, [pc, #132]	@ (8007140 <TIM_OC2_SetConfig+0xe8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10d      	bne.n	80070dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	011b      	lsls	r3, r3, #4
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a17      	ldr	r2, [pc, #92]	@ (800713c <TIM_OC2_SetConfig+0xe4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_OC2_SetConfig+0x94>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <TIM_OC2_SetConfig+0xe8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d113      	bne.n	8007114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	695b      	ldr	r3, [r3, #20]
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40010400 	.word	0x40010400

08007144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a1b      	ldr	r3, [r3, #32]
 8007158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800718c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a21      	ldr	r2, [pc, #132]	@ (8007224 <TIM_OC3_SetConfig+0xe0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d003      	beq.n	80071aa <TIM_OC3_SetConfig+0x66>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a20      	ldr	r2, [pc, #128]	@ (8007228 <TIM_OC3_SetConfig+0xe4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d10d      	bne.n	80071c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80071c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a16      	ldr	r2, [pc, #88]	@ (8007224 <TIM_OC3_SetConfig+0xe0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC3_SetConfig+0x92>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a15      	ldr	r2, [pc, #84]	@ (8007228 <TIM_OC3_SetConfig+0xe4>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d113      	bne.n	80071fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80071e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	011b      	lsls	r3, r3, #4
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	621a      	str	r2, [r3, #32]
}
 8007218:	bf00      	nop
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40010000 	.word	0x40010000
 8007228:	40010400 	.word	0x40010400

0800722c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69db      	ldr	r3, [r3, #28]
 8007252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a12      	ldr	r2, [pc, #72]	@ (80072d0 <TIM_OC4_SetConfig+0xa4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_OC4_SetConfig+0x68>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a11      	ldr	r2, [pc, #68]	@ (80072d4 <TIM_OC4_SetConfig+0xa8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d109      	bne.n	80072a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800729a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	019b      	lsls	r3, r3, #6
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	621a      	str	r2, [r3, #32]
}
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40010400 	.word	0x40010400

080072d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f023 030a 	bic.w	r3, r3, #10
 8007314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f023 0210 	bic.w	r2, r3, #16
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	031b      	lsls	r3, r3, #12
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	4313      	orrs	r3, r2
 800737c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f043 0307 	orr.w	r3, r3, #7
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	021a      	lsls	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	609a      	str	r2, [r3, #8]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e05a      	b.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a21      	ldr	r2, [pc, #132]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007470:	d01d      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1b      	ldr	r2, [pc, #108]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1a      	ldr	r2, [pc, #104]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a17      	ldr	r2, [pc, #92]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a15      	ldr	r2, [pc, #84]	@ (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d10c      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40014000 	.word	0x40014000
 8007500:	40001800 	.word	0x40001800

08007504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e042      	b.n	800759c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7f9 ff98 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	@ 0x24
 8007534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f82b 	bl	80075a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800755c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800756c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800757c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a8:	b0c0      	sub	sp, #256	@ 0x100
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c0:	68d9      	ldr	r1, [r3, #12]
 80075c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	ea40 0301 	orr.w	r3, r0, r1
 80075cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	431a      	orrs	r2, r3
 80075dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80075fc:	f021 010c 	bic.w	r1, r1, #12
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800760a:	430b      	orrs	r3, r1
 800760c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761e:	6999      	ldr	r1, [r3, #24]
 8007620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	ea40 0301 	orr.w	r3, r0, r1
 800762a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800762c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	4b8f      	ldr	r3, [pc, #572]	@ (8007870 <UART_SetConfig+0x2cc>)
 8007634:	429a      	cmp	r2, r3
 8007636:	d005      	beq.n	8007644 <UART_SetConfig+0xa0>
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	4b8d      	ldr	r3, [pc, #564]	@ (8007874 <UART_SetConfig+0x2d0>)
 8007640:	429a      	cmp	r2, r3
 8007642:	d104      	bne.n	800764e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007644:	f7fe ff74 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8007648:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800764c:	e003      	b.n	8007656 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800764e:	f7fe ff5b 	bl	8006508 <HAL_RCC_GetPCLK1Freq>
 8007652:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007660:	f040 810c 	bne.w	800787c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800766e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007672:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	1891      	adds	r1, r2, r2
 800767c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800767e:	415b      	adcs	r3, r3
 8007680:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007682:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007686:	4621      	mov	r1, r4
 8007688:	eb12 0801 	adds.w	r8, r2, r1
 800768c:	4629      	mov	r1, r5
 800768e:	eb43 0901 	adc.w	r9, r3, r1
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800769e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076a6:	4690      	mov	r8, r2
 80076a8:	4699      	mov	r9, r3
 80076aa:	4623      	mov	r3, r4
 80076ac:	eb18 0303 	adds.w	r3, r8, r3
 80076b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076b4:	462b      	mov	r3, r5
 80076b6:	eb49 0303 	adc.w	r3, r9, r3
 80076ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076d2:	460b      	mov	r3, r1
 80076d4:	18db      	adds	r3, r3, r3
 80076d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076d8:	4613      	mov	r3, r2
 80076da:	eb42 0303 	adc.w	r3, r2, r3
 80076de:	657b      	str	r3, [r7, #84]	@ 0x54
 80076e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076e8:	f7f8 fd6e 	bl	80001c8 <__aeabi_uldivmod>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4b61      	ldr	r3, [pc, #388]	@ (8007878 <UART_SetConfig+0x2d4>)
 80076f2:	fba3 2302 	umull	r2, r3, r3, r2
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	011c      	lsls	r4, r3, #4
 80076fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007704:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007708:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800770c:	4642      	mov	r2, r8
 800770e:	464b      	mov	r3, r9
 8007710:	1891      	adds	r1, r2, r2
 8007712:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007714:	415b      	adcs	r3, r3
 8007716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007718:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800771c:	4641      	mov	r1, r8
 800771e:	eb12 0a01 	adds.w	sl, r2, r1
 8007722:	4649      	mov	r1, r9
 8007724:	eb43 0b01 	adc.w	fp, r3, r1
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007734:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007738:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800773c:	4692      	mov	sl, r2
 800773e:	469b      	mov	fp, r3
 8007740:	4643      	mov	r3, r8
 8007742:	eb1a 0303 	adds.w	r3, sl, r3
 8007746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800774a:	464b      	mov	r3, r9
 800774c:	eb4b 0303 	adc.w	r3, fp, r3
 8007750:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007760:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007764:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007768:	460b      	mov	r3, r1
 800776a:	18db      	adds	r3, r3, r3
 800776c:	643b      	str	r3, [r7, #64]	@ 0x40
 800776e:	4613      	mov	r3, r2
 8007770:	eb42 0303 	adc.w	r3, r2, r3
 8007774:	647b      	str	r3, [r7, #68]	@ 0x44
 8007776:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800777a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800777e:	f7f8 fd23 	bl	80001c8 <__aeabi_uldivmod>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4611      	mov	r1, r2
 8007788:	4b3b      	ldr	r3, [pc, #236]	@ (8007878 <UART_SetConfig+0x2d4>)
 800778a:	fba3 2301 	umull	r2, r3, r3, r1
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	2264      	movs	r2, #100	@ 0x64
 8007792:	fb02 f303 	mul.w	r3, r2, r3
 8007796:	1acb      	subs	r3, r1, r3
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800779e:	4b36      	ldr	r3, [pc, #216]	@ (8007878 <UART_SetConfig+0x2d4>)
 80077a0:	fba3 2302 	umull	r2, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077ac:	441c      	add	r4, r3
 80077ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077b8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077c0:	4642      	mov	r2, r8
 80077c2:	464b      	mov	r3, r9
 80077c4:	1891      	adds	r1, r2, r2
 80077c6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077c8:	415b      	adcs	r3, r3
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077d0:	4641      	mov	r1, r8
 80077d2:	1851      	adds	r1, r2, r1
 80077d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80077d6:	4649      	mov	r1, r9
 80077d8:	414b      	adcs	r3, r1
 80077da:	637b      	str	r3, [r7, #52]	@ 0x34
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077e8:	4659      	mov	r1, fp
 80077ea:	00cb      	lsls	r3, r1, #3
 80077ec:	4651      	mov	r1, sl
 80077ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077f2:	4651      	mov	r1, sl
 80077f4:	00ca      	lsls	r2, r1, #3
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	4603      	mov	r3, r0
 80077fc:	4642      	mov	r2, r8
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007804:	464b      	mov	r3, r9
 8007806:	460a      	mov	r2, r1
 8007808:	eb42 0303 	adc.w	r3, r2, r3
 800780c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800781c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007824:	460b      	mov	r3, r1
 8007826:	18db      	adds	r3, r3, r3
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800782a:	4613      	mov	r3, r2
 800782c:	eb42 0303 	adc.w	r3, r2, r3
 8007830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007832:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007836:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800783a:	f7f8 fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800783e:	4602      	mov	r2, r0
 8007840:	460b      	mov	r3, r1
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <UART_SetConfig+0x2d4>)
 8007844:	fba3 1302 	umull	r1, r3, r3, r2
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	2164      	movs	r1, #100	@ 0x64
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	3332      	adds	r3, #50	@ 0x32
 8007856:	4a08      	ldr	r2, [pc, #32]	@ (8007878 <UART_SetConfig+0x2d4>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	f003 0207 	and.w	r2, r3, #7
 8007862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4422      	add	r2, r4
 800786a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800786c:	e106      	b.n	8007a7c <UART_SetConfig+0x4d8>
 800786e:	bf00      	nop
 8007870:	40011000 	.word	0x40011000
 8007874:	40011400 	.word	0x40011400
 8007878:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800787c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007880:	2200      	movs	r2, #0
 8007882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007886:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800788a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800788e:	4642      	mov	r2, r8
 8007890:	464b      	mov	r3, r9
 8007892:	1891      	adds	r1, r2, r2
 8007894:	6239      	str	r1, [r7, #32]
 8007896:	415b      	adcs	r3, r3
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
 800789a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800789e:	4641      	mov	r1, r8
 80078a0:	1854      	adds	r4, r2, r1
 80078a2:	4649      	mov	r1, r9
 80078a4:	eb43 0501 	adc.w	r5, r3, r1
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	00eb      	lsls	r3, r5, #3
 80078b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078b6:	00e2      	lsls	r2, r4, #3
 80078b8:	4614      	mov	r4, r2
 80078ba:	461d      	mov	r5, r3
 80078bc:	4643      	mov	r3, r8
 80078be:	18e3      	adds	r3, r4, r3
 80078c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078c4:	464b      	mov	r3, r9
 80078c6:	eb45 0303 	adc.w	r3, r5, r3
 80078ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078ea:	4629      	mov	r1, r5
 80078ec:	008b      	lsls	r3, r1, #2
 80078ee:	4621      	mov	r1, r4
 80078f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078f4:	4621      	mov	r1, r4
 80078f6:	008a      	lsls	r2, r1, #2
 80078f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80078fc:	f7f8 fc64 	bl	80001c8 <__aeabi_uldivmod>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4b60      	ldr	r3, [pc, #384]	@ (8007a88 <UART_SetConfig+0x4e4>)
 8007906:	fba3 2302 	umull	r2, r3, r3, r2
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	011c      	lsls	r4, r3, #4
 800790e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007912:	2200      	movs	r2, #0
 8007914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007918:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800791c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007920:	4642      	mov	r2, r8
 8007922:	464b      	mov	r3, r9
 8007924:	1891      	adds	r1, r2, r2
 8007926:	61b9      	str	r1, [r7, #24]
 8007928:	415b      	adcs	r3, r3
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007930:	4641      	mov	r1, r8
 8007932:	1851      	adds	r1, r2, r1
 8007934:	6139      	str	r1, [r7, #16]
 8007936:	4649      	mov	r1, r9
 8007938:	414b      	adcs	r3, r1
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	f04f 0200 	mov.w	r2, #0
 8007940:	f04f 0300 	mov.w	r3, #0
 8007944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007948:	4659      	mov	r1, fp
 800794a:	00cb      	lsls	r3, r1, #3
 800794c:	4651      	mov	r1, sl
 800794e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007952:	4651      	mov	r1, sl
 8007954:	00ca      	lsls	r2, r1, #3
 8007956:	4610      	mov	r0, r2
 8007958:	4619      	mov	r1, r3
 800795a:	4603      	mov	r3, r0
 800795c:	4642      	mov	r2, r8
 800795e:	189b      	adds	r3, r3, r2
 8007960:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007964:	464b      	mov	r3, r9
 8007966:	460a      	mov	r2, r1
 8007968:	eb42 0303 	adc.w	r3, r2, r3
 800796c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800797a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	f04f 0300 	mov.w	r3, #0
 8007984:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007988:	4649      	mov	r1, r9
 800798a:	008b      	lsls	r3, r1, #2
 800798c:	4641      	mov	r1, r8
 800798e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007992:	4641      	mov	r1, r8
 8007994:	008a      	lsls	r2, r1, #2
 8007996:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800799a:	f7f8 fc15 	bl	80001c8 <__aeabi_uldivmod>
 800799e:	4602      	mov	r2, r0
 80079a0:	460b      	mov	r3, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	4b38      	ldr	r3, [pc, #224]	@ (8007a88 <UART_SetConfig+0x4e4>)
 80079a6:	fba3 2301 	umull	r2, r3, r3, r1
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	2264      	movs	r2, #100	@ 0x64
 80079ae:	fb02 f303 	mul.w	r3, r2, r3
 80079b2:	1acb      	subs	r3, r1, r3
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	3332      	adds	r3, #50	@ 0x32
 80079b8:	4a33      	ldr	r2, [pc, #204]	@ (8007a88 <UART_SetConfig+0x4e4>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079c4:	441c      	add	r4, r3
 80079c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ca:	2200      	movs	r2, #0
 80079cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80079ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80079d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079d4:	4642      	mov	r2, r8
 80079d6:	464b      	mov	r3, r9
 80079d8:	1891      	adds	r1, r2, r2
 80079da:	60b9      	str	r1, [r7, #8]
 80079dc:	415b      	adcs	r3, r3
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079e4:	4641      	mov	r1, r8
 80079e6:	1851      	adds	r1, r2, r1
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	4649      	mov	r1, r9
 80079ec:	414b      	adcs	r3, r1
 80079ee:	607b      	str	r3, [r7, #4]
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80079fc:	4659      	mov	r1, fp
 80079fe:	00cb      	lsls	r3, r1, #3
 8007a00:	4651      	mov	r1, sl
 8007a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a06:	4651      	mov	r1, sl
 8007a08:	00ca      	lsls	r2, r1, #3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4603      	mov	r3, r0
 8007a10:	4642      	mov	r2, r8
 8007a12:	189b      	adds	r3, r3, r2
 8007a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a16:	464b      	mov	r3, r9
 8007a18:	460a      	mov	r2, r1
 8007a1a:	eb42 0303 	adc.w	r3, r2, r3
 8007a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	f04f 0300 	mov.w	r3, #0
 8007a34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a38:	4649      	mov	r1, r9
 8007a3a:	008b      	lsls	r3, r1, #2
 8007a3c:	4641      	mov	r1, r8
 8007a3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a42:	4641      	mov	r1, r8
 8007a44:	008a      	lsls	r2, r1, #2
 8007a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a4a:	f7f8 fbbd 	bl	80001c8 <__aeabi_uldivmod>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4b0d      	ldr	r3, [pc, #52]	@ (8007a88 <UART_SetConfig+0x4e4>)
 8007a54:	fba3 1302 	umull	r1, r3, r3, r2
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	2164      	movs	r1, #100	@ 0x64
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	3332      	adds	r3, #50	@ 0x32
 8007a66:	4a08      	ldr	r2, [pc, #32]	@ (8007a88 <UART_SetConfig+0x4e4>)
 8007a68:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	f003 020f 	and.w	r2, r3, #15
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4422      	add	r2, r4
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a82:	46bd      	mov	sp, r7
 8007a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a88:	51eb851f 	.word	0x51eb851f

08007a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	f107 001c 	add.w	r0, r7, #28
 8007a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d123      	bne.n	8007aee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d105      	bne.n	8007ae2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fdbc 	bl	8008660 <USB_CoreReset>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]
 8007aec:	e01b      	b.n	8007b26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fdb0 	bl	8008660 <USB_CoreReset>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b18:	e005      	b.n	8007b26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b26:	7fbb      	ldrb	r3, [r7, #30]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d10b      	bne.n	8007b44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f043 0206 	orr.w	r2, r3, #6
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f043 0220 	orr.w	r2, r3, #32
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b50:	b004      	add	sp, #16
 8007b52:	4770      	bx	lr

08007b54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d165      	bne.n	8007c34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4a41      	ldr	r2, [pc, #260]	@ (8007c70 <USB_SetTurnaroundTime+0x11c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d906      	bls.n	8007b7e <USB_SetTurnaroundTime+0x2a>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4a40      	ldr	r2, [pc, #256]	@ (8007c74 <USB_SetTurnaroundTime+0x120>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d202      	bcs.n	8007b7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b78:	230f      	movs	r3, #15
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e062      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	4a3c      	ldr	r2, [pc, #240]	@ (8007c74 <USB_SetTurnaroundTime+0x120>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d306      	bcc.n	8007b94 <USB_SetTurnaroundTime+0x40>
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	4a3b      	ldr	r2, [pc, #236]	@ (8007c78 <USB_SetTurnaroundTime+0x124>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d202      	bcs.n	8007b94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b8e:	230e      	movs	r3, #14
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e057      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	4a38      	ldr	r2, [pc, #224]	@ (8007c78 <USB_SetTurnaroundTime+0x124>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d306      	bcc.n	8007baa <USB_SetTurnaroundTime+0x56>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4a37      	ldr	r2, [pc, #220]	@ (8007c7c <USB_SetTurnaroundTime+0x128>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d202      	bcs.n	8007baa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007ba4:	230d      	movs	r3, #13
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e04c      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4a33      	ldr	r2, [pc, #204]	@ (8007c7c <USB_SetTurnaroundTime+0x128>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d306      	bcc.n	8007bc0 <USB_SetTurnaroundTime+0x6c>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	4a32      	ldr	r2, [pc, #200]	@ (8007c80 <USB_SetTurnaroundTime+0x12c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d802      	bhi.n	8007bc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007bba:	230c      	movs	r3, #12
 8007bbc:	617b      	str	r3, [r7, #20]
 8007bbe:	e041      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8007c80 <USB_SetTurnaroundTime+0x12c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d906      	bls.n	8007bd6 <USB_SetTurnaroundTime+0x82>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	4a2e      	ldr	r2, [pc, #184]	@ (8007c84 <USB_SetTurnaroundTime+0x130>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d802      	bhi.n	8007bd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007bd0:	230b      	movs	r3, #11
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e036      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8007c84 <USB_SetTurnaroundTime+0x130>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d906      	bls.n	8007bec <USB_SetTurnaroundTime+0x98>
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4a29      	ldr	r2, [pc, #164]	@ (8007c88 <USB_SetTurnaroundTime+0x134>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d802      	bhi.n	8007bec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007be6:	230a      	movs	r3, #10
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	e02b      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4a26      	ldr	r2, [pc, #152]	@ (8007c88 <USB_SetTurnaroundTime+0x134>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d906      	bls.n	8007c02 <USB_SetTurnaroundTime+0xae>
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	@ (8007c8c <USB_SetTurnaroundTime+0x138>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d202      	bcs.n	8007c02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007bfc:	2309      	movs	r3, #9
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	e020      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4a21      	ldr	r2, [pc, #132]	@ (8007c8c <USB_SetTurnaroundTime+0x138>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d306      	bcc.n	8007c18 <USB_SetTurnaroundTime+0xc4>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4a20      	ldr	r2, [pc, #128]	@ (8007c90 <USB_SetTurnaroundTime+0x13c>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d802      	bhi.n	8007c18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c12:	2308      	movs	r3, #8
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e015      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007c90 <USB_SetTurnaroundTime+0x13c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d906      	bls.n	8007c2e <USB_SetTurnaroundTime+0xda>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <USB_SetTurnaroundTime+0x140>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d202      	bcs.n	8007c2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c28:	2307      	movs	r3, #7
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	e00a      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c2e:	2306      	movs	r3, #6
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	e007      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c3a:	2309      	movs	r3, #9
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e001      	b.n	8007c44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c40:	2309      	movs	r3, #9
 8007c42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	029b      	lsls	r3, r3, #10
 8007c58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	00d8acbf 	.word	0x00d8acbf
 8007c74:	00e4e1c0 	.word	0x00e4e1c0
 8007c78:	00f42400 	.word	0x00f42400
 8007c7c:	01067380 	.word	0x01067380
 8007c80:	011a499f 	.word	0x011a499f
 8007c84:	01312cff 	.word	0x01312cff
 8007c88:	014ca43f 	.word	0x014ca43f
 8007c8c:	016e3600 	.word	0x016e3600
 8007c90:	01a6ab1f 	.word	0x01a6ab1f
 8007c94:	01e84800 	.word	0x01e84800

08007c98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f023 0201 	bic.w	r2, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d115      	bne.n	8007d08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ce8:	200a      	movs	r0, #10
 8007cea:	f7fa f87b 	bl	8001de4 <HAL_Delay>
      ms += 10U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	330a      	adds	r3, #10
 8007cf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fc23 	bl	8008540 <USB_GetMode>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d01e      	beq.n	8007d3e <USB_SetCurrentMode+0x84>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d04:	d9f0      	bls.n	8007ce8 <USB_SetCurrentMode+0x2e>
 8007d06:	e01a      	b.n	8007d3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d08:	78fb      	ldrb	r3, [r7, #3]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d115      	bne.n	8007d3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d1a:	200a      	movs	r0, #10
 8007d1c:	f7fa f862 	bl	8001de4 <HAL_Delay>
      ms += 10U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	330a      	adds	r3, #10
 8007d24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc0a 	bl	8008540 <USB_GetMode>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <USB_SetCurrentMode+0x84>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d36:	d9f0      	bls.n	8007d1a <USB_SetCurrentMode+0x60>
 8007d38:	e001      	b.n	8007d3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e005      	b.n	8007d4a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d42:	d101      	bne.n	8007d48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e000      	b.n	8007d4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d54:	b084      	sub	sp, #16
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	e009      	b.n	8007d88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3340      	adds	r3, #64	@ 0x40
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3301      	adds	r3, #1
 8007d86:	613b      	str	r3, [r7, #16]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b0e      	cmp	r3, #14
 8007d8c:	d9f2      	bls.n	8007d74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d8e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d11c      	bne.n	8007dd0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da4:	f043 0302 	orr.w	r3, r3, #2
 8007da8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dce:	e00b      	b.n	8007de8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dee:	461a      	mov	r2, r3
 8007df0:	2300      	movs	r3, #0
 8007df2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007df4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10d      	bne.n	8007e18 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d104      	bne.n	8007e0e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f968 	bl	80080dc <USB_SetDevSpeed>
 8007e0c:	e008      	b.n	8007e20 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e0e:	2101      	movs	r1, #1
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f963 	bl	80080dc <USB_SetDevSpeed>
 8007e16:	e003      	b.n	8007e20 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e18:	2103      	movs	r1, #3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f95e 	bl	80080dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e20:	2110      	movs	r1, #16
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8fa 	bl	800801c <USB_FlushTxFifo>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f924 	bl	8008080 <USB_FlushRxFifo>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e60:	461a      	mov	r2, r3
 8007e62:	2300      	movs	r3, #0
 8007e64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
 8007e6a:	e043      	b.n	8007ef4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	015a      	lsls	r2, r3, #5
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e82:	d118      	bne.n	8007eb6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10a      	bne.n	8007ea0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e96:	461a      	mov	r2, r3
 8007e98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	e013      	b.n	8007ec8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eac:	461a      	mov	r2, r3
 8007eae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	e008      	b.n	8007ec8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ef8:	461a      	mov	r2, r3
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d3b5      	bcc.n	8007e6c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	e043      	b.n	8007f8e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f1c:	d118      	bne.n	8007f50 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f30:	461a      	mov	r2, r3
 8007f32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	e013      	b.n	8007f62 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f46:	461a      	mov	r2, r3
 8007f48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	e008      	b.n	8007f62 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f80:	461a      	mov	r2, r3
 8007f82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f92:	461a      	mov	r2, r3
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d3b5      	bcc.n	8007f06 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007fba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	f043 0210 	orr.w	r2, r3, #16
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699a      	ldr	r2, [r3, #24]
 8007fd4:	4b10      	ldr	r3, [pc, #64]	@ (8008018 <USB_DevInit+0x2c4>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fdc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f043 0208 	orr.w	r2, r3, #8
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ff0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d107      	bne.n	8008008 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008000:	f043 0304 	orr.w	r3, r3, #4
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008014:	b004      	add	sp, #16
 8008016:	4770      	bx	lr
 8008018:	803c3800 	.word	0x803c3800

0800801c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	3301      	adds	r3, #1
 800802e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008036:	d901      	bls.n	800803c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e01b      	b.n	8008074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	daf2      	bge.n	800802a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008044:	2300      	movs	r3, #0
 8008046:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	019b      	lsls	r3, r3, #6
 800804c:	f043 0220 	orr.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008060:	d901      	bls.n	8008066 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e006      	b.n	8008074 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b20      	cmp	r3, #32
 8008070:	d0f0      	beq.n	8008054 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008098:	d901      	bls.n	800809e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e018      	b.n	80080d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	daf2      	bge.n	800808c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2210      	movs	r2, #16
 80080ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080bc:	d901      	bls.n	80080c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e006      	b.n	80080d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0310 	and.w	r3, r3, #16
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d0f0      	beq.n	80080b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	460b      	mov	r3, r1
 80080e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080fc:	4313      	orrs	r3, r2
 80080fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800810e:	b480      	push	{r7}
 8008110:	b087      	sub	sp, #28
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0306 	and.w	r3, r3, #6
 8008126:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]
 8008132:	e00a      	b.n	800814a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d002      	beq.n	8008140 <USB_GetDevSpeed+0x32>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d102      	bne.n	8008146 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008140:	2302      	movs	r3, #2
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	e001      	b.n	800814a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008146:	230f      	movs	r3, #15
 8008148:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d14a      	bne.n	800820c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800818a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800818e:	f040 8086 	bne.w	800829e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	7812      	ldrb	r2, [r2, #0]
 80081a6:	0151      	lsls	r1, r2, #5
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	440a      	add	r2, r1
 80081ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	7812      	ldrb	r2, [r2, #0]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3301      	adds	r3, #1
 80081de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d902      	bls.n	80081f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]
          break;
 80081ee:	e056      	b.n	800829e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008208:	d0e7      	beq.n	80081da <USB_EPStopXfer+0x82>
 800820a:	e048      	b.n	800829e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008224:	d13b      	bne.n	800829e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	015a      	lsls	r2, r3, #5
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	4413      	add	r3, r2
 8008230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	7812      	ldrb	r2, [r2, #0]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008244:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008248:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800826c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f242 7210 	movw	r2, #10000	@ 0x2710
 800827a:	4293      	cmp	r3, r2
 800827c:	d902      	bls.n	8008284 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
          break;
 8008282:	e00c      	b.n	800829e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800829c:	d0e7      	beq.n	800826e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b089      	sub	sp, #36	@ 0x24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	460b      	mov	r3, r1
 80082bc:	71fb      	strb	r3, [r7, #7]
 80082be:	4613      	mov	r3, r2
 80082c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d123      	bne.n	800831a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082d2:	88bb      	ldrh	r3, [r7, #4]
 80082d4:	3303      	adds	r3, #3
 80082d6:	089b      	lsrs	r3, r3, #2
 80082d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80082da:	2300      	movs	r3, #0
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	e018      	b.n	8008312 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	031a      	lsls	r2, r3, #12
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ec:	461a      	mov	r2, r3
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	3301      	adds	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	3301      	adds	r3, #1
 80082fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	3301      	adds	r3, #1
 8008304:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	3301      	adds	r3, #1
 800830a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	3301      	adds	r3, #1
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	429a      	cmp	r2, r3
 8008318:	d3e2      	bcc.n	80082e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3724      	adds	r7, #36	@ 0x24
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008328:	b480      	push	{r7}
 800832a:	b08b      	sub	sp, #44	@ 0x2c
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	089b      	lsrs	r3, r3, #2
 8008342:	b29b      	uxth	r3, r3
 8008344:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800834e:	2300      	movs	r3, #0
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	e014      	b.n	800837e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	3301      	adds	r3, #1
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	3301      	adds	r3, #1
 800836a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008374:	3301      	adds	r3, #1
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	3301      	adds	r3, #1
 800837c:	623b      	str	r3, [r7, #32]
 800837e:	6a3a      	ldr	r2, [r7, #32]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	429a      	cmp	r2, r3
 8008384:	d3e6      	bcc.n	8008354 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008386:	8bfb      	ldrh	r3, [r7, #30]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008396:	461a      	mov	r2, r3
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	701a      	strb	r2, [r3, #0]
      i++;
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	3301      	adds	r3, #1
 80083b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	3301      	adds	r3, #1
 80083bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80083be:	8bfb      	ldrh	r3, [r7, #30]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1ea      	bne.n	80083a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	372c      	adds	r7, #44	@ 0x2c
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008406:	f043 0302 	orr.w	r3, r3, #2
 800840a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3714      	adds	r7, #20
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	4013      	ands	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008432:	68fb      	ldr	r3, [r7, #12]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	4013      	ands	r3, r2
 8008462:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	0c1b      	lsrs	r3, r3, #16
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	4013      	ands	r3, r2
 8008496:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	b29b      	uxth	r3, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	4013      	ands	r3, r2
 80084d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084d6:	68bb      	ldr	r3, [r7, #8]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008506:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008508:	78fb      	ldrb	r3, [r7, #3]
 800850a:	f003 030f 	and.w	r3, r3, #15
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
 8008514:	01db      	lsls	r3, r3, #7
 8008516:	b2db      	uxtb	r3, r3
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	4313      	orrs	r3, r2
 800851c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	4413      	add	r3, r2
 8008526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	4013      	ands	r3, r2
 8008530:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008532:	68bb      	ldr	r3, [r7, #8]
}
 8008534:	4618      	mov	r0, r3
 8008536:	371c      	adds	r7, #28
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	f003 0301 	and.w	r3, r3, #1
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008576:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800858e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008592:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
	...

080085a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	460b      	mov	r3, r1
 80085ae:	607a      	str	r2, [r7, #4]
 80085b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	333c      	adds	r3, #60	@ 0x3c
 80085ba:	3304      	adds	r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4a26      	ldr	r2, [pc, #152]	@ (800865c <USB_EP0_OutStart+0xb8>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d90a      	bls.n	80085de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085d8:	d101      	bne.n	80085de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e037      	b.n	800864e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085e4:	461a      	mov	r2, r3
 80085e6:	2300      	movs	r3, #0
 80085e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800860c:	f043 0318 	orr.w	r3, r3, #24
 8008610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008620:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008624:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d10f      	bne.n	800864c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008646:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800864a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	4f54300a 	.word	0x4f54300a

08008660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3301      	adds	r3, #1
 8008670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008678:	d901      	bls.n	800867e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e01b      	b.n	80086b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	daf2      	bge.n	800866c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f043 0201 	orr.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086a2:	d901      	bls.n	80086a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e006      	b.n	80086b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d0f0      	beq.n	8008696 <USB_CoreReset+0x36>

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <memset>:
 80086c2:	4402      	add	r2, r0
 80086c4:	4603      	mov	r3, r0
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d100      	bne.n	80086cc <memset+0xa>
 80086ca:	4770      	bx	lr
 80086cc:	f803 1b01 	strb.w	r1, [r3], #1
 80086d0:	e7f9      	b.n	80086c6 <memset+0x4>
	...

080086d4 <__libc_init_array>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4d0d      	ldr	r5, [pc, #52]	@ (800870c <__libc_init_array+0x38>)
 80086d8:	4c0d      	ldr	r4, [pc, #52]	@ (8008710 <__libc_init_array+0x3c>)
 80086da:	1b64      	subs	r4, r4, r5
 80086dc:	10a4      	asrs	r4, r4, #2
 80086de:	2600      	movs	r6, #0
 80086e0:	42a6      	cmp	r6, r4
 80086e2:	d109      	bne.n	80086f8 <__libc_init_array+0x24>
 80086e4:	4d0b      	ldr	r5, [pc, #44]	@ (8008714 <__libc_init_array+0x40>)
 80086e6:	4c0c      	ldr	r4, [pc, #48]	@ (8008718 <__libc_init_array+0x44>)
 80086e8:	f000 f818 	bl	800871c <_init>
 80086ec:	1b64      	subs	r4, r4, r5
 80086ee:	10a4      	asrs	r4, r4, #2
 80086f0:	2600      	movs	r6, #0
 80086f2:	42a6      	cmp	r6, r4
 80086f4:	d105      	bne.n	8008702 <__libc_init_array+0x2e>
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fc:	4798      	blx	r3
 80086fe:	3601      	adds	r6, #1
 8008700:	e7ee      	b.n	80086e0 <__libc_init_array+0xc>
 8008702:	f855 3b04 	ldr.w	r3, [r5], #4
 8008706:	4798      	blx	r3
 8008708:	3601      	adds	r6, #1
 800870a:	e7f2      	b.n	80086f2 <__libc_init_array+0x1e>
 800870c:	0800875c 	.word	0x0800875c
 8008710:	0800875c 	.word	0x0800875c
 8008714:	0800875c 	.word	0x0800875c
 8008718:	08008760 	.word	0x08008760

0800871c <_init>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	bf00      	nop
 8008720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008722:	bc08      	pop	{r3}
 8008724:	469e      	mov	lr, r3
 8008726:	4770      	bx	lr

08008728 <_fini>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr
