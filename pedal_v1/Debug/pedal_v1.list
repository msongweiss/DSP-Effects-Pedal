
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b948  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800bad0  0800bad0  0000cad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf4  0800baf4  0000d07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800baf4  0800baf4  0000caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bafc  0800bafc  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bafc  0800bafc  0000cafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb00  0800bb00  0000cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800bb04  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00002b8c  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c08  20002c08  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbea  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dce  00000000  00000000  00029c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f8  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025de3  00000000  00000000  000311a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020997  00000000  00000000  00056f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1377  00000000  00000000  0007791a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148c91  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ee4  00000000  00000000  00148cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bab8 	.word	0x0800bab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800bab8 	.word	0x0800bab8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b988 	b.w	8000b5c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	468e      	mov	lr, r1
 800086c:	4604      	mov	r4, r0
 800086e:	4688      	mov	r8, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d962      	bls.n	8000940 <__udivmoddi4+0xdc>
 800087a:	fab2 f682 	clz	r6, r2
 800087e:	b14e      	cbz	r6, 8000894 <__udivmoddi4+0x30>
 8000880:	f1c6 0320 	rsb	r3, r6, #32
 8000884:	fa01 f806 	lsl.w	r8, r1, r6
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	40b7      	lsls	r7, r6
 800088e:	ea43 0808 	orr.w	r8, r3, r8
 8000892:	40b4      	lsls	r4, r6
 8000894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000898:	fa1f fc87 	uxth.w	ip, r7
 800089c:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a0:	0c23      	lsrs	r3, r4, #16
 80008a2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008aa:	fb01 f20c 	mul.w	r2, r1, ip
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008b8:	f080 80ea 	bcs.w	8000a90 <__udivmoddi4+0x22c>
 80008bc:	429a      	cmp	r2, r3
 80008be:	f240 80e7 	bls.w	8000a90 <__udivmoddi4+0x22c>
 80008c2:	3902      	subs	r1, #2
 80008c4:	443b      	add	r3, r7
 80008c6:	1a9a      	subs	r2, r3, r2
 80008c8:	b2a3      	uxth	r3, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008d6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008da:	459c      	cmp	ip, r3
 80008dc:	d909      	bls.n	80008f2 <__udivmoddi4+0x8e>
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e4:	f080 80d6 	bcs.w	8000a94 <__udivmoddi4+0x230>
 80008e8:	459c      	cmp	ip, r3
 80008ea:	f240 80d3 	bls.w	8000a94 <__udivmoddi4+0x230>
 80008ee:	443b      	add	r3, r7
 80008f0:	3802      	subs	r0, #2
 80008f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f6:	eba3 030c 	sub.w	r3, r3, ip
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11d      	cbz	r5, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40f3      	lsrs	r3, r6
 8000900:	2200      	movs	r2, #0
 8000902:	e9c5 3200 	strd	r3, r2, [r5]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d905      	bls.n	800091a <__udivmoddi4+0xb6>
 800090e:	b10d      	cbz	r5, 8000914 <__udivmoddi4+0xb0>
 8000910:	e9c5 0100 	strd	r0, r1, [r5]
 8000914:	2100      	movs	r1, #0
 8000916:	4608      	mov	r0, r1
 8000918:	e7f5      	b.n	8000906 <__udivmoddi4+0xa2>
 800091a:	fab3 f183 	clz	r1, r3
 800091e:	2900      	cmp	r1, #0
 8000920:	d146      	bne.n	80009b0 <__udivmoddi4+0x14c>
 8000922:	4573      	cmp	r3, lr
 8000924:	d302      	bcc.n	800092c <__udivmoddi4+0xc8>
 8000926:	4282      	cmp	r2, r0
 8000928:	f200 8105 	bhi.w	8000b36 <__udivmoddi4+0x2d2>
 800092c:	1a84      	subs	r4, r0, r2
 800092e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000932:	2001      	movs	r0, #1
 8000934:	4690      	mov	r8, r2
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0e5      	beq.n	8000906 <__udivmoddi4+0xa2>
 800093a:	e9c5 4800 	strd	r4, r8, [r5]
 800093e:	e7e2      	b.n	8000906 <__udivmoddi4+0xa2>
 8000940:	2a00      	cmp	r2, #0
 8000942:	f000 8090 	beq.w	8000a66 <__udivmoddi4+0x202>
 8000946:	fab2 f682 	clz	r6, r2
 800094a:	2e00      	cmp	r6, #0
 800094c:	f040 80a4 	bne.w	8000a98 <__udivmoddi4+0x234>
 8000950:	1a8a      	subs	r2, r1, r2
 8000952:	0c03      	lsrs	r3, r0, #16
 8000954:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000958:	b280      	uxth	r0, r0
 800095a:	b2bc      	uxth	r4, r7
 800095c:	2101      	movs	r1, #1
 800095e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000962:	fb0e 221c 	mls	r2, lr, ip, r2
 8000966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096a:	fb04 f20c 	mul.w	r2, r4, ip
 800096e:	429a      	cmp	r2, r3
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x11e>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x11c>
 800097a:	429a      	cmp	r2, r3
 800097c:	f200 80e0 	bhi.w	8000b40 <__udivmoddi4+0x2dc>
 8000980:	46c4      	mov	ip, r8
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	fbb3 f2fe 	udiv	r2, r3, lr
 8000988:	fb0e 3312 	mls	r3, lr, r2, r3
 800098c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000990:	fb02 f404 	mul.w	r4, r2, r4
 8000994:	429c      	cmp	r4, r3
 8000996:	d907      	bls.n	80009a8 <__udivmoddi4+0x144>
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	f102 30ff 	add.w	r0, r2, #4294967295
 800099e:	d202      	bcs.n	80009a6 <__udivmoddi4+0x142>
 80009a0:	429c      	cmp	r4, r3
 80009a2:	f200 80ca 	bhi.w	8000b3a <__udivmoddi4+0x2d6>
 80009a6:	4602      	mov	r2, r0
 80009a8:	1b1b      	subs	r3, r3, r4
 80009aa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009ae:	e7a5      	b.n	80008fc <__udivmoddi4+0x98>
 80009b0:	f1c1 0620 	rsb	r6, r1, #32
 80009b4:	408b      	lsls	r3, r1
 80009b6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ba:	431f      	orrs	r7, r3
 80009bc:	fa0e f401 	lsl.w	r4, lr, r1
 80009c0:	fa20 f306 	lsr.w	r3, r0, r6
 80009c4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009cc:	4323      	orrs	r3, r4
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	fa1f fc87 	uxth.w	ip, r7
 80009d6:	fbbe f0f9 	udiv	r0, lr, r9
 80009da:	0c1c      	lsrs	r4, r3, #16
 80009dc:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009e4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	fa02 f201 	lsl.w	r2, r2, r1
 80009ee:	d909      	bls.n	8000a04 <__udivmoddi4+0x1a0>
 80009f0:	193c      	adds	r4, r7, r4
 80009f2:	f100 3aff 	add.w	sl, r0, #4294967295
 80009f6:	f080 809c 	bcs.w	8000b32 <__udivmoddi4+0x2ce>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f240 8099 	bls.w	8000b32 <__udivmoddi4+0x2ce>
 8000a00:	3802      	subs	r0, #2
 8000a02:	443c      	add	r4, r7
 8000a04:	eba4 040e 	sub.w	r4, r4, lr
 8000a08:	fa1f fe83 	uxth.w	lr, r3
 8000a0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a10:	fb09 4413 	mls	r4, r9, r3, r4
 8000a14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a1c:	45a4      	cmp	ip, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x1ce>
 8000a20:	193c      	adds	r4, r7, r4
 8000a22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a26:	f080 8082 	bcs.w	8000b2e <__udivmoddi4+0x2ca>
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d97f      	bls.n	8000b2e <__udivmoddi4+0x2ca>
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	443c      	add	r4, r7
 8000a32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a36:	eba4 040c 	sub.w	r4, r4, ip
 8000a3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a3e:	4564      	cmp	r4, ip
 8000a40:	4673      	mov	r3, lr
 8000a42:	46e1      	mov	r9, ip
 8000a44:	d362      	bcc.n	8000b0c <__udivmoddi4+0x2a8>
 8000a46:	d05f      	beq.n	8000b08 <__udivmoddi4+0x2a4>
 8000a48:	b15d      	cbz	r5, 8000a62 <__udivmoddi4+0x1fe>
 8000a4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a52:	fa04 f606 	lsl.w	r6, r4, r6
 8000a56:	fa22 f301 	lsr.w	r3, r2, r1
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	40cc      	lsrs	r4, r1
 8000a5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a62:	2100      	movs	r1, #0
 8000a64:	e74f      	b.n	8000906 <__udivmoddi4+0xa2>
 8000a66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a6a:	0c01      	lsrs	r1, r0, #16
 8000a6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a70:	b280      	uxth	r0, r0
 8000a72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a76:	463b      	mov	r3, r7
 8000a78:	4638      	mov	r0, r7
 8000a7a:	463c      	mov	r4, r7
 8000a7c:	46b8      	mov	r8, r7
 8000a7e:	46be      	mov	lr, r7
 8000a80:	2620      	movs	r6, #32
 8000a82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a86:	eba2 0208 	sub.w	r2, r2, r8
 8000a8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a8e:	e766      	b.n	800095e <__udivmoddi4+0xfa>
 8000a90:	4601      	mov	r1, r0
 8000a92:	e718      	b.n	80008c6 <__udivmoddi4+0x62>
 8000a94:	4610      	mov	r0, r2
 8000a96:	e72c      	b.n	80008f2 <__udivmoddi4+0x8e>
 8000a98:	f1c6 0220 	rsb	r2, r6, #32
 8000a9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa0:	40b7      	lsls	r7, r6
 8000aa2:	40b1      	lsls	r1, r6
 8000aa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	430a      	orrs	r2, r1
 8000aae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ab2:	b2bc      	uxth	r4, r7
 8000ab4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ab8:	0c11      	lsrs	r1, r2, #16
 8000aba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000abe:	fb08 f904 	mul.w	r9, r8, r4
 8000ac2:	40b0      	lsls	r0, r6
 8000ac4:	4589      	cmp	r9, r1
 8000ac6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000aca:	b280      	uxth	r0, r0
 8000acc:	d93e      	bls.n	8000b4c <__udivmoddi4+0x2e8>
 8000ace:	1879      	adds	r1, r7, r1
 8000ad0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ad4:	d201      	bcs.n	8000ada <__udivmoddi4+0x276>
 8000ad6:	4589      	cmp	r9, r1
 8000ad8:	d81f      	bhi.n	8000b1a <__udivmoddi4+0x2b6>
 8000ada:	eba1 0109 	sub.w	r1, r1, r9
 8000ade:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae2:	fb09 f804 	mul.w	r8, r9, r4
 8000ae6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aea:	b292      	uxth	r2, r2
 8000aec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af0:	4542      	cmp	r2, r8
 8000af2:	d229      	bcs.n	8000b48 <__udivmoddi4+0x2e4>
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000afa:	d2c4      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000afc:	4542      	cmp	r2, r8
 8000afe:	d2c2      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000b00:	f1a9 0102 	sub.w	r1, r9, #2
 8000b04:	443a      	add	r2, r7
 8000b06:	e7be      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b08:	45f0      	cmp	r8, lr
 8000b0a:	d29d      	bcs.n	8000a48 <__udivmoddi4+0x1e4>
 8000b0c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b10:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b14:	3801      	subs	r0, #1
 8000b16:	46e1      	mov	r9, ip
 8000b18:	e796      	b.n	8000a48 <__udivmoddi4+0x1e4>
 8000b1a:	eba7 0909 	sub.w	r9, r7, r9
 8000b1e:	4449      	add	r1, r9
 8000b20:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b24:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b28:	fb09 f804 	mul.w	r8, r9, r4
 8000b2c:	e7db      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b2e:	4673      	mov	r3, lr
 8000b30:	e77f      	b.n	8000a32 <__udivmoddi4+0x1ce>
 8000b32:	4650      	mov	r0, sl
 8000b34:	e766      	b.n	8000a04 <__udivmoddi4+0x1a0>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e6fd      	b.n	8000936 <__udivmoddi4+0xd2>
 8000b3a:	443b      	add	r3, r7
 8000b3c:	3a02      	subs	r2, #2
 8000b3e:	e733      	b.n	80009a8 <__udivmoddi4+0x144>
 8000b40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b44:	443b      	add	r3, r7
 8000b46:	e71c      	b.n	8000982 <__udivmoddi4+0x11e>
 8000b48:	4649      	mov	r1, r9
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b4c:	eba1 0109 	sub.w	r1, r1, r9
 8000b50:	46c4      	mov	ip, r8
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fb09 f804 	mul.w	r8, r9, r4
 8000b5a:	e7c4      	b.n	8000ae6 <__udivmoddi4+0x282>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 fa99 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 fab2 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f001 fa91 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f001 faaa 	bl	80020f6 <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b78      	ldr	r3, [pc, #480]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a77      	ldr	r2, [pc, #476]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b75      	ldr	r3, [pc, #468]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b71      	ldr	r3, [pc, #452]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a70      	ldr	r2, [pc, #448]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b6a      	ldr	r3, [pc, #424]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a69      	ldr	r2, [pc, #420]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b63      	ldr	r3, [pc, #396]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a62      	ldr	r2, [pc, #392]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b60      	ldr	r3, [pc, #384]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b59      	ldr	r3, [pc, #356]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a54      	ldr	r2, [pc, #336]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b52      	ldr	r3, [pc, #328]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	484f      	ldr	r0, [pc, #316]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000c74:	f001 ff66 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000c7e:	f001 ff61 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c82:	2200      	movs	r2, #0
 8000c84:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c88:	484b      	ldr	r0, [pc, #300]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000c8a:	f001 ff5b 	bl	8002b44 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4842      	ldr	r0, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000ca6:	f001 fdb1 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	483c      	ldr	r0, [pc, #240]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000cc2:	f001 fda3 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4838      	ldr	r0, [pc, #224]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cdc:	f001 fd96 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cf4:	f001 fd8a 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d0c:	f001 fd7e 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d10:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d2a:	f001 fd6f 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d2e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d40:	2306      	movs	r3, #6
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481a      	ldr	r0, [pc, #104]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000d4c:	f001 fd5e 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d50:	2320      	movs	r3, #32
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d64:	f001 fd52 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d68:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480e      	ldr	r0, [pc, #56]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d86:	f001 fd41 	bl	800280c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000da0:	f001 fd34 	bl	800280c <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <MX_I2C3_Init+0x54>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd0:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_I2C3_Init+0x58>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000de2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000e02:	f004 f807 	bl	8004e14 <HAL_I2C_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e0c:	f000 fb92 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000098 	.word	0x20000098
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	000186a0 	.word	0x000186a0

08000e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ee4 <HAL_I2C_MspInit+0xc4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14b      	bne.n	8000eda <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a20      	ldr	r2, [pc, #128]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4815      	ldr	r0, [pc, #84]	@ (8000eec <HAL_I2C_MspInit+0xcc>)
 8000e98:	f001 fcb8 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <HAL_I2C_MspInit+0xd0>)
 8000eba:	f001 fca7 	bl	800280c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005c00 	.word	0x40005c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <MX_I2S2_Init+0x58>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f1c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000f20:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f36:	f004 ff91 	bl	8005e5c <HAL_I2S_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000f40:	f000 faf8 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000ec 	.word	0x200000ec
 8000f4c:	40003800 	.word	0x40003800

08000f50 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001138 <HAL_I2S_MspInit+0x1e8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f040 80d7 	bne.w	8001130 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000f86:	2360      	movs	r3, #96	@ 0x60
 8000f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fa9e 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f9e:	f000 fac9 	bl	8001534 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a64      	ldr	r2, [pc, #400]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a5d      	ldr	r2, [pc, #372]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b54      	ldr	r3, [pc, #336]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 8000ff6:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001008:	2305      	movs	r3, #5
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	484b      	ldr	r0, [pc, #300]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001014:	f001 fbfa 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001018:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800102a:	2306      	movs	r3, #6
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4842      	ldr	r0, [pc, #264]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001036:	f001 fbe9 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	483b      	ldr	r0, [pc, #236]	@ (8001144 <HAL_I2S_MspInit+0x1f4>)
 8001056:	f001 fbd9 	bl	800280c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800105c:	4a3b      	ldr	r2, [pc, #236]	@ (800114c <HAL_I2S_MspInit+0x1fc>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001062:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001066:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001068:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800107e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001082:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001094:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001096:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80010a2:	4829      	ldr	r0, [pc, #164]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010a4:	f001 f842 	bl	800212c <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 80010ae:	f000 fa41 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a24      	ldr	r2, [pc, #144]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_I2S_MspInit+0x204>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001106:	f001 f811 	bl	800212c <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001110:	f000 fa10 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2024      	movs	r0, #36	@ 0x24
 8001126:	f000 ffca 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800112a:	2024      	movs	r0, #36	@ 0x24
 800112c:	f000 ffe3 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40003800 	.word	0x40003800
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	20000134 	.word	0x20000134
 800114c:	40026058 	.word	0x40026058
 8001150:	20000194 	.word	0x20000194
 8001154:	40026070 	.word	0x40026070

08001158 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

// FOR DOUBLE BUFFERING
// Half complete buffer
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001f4 	.word	0x200001f4

08001178 <HAL_I2SEx_TxRxCpltCallback>:

// Fully complete buffer
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001182:	2202      	movs	r2, #2
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001f4 	.word	0x200001f4

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fe1d 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f95d 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f7ff fd03 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011aa:	f7ff fcd9 	bl	8000b60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fd1f 	bl	8001bf0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011b2:	f000 fbaf 	bl	8001914 <MX_SPI1_Init>
  MX_I2C3_Init();
 80011b6:	f7ff fe05 	bl	8000dc4 <MX_I2C3_Init>
  MX_USB_HOST_Init();
 80011ba:	f00a f807 	bl	800b1cc <MX_USB_HOST_Init>
  MX_I2S2_Init();
 80011be:	f7ff fe99 	bl	8000ef4 <MX_I2S2_Init>
  // Initialize overdrive
  // 41.6kHz Fs
  // 800Hz HPF input stage
  // 4000Hz LPF output stage
  // See OD_GAIN defined in user defines
  Overdrive_Init(&od, 41666.0f, 800.0f, 4000.0f, OD_GAIN);
 80011c2:	eddf 1a96 	vldr	s3, [pc, #600]	@ 800141c <main+0x284>
 80011c6:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8001420 <main+0x288>
 80011ca:	eddf 0a96 	vldr	s1, [pc, #600]	@ 8001424 <main+0x28c>
 80011ce:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8001428 <main+0x290>
 80011d2:	4896      	ldr	r0, [pc, #600]	@ (800142c <main+0x294>)
 80011d4:	f000 f9b4 	bl	8001540 <Overdrive_Init>

  Tremolo_Init(&tr, 41666.0f, TR_RATE, TR_DEPTH);
 80011d8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80011dc:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80011e0:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8001428 <main+0x290>
 80011e4:	4892      	ldr	r0, [pc, #584]	@ (8001430 <main+0x298>)
 80011e6:	f000 fcdb 	bl	8001ba0 <Tremolo_Init>

  // Initialize I2S DMA
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80011ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ee:	4a91      	ldr	r2, [pc, #580]	@ (8001434 <main+0x29c>)
 80011f0:	4991      	ldr	r1, [pc, #580]	@ (8001438 <main+0x2a0>)
 80011f2:	4892      	ldr	r0, [pc, #584]	@ (800143c <main+0x2a4>)
 80011f4:	f005 f870 	bl	80062d8 <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state != 0) {
 80011f8:	4b91      	ldr	r3, [pc, #580]	@ (8001440 <main+0x2a8>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8109 	beq.w	8001414 <main+0x27c>

		  // decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8001202:	4b8f      	ldr	r3, [pc, #572]	@ (8001440 <main+0x2a8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <main+0x80>
			  	  offset_r_ptr = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  	  offset_w_ptr = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	  w_ptr = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	e00a      	b.n	800122e <main+0x96>
			  	  // Set pointer to first half of DMA
			  }

		  else if (callback_state == 2) {
 8001218:	4b89      	ldr	r3, [pc, #548]	@ (8001440 <main+0x2a8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d106      	bne.n	800122e <main+0x96>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
			  w_ptr = BLOCK_SIZE_FLOAT;
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
			  // Set pointer to second half of DMA
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	e061      	b.n	80012f8 <main+0x160>

			  // Rebuild signed 24-bit sample from 16-bit rxBuf
			  int32_t sample_l = ((int32_t)(rxBuf[i] << 16) | (rxBuf[i + 1]));
 8001234:	4a7f      	ldr	r2, [pc, #508]	@ (8001434 <main+0x29c>)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	3201      	adds	r2, #1
 8001242:	497c      	ldr	r1, [pc, #496]	@ (8001434 <main+0x29c>)
 8001244:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

			  // Convert to float in range [-1.0f, 1.0f] for easier DSP
			  float sample_f_l = sample_l / 2147483648.0f;  // 2^31
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001444 <main+0x2ac>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]

			  // Light up debug LED if this is somehow outside of range
			  if (sample_f_l > 1.0f | sample_f_l < -1.0f) {
 8001262:	edd7 7a02 	vldr	s15, [r7, #8]
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	bfcc      	ite	gt
 8001274:	2301      	movgt	r3, #1
 8001276:	2300      	movle	r3, #0
 8001278:	b2da      	uxtb	r2, r3
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	bf4c      	ite	mi
 800128c:	2301      	movmi	r3, #1
 800128e:	2300      	movpl	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <main+0x10c>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	486a      	ldr	r0, [pc, #424]	@ (8001448 <main+0x2b0>)
 80012a0:	f001 fc69 	bl	8002b76 <HAL_GPIO_TogglePin>
			  }
			  l_buf_in[w_ptr] = sample_f_l;
 80012a4:	4a69      	ldr	r2, [pc, #420]	@ (800144c <main+0x2b4>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	601a      	str	r2, [r3, #0]

			  // Repeat for right channel
			  int32_t sample_r = ((int32_t)(rxBuf[i + 2] << 16) | (rxBuf[i + 3]));
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	3302      	adds	r3, #2
 80012b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001434 <main+0x29c>)
 80012b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	3203      	adds	r2, #3
 80012c0:	495c      	ldr	r1, [pc, #368]	@ (8001434 <main+0x29c>)
 80012c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	607b      	str	r3, [r7, #4]
			  float sample_f_r = sample_r / 2147483648.0f;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001444 <main+0x2ac>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	edc7 7a00 	vstr	s15, [r7]
			  r_buf_in[w_ptr] = sample_f_r;
 80012e0:	4a5b      	ldr	r2, [pc, #364]	@ (8001450 <main+0x2b8>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]


			  w_ptr++;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	3301      	adds	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3304      	adds	r3, #4
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	dd97      	ble.n	8001234 <main+0x9c>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e030      	b.n	800136c <main+0x1d4>
			  // CODE FOR PASSTHROUGH, DON'T DELETE
//			  l_buf_out[i] = l_buf_in[i];
//			  r_buf_out[i] = r_buf_in[i];

//			  // Populate output buffer with overdrive-processed input buffer data
			  l_buf_out[i] = Overdrive_Update(&od, l_buf_in[i])/32.0f; // 1/16 for appropriate amp-level volume
 800130a:	4a50      	ldr	r2, [pc, #320]	@ (800144c <main+0x2b4>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	4844      	ldr	r0, [pc, #272]	@ (800142c <main+0x294>)
 800131c:	f000 f992 	bl	8001644 <Overdrive_Update>
 8001320:	eeb0 7a40 	vmov.f32	s14, s0
 8001324:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001454 <main+0x2bc>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <main+0x2c0>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_out[i] = Overdrive_Update(&od, r_buf_in[i])/32.0f;
 8001338:	4a45      	ldr	r2, [pc, #276]	@ (8001450 <main+0x2b8>)
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	4838      	ldr	r0, [pc, #224]	@ (800142c <main+0x294>)
 800134a:	f000 f97b 	bl	8001644 <Overdrive_Update>
 800134e:	eeb0 7a40 	vmov.f32	s14, s0
 8001352:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8001454 <main+0x2bc>
 8001356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135a:	4a40      	ldr	r2, [pc, #256]	@ (800145c <main+0x2c4>)
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136e:	337f      	adds	r3, #127	@ 0x7f
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	429a      	cmp	r2, r3
 8001374:	ddc9      	ble.n	800130a <main+0x172>
//			  l_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]); // 1/16 for appropriate amp-level volume
//			  r_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]);
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800137a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	e040      	b.n	8001402 <main+0x26a>
			  int sample_out_l = (int)(l_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 8001380:	4a35      	ldr	r2, [pc, #212]	@ (8001458 <main+0x2c0>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001444 <main+0x2ac>
 8001390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001398:	ee17 3a90 	vmov	r3, s15
 800139c:	617b      	str	r3, [r7, #20]
			  txBuf[i]   = (sample_out_l >> 16) & 0xFFFF;  // upper 16 bits
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	b299      	uxth	r1, r3
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <main+0x2a0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = sample_out_l & 0xFFFF;          // lower 16 bits
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	3301      	adds	r3, #1
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	b291      	uxth	r1, r2
 80013b4:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <main+0x2a0>)
 80013b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  int sample_out_r = (int)(r_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 80013ba:	4a28      	ldr	r2, [pc, #160]	@ (800145c <main+0x2c4>)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001444 <main+0x2ac>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d2:	ee17 3a90 	vmov	r3, s15
 80013d6:	613b      	str	r3, [r7, #16]
			  txBuf[i+2]   = (sample_out_r >> 16) & 0xFFFF;  // upper 16 bits
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0c1a      	lsrs	r2, r3, #16
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	3302      	adds	r3, #2
 80013e0:	b291      	uxth	r1, r2
 80013e2:	4a15      	ldr	r2, [pc, #84]	@ (8001438 <main+0x2a0>)
 80013e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = sample_out_r & 0xFFFF;          // lower 16 bits
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3303      	adds	r3, #3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	b291      	uxth	r1, r2
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <main+0x2a0>)
 80013f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	3301      	adds	r3, #1
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3304      	adds	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001404:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	429a      	cmp	r2, r3
 800140c:	ddb8      	ble.n	8001380 <main+0x1e8>
		  }

		  callback_state = 0;
 800140e:	4b0c      	ldr	r3, [pc, #48]	@ (8001440 <main+0x2a8>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001414:	f009 ff00 	bl	800b218 <MX_USB_HOST_Process>
	  if (callback_state != 0) {
 8001418:	e6ee      	b.n	80011f8 <main+0x60>
 800141a:	bf00      	nop
 800141c:	42c80000 	.word	0x42c80000
 8001420:	457a0000 	.word	0x457a0000
 8001424:	44480000 	.word	0x44480000
 8001428:	4722c200 	.word	0x4722c200
 800142c:	200021f8 	.word	0x200021f8
 8001430:	20002248 	.word	0x20002248
 8001434:	200001f8 	.word	0x200001f8
 8001438:	200009f8 	.word	0x200009f8
 800143c:	200000ec 	.word	0x200000ec
 8001440:	200001f4 	.word	0x200001f4
 8001444:	4f000000 	.word	0x4f000000
 8001448:	40020c00 	.word	0x40020c00
 800144c:	200011f8 	.word	0x200011f8
 8001450:	200015f8 	.word	0x200015f8
 8001454:	42000000 	.word	0x42000000
 8001458:	200019f8 	.word	0x200019f8
 800145c:	20001df8 	.word	0x20001df8

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	@ 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	@ 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f00a fa94 	bl	800b99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <SystemClock_Config+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a27      	ldr	r2, [pc, #156]	@ (800152c <SystemClock_Config+0xcc>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <SystemClock_Config+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	@ (8001530 <SystemClock_Config+0xd0>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <SystemClock_Config+0xd0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014d0:	2308      	movs	r3, #8
 80014d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014d4:	2348      	movs	r3, #72	@ 0x48
 80014d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014dc:	2303      	movs	r3, #3
 80014de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 fb5f 	bl	8006ba8 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f0:	f000 f820 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001500:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fdc0 	bl	8007098 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800151e:	f000 f809 	bl	8001534 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	@ 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <Error_Handler+0x8>

08001540 <Overdrive_Init>:
#include "overdrive.h"
#include <stdint.h>

void Overdrive_Init(Overdrive *od, float samplingFreqHz, float hpfCutoffFreqHz, float lpfCutoffFreqHz, float odPreGain) {
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6178      	str	r0, [r7, #20]
 8001548:	ed87 0a04 	vstr	s0, [r7, #16]
 800154c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001550:	ed87 1a02 	vstr	s2, [r7, #8]
 8001554:	edc7 1a01 	vstr	s3, [r7, #4]
    od->T = 1.0f / samplingFreqHz;
 8001558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800155c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	edc3 7a00 	vstr	s15, [r3]
    od->preGain = odPreGain;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	61da      	str	r2, [r3, #28]
    od->threshold = 1.0f/3.0f;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4a33      	ldr	r2, [pc, #204]	@ (8001640 <Overdrive_Init+0x100>)
 8001574:	621a      	str	r2, [r3, #32]
    // Input lpf
    od->hpfInpBufIn[0] = 0.0f; od->hpfInpBufIn[1] = 0.0f;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
    od->hpfInpBufOut[0] = 0.0f; od->hpfInpBufOut[1] = 0.0f;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
    od->hpfInpWcT = 2.0f * M_PI * hpfCutoffFreqHz * od->T;
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff f8a4 	bl	80006e4 <__aeabi_f2d>
 800159c:	a326      	add	r3, pc, #152	@ (adr r3, 8001638 <Overdrive_Init+0xf8>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7fe fe11 	bl	80001c8 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4614      	mov	r4, r2
 80015ac:	461d      	mov	r5, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f896 	bl	80006e4 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4620      	mov	r0, r4
 80015be:	4629      	mov	r1, r5
 80015c0:	f7fe fe02 	bl	80001c8 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff f8e2 	bl	8000794 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	615a      	str	r2, [r3, #20]
    od->hpfInpOut = 0.0f;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]

    // Output lpf
    od->lpfOutWcT = 2.0f * M_PI * lpfCutoffFreqHz * od->T;
 80015de:	68b8      	ldr	r0, [r7, #8]
 80015e0:	f7ff f880 	bl	80006e4 <__aeabi_f2d>
 80015e4:	a314      	add	r3, pc, #80	@ (adr r3, 8001638 <Overdrive_Init+0xf8>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7fe fded 	bl	80001c8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4614      	mov	r4, r2
 80015f4:	461d      	mov	r5, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff f872 	bl	80006e4 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fdde 	bl	80001c8 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff f8be 	bl	8000794 <__aeabi_d2f>
 8001618:	4602      	mov	r2, r0
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	641a      	str	r2, [r3, #64]	@ 0x40
    od->lpfOutDamp = 1.0f;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44

    od->Q = -0.5;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	bf00      	nop
 8001638:	54442d18 	.word	0x54442d18
 800163c:	401921fb 	.word	0x401921fb
 8001640:	3eaaaaab 	.word	0x3eaaaaab

08001644 <Overdrive_Update>:


float Overdrive_Update(Overdrive *od, float inp) {
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	ed87 0a00 	vstr	s0, [r7]
	// Get new sample and push everything down by one spot
	// First order input buffer
	od->hpfInpBufIn[1] = od->hpfInpBufIn[0];
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
	od->hpfInpBufIn[0] = inp;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	605a      	str	r2, [r3, #4]

	// Second order output buffer
	od->hpfInpBufOut[1] = od->hpfInpBufOut[0]; // Shift down by one
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	611a      	str	r2, [r3, #16]
	// Do the IIR filter math
	od->hpfInpBufOut[0] = (2.0f * (od->hpfInpBufIn[0] - od->hpfInpBufIn[1]) + (2.0f - od->hpfInpWcT) * od->hpfInpBufOut[1])/(2.0f + od->hpfInpWcT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	ed93 7a01 	vldr	s14, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001680:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001684:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edd3 7a04 	vldr	s15, [r3, #16]
 800168e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001692:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edd3 7a05 	vldr	s15, [r3, #20]
 800169c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80016a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edc3 7a03 	vstr	s15, [r3, #12]
	od->hpfInpOut = od->hpfInpBufOut[0];
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	619a      	str	r2, [r3, #24]
    
    // Overdrive
    float clipIn = od->preGain * od->hpfInpOut;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a06 	vldr	s15, [r3, #24]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	edc7 7a04 	vstr	s15, [r7, #16]

//     Symmetrical clipping

    float absClipIn = fabs(clipIn);
 80016ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ce:	eef0 7ae7 	vabs.f32	s15, s15
 80016d2:	edc7 7a03 	vstr	s15, [r7, #12]
    float signClipIn = (clipIn >= 0.0f) ? 1.0f : -1.0f;
 80016d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e2:	db02      	blt.n	80016ea <Overdrive_Update+0xa6>
 80016e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80016e8:	e000      	b.n	80016ec <Overdrive_Update+0xa8>
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <Overdrive_Update+0x2cc>)
 80016ec:	60bb      	str	r3, [r7, #8]
    float clipOut = 0.0f;
 80016ee:	f04f 0300 	mov.w	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

    // If within threshold, amplify by 2
    if (absClipIn < od->threshold) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80016fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80016fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	d506      	bpl.n	8001716 <Overdrive_Update+0xd2>
        clipOut = 2.0f * clipIn;
 8001708:	edd7 7a04 	vldr	s15, [r7, #16]
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	edc7 7a05 	vstr	s15, [r7, #20]
 8001714:	e045      	b.n	80017a2 <Overdrive_Update+0x15e>
    // If over threshold, but below twice threshold, soft clip
    } else if (absClipIn >= od->threshold && absClipIn < (2.0f * od->threshold)) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edd3 7a08 	vldr	s15, [r3, #32]
 800171c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	db30      	blt.n	800178c <Overdrive_Update+0x148>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	ed97 7a03 	vldr	s14, [r7, #12]
 8001738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d524      	bpl.n	800178c <Overdrive_Update+0x148>
        clipOut = signClipIn * (3.0f - (2.0f - 3.0f*absClipIn)*(2.0f - 3.0f*absClipIn)) / 3.0f;
 8001742:	edd7 7a03 	vldr	s15, [r7, #12]
 8001746:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800174a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	edd7 7a03 	vldr	s15, [r7, #12]
 800175a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 800175e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001762:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800176a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001776:	edd7 7a02 	vldr	s15, [r7, #8]
 800177a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	edc7 7a05 	vstr	s15, [r7, #20]
 800178a:	e00a      	b.n	80017a2 <Overdrive_Update+0x15e>
    // If entirely out of threshold, clip the signal to 2/3
    } else {
        clipOut = signClipIn * 2.0f * od->threshold;
 800178c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001790:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edd3 7a08 	vldr	s15, [r3, #32]
 800179a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179e:	edc7 7a05 	vstr	s15, [r7, #20]
//    if (fabs(clipIn - od->Q) >= 0.00001f) {
//    	clipOut += (clipIn - od->Q)/(1.0f - expf(-d*(clipIn - od->Q)));
//    }
    
    // Lowpass filter the output 3rd degree
    od->lpfOutBufIn[2] = od->lpfOutBufIn[1];
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	631a      	str	r2, [r3, #48]	@ 0x30
    od->lpfOutBufIn[1] = od->lpfOutBufIn[0];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    od->lpfOutBufIn[0] = clipOut;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28

    od->lpfOutBufOut[2] = od->lpfOutBufOut[1];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	63da      	str	r2, [r3, #60]	@ 0x3c
    od->lpfOutBufOut[1] = od->lpfOutBufOut[0];
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	639a      	str	r2, [r3, #56]	@ 0x38
    od->lpfOutBufOut[0] = od->lpfOutWcT * od->lpfOutWcT * (od->lpfOutBufIn[0] + 2.0f * od->lpfOutBufIn[1] + od->lpfOutBufIn[2])
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80017e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80017f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017f6:	ee27 7a27 	vmul.f32	s14, s14, s15
                        - 2.0f * (od->lpfOutWcT * od->lpfOutWcT - 4.0f) * od->lpfOutBufOut[1]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800180e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001812:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee37 7a67 	vsub.f32	s14, s14, s15
                        - (4.0f - 4.0f * od->lpfOutDamp * od->lpfOutWcT + od->lpfOutWcT * od->lpfOutWcT) * od->lpfOutBufOut[2];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800182a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800182e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001840:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001850:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001854:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
    od->lpfOutBufOut[0] = od->lpfOutWcT * od->lpfOutWcT * (od->lpfOutBufIn[0] + 2.0f * od->lpfOutBufIn[1] + od->lpfOutBufIn[2])
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    od->lpfOutBufOut[0] /= (4.0f + 4.0f * od->lpfOutDamp * od->lpfOutWcT + od->lpfOutWcT * od->lpfOutWcT);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001878:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800187c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800188e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	ed93 6a10 	vldr	s12, [r3, #64]	@ 0x40
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800189e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    od->lpfOutOut = od->lpfOutBufOut[0];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	649a      	str	r2, [r3, #72]	@ 0x48

    od->out = od->lpfOutOut;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Ensure the signal is within -1f to 1f range
    if (od->out > 1.0f) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80018c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd04      	ble.n	80018de <Overdrive_Update+0x29a>
    	od->out = 1.0f;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018dc:	e00c      	b.n	80018f8 <Overdrive_Update+0x2b4>
    } else if (od->out < -1.0f) {
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80018e4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d502      	bpl.n	80018f8 <Overdrive_Update+0x2b4>
    	od->out = -1.0f;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a06      	ldr	r2, [pc, #24]	@ (8001910 <Overdrive_Update+0x2cc>)
 80018f6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    return od->out;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fc:	ee07 3a90 	vmov	s15, r3
}
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	bf800000 	.word	0xbf800000

08001914 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <MX_SPI1_Init+0x64>)
 800191a:	4a18      	ldr	r2, [pc, #96]	@ (800197c <MX_SPI1_Init+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b16      	ldr	r3, [pc, #88]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_SPI1_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_SPI1_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001944:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001946:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <MX_SPI1_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <MX_SPI1_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001960:	220a      	movs	r2, #10
 8001962:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_SPI1_Init+0x64>)
 8001966:	f005 fef5 	bl	8007754 <HAL_SPI_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001970:	f7ff fde0 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000225c 	.word	0x2000225c
 800197c:	40013000 	.word	0x40013000

08001980 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a19      	ldr	r2, [pc, #100]	@ (8001a04 <HAL_SPI_MspInit+0x84>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_SPI_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019da:	23e0      	movs	r3, #224	@ 0xe0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ea:	2305      	movs	r3, #5
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_SPI_MspInit+0x8c>)
 80019f6:	f000 ff09 	bl	800280c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b0d      	ldr	r3, [pc, #52]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f000 fb2a 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab6:	f000 f9e3 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	@ (8001ad0 <DMA1_Stream3_IRQHandler+0x10>)
 8001ac6:	f000 fc37 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000134 	.word	0x20000134

08001ad4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <DMA1_Stream4_IRQHandler+0x10>)
 8001ada:	f000 fc2d 	bl	8002338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000194 	.word	0x20000194

08001ae8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <SPI2_IRQHandler+0x10>)
 8001aee:	f004 faf5 	bl	80060dc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200000ec 	.word	0x200000ec

08001afc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b00:	4802      	ldr	r0, [pc, #8]	@ (8001b0c <OTG_FS_IRQHandler+0x10>)
 8001b02:	f001 fb33 	bl	800316c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200026e0 	.word	0x200026e0

08001b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <_sbrk+0x5c>)
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <_sbrk+0x60>)
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4b13      	ldr	r3, [pc, #76]	@ (8001b74 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	@ (8001b74 <_sbrk+0x64>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	@ (8001b78 <_sbrk+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d207      	bcs.n	8001b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b40:	f009 ff44 	bl	800b9cc <__errno>
 8001b44:	4603      	mov	r3, r0
 8001b46:	220c      	movs	r2, #12
 8001b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4e:	e009      	b.n	8001b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b56:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	4a05      	ldr	r2, [pc, #20]	@ (8001b74 <_sbrk+0x64>)
 8001b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20020000 	.word	0x20020000
 8001b70:	00000400 	.word	0x00000400
 8001b74:	200022b4 	.word	0x200022b4
 8001b78:	20002c08 	.word	0x20002c08

08001b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <SystemInit+0x20>)
 8001b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b86:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <SystemInit+0x20>)
 8001b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <Tremolo_Init>:
#include "tremolo.h"
#include <stdint.h>

void Tremolo_Init(Tremolo *tr, float samplingFreqHz, float rate, float depth) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bac:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bb0:	ed87 1a00 	vstr	s2, [r7]
	tr->T = 1.0f / samplingFreqHz;
 8001bb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	edc3 7a00 	vstr	s15, [r3]
	tr->rate = rate;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	605a      	str	r2, [r3, #4]
	tr->depth = depth;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	609a      	str	r2, [r3, #8]
	tr->phase = 0.0f;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
	tr->out = 0.0f;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]

//	for (int i = 0; i < LFO_TABLE_SIZE; i++) {
//		tr->lfo_table[i] = 0.5f * tr->depth * sinf(2.0f * M_PI * (float)i / LFO_TABLE_SIZE) + 0.5f;
//	}
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <MX_USART3_UART_Init+0x50>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_USART3_UART_Init+0x4c>)
 8001c28:	f005 fe1d 	bl	8007866 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c32:	f7ff fc7f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200022b8 	.word	0x200022b8
 8001c40:	40004800 	.word	0x40004800

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a29      	ldr	r2, [pc, #164]	@ (8001d08 <HAL_UART_MspInit+0xc4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d14b      	bne.n	8001cfe <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b25      	ldr	r3, [pc, #148]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_UART_MspInit+0xc8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ccc:	2307      	movs	r3, #7
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480e      	ldr	r0, [pc, #56]	@ (8001d10 <HAL_UART_MspInit+0xcc>)
 8001cd8:	f000 fd98 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <HAL_UART_MspInit+0xd0>)
 8001cfa:	f000 fd87 	bl	800280c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004800 	.word	0x40004800
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020c00 	.word	0x40020c00

08001d18 <Reset_Handler>:
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d50 <LoopFillZerobss+0xe>
 8001d1c:	f7ff ff2e 	bl	8001b7c <SystemInit>
 8001d20:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x12>)
 8001d22:	490d      	ldr	r1, [pc, #52]	@ (8001d58 <LoopFillZerobss+0x16>)
 8001d24:	4a0d      	ldr	r2, [pc, #52]	@ (8001d5c <LoopFillZerobss+0x1a>)
 8001d26:	2300      	movs	r3, #0
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:
 8001d2a:	58d4      	ldr	r4, [r2, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:
 8001d30:	18c4      	adds	r4, r0, r3
 8001d32:	428c      	cmp	r4, r1
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <LoopFillZerobss+0x1e>)
 8001d38:	4c0a      	ldr	r4, [pc, #40]	@ (8001d64 <LoopFillZerobss+0x22>)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:
 8001d42:	42a2      	cmp	r2, r4
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>
 8001d46:	f009 fe47 	bl	800b9d8 <__libc_init_array>
 8001d4a:	f7ff fa25 	bl	8001198 <main>
 8001d4e:	4770      	bx	lr
 8001d50:	20020000 	.word	0x20020000
 8001d54:	20000000 	.word	0x20000000
 8001d58:	2000007c 	.word	0x2000007c
 8001d5c:	0800bb04 	.word	0x0800bb04
 8001d60:	2000007c 	.word	0x2000007c
 8001d64:	20002c08 	.word	0x20002c08

08001d68 <ADC_IRQHandler>:
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>

08001d6a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001d80:	f000 f804 	bl	8001d8c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a07      	ldr	r2, [pc, #28]	@ (8001dd4 <HAL_I2S_ErrorCallback+0x2c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001dba:	f7ff ffd6 	bl	8001d6a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <HAL_I2S_ErrorCallback+0x30>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001dc8:	f7ff ffe7 	bl	8001d9a <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40003c00 	.word	0x40003c00
 8001dd8:	40003800 	.word	0x40003800

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	@ (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	@ (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f94f 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fdfe 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f967 	bl	8002112 <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f000 f92f 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	@ (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20002300 	.word	0x20002300

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20002300 	.word	0x20002300

08001ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff ffee 	bl	8001ea8 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed8:	d005      	beq.n	8001ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_Delay+0x44>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ee6:	bf00      	nop
 8001ee8:	f7ff ffde 	bl	8001ea8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d8f7      	bhi.n	8001ee8 <HAL_Delay+0x28>
  {
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008

08001f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f24:	4013      	ands	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f3a:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	60d3      	str	r3, [r2, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <__NVIC_GetPriorityGrouping+0x18>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0307 	and.w	r3, r3, #7
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db0b      	blt.n	8001f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	f003 021f 	and.w	r2, r3, #31
 8001f84:	4907      	ldr	r1, [pc, #28]	@ (8001fa4 <__NVIC_EnableIRQ+0x38>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff29 	bl	8001f08 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff3e 	bl	8001f50 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff31 	bl	8001f6c <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff feb6 	bl	8001ea8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e099      	b.n	800227c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002168:	e00f      	b.n	800218a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800216a:	f7ff fe9d 	bl	8001ea8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b05      	cmp	r3, #5
 8002176:	d908      	bls.n	800218a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e078      	b.n	800227c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e8      	bne.n	800216a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <HAL_DMA_Init+0x158>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d107      	bne.n	80021f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ec:	4313      	orrs	r3, r2
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b04      	cmp	r3, #4
 800221c:	d117      	bne.n	800224e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fa6f 	bl	8002714 <DMA_CheckFifoParam>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	@ 0x40
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800224a:	2301      	movs	r3, #1
 800224c:	e016      	b.n	800227c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa26 	bl	80026a8 <DMA_CalcBaseAndBitshift>
 800225c:	4603      	mov	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	223f      	movs	r2, #63	@ 0x3f
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f010803f 	.word	0xf010803f

08002288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_DMA_Start_IT+0x26>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e040      	b.n	8002330 <HAL_DMA_Start_IT+0xa8>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12f      	bne.n	8002322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2202      	movs	r2, #2
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9b8 	bl	800264c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e0:	223f      	movs	r2, #63	@ 0x3f
 80022e2:	409a      	lsls	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0216 	orr.w	r2, r2, #22
 80022f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0208 	orr.w	r2, r2, #8
 800230e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e005      	b.n	800232e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800232e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002344:	4b8e      	ldr	r3, [pc, #568]	@ (8002580 <HAL_DMA_IRQHandler+0x248>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a8e      	ldr	r2, [pc, #568]	@ (8002584 <HAL_DMA_IRQHandler+0x24c>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a9b      	lsrs	r3, r3, #10
 8002350:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002362:	2208      	movs	r2, #8
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d01a      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0204 	bic.w	r2, r2, #4
 800238a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	2208      	movs	r2, #8
 8002392:	409a      	lsls	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	2201      	movs	r2, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	2204      	movs	r2, #4
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d012      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fc:	2204      	movs	r2, #4
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002408:	f043 0204 	orr.w	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002414:	2210      	movs	r2, #16
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d043      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d03c      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	2210      	movs	r2, #16
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d018      	beq.n	800247a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d024      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
 8002466:	e01f      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
 8002478:	e016      	b.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0208 	bic.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	2220      	movs	r2, #32
 80024ae:	409a      	lsls	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 808f 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8087 	beq.w	80025d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ce:	2220      	movs	r2, #32
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d136      	bne.n	8002550 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0216 	bic.w	r2, r2, #22
 80024f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002500:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <HAL_DMA_IRQHandler+0x1da>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0208 	bic.w	r2, r2, #8
 8002520:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	223f      	movs	r2, #63	@ 0x3f
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002542:	2b00      	cmp	r3, #0
 8002544:	d07e      	beq.n	8002644 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
        }
        return;
 800254e:	e079      	b.n	8002644 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01d      	beq.n	800259a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002570:	2b00      	cmp	r3, #0
 8002572:	d031      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	4798      	blx	r3
 800257c:	e02c      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000
 8002584:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d023      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e01e      	b.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10f      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d032      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d022      	beq.n	8002632 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2205      	movs	r2, #5
 80025f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	d307      	bcc.n	8002620 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f2      	bne.n	8002604 <HAL_DMA_IRQHandler+0x2cc>
 800261e:	e000      	b.n	8002622 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002620:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
 8002642:	e000      	b.n	8002646 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002644:	bf00      	nop
    }
  }
}
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002668:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b40      	cmp	r3, #64	@ 0x40
 8002678:	d108      	bne.n	800268c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800268a:	e007      	b.n	800269c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3b10      	subs	r3, #16
 80026b8:	4a14      	ldr	r2, [pc, #80]	@ (800270c <DMA_CalcBaseAndBitshift+0x64>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026c2:	4a13      	ldr	r2, [pc, #76]	@ (8002710 <DMA_CalcBaseAndBitshift+0x68>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d909      	bls.n	80026ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	1d1a      	adds	r2, r3, #4
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	659a      	str	r2, [r3, #88]	@ 0x58
 80026e8:	e007      	b.n	80026fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	aaaaaaab 	.word	0xaaaaaaab
 8002710:	0800baec 	.word	0x0800baec

08002714 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11f      	bne.n	800276e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d856      	bhi.n	80027e2 <DMA_CheckFifoParam+0xce>
 8002734:	a201      	add	r2, pc, #4	@ (adr r2, 800273c <DMA_CheckFifoParam+0x28>)
 8002736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273a:	bf00      	nop
 800273c:	0800274d 	.word	0x0800274d
 8002740:	0800275f 	.word	0x0800275f
 8002744:	0800274d 	.word	0x0800274d
 8002748:	080027e3 	.word	0x080027e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d046      	beq.n	80027e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800275c:	e043      	b.n	80027e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002766:	d140      	bne.n	80027ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e03d      	b.n	80027ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002776:	d121      	bne.n	80027bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b03      	cmp	r3, #3
 800277c:	d837      	bhi.n	80027ee <DMA_CheckFifoParam+0xda>
 800277e:	a201      	add	r2, pc, #4	@ (adr r2, 8002784 <DMA_CheckFifoParam+0x70>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	08002795 	.word	0x08002795
 8002788:	0800279b 	.word	0x0800279b
 800278c:	08002795 	.word	0x08002795
 8002790:	080027ad 	.word	0x080027ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
      break;
 8002798:	e030      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d025      	beq.n	80027f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027aa:	e022      	b.n	80027f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80027b4:	d11f      	bne.n	80027f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ba:	e01c      	b.n	80027f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d903      	bls.n	80027ca <DMA_CheckFifoParam+0xb6>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d003      	beq.n	80027d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027c8:	e018      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      break;
 80027ce:	e015      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e00b      	b.n	80027fa <DMA_CheckFifoParam+0xe6>
      break;
 80027e2:	bf00      	nop
 80027e4:	e00a      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;
 80027e6:	bf00      	nop
 80027e8:	e008      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;
 80027ea:	bf00      	nop
 80027ec:	e006      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;
 80027ee:	bf00      	nop
 80027f0:	e004      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;
 80027f2:	bf00      	nop
 80027f4:	e002      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;   
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
    }
  } 
  
  return status; 
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e16b      	b.n	8002b00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	429a      	cmp	r2, r3
 8002842:	f040 815a 	bne.w	8002afa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d005      	beq.n	800285e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800285a:	2b02      	cmp	r3, #2
 800285c:	d130      	bne.n	80028c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	f003 0201 	and.w	r2, r3, #1
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d017      	beq.n	80028fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d123      	bne.n	8002950 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	08da      	lsrs	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3208      	adds	r2, #8
 800294a:	69b9      	ldr	r1, [r7, #24]
 800294c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80b4 	beq.w	8002afa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	4b60      	ldr	r3, [pc, #384]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 800299c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002b18 <HAL_GPIO_Init+0x30c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_GPIO_Init+0x310>)
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	220f      	movs	r2, #15
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a52      	ldr	r2, [pc, #328]	@ (8002b20 <HAL_GPIO_Init+0x314>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02b      	beq.n	8002a32 <HAL_GPIO_Init+0x226>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a51      	ldr	r2, [pc, #324]	@ (8002b24 <HAL_GPIO_Init+0x318>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x222>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a50      	ldr	r2, [pc, #320]	@ (8002b28 <HAL_GPIO_Init+0x31c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x21e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4f      	ldr	r2, [pc, #316]	@ (8002b2c <HAL_GPIO_Init+0x320>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x21a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b30 <HAL_GPIO_Init+0x324>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x216>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b34 <HAL_GPIO_Init+0x328>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x212>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	@ (8002b38 <HAL_GPIO_Init+0x32c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b3c <HAL_GPIO_Init+0x330>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x20a>
 8002a12:	2307      	movs	r3, #7
 8002a14:	e00e      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a16:	2308      	movs	r3, #8
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x228>
 8002a32:	2300      	movs	r3, #0
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a44:	4935      	ldr	r1, [pc, #212]	@ (8002b1c <HAL_GPIO_Init+0x310>)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a52:	4b3b      	ldr	r3, [pc, #236]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a76:	4a32      	ldr	r2, [pc, #200]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a7c:	4b30      	ldr	r3, [pc, #192]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa0:	4a27      	ldr	r2, [pc, #156]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aca:	4a1d      	ldr	r2, [pc, #116]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af4:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <HAL_GPIO_Init+0x334>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	2b0f      	cmp	r3, #15
 8002b04:	f67f ae90 	bls.w	8002828 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3724      	adds	r7, #36	@ 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40013800 	.word	0x40013800
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020c00 	.word	0x40020c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40021400 	.word	0x40021400
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	40021c00 	.word	0x40021c00
 8002b40:	40013c00 	.word	0x40013c00

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b60:	e003      	b.n	8002b6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	041a      	lsls	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b88:	887a      	ldrh	r2, [r7, #2]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	041a      	lsls	r2, r3, #16
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	43d9      	mvns	r1, r3
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	400b      	ands	r3, r1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af02      	add	r7, sp, #8
 8002bb0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e059      	b.n	8002c70 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f008 fb56 	bl	800b288 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2203      	movs	r2, #3
 8002be0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bea:	d102      	bne.n	8002bf2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f005 f96f 	bl	8007eda <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7c1a      	ldrb	r2, [r3, #16]
 8002c04:	f88d 2000 	strb.w	r2, [sp]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	f005 f8f0 	bl	8007df0 <USB_CoreInit>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e026      	b.n	8002c70 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f005 f967 	bl	8007efc <USB_SetCurrentMode>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e017      	b.n	8002c70 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	7c1a      	ldrb	r2, [r3, #16]
 8002c48:	f88d 2000 	strb.w	r2, [sp]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c50:	f005 fb0a 	bl	8008268 <USB_HostInit>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d005      	beq.n	8002c66 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e004      	b.n	8002c70 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b08b      	sub	sp, #44	@ 0x2c
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	70fb      	strb	r3, [r7, #3]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70bb      	strb	r3, [r7, #2]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002c92:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002c94:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_HCD_HC_Init+0x2c>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e09d      	b.n	8002de0 <HAL_HCD_HC_Init+0x168>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3319      	adds	r3, #25
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3314      	adds	r3, #20
 8002cd0:	787a      	ldrb	r2, [r7, #1]
 8002cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3315      	adds	r3, #21
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3326      	adds	r3, #38	@ 0x26
 8002cf8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002cfc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	78bb      	ldrb	r3, [r7, #2]
 8002d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d06:	b2d8      	uxtb	r0, r3
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3316      	adds	r3, #22
 8002d16:	4602      	mov	r2, r0
 8002d18:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fbc8 	bl	80034b4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	da0a      	bge.n	8002d42 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3317      	adds	r3, #23
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e009      	b.n	8002d56 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3317      	adds	r3, #23
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f005 fbe8 	bl	8008530 <USB_GetHostSpeed>
 8002d60:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002d62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d10b      	bne.n	8002d82 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002d6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_HCD_HC_Init+0x10a>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2bbc      	cmp	r3, #188	@ 0xbc
 8002d7c:	d901      	bls.n	8002d82 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002d7e:	23bc      	movs	r3, #188	@ 0xbc
 8002d80:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3318      	adds	r3, #24
 8002d92:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3328      	adds	r3, #40	@ 0x28
 8002dac:	4602      	mov	r2, r0
 8002dae:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	787c      	ldrb	r4, [r7, #1]
 8002dba:	78ba      	ldrb	r2, [r7, #2]
 8002dbc:	78f9      	ldrb	r1, [r7, #3]
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	4623      	mov	r3, r4
 8002dce:	f005 fbd7 	bl	8008580 <USB_HC_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_HCD_HC_Halt+0x1e>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e00f      	b.n	8002e26 <HAL_HCD_HC_Halt+0x3e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f005 ff69 	bl	8008cee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4603      	mov	r3, r0
 8002e40:	70fb      	strb	r3, [r7, #3]
 8002e42:	460b      	mov	r3, r1
 8002e44:	70bb      	strb	r3, [r7, #2]
 8002e46:	4613      	mov	r3, r2
 8002e48:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3317      	adds	r3, #23
 8002e5a:	78ba      	ldrb	r2, [r7, #2]
 8002e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3326      	adds	r3, #38	@ 0x26
 8002e6e:	787a      	ldrb	r2, [r7, #1]
 8002e70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e72:	7c3b      	ldrb	r3, [r7, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d114      	bne.n	8002ea2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	332a      	adds	r3, #42	@ 0x2a
 8002e88:	2203      	movs	r2, #3
 8002e8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3319      	adds	r3, #25
 8002e9c:	7f3a      	ldrb	r2, [r7, #28]
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e009      	b.n	8002eb6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	332a      	adds	r3, #42	@ 0x2a
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002eb6:	787b      	ldrb	r3, [r7, #1]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	f200 8102 	bhi.w	80030c2 <HAL_HCD_HC_SubmitRequest+0x292>
 8002ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002ed5 	.word	0x08002ed5
 8002ec8:	080030ad 	.word	0x080030ad
 8002ecc:	08002f99 	.word	0x08002f99
 8002ed0:	08003023 	.word	0x08003023
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ed4:	7c3b      	ldrb	r3, [r7, #16]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	f040 80f5 	bne.w	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002edc:	78bb      	ldrb	r3, [r7, #2]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12d      	bne.n	8002f3e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002ee2:	8b3b      	ldrh	r3, [r7, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333d      	adds	r3, #61	@ 0x3d
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	333d      	adds	r3, #61	@ 0x3d
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	332a      	adds	r3, #42	@ 0x2a
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f26:	e0ce      	b.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	332a      	adds	r3, #42	@ 0x2a
 8002f38:	2202      	movs	r2, #2
 8002f3a:	701a      	strb	r2, [r3, #0]
      break;
 8002f3c:	e0c3      	b.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	331a      	adds	r3, #26
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 80b8 	bne.w	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	333c      	adds	r3, #60	@ 0x3c
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	332a      	adds	r3, #42	@ 0x2a
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
      break;
 8002f80:	e0a1      	b.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	332a      	adds	r3, #42	@ 0x2a
 8002f92:	2202      	movs	r2, #2
 8002f94:	701a      	strb	r2, [r3, #0]
      break;
 8002f96:	e096      	b.n	80030c6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f98:	78bb      	ldrb	r3, [r7, #2]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d120      	bne.n	8002fe0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	333d      	adds	r3, #61	@ 0x3d
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	332a      	adds	r3, #42	@ 0x2a
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002fc8:	e07e      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	332a      	adds	r3, #42	@ 0x2a
 8002fda:	2202      	movs	r2, #2
 8002fdc:	701a      	strb	r2, [r3, #0]
      break;
 8002fde:	e073      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	333c      	adds	r3, #60	@ 0x3c
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10a      	bne.n	800300c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	332a      	adds	r3, #42	@ 0x2a
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e05d      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	332a      	adds	r3, #42	@ 0x2a
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
      break;
 8003020:	e052      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003022:	78bb      	ldrb	r3, [r7, #2]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d120      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	333d      	adds	r3, #61	@ 0x3d
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	332a      	adds	r3, #42	@ 0x2a
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003052:	e039      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	332a      	adds	r3, #42	@ 0x2a
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
      break;
 8003068:	e02e      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	333c      	adds	r3, #60	@ 0x3c
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	332a      	adds	r3, #42	@ 0x2a
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
      break;
 8003094:	e018      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	332a      	adds	r3, #42	@ 0x2a
 80030a6:	2202      	movs	r2, #2
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e00d      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	332a      	adds	r3, #42	@ 0x2a
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e002      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80030c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	332c      	adds	r3, #44	@ 0x2c
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	8b39      	ldrh	r1, [r7, #24]
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4403      	add	r3, r0
 80030ec:	3334      	adds	r3, #52	@ 0x34
 80030ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334c      	adds	r3, #76	@ 0x4c
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3338      	adds	r3, #56	@ 0x38
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3315      	adds	r3, #21
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	334d      	adds	r3, #77	@ 0x4d
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	3310      	adds	r3, #16
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	1d19      	adds	r1, r3, #4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	799b      	ldrb	r3, [r3, #6]
 800315a:	461a      	mov	r2, r3
 800315c:	f005 fb3c 	bl	80087d8 <USB_HC_StartXfer>
 8003160:	4603      	mov	r3, r0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop

0800316c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f005 f830 	bl	80081e8 <USB_GetMode>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 80fb 	bne.w	8003386 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f004 fff3 	bl	8008180 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80f1 	beq.w	8003384 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 ffea 	bl	8008180 <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031b6:	d104      	bne.n	80031c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80031c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 ffda 	bl	8008180 <USB_ReadInterrupts>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031d6:	d104      	bne.n	80031e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80031e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 ffca 	bl	8008180 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031f6:	d104      	bne.n	8003202 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003200:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f004 ffba 	bl	8008180 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b02      	cmp	r3, #2
 8003214:	d103      	bne.n	800321e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2202      	movs	r2, #2
 800321c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 ffac 	bl	8008180 <USB_ReadInterrupts>
 8003228:	4603      	mov	r3, r0
 800322a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800322e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003232:	d120      	bne.n	8003276 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800323c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d113      	bne.n	8003276 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800324e:	2110      	movs	r1, #16
 8003250:	6938      	ldr	r0, [r7, #16]
 8003252:	f004 fe9f 	bl	8007f94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003256:	6938      	ldr	r0, [r7, #16]
 8003258:	f004 fece 	bl	8007ff8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7a5b      	ldrb	r3, [r3, #9]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d105      	bne.n	8003270 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	4618      	mov	r0, r3
 800326c:	f005 f8c0 	bl	80083f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f008 f887 	bl	800b384 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 ff80 	bl	8008180 <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800328a:	d102      	bne.n	8003292 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f001 fd4d 	bl	8004d2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f004 ff72 	bl	8008180 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d106      	bne.n	80032b4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f008 f850 	bl	800b34c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2208      	movs	r2, #8
 80032b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f004 ff61 	bl	8008180 <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032c8:	d139      	bne.n	800333e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f005 fcfc 	bl	8008ccc <USB_HC_ReadInterrupt>
 80032d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	e025      	b.n	8003328 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d018      	beq.n	8003322 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003306:	d106      	bne.n	8003316 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f905 	bl	800351e <HCD_HC_IN_IRQHandler>
 8003314:	e005      	b.n	8003322 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 ff67 	bl	80041f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	3301      	adds	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	461a      	mov	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	4293      	cmp	r3, r2
 8003332:	d3d3      	bcc.n	80032dc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800333c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f004 ff1c 	bl	8008180 <USB_ReadInterrupts>
 8003348:	4603      	mov	r3, r0
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b10      	cmp	r3, #16
 8003350:	d101      	bne.n	8003356 <HAL_HCD_IRQHandler+0x1ea>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_HCD_IRQHandler+0x1ec>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d014      	beq.n	8003386 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0210 	bic.w	r2, r2, #16
 800336a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 fbfe 	bl	8004b6e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0210 	orr.w	r2, r2, #16
 8003380:	619a      	str	r2, [r3, #24]
 8003382:	e000      	b.n	8003386 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003384:	bf00      	nop
    }
  }
}
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_HCD_Start+0x16>
 800339e:	2302      	movs	r3, #2
 80033a0:	e013      	b.n	80033ca <HAL_HCD_Start+0x3e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f005 f884 	bl	80084be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fd7c 	bl	8007eb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_HCD_Stop+0x16>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e00d      	b.n	8003404 <HAL_HCD_Stop+0x32>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f005 fdd7 	bl	8008fa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f005 f826 	bl	800846a <USB_ResetPort>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334c      	adds	r3, #76	@ 0x4c
 8003444:	781b      	ldrb	r3, [r3, #0]
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3338      	adds	r3, #56	@ 0x38
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f005 f868 	bl	800855e <USB_GetCurrentFrame>
 800348e:	4603      	mov	r3, r0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 f843 	bl	8008530 <USB_GetHostSpeed>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	331a      	adds	r3, #26
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	331b      	adds	r3, #27
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3325      	adds	r3, #37	@ 0x25
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3324      	adds	r3, #36	@ 0x24
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	4611      	mov	r1, r2
 800353c:	4618      	mov	r0, r3
 800353e:	f004 fe32 	bl	80081a6 <USB_ReadChInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b04      	cmp	r3, #4
 800354a:	d11a      	bne.n	8003582 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2304      	movs	r3, #4
 800355c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334d      	adds	r3, #77	@ 0x4d
 800356e:	2207      	movs	r2, #7
 8003570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f005 fbb7 	bl	8008cee <USB_HC_Halt>
 8003580:	e09e      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fe0b 	bl	80081a6 <USB_ReadChInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800359a:	d11b      	bne.n	80035d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	334d      	adds	r3, #77	@ 0x4d
 80035c0:	2208      	movs	r2, #8
 80035c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f005 fb8e 	bl	8008cee <USB_HC_Halt>
 80035d2:	e075      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 fde2 	bl	80081a6 <USB_ReadChInterrupts>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d11a      	bne.n	8003622 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	2206      	movs	r2, #6
 8003610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f005 fb67 	bl	8008cee <USB_HC_Halt>
 8003620:	e04e      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f004 fdbb 	bl	80081a6 <USB_ReadChInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363a:	d11b      	bne.n	8003674 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800364e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	334d      	adds	r3, #77	@ 0x4d
 8003660:	2209      	movs	r2, #9
 8003662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f005 fb3e 	bl	8008cee <USB_HC_Halt>
 8003672:	e025      	b.n	80036c0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f004 fd92 	bl	80081a6 <USB_ReadChInterrupts>
 8003682:	4603      	mov	r3, r0
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b80      	cmp	r3, #128	@ 0x80
 800368a:	d119      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003698:	461a      	mov	r2, r3
 800369a:	2380      	movs	r3, #128	@ 0x80
 800369c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334d      	adds	r3, #77	@ 0x4d
 80036ae:	2207      	movs	r2, #7
 80036b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 fb17 	bl	8008cee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f004 fd6c 	bl	80081a6 <USB_ReadChInterrupts>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036d8:	d112      	bne.n	8003700 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f005 fb03 	bl	8008cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f4:	461a      	mov	r2, r3
 80036f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	f000 bd75 	b.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f004 fd4c 	bl	80081a6 <USB_ReadChInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 8128 	bne.w	800396a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4413      	add	r3, r2
 8003722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003726:	461a      	mov	r2, r3
 8003728:	2320      	movs	r3, #32
 800372a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	331b      	adds	r3, #27
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d119      	bne.n	8003776 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	331b      	adds	r3, #27
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	0151      	lsls	r1, r2, #5
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	440a      	add	r2, r1
 800376c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003774:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	799b      	ldrb	r3, [r3, #6]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01b      	beq.n	80037b6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3330      	adds	r3, #48	@ 0x30
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	1ac9      	subs	r1, r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4403      	add	r3, r0
 80037b2:	3338      	adds	r3, #56	@ 0x38
 80037b4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	@ 0x4d
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3344      	adds	r3, #68	@ 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	2301      	movs	r3, #1
 80037ee:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3326      	adds	r3, #38	@ 0x26
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3326      	adds	r3, #38	@ 0x26
 8003816:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003818:	2b02      	cmp	r3, #2
 800381a:	d110      	bne.n	800383e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f005 fa62 	bl	8008cee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003836:	461a      	mov	r2, r3
 8003838:	2310      	movs	r3, #16
 800383a:	6093      	str	r3, [r2, #8]
 800383c:	e03d      	b.n	80038ba <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	440b      	add	r3, r1
 800384c:	3326      	adds	r3, #38	@ 0x26
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d00a      	beq.n	800386a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3326      	adds	r3, #38	@ 0x26
 8003864:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003866:	2b01      	cmp	r3, #1
 8003868:	d127      	bne.n	80038ba <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	78fa      	ldrb	r2, [r7, #3]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	440a      	add	r2, r1
 8003880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003884:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003888:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	334c      	adds	r3, #76	@ 0x4c
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	334c      	adds	r3, #76	@ 0x4c
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f007 fd73 	bl	800b3a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	799b      	ldrb	r3, [r3, #6]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d13b      	bne.n	800393a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3338      	adds	r3, #56	@ 0x38
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4403      	add	r3, r0
 80038e2:	3328      	adds	r3, #40	@ 0x28
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	440b      	add	r3, r1
 80038e8:	1e59      	subs	r1, r3, #1
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4403      	add	r3, r0
 80038f8:	3328      	adds	r3, #40	@ 0x28
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8470 	beq.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	333c      	adds	r3, #60	@ 0x3c
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2d8      	uxtb	r0, r3
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	333c      	adds	r3, #60	@ 0x3c
 8003932:	4602      	mov	r2, r0
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	f000 bc58 	b.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	333c      	adds	r3, #60	@ 0x3c
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	f083 0301 	eor.w	r3, r3, #1
 8003952:	b2d8      	uxtb	r0, r3
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	333c      	adds	r3, #60	@ 0x3c
 8003962:	4602      	mov	r2, r0
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	f000 bc40 	b.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f004 fc17 	bl	80081a6 <USB_ReadChInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b20      	cmp	r3, #32
 8003980:	d131      	bne.n	80039e6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398e:	461a      	mov	r2, r3
 8003990:	2320      	movs	r3, #32
 8003992:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	331a      	adds	r3, #26
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	f040 841f 	bne.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	331b      	adds	r3, #27
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	334d      	adds	r3, #77	@ 0x4d
 80039d0:	2203      	movs	r2, #3
 80039d2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 f986 	bl	8008cee <USB_HC_Halt>
 80039e2:	f000 bc02 	b.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	4611      	mov	r1, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fbd9 	bl	80081a6 <USB_ReadChInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	f040 8305 	bne.w	800400a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	2302      	movs	r3, #2
 8003a10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	334d      	adds	r3, #77	@ 0x4d
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d114      	bne.n	8003a52 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	334d      	adds	r3, #77	@ 0x4d
 8003a38:	2202      	movs	r2, #2
 8003a3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	334c      	adds	r3, #76	@ 0x4c
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	e2cc      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	334d      	adds	r3, #77	@ 0x4d
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d114      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334d      	adds	r3, #77	@ 0x4d
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	334c      	adds	r3, #76	@ 0x4c
 8003a8c:	2205      	movs	r2, #5
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e2ac      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334d      	adds	r3, #77	@ 0x4d
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b07      	cmp	r3, #7
 8003aa6:	d00b      	beq.n	8003ac0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334d      	adds	r3, #77	@ 0x4d
 8003ab8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	f040 80a6 	bne.w	8003c0c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	334d      	adds	r3, #77	@ 0x4d
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3344      	adds	r3, #68	@ 0x44
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	1c59      	adds	r1, r3, #1
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4403      	add	r3, r0
 8003af4:	3344      	adds	r3, #68	@ 0x44
 8003af6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3344      	adds	r3, #68	@ 0x44
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d943      	bls.n	8003b96 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3344      	adds	r3, #68	@ 0x44
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	331a      	adds	r3, #26
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d123      	bne.n	8003b80 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	331b      	adds	r3, #27
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	331c      	adds	r3, #28
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334c      	adds	r3, #76	@ 0x4c
 8003b90:	2204      	movs	r2, #4
 8003b92:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b94:	e229      	b.n	8003fea <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	334c      	adds	r3, #76	@ 0x4c
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3326      	adds	r3, #38	@ 0x26
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00b      	beq.n	8003bd8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3326      	adds	r3, #38	@ 0x26
 8003bd0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	f040 8209 	bne.w	8003fea <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bf6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c0a:	e1ee      	b.n	8003fea <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	334d      	adds	r3, #77	@ 0x4d
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	f040 80c8 	bne.w	8003db4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	334d      	adds	r3, #77	@ 0x4d
 8003c34:	2202      	movs	r2, #2
 8003c36:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	331b      	adds	r3, #27
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	f040 81ce 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3326      	adds	r3, #38	@ 0x26
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d16b      	bne.n	8003d3e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	3348      	adds	r3, #72	@ 0x48
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1c59      	adds	r1, r3, #1
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	3348      	adds	r3, #72	@ 0x48
 8003c88:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3348      	adds	r3, #72	@ 0x48
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d943      	bls.n	8003d28 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	3348      	adds	r3, #72	@ 0x48
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	331b      	adds	r3, #27
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3344      	adds	r3, #68	@ 0x44
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d809      	bhi.n	8003cf2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	331c      	adds	r3, #28
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	0151      	lsls	r1, r2, #5
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	440a      	add	r2, r1
 8003d08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d10:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	334c      	adds	r3, #76	@ 0x4c
 8003d22:	2204      	movs	r2, #4
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e014      	b.n	8003d52 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	334c      	adds	r3, #76	@ 0x4c
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
 8003d3c:	e009      	b.n	8003d52 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334c      	adds	r3, #76	@ 0x4c
 8003d4e:	2202      	movs	r2, #2
 8003d50:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3326      	adds	r3, #38	@ 0x26
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	3326      	adds	r3, #38	@ 0x26
 8003d78:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	f040 8136 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d96:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d9e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dac:	461a      	mov	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e11b      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003db4:	78fa      	ldrb	r2, [r7, #3]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	334d      	adds	r3, #77	@ 0x4d
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	f040 8081 	bne.w	8003ece <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dcc:	78fa      	ldrb	r2, [r7, #3]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	334d      	adds	r3, #77	@ 0x4d
 8003ddc:	2202      	movs	r2, #2
 8003dde:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	331b      	adds	r3, #27
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 80fa 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334c      	adds	r3, #76	@ 0x4c
 8003e08:	2202      	movs	r2, #2
 8003e0a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	015a      	lsls	r2, r3, #5
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4413      	add	r3, r2
 8003e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	0151      	lsls	r1, r2, #5
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	440a      	add	r2, r1
 8003e22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	0151      	lsls	r1, r2, #5
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	440a      	add	r2, r1
 8003e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e4a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e66:	f023 0320 	bic.w	r3, r3, #32
 8003e6a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3326      	adds	r3, #38	@ 0x26
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3326      	adds	r3, #38	@ 0x26
 8003e92:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	f040 80a9 	bne.w	8003fec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	015a      	lsls	r2, r3, #5
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eb0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eb8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	e08e      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	@ 0x4d
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d143      	bne.n	8003f6c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334d      	adds	r3, #77	@ 0x4d
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334c      	adds	r3, #76	@ 0x4c
 8003f08:	2202      	movs	r2, #2
 8003f0a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	3326      	adds	r3, #38	@ 0x26
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3326      	adds	r3, #38	@ 0x26
 8003f32:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d159      	bne.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f4e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f56:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e03f      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334d      	adds	r3, #77	@ 0x4d
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d126      	bne.n	8003fd0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334d      	adds	r3, #77	@ 0x4d
 8003f92:	2202      	movs	r2, #2
 8003f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3344      	adds	r3, #68	@ 0x44
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4403      	add	r3, r0
 8003fb6:	3344      	adds	r3, #68	@ 0x44
 8003fb8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fba:	78fa      	ldrb	r2, [r7, #3]
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	1a9b      	subs	r3, r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	334c      	adds	r3, #76	@ 0x4c
 8003fca:	2204      	movs	r2, #4
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e00d      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	334d      	adds	r3, #77	@ 0x4d
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	f000 8100 	beq.w	80041e8 <HCD_HC_IN_IRQHandler+0xcca>
 8003fe8:	e000      	b.n	8003fec <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334c      	adds	r3, #76	@ 0x4c
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f007 f9cc 	bl	800b3a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004008:	e0ef      	b.n	80041ea <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f004 f8c7 	bl	80081a6 <USB_ReadChInterrupts>
 8004018:	4603      	mov	r3, r0
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d12f      	bne.n	8004082 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800402e:	461a      	mov	r2, r3
 8004030:	2340      	movs	r3, #64	@ 0x40
 8004032:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	334d      	adds	r3, #77	@ 0x4d
 8004044:	2205      	movs	r2, #5
 8004046:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	331a      	adds	r3, #26
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3344      	adds	r3, #68	@ 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f004 fe37 	bl	8008cee <USB_HC_Halt>
 8004080:	e0b3      	b.n	80041ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f004 f88b 	bl	80081a6 <USB_ReadChInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b10      	cmp	r3, #16
 8004098:	f040 80a7 	bne.w	80041ea <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3326      	adds	r3, #38	@ 0x26
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d11b      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3344      	adds	r3, #68	@ 0x44
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334d      	adds	r3, #77	@ 0x4d
 80040d6:	2204      	movs	r2, #4
 80040d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f004 fe03 	bl	8008cee <USB_HC_Halt>
 80040e8:	e03f      	b.n	800416a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	3326      	adds	r3, #38	@ 0x26
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3326      	adds	r3, #38	@ 0x26
 8004110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004112:	2b02      	cmp	r3, #2
 8004114:	d129      	bne.n	800416a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	3344      	adds	r3, #68	@ 0x44
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	799b      	ldrb	r3, [r3, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HCD_HC_IN_IRQHandler+0xc2a>
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	331b      	adds	r3, #27
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334d      	adds	r3, #77	@ 0x4d
 8004158:	2204      	movs	r2, #4
 800415a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	4611      	mov	r1, r2
 8004164:	4618      	mov	r0, r3
 8004166:	f004 fdc2 	bl	8008cee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	331b      	adds	r3, #27
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d129      	bne.n	80041d4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	331b      	adds	r3, #27
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	0151      	lsls	r1, r2, #5
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	440a      	add	r2, r1
 80041aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	0151      	lsls	r1, r2, #5
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	440a      	add	r2, r1
 80041ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ce:	f043 0320 	orr.w	r3, r3, #32
 80041d2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e0:	461a      	mov	r2, r3
 80041e2:	2310      	movs	r3, #16
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	e000      	b.n	80041ea <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80041e8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f003 ffc9 	bl	80081a6 <USB_ReadChInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	2b04      	cmp	r3, #4
 800421c:	d11b      	bne.n	8004256 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	461a      	mov	r2, r3
 800422c:	2304      	movs	r3, #4
 800422e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334d      	adds	r3, #77	@ 0x4d
 8004240:	2207      	movs	r2, #7
 8004242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f004 fd4e 	bl	8008cee <USB_HC_Halt>
 8004252:	f000 bc89 	b.w	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f003 ffa1 	bl	80081a6 <USB_ReadChInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	f040 8082 	bne.w	8004374 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427c:	461a      	mov	r2, r3
 800427e:	2320      	movs	r3, #32
 8004280:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3319      	adds	r3, #25
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d124      	bne.n	80042e2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3319      	adds	r3, #25
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	334c      	adds	r3, #76	@ 0x4c
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334d      	adds	r3, #77	@ 0x4d
 80042d0:	2203      	movs	r2, #3
 80042d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f004 fd06 	bl	8008cee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	331a      	adds	r3, #26
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 8437 	bne.w	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	331b      	adds	r3, #27
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 842b 	bne.w	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3326      	adds	r3, #38	@ 0x26
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d009      	beq.n	800433c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	331b      	adds	r3, #27
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800433c:	78fa      	ldrb	r2, [r7, #3]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	334d      	adds	r3, #77	@ 0x4d
 800434c:	2203      	movs	r2, #3
 800434e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	4611      	mov	r1, r2
 8004358:	4618      	mov	r0, r3
 800435a:	f004 fcc8 	bl	8008cee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3344      	adds	r3, #68	@ 0x44
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e3f9      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f003 ff12 	bl	80081a6 <USB_ReadChInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800438c:	d111      	bne.n	80043b2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f004 fc9f 	bl	8008cee <USB_HC_Halt>
 80043b0:	e3da      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f003 fef3 	bl	80081a6 <USB_ReadChInterrupts>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d168      	bne.n	800449c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3344      	adds	r3, #68	@ 0x44
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fedd 	bl	80081a6 <USB_ReadChInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	d112      	bne.n	800441c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	3319      	adds	r3, #25
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004416:	461a      	mov	r2, r3
 8004418:	2340      	movs	r3, #64	@ 0x40
 800441a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	331b      	adds	r3, #27
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	331b      	adds	r3, #27
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	440a      	add	r2, r1
 800445c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004460:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004464:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	4413      	add	r3, r2
 800446e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004472:	461a      	mov	r2, r3
 8004474:	2301      	movs	r3, #1
 8004476:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	334d      	adds	r3, #77	@ 0x4d
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	4611      	mov	r1, r2
 8004494:	4618      	mov	r0, r3
 8004496:	f004 fc2a 	bl	8008cee <USB_HC_Halt>
 800449a:	e365      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f003 fe7e 	bl	80081a6 <USB_ReadChInterrupts>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b0:	2b40      	cmp	r3, #64	@ 0x40
 80044b2:	d139      	bne.n	8004528 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334d      	adds	r3, #77	@ 0x4d
 80044c4:	2205      	movs	r2, #5
 80044c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	331a      	adds	r3, #26
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3319      	adds	r3, #25
 80044ee:	2201      	movs	r2, #1
 80044f0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3344      	adds	r3, #68	@ 0x44
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f004 fbed 	bl	8008cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004520:	461a      	mov	r2, r3
 8004522:	2340      	movs	r3, #64	@ 0x40
 8004524:	6093      	str	r3, [r2, #8]
 8004526:	e31f      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f003 fe38 	bl	80081a6 <USB_ReadChInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b08      	cmp	r3, #8
 800453e:	d11a      	bne.n	8004576 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800454c:	461a      	mov	r2, r3
 800454e:	2308      	movs	r3, #8
 8004550:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	334d      	adds	r3, #77	@ 0x4d
 8004562:	2206      	movs	r2, #6
 8004564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f004 fbbd 	bl	8008cee <USB_HC_Halt>
 8004574:	e2f8      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fe11 	bl	80081a6 <USB_ReadChInterrupts>
 8004584:	4603      	mov	r3, r0
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d144      	bne.n	8004618 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3344      	adds	r3, #68	@ 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	334d      	adds	r3, #77	@ 0x4d
 80045b2:	2204      	movs	r2, #4
 80045b4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3319      	adds	r3, #25
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d114      	bne.n	80045f6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	3318      	adds	r3, #24
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3319      	adds	r3, #25
 80045f2:	2201      	movs	r2, #1
 80045f4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f004 fb75 	bl	8008cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004610:	461a      	mov	r2, r3
 8004612:	2310      	movs	r3, #16
 8004614:	6093      	str	r3, [r2, #8]
 8004616:	e2a7      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fdc0 	bl	80081a6 <USB_ReadChInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b80      	cmp	r3, #128	@ 0x80
 800462e:	f040 8083 	bne.w	8004738 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	799b      	ldrb	r3, [r3, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d111      	bne.n	800465e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334d      	adds	r3, #77	@ 0x4d
 800464a:	2207      	movs	r2, #7
 800464c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f004 fb49 	bl	8008cee <USB_HC_Halt>
 800465c:	e062      	b.n	8004724 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	3344      	adds	r3, #68	@ 0x44
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	3344      	adds	r3, #68	@ 0x44
 8004680:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3344      	adds	r3, #68	@ 0x44
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d922      	bls.n	80046de <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3344      	adds	r3, #68	@ 0x44
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334c      	adds	r3, #76	@ 0x4c
 80046bc:	2204      	movs	r2, #4
 80046be:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334c      	adds	r3, #76	@ 0x4c
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 fe62 	bl	800b3a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046dc:	e022      	b.n	8004724 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334c      	adds	r3, #76	@ 0x4c
 80046ee:	2202      	movs	r2, #2
 80046f0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004708:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004710:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004730:	461a      	mov	r2, r3
 8004732:	2380      	movs	r3, #128	@ 0x80
 8004734:	6093      	str	r3, [r2, #8]
 8004736:	e217      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	4611      	mov	r1, r2
 8004740:	4618      	mov	r0, r3
 8004742:	f003 fd30 	bl	80081a6 <USB_ReadChInterrupts>
 8004746:	4603      	mov	r3, r0
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004750:	d11b      	bne.n	800478a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	334d      	adds	r3, #77	@ 0x4d
 8004762:	2209      	movs	r2, #9
 8004764:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f004 fabd 	bl	8008cee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004780:	461a      	mov	r2, r3
 8004782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004786:	6093      	str	r3, [r2, #8]
 8004788:	e1ee      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f003 fd07 	bl	80081a6 <USB_ReadChInterrupts>
 8004798:	4603      	mov	r3, r0
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	f040 81df 	bne.w	8004b62 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	2302      	movs	r3, #2
 80047b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334d      	adds	r3, #77	@ 0x4d
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 8093 	bne.w	80048f4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	334d      	adds	r3, #77	@ 0x4d
 80047de:	2202      	movs	r2, #2
 80047e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	334c      	adds	r3, #76	@ 0x4c
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	3326      	adds	r3, #38	@ 0x26
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d00b      	beq.n	8004824 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3326      	adds	r3, #38	@ 0x26
 800481c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800481e:	2b03      	cmp	r3, #3
 8004820:	f040 8190 	bne.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	799b      	ldrb	r3, [r3, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d115      	bne.n	8004858 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	333d      	adds	r3, #61	@ 0x3d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2d8      	uxtb	r0, r3
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	333d      	adds	r3, #61	@ 0x3d
 8004854:	4602      	mov	r2, r0
 8004856:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	799b      	ldrb	r3, [r3, #6]
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 8171 	bne.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	440b      	add	r3, r1
 8004870:	3334      	adds	r3, #52	@ 0x34
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f000 8165 	beq.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800487a:	78fa      	ldrb	r2, [r7, #3]
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	4613      	mov	r3, r2
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	3334      	adds	r3, #52	@ 0x34
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4403      	add	r3, r0
 800489a:	3328      	adds	r3, #40	@ 0x28
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	440b      	add	r3, r1
 80048a0:	1e59      	subs	r1, r3, #1
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4403      	add	r3, r0
 80048b0:	3328      	adds	r3, #40	@ 0x28
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048b8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 813f 	beq.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	333d      	adds	r3, #61	@ 0x3d
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	f083 0301 	eor.w	r3, r3, #1
 80048de:	b2d8      	uxtb	r0, r3
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	333d      	adds	r3, #61	@ 0x3d
 80048ee:	4602      	mov	r2, r0
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	e127      	b.n	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	334d      	adds	r3, #77	@ 0x4d
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d120      	bne.n	800494c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	334d      	adds	r3, #77	@ 0x4d
 800491a:	2202      	movs	r2, #2
 800491c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	331b      	adds	r3, #27
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 8107 	bne.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	334c      	adds	r3, #76	@ 0x4c
 8004946:	2202      	movs	r2, #2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e0fb      	b.n	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	334d      	adds	r3, #77	@ 0x4d
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b04      	cmp	r3, #4
 8004960:	d13a      	bne.n	80049d8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	334d      	adds	r3, #77	@ 0x4d
 8004972:	2202      	movs	r2, #2
 8004974:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	334c      	adds	r3, #76	@ 0x4c
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800498a:	78fa      	ldrb	r2, [r7, #3]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	1a9b      	subs	r3, r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	331b      	adds	r3, #27
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	f040 80d1 	bne.w	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	331b      	adds	r3, #27
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d4:	6053      	str	r3, [r2, #4]
 80049d6:	e0b5      	b.n	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	334d      	adds	r3, #77	@ 0x4d
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b05      	cmp	r3, #5
 80049ec:	d114      	bne.n	8004a18 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	334d      	adds	r3, #77	@ 0x4d
 80049fe:	2202      	movs	r2, #2
 8004a00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	334c      	adds	r3, #76	@ 0x4c
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e095      	b.n	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d114      	bne.n	8004a58 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	334c      	adds	r3, #76	@ 0x4c
 8004a52:	2205      	movs	r2, #5
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e075      	b.n	8004b44 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334d      	adds	r3, #77	@ 0x4d
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b07      	cmp	r3, #7
 8004a6c:	d00a      	beq.n	8004a84 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	334d      	adds	r3, #77	@ 0x4d
 8004a7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d170      	bne.n	8004b66 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	334d      	adds	r3, #77	@ 0x4d
 8004a94:	2202      	movs	r2, #2
 8004a96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3344      	adds	r3, #68	@ 0x44
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	3344      	adds	r3, #68	@ 0x44
 8004aba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	3344      	adds	r3, #68	@ 0x44
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d914      	bls.n	8004afc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ad2:	78fa      	ldrb	r2, [r7, #3]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	1a9b      	subs	r3, r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3344      	adds	r3, #68	@ 0x44
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	334c      	adds	r3, #76	@ 0x4c
 8004af6:	2204      	movs	r2, #4
 8004af8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004afa:	e022      	b.n	8004b42 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	334c      	adds	r3, #76	@ 0x4c
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b26:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b2e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b42:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b44:	78fa      	ldrb	r2, [r7, #3]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	334c      	adds	r3, #76	@ 0x4c
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f006 fc20 	bl	800b3a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b60:	e002      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004b66:	bf00      	nop
  }
}
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b08a      	sub	sp, #40	@ 0x28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	0c5b      	lsrs	r3, r3, #17
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ba2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d004      	beq.n	8004bb4 <HCD_RXQLVL_IRQHandler+0x46>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b05      	cmp	r3, #5
 8004bae:	f000 80b6 	beq.w	8004d1e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bb2:	e0b7      	b.n	8004d24 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80b3 	beq.w	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	332c      	adds	r3, #44	@ 0x2c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80a7 	beq.w	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3338      	adds	r3, #56	@ 0x38
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	18d1      	adds	r1, r2, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4403      	add	r3, r0
 8004bf8:	3334      	adds	r3, #52	@ 0x34
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	f200 8083 	bhi.w	8004d08 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	332c      	adds	r3, #44	@ 0x2c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	b292      	uxth	r2, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f003 fa57 	bl	80080d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4613      	mov	r3, r2
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	332c      	adds	r3, #44	@ 0x2c
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	18d1      	adds	r1, r2, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4403      	add	r3, r0
 8004c46:	332c      	adds	r3, #44	@ 0x2c
 8004c48:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	3338      	adds	r3, #56	@ 0x38
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	18d1      	adds	r1, r2, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4613      	mov	r3, r2
 8004c66:	011b      	lsls	r3, r3, #4
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4403      	add	r3, r0
 8004c6e:	3338      	adds	r3, #56	@ 0x38
 8004c70:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c86:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3328      	adds	r3, #40	@ 0x28
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d13f      	bne.n	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d03c      	beq.n	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cbe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cc6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	333c      	adds	r3, #60	@ 0x3c
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f083 0301 	eor.w	r3, r3, #1
 8004cf0:	b2d8      	uxtb	r0, r3
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	333c      	adds	r3, #60	@ 0x3c
 8004d02:	4602      	mov	r2, r0
 8004d04:	701a      	strb	r2, [r3, #0]
      break;
 8004d06:	e00c      	b.n	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	334c      	adds	r3, #76	@ 0x4c
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
      break;
 8004d1c:	e001      	b.n	8004d22 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d1e:	bf00      	nop
 8004d20:	e000      	b.n	8004d24 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d22:	bf00      	nop
  }
}
 8004d24:	bf00      	nop
 8004d26:	3728      	adds	r7, #40	@ 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d10b      	bne.n	8004d7c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f006 fafa 	bl	800b368 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f043 0302 	orr.w	r3, r3, #2
 8004d7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d132      	bne.n	8004dec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	d126      	bne.n	8004de6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7a5b      	ldrb	r3, [r3, #9]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d113      	bne.n	8004dc8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004da6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004daa:	d106      	bne.n	8004dba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2102      	movs	r1, #2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 fb1c 	bl	80083f0 <USB_InitFSLSPClkSel>
 8004db8:	e011      	b.n	8004dde <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f003 fb15 	bl	80083f0 <USB_InitFSLSPClkSel>
 8004dc6:	e00a      	b.n	8004dde <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	79db      	ldrb	r3, [r3, #7]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d106      	bne.n	8004dde <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ddc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f006 faec 	bl	800b3bc <HAL_HCD_PortEnabled_Callback>
 8004de4:	e002      	b.n	8004dec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f006 faf6 	bl	800b3d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d103      	bne.n	8004dfe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f043 0320 	orr.w	r3, r3, #32
 8004dfc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6013      	str	r3, [r2, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e12b      	b.n	800507e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fb fff0 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	@ 0x24
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e78:	f002 fb04 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4a81      	ldr	r2, [pc, #516]	@ (8005088 <HAL_I2C_Init+0x274>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d807      	bhi.n	8004e98 <HAL_I2C_Init+0x84>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	4a80      	ldr	r2, [pc, #512]	@ (800508c <HAL_I2C_Init+0x278>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	bf94      	ite	ls
 8004e90:	2301      	movls	r3, #1
 8004e92:	2300      	movhi	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e006      	b.n	8004ea6 <HAL_I2C_Init+0x92>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a7d      	ldr	r2, [pc, #500]	@ (8005090 <HAL_I2C_Init+0x27c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bf94      	ite	ls
 8004ea0:	2301      	movls	r3, #1
 8004ea2:	2300      	movhi	r3, #0
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0e7      	b.n	800507e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a78      	ldr	r2, [pc, #480]	@ (8005094 <HAL_I2C_Init+0x280>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	0c9b      	lsrs	r3, r3, #18
 8004eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	4a6a      	ldr	r2, [pc, #424]	@ (8005088 <HAL_I2C_Init+0x274>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d802      	bhi.n	8004ee8 <HAL_I2C_Init+0xd4>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	e009      	b.n	8004efc <HAL_I2C_Init+0xe8>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	4a69      	ldr	r2, [pc, #420]	@ (8005098 <HAL_I2C_Init+0x284>)
 8004ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef8:	099b      	lsrs	r3, r3, #6
 8004efa:	3301      	adds	r3, #1
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	495c      	ldr	r1, [pc, #368]	@ (8005088 <HAL_I2C_Init+0x274>)
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	d819      	bhi.n	8004f50 <HAL_I2C_Init+0x13c>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1e59      	subs	r1, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f2a:	1c59      	adds	r1, r3, #1
 8004f2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f30:	400b      	ands	r3, r1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_I2C_Init+0x138>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1e59      	subs	r1, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f44:	3301      	adds	r3, #1
 8004f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f4a:	e051      	b.n	8004ff0 <HAL_I2C_Init+0x1dc>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	e04f      	b.n	8004ff0 <HAL_I2C_Init+0x1dc>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d111      	bne.n	8004f7c <HAL_I2C_Init+0x168>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1e58      	subs	r0, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	440b      	add	r3, r1
 8004f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e012      	b.n	8004fa2 <HAL_I2C_Init+0x18e>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1e58      	subs	r0, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	0099      	lsls	r1, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f92:	3301      	adds	r3, #1
 8004f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	bf0c      	ite	eq
 8004f9c:	2301      	moveq	r3, #1
 8004f9e:	2300      	movne	r3, #0
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <HAL_I2C_Init+0x196>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e022      	b.n	8004ff0 <HAL_I2C_Init+0x1dc>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10e      	bne.n	8004fd0 <HAL_I2C_Init+0x1bc>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1e58      	subs	r0, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	460b      	mov	r3, r1
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	440b      	add	r3, r1
 8004fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fce:	e00f      	b.n	8004ff0 <HAL_I2C_Init+0x1dc>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	1e58      	subs	r0, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	0099      	lsls	r1, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	6809      	ldr	r1, [r1, #0]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800501e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6911      	ldr	r1, [r2, #16]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68d2      	ldr	r2, [r2, #12]
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	430b      	orrs	r3, r1
 8005032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	000186a0 	.word	0x000186a0
 800508c:	001e847f 	.word	0x001e847f
 8005090:	003d08ff 	.word	0x003d08ff
 8005094:	431bde83 	.word	0x431bde83
 8005098:	10624dd3 	.word	0x10624dd3

0800509c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	461a      	mov	r2, r3
 80050aa:	4603      	mov	r3, r0
 80050ac:	817b      	strh	r3, [r7, #10]
 80050ae:	460b      	mov	r3, r1
 80050b0:	813b      	strh	r3, [r7, #8]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b6:	f7fc fef7 	bl	8001ea8 <HAL_GetTick>
 80050ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	f040 80d9 	bne.w	800527c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2319      	movs	r3, #25
 80050d0:	2201      	movs	r2, #1
 80050d2:	496d      	ldr	r1, [pc, #436]	@ (8005288 <HAL_I2C_Mem_Write+0x1ec>)
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fc8b 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
 80050e2:	e0cc      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_I2C_Mem_Write+0x56>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e0c5      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d007      	beq.n	8005118 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2221      	movs	r2, #33	@ 0x21
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2240      	movs	r2, #64	@ 0x40
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a3a      	ldr	r2, [r7, #32]
 8005142:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005148:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4a4d      	ldr	r2, [pc, #308]	@ (800528c <HAL_I2C_Mem_Write+0x1f0>)
 8005158:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800515a:	88f8      	ldrh	r0, [r7, #6]
 800515c:	893a      	ldrh	r2, [r7, #8]
 800515e:	8979      	ldrh	r1, [r7, #10]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fac2 	bl	80056f4 <I2C_RequestMemoryWrite>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d052      	beq.n	800521c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e081      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fd50 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06b      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d11b      	bne.n	800521c <HAL_I2C_Mem_Write+0x180>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d017      	beq.n	800521c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1aa      	bne.n	800517a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fd43 	bl	8005cb4 <I2C_WaitOnBTFFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00d      	beq.n	8005250 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005238:	2b04      	cmp	r3, #4
 800523a:	d107      	bne.n	800524c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800524a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e016      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800525e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	00100002 	.word	0x00100002
 800528c:	ffff0000 	.word	0xffff0000

08005290 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	@ 0x30
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	817b      	strh	r3, [r7, #10]
 80052a2:	460b      	mov	r3, r1
 80052a4:	813b      	strh	r3, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052aa:	f7fc fdfd 	bl	8001ea8 <HAL_GetTick>
 80052ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	f040 8214 	bne.w	80056e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	2319      	movs	r3, #25
 80052c4:	2201      	movs	r2, #1
 80052c6:	497b      	ldr	r1, [pc, #492]	@ (80054b4 <HAL_I2C_Mem_Read+0x224>)
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fb91 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052d4:	2302      	movs	r3, #2
 80052d6:	e207      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_I2C_Mem_Read+0x56>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e200      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d007      	beq.n	800530c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800531a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2222      	movs	r2, #34	@ 0x22
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2240      	movs	r2, #64	@ 0x40
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800533c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a5b      	ldr	r2, [pc, #364]	@ (80054b8 <HAL_I2C_Mem_Read+0x228>)
 800534c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800534e:	88f8      	ldrh	r0, [r7, #6]
 8005350:	893a      	ldrh	r2, [r7, #8]
 8005352:	8979      	ldrh	r1, [r7, #10]
 8005354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	4603      	mov	r3, r0
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 fa5e 	bl	8005820 <I2C_RequestMemoryRead>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e1bc      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d113      	bne.n	800539e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	623b      	str	r3, [r7, #32]
 800538a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e190      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d11b      	bne.n	80053de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e170      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d11b      	bne.n	800541e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	e150      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005434:	e144      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543a:	2b03      	cmp	r3, #3
 800543c:	f200 80f1 	bhi.w	8005622 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	2b01      	cmp	r3, #1
 8005446:	d123      	bne.n	8005490 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fc79 	bl	8005d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e145      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691a      	ldr	r2, [r3, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800548e:	e117      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005494:	2b02      	cmp	r3, #2
 8005496:	d14e      	bne.n	8005536 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	2200      	movs	r2, #0
 80054a0:	4906      	ldr	r1, [pc, #24]	@ (80054bc <HAL_I2C_Mem_Read+0x22c>)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 faa4 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e11a      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
 80054b2:	bf00      	nop
 80054b4:	00100002 	.word	0x00100002
 80054b8:	ffff0000 	.word	0xffff0000
 80054bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005534:	e0c4      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	2200      	movs	r2, #0
 800553e:	496c      	ldr	r1, [pc, #432]	@ (80056f0 <HAL_I2C_Mem_Read+0x460>)
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 fa55 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0cb      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691a      	ldr	r2, [r3, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	3b01      	subs	r3, #1
 800558c:	b29a      	uxth	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	2200      	movs	r2, #0
 800559a:	4955      	ldr	r1, [pc, #340]	@ (80056f0 <HAL_I2C_Mem_Read+0x460>)
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 fa27 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e09d      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	3b01      	subs	r3, #1
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005620:	e04e      	b.n	80056c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005624:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 fb8c 	bl	8005d44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e058      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b04      	cmp	r3, #4
 8005674:	d124      	bne.n	80056c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567a:	2b03      	cmp	r3, #3
 800567c:	d107      	bne.n	800568e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800568c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f47f aeb6 	bne.w	8005436 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	e000      	b.n	80056e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80056e6:	2302      	movs	r3, #2
  }
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	@ 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	00010004 	.word	0x00010004

080056f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	4608      	mov	r0, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4603      	mov	r3, r0
 8005704:	817b      	strh	r3, [r7, #10]
 8005706:	460b      	mov	r3, r1
 8005708:	813b      	strh	r3, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800571c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	2200      	movs	r2, #0
 8005726:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f960 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005740:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005744:	d103      	bne.n	800574e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800574c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e05f      	b.n	8005812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005752:	897b      	ldrh	r3, [r7, #10]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005760:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	492d      	ldr	r1, [pc, #180]	@ (800581c <I2C_RequestMemoryWrite+0x128>)
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 f9bb 	bl	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e04c      	b.n	8005812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fa46 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d107      	bne.n	80057b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e02b      	b.n	8005812 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d105      	bne.n	80057cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057c0:	893b      	ldrh	r3, [r7, #8]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	611a      	str	r2, [r3, #16]
 80057ca:	e021      	b.n	8005810 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057cc:	893b      	ldrh	r3, [r7, #8]
 80057ce:	0a1b      	lsrs	r3, r3, #8
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057dc:	6a39      	ldr	r1, [r7, #32]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fa20 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d107      	bne.n	8005802 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005800:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e005      	b.n	8005812 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005806:	893b      	ldrh	r3, [r7, #8]
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	00010002 	.word	0x00010002

08005820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	4608      	mov	r0, r1
 800582a:	4611      	mov	r1, r2
 800582c:	461a      	mov	r2, r3
 800582e:	4603      	mov	r3, r0
 8005830:	817b      	strh	r3, [r7, #10]
 8005832:	460b      	mov	r3, r1
 8005834:	813b      	strh	r3, [r7, #8]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	2200      	movs	r2, #0
 8005862:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f8c2 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00d      	beq.n	800588e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005880:	d103      	bne.n	800588a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005888:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0aa      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800588e:	897b      	ldrh	r3, [r7, #10]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800589c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	6a3a      	ldr	r2, [r7, #32]
 80058a2:	4952      	ldr	r1, [pc, #328]	@ (80059ec <I2C_RequestMemoryRead+0x1cc>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f91d 	bl	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e097      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058cc:	6a39      	ldr	r1, [r7, #32]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f9a8 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d107      	bne.n	80058f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e076      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058f6:	88fb      	ldrh	r3, [r7, #6]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058fc:	893b      	ldrh	r3, [r7, #8]
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	611a      	str	r2, [r3, #16]
 8005906:	e021      	b.n	800594c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005908:	893b      	ldrh	r3, [r7, #8]
 800590a:	0a1b      	lsrs	r3, r3, #8
 800590c:	b29b      	uxth	r3, r3
 800590e:	b2da      	uxtb	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005918:	6a39      	ldr	r1, [r7, #32]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f982 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	2b04      	cmp	r3, #4
 800592c:	d107      	bne.n	800593e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e050      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005942:	893b      	ldrh	r3, [r7, #8]
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800594e:	6a39      	ldr	r1, [r7, #32]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 f967 	bl	8005c24 <I2C_WaitOnTXEFlagUntilTimeout>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	2b04      	cmp	r3, #4
 8005962:	d107      	bne.n	8005974 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005972:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e035      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005986:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2200      	movs	r2, #0
 8005990:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f82b 	bl	80059f0 <I2C_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ae:	d103      	bne.n	80059b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e013      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059bc:	897b      	ldrh	r3, [r7, #10]
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	4906      	ldr	r1, [pc, #24]	@ (80059ec <I2C_RequestMemoryRead+0x1cc>)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f886 	bl	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	00010002 	.word	0x00010002

080059f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a00:	e048      	b.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d044      	beq.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0a:	f7fc fa4d 	bl	8001ea8 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d139      	bne.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d10d      	bne.n	8005a46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	43da      	mvns	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	4013      	ands	r3, r2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	e00c      	b.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	43da      	mvns	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d116      	bne.n	8005a94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e023      	b.n	8005adc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	0c1b      	lsrs	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10d      	bne.n	8005aba <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	43da      	mvns	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf0c      	ite	eq
 8005ab0:	2301      	moveq	r3, #1
 8005ab2:	2300      	movne	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	e00c      	b.n	8005ad4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	43da      	mvns	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bf0c      	ite	eq
 8005acc:	2301      	moveq	r3, #1
 8005ace:	2300      	movne	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d093      	beq.n	8005a02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005af2:	e071      	b.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b02:	d123      	bne.n	8005b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e067      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d041      	beq.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b54:	f7fc f9a8 	bl	8001ea8 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d302      	bcc.n	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d136      	bne.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d10c      	bne.n	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bf14      	ite	ne
 8005b86:	2301      	movne	r3, #1
 8005b88:	2300      	moveq	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	e00b      	b.n	8005ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	43da      	mvns	r2, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	bf14      	ite	ne
 8005ba0:	2301      	movne	r3, #1
 8005ba2:	2300      	moveq	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e021      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	0c1b      	lsrs	r3, r3, #16
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d10c      	bne.n	8005bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	43da      	mvns	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4013      	ands	r3, r2
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e00b      	b.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	43da      	mvns	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4013      	ands	r3, r2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f47f af6d 	bne.w	8005af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c30:	e034      	b.n	8005c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 f8e3 	bl	8005dfe <I2C_IsAcknowledgeFailed>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e034      	b.n	8005cac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d028      	beq.n	8005c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fc f92d 	bl	8001ea8 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d11d      	bne.n	8005c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6a:	2b80      	cmp	r3, #128	@ 0x80
 8005c6c:	d016      	beq.n	8005c9c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c88:	f043 0220 	orr.w	r2, r3, #32
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e007      	b.n	8005cac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca6:	2b80      	cmp	r3, #128	@ 0x80
 8005ca8:	d1c3      	bne.n	8005c32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cc0:	e034      	b.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f89b 	bl	8005dfe <I2C_IsAcknowledgeFailed>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e034      	b.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d028      	beq.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cda:	f7fc f8e5 	bl	8001ea8 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11d      	bne.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d016      	beq.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e007      	b.n	8005d3c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d1c3      	bne.n	8005cc2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d50:	e049      	b.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0310 	and.w	r3, r3, #16
 8005d5c:	2b10      	cmp	r3, #16
 8005d5e:	d119      	bne.n	8005d94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0210 	mvn.w	r2, #16
 8005d68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e030      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7fc f888 	bl	8001ea8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d11d      	bne.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db4:	2b40      	cmp	r3, #64	@ 0x40
 8005db6:	d016      	beq.n	8005de6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	f043 0220 	orr.w	r2, r3, #32
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e007      	b.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df0:	2b40      	cmp	r3, #64	@ 0x40
 8005df2:	d1ae      	bne.n	8005d52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e14:	d11b      	bne.n	8005e4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e128      	b.n	80060c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a90      	ldr	r2, [pc, #576]	@ (80060c8 <HAL_I2S_Init+0x26c>)
 8005e86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fb f861 	bl	8000f50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6812      	ldr	r2, [r2, #0]
 8005ea0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ea4:	f023 030f 	bic.w	r3, r3, #15
 8005ea8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d060      	beq.n	8005f7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	617b      	str	r3, [r7, #20]
 8005ec6:	e001      	b.n	8005ecc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005ec8:	2320      	movs	r3, #32
 8005eca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d802      	bhi.n	8005eda <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f001 fbdc 	bl	8007698 <HAL_RCCEx_GetPeriphCLKFreq>
 8005ee0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eea:	d125      	bne.n	8005f38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d010      	beq.n	8005f16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	3305      	adds	r3, #5
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e01f      	b.n	8005f56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	3305      	adds	r3, #5
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	e00e      	b.n	8005f56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	3305      	adds	r3, #5
 8005f54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4a5c      	ldr	r2, [pc, #368]	@ (80060cc <HAL_I2S_Init+0x270>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	08db      	lsrs	r3, r3, #3
 8005f60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	085b      	lsrs	r3, r3, #1
 8005f72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e003      	b.n	8005f84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d902      	bls.n	8005f90 <HAL_I2S_Init+0x134>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2bff      	cmp	r3, #255	@ 0xff
 8005f8e:	d907      	bls.n	8005fa0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f94:	f043 0210 	orr.w	r2, r3, #16
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e08f      	b.n	80060c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	ea42 0103 	orr.w	r1, r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005fbe:	f023 030f 	bic.w	r3, r3, #15
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6851      	ldr	r1, [r2, #4]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6892      	ldr	r2, [r2, #8]
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68d2      	ldr	r2, [r2, #12]
 8005fd0:	4311      	orrs	r1, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6992      	ldr	r2, [r2, #24]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d161      	bne.n	80060b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a38      	ldr	r2, [pc, #224]	@ (80060d0 <HAL_I2S_Init+0x274>)
 8005ff0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a37      	ldr	r2, [pc, #220]	@ (80060d4 <HAL_I2S_Init+0x278>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d101      	bne.n	8006000 <HAL_I2S_Init+0x1a4>
 8005ffc:	4b36      	ldr	r3, [pc, #216]	@ (80060d8 <HAL_I2S_Init+0x27c>)
 8005ffe:	e001      	b.n	8006004 <HAL_I2S_Init+0x1a8>
 8006000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4932      	ldr	r1, [pc, #200]	@ (80060d4 <HAL_I2S_Init+0x278>)
 800600c:	428a      	cmp	r2, r1
 800600e:	d101      	bne.n	8006014 <HAL_I2S_Init+0x1b8>
 8006010:	4a31      	ldr	r2, [pc, #196]	@ (80060d8 <HAL_I2S_Init+0x27c>)
 8006012:	e001      	b.n	8006018 <HAL_I2S_Init+0x1bc>
 8006014:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006018:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800601c:	f023 030f 	bic.w	r3, r3, #15
 8006020:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2b      	ldr	r2, [pc, #172]	@ (80060d4 <HAL_I2S_Init+0x278>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <HAL_I2S_Init+0x1d4>
 800602c:	4b2a      	ldr	r3, [pc, #168]	@ (80060d8 <HAL_I2S_Init+0x27c>)
 800602e:	e001      	b.n	8006034 <HAL_I2S_Init+0x1d8>
 8006030:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006034:	2202      	movs	r2, #2
 8006036:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a25      	ldr	r2, [pc, #148]	@ (80060d4 <HAL_I2S_Init+0x278>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_I2S_Init+0x1ea>
 8006042:	4b25      	ldr	r3, [pc, #148]	@ (80060d8 <HAL_I2S_Init+0x27c>)
 8006044:	e001      	b.n	800604a <HAL_I2S_Init+0x1ee>
 8006046:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006056:	d003      	beq.n	8006060 <HAL_I2S_Init+0x204>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	e001      	b.n	800606c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006076:	4313      	orrs	r3, r2
 8006078:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006080:	4313      	orrs	r3, r2
 8006082:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800608a:	4313      	orrs	r3, r2
 800608c:	b29a      	uxth	r2, r3
 800608e:	897b      	ldrh	r3, [r7, #10]
 8006090:	4313      	orrs	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006098:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0d      	ldr	r2, [pc, #52]	@ (80060d4 <HAL_I2S_Init+0x278>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_I2S_Init+0x24c>
 80060a4:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <HAL_I2S_Init+0x27c>)
 80060a6:	e001      	b.n	80060ac <HAL_I2S_Init+0x250>
 80060a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060ac:	897a      	ldrh	r2, [r7, #10]
 80060ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	080061c3 	.word	0x080061c3
 80060cc:	cccccccd 	.word	0xcccccccd
 80060d0:	08006595 	.word	0x08006595
 80060d4:	40003800 	.word	0x40003800
 80060d8:	40003400 	.word	0x40003400

080060dc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
}
 80060ec:	bf00      	nop
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006114:	881a      	ldrh	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10e      	bne.n	800615c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800614c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff ffcc 	bl	80060f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	b292      	uxth	r2, r2
 8006178:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	1c9a      	adds	r2, r3, #2
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fb fddf 	bl	8001d78 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d13a      	bne.n	8006254 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d109      	bne.n	80061fc <I2S_IRQHandler+0x3a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d102      	bne.n	80061fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ffb4 	bl	8006164 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d126      	bne.n	8006254 <I2S_IRQHandler+0x92>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b20      	cmp	r3, #32
 8006212:	d11f      	bne.n	8006254 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006222:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	f043 0202 	orr.w	r2, r3, #2
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb fdaa 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b03      	cmp	r3, #3
 800625e:	d136      	bne.n	80062ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b02      	cmp	r3, #2
 8006268:	d109      	bne.n	800627e <I2S_IRQHandler+0xbc>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006274:	2b80      	cmp	r3, #128	@ 0x80
 8006276:	d102      	bne.n	800627e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ff45 	bl	8006108 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b08      	cmp	r3, #8
 8006286:	d122      	bne.n	80062ce <I2S_IRQHandler+0x10c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b20      	cmp	r3, #32
 8006294:	d11b      	bne.n	80062ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80062a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c0:	f043 0204 	orr.w	r2, r3, #4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fb fd6d 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ce:	bf00      	nop
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
	...

080062d8 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d001      	beq.n	80062fe <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 80062fa:	2302      	movs	r3, #2
 80062fc:	e13c      	b.n	8006578 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 800630a:	887b      	ldrh	r3, [r7, #2]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e131      	b.n	8006578 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 8006320:	2302      	movs	r3, #2
 8006322:	e129      	b.n	8006578 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b03      	cmp	r3, #3
 8006348:	d002      	beq.n	8006350 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	2b05      	cmp	r3, #5
 800634e:	d114      	bne.n	800637a <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8006350:	887b      	ldrh	r3, [r7, #2]
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8006364:	887b      	ldrh	r3, [r7, #2]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	865a      	strh	r2, [r3, #50]	@ 0x32
 8006378:	e00b      	b.n	8006392 <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	887a      	ldrh	r2, [r7, #2]
 800637e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	887a      	ldrh	r2, [r7, #2]
 8006384:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	887a      	ldrh	r2, [r7, #2]
 800638a:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2205      	movs	r2, #5
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063a4:	4a76      	ldr	r2, [pc, #472]	@ (8006580 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 80063a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ac:	4a75      	ldr	r2, [pc, #468]	@ (8006584 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 80063ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b4:	4a74      	ldr	r2, [pc, #464]	@ (8006588 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 80063b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063bc:	2200      	movs	r2, #0
 80063be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c4:	2200      	movs	r2, #0
 80063c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006588 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 80063ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063da:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063e2:	d002      	beq.n	80063ea <HAL_I2SEx_TransmitReceive_DMA+0x112>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d144      	bne.n	8006474 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a65      	ldr	r2, [pc, #404]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 80063fc:	4b64      	ldr	r3, [pc, #400]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80063fe:	e001      	b.n	8006404 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 8006400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006404:	330c      	adds	r3, #12
 8006406:	4619      	mov	r1, r3
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006410:	b29b      	uxth	r3, r3
 8006412:	f7fb ff39 	bl	8002288 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5c      	ldr	r2, [pc, #368]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 8006420:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006422:	e001      	b.n	8006428 <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8006424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4957      	ldr	r1, [pc, #348]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006430:	428b      	cmp	r3, r1
 8006432:	d101      	bne.n	8006438 <HAL_I2SEx_TransmitReceive_DMA+0x160>
 8006434:	4b56      	ldr	r3, [pc, #344]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006436:	e001      	b.n	800643c <HAL_I2SEx_TransmitReceive_DMA+0x164>
 8006438:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800643c:	f042 0201 	orr.w	r2, r2, #1
 8006440:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800645c:	b29b      	uxth	r3, r3
 800645e:	f7fb ff13 	bl	8002288 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0202 	orr.w	r2, r2, #2
 8006470:	605a      	str	r2, [r3, #4]
 8006472:	e056      	b.n	8006522 <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800647e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006482:	d10a      	bne.n	800649a <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006484:	2300      	movs	r3, #0
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a37      	ldr	r2, [pc, #220]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 80064b2:	4b37      	ldr	r3, [pc, #220]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80064b4:	e001      	b.n	80064ba <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 80064b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ba:	330c      	adds	r3, #12
 80064bc:	461a      	mov	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f7fb fee0 	bl	8002288 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a2f      	ldr	r2, [pc, #188]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 80064d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80064d4:	e001      	b.n	80064da <HAL_I2SEx_TransmitReceive_DMA+0x202>
 80064d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	492a      	ldr	r1, [pc, #168]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80064e2:	428b      	cmp	r3, r1
 80064e4:	d101      	bne.n	80064ea <HAL_I2SEx_TransmitReceive_DMA+0x212>
 80064e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80064e8:	e001      	b.n	80064ee <HAL_I2SEx_TransmitReceive_DMA+0x216>
 80064ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ee:	f042 0202 	orr.w	r2, r2, #2
 80064f2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80064f4:	1d3b      	adds	r3, r7, #4
 80064f6:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	4619      	mov	r1, r3
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800650c:	b29b      	uxth	r3, r3
 800650e:	f7fb febb 	bl	8002288 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006538:	d01d      	beq.n	8006576 <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a13      	ldr	r2, [pc, #76]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_I2SEx_TransmitReceive_DMA+0x270>
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006546:	e001      	b.n	800654c <HAL_I2SEx_TransmitReceive_DMA+0x274>
 8006548:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	490e      	ldr	r1, [pc, #56]	@ (800658c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006554:	428b      	cmp	r3, r1
 8006556:	d101      	bne.n	800655c <HAL_I2SEx_TransmitReceive_DMA+0x284>
 8006558:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800655a:	e001      	b.n	8006560 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 800655c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006560:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006564:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006574:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	0800683d 	.word	0x0800683d
 8006584:	08006859 	.word	0x08006859
 8006588:	08006931 	.word	0x08006931
 800658c:	40003800 	.word	0x40003800
 8006590:	40003400 	.word	0x40003400

08006594 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a92      	ldr	r2, [pc, #584]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80065ae:	4b92      	ldr	r3, [pc, #584]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065b0:	e001      	b.n	80065b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a8b      	ldr	r2, [pc, #556]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065cc:	4b8a      	ldr	r3, [pc, #552]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065ce:	e001      	b.n	80065d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80065d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e0:	d004      	beq.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f040 8099 	bne.w	800671e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d107      	bne.n	8006606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f9d5 	bl	80069b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d107      	bne.n	8006620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fa78 	bl	8006b10 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d13a      	bne.n	80066a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d035      	beq.n	80066a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6e      	ldr	r2, [pc, #440]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800663e:	4b6e      	ldr	r3, [pc, #440]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006640:	e001      	b.n	8006646 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006642:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4969      	ldr	r1, [pc, #420]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800664e:	428b      	cmp	r3, r1
 8006650:	d101      	bne.n	8006656 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006652:	4b69      	ldr	r3, [pc, #420]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006654:	e001      	b.n	800665a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006656:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800665a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800665e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800666e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006692:	f043 0202 	orr.w	r2, r3, #2
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fb fb84 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	f040 80c3 	bne.w	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80bd 	beq.w	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80066c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a49      	ldr	r2, [pc, #292]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d101      	bne.n	80066d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80066d2:	4b49      	ldr	r3, [pc, #292]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066d4:	e001      	b.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80066d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4944      	ldr	r1, [pc, #272]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066e2:	428b      	cmp	r3, r1
 80066e4:	d101      	bne.n	80066ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80066e6:	4b44      	ldr	r3, [pc, #272]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066e8:	e001      	b.n	80066ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80066ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066ee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80066f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670e:	f043 0204 	orr.w	r2, r3, #4
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fb fb46 	bl	8001da8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800671c:	e089      	b.n	8006832 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	f003 0302 	and.w	r3, r3, #2
 8006724:	2b02      	cmp	r3, #2
 8006726:	d107      	bne.n	8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f96e 	bl	8006a14 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b01      	cmp	r3, #1
 8006740:	d107      	bne.n	8006752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f9ad 	bl	8006aac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006758:	2b40      	cmp	r3, #64	@ 0x40
 800675a:	d12f      	bne.n	80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d02a      	beq.n	80067bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006774:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006780:	4b1d      	ldr	r3, [pc, #116]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006782:	e001      	b.n	8006788 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006784:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4919      	ldr	r1, [pc, #100]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006790:	428b      	cmp	r3, r1
 8006792:	d101      	bne.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006794:	4b18      	ldr	r3, [pc, #96]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006796:	e001      	b.n	800679c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006798:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800679c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80067a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	f043 0202 	orr.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fb faf6 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d136      	bne.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d031      	beq.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a07      	ldr	r2, [pc, #28]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d101      	bne.n	80067de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80067da:	4b07      	ldr	r3, [pc, #28]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067dc:	e001      	b.n	80067e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80067de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4902      	ldr	r1, [pc, #8]	@ (80067f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067ea:	428b      	cmp	r3, r1
 80067ec:	d106      	bne.n	80067fc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80067ee:	4b02      	ldr	r3, [pc, #8]	@ (80067f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067f0:	e006      	b.n	8006800 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80067f2:	bf00      	nop
 80067f4:	40003800 	.word	0x40003800
 80067f8:	40003400 	.word	0x40003400
 80067fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006800:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006804:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006814:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006822:	f043 0204 	orr.w	r2, r3, #4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fb fabc 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006830:	e000      	b.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006832:	bf00      	nop
}
 8006834:	bf00      	nop
 8006836:	3720      	adds	r7, #32
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006848:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7fa fc84 	bl	8001158 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006864:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d155      	bne.n	800691a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d006      	beq.n	800688c <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8006888:	2b00      	cmp	r3, #0
 800688a:	d11e      	bne.n	80068ca <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a25      	ldr	r2, [pc, #148]	@ (8006928 <I2SEx_TxRxDMACplt+0xd0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <I2SEx_TxRxDMACplt+0x42>
 8006896:	4b25      	ldr	r3, [pc, #148]	@ (800692c <I2SEx_TxRxDMACplt+0xd4>)
 8006898:	e001      	b.n	800689e <I2SEx_TxRxDMACplt+0x46>
 800689a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4920      	ldr	r1, [pc, #128]	@ (8006928 <I2SEx_TxRxDMACplt+0xd0>)
 80068a6:	428b      	cmp	r3, r1
 80068a8:	d101      	bne.n	80068ae <I2SEx_TxRxDMACplt+0x56>
 80068aa:	4b20      	ldr	r3, [pc, #128]	@ (800692c <I2SEx_TxRxDMACplt+0xd4>)
 80068ac:	e001      	b.n	80068b2 <I2SEx_TxRxDMACplt+0x5a>
 80068ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0202 	bic.w	r2, r2, #2
 80068c6:	605a      	str	r2, [r3, #4]
 80068c8:	e01d      	b.n	8006906 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a12      	ldr	r2, [pc, #72]	@ (8006928 <I2SEx_TxRxDMACplt+0xd0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <I2SEx_TxRxDMACplt+0x90>
 80068e4:	4b11      	ldr	r3, [pc, #68]	@ (800692c <I2SEx_TxRxDMACplt+0xd4>)
 80068e6:	e001      	b.n	80068ec <I2SEx_TxRxDMACplt+0x94>
 80068e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	490d      	ldr	r1, [pc, #52]	@ (8006928 <I2SEx_TxRxDMACplt+0xd0>)
 80068f4:	428b      	cmp	r3, r1
 80068f6:	d101      	bne.n	80068fc <I2SEx_TxRxDMACplt+0xa4>
 80068f8:	4b0c      	ldr	r3, [pc, #48]	@ (800692c <I2SEx_TxRxDMACplt+0xd4>)
 80068fa:	e001      	b.n	8006900 <I2SEx_TxRxDMACplt+0xa8>
 80068fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006900:	f022 0202 	bic.w	r2, r2, #2
 8006904:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f7fa fc2c 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006920:	bf00      	nop
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40003800 	.word	0x40003800
 800692c:	40003400 	.word	0x40003400

08006930 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0203 	bic.w	r2, r2, #3
 800694c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a15      	ldr	r2, [pc, #84]	@ (80069a8 <I2SEx_TxRxDMAError+0x78>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d101      	bne.n	800695c <I2SEx_TxRxDMAError+0x2c>
 8006958:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <I2SEx_TxRxDMAError+0x7c>)
 800695a:	e001      	b.n	8006960 <I2SEx_TxRxDMAError+0x30>
 800695c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4910      	ldr	r1, [pc, #64]	@ (80069a8 <I2SEx_TxRxDMAError+0x78>)
 8006968:	428b      	cmp	r3, r1
 800696a:	d101      	bne.n	8006970 <I2SEx_TxRxDMAError+0x40>
 800696c:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <I2SEx_TxRxDMAError+0x7c>)
 800696e:	e001      	b.n	8006974 <I2SEx_TxRxDMAError+0x44>
 8006970:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006974:	f022 0203 	bic.w	r2, r2, #3
 8006978:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006992:	f043 0208 	orr.w	r2, r3, #8
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7fb fa04 	bl	8001da8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40003800 	.word	0x40003800
 80069ac:	40003400 	.word	0x40003400

080069b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	1c99      	adds	r1, r3, #2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80069c2:	881a      	ldrh	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d113      	bne.n	8006a0a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d106      	bne.n	8006a0a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f7fa fbb7 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	1c99      	adds	r1, r3, #2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6251      	str	r1, [r2, #36]	@ 0x24
 8006a26:	8819      	ldrh	r1, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa4 <I2SEx_TxISR_I2SExt+0x90>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d101      	bne.n	8006a36 <I2SEx_TxISR_I2SExt+0x22>
 8006a32:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <I2SEx_TxISR_I2SExt+0x94>)
 8006a34:	e001      	b.n	8006a3a <I2SEx_TxISR_I2SExt+0x26>
 8006a36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3b01      	subs	r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d121      	bne.n	8006a9a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a12      	ldr	r2, [pc, #72]	@ (8006aa4 <I2SEx_TxISR_I2SExt+0x90>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d101      	bne.n	8006a64 <I2SEx_TxISR_I2SExt+0x50>
 8006a60:	4b11      	ldr	r3, [pc, #68]	@ (8006aa8 <I2SEx_TxISR_I2SExt+0x94>)
 8006a62:	e001      	b.n	8006a68 <I2SEx_TxISR_I2SExt+0x54>
 8006a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	490d      	ldr	r1, [pc, #52]	@ (8006aa4 <I2SEx_TxISR_I2SExt+0x90>)
 8006a70:	428b      	cmp	r3, r1
 8006a72:	d101      	bne.n	8006a78 <I2SEx_TxISR_I2SExt+0x64>
 8006a74:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa8 <I2SEx_TxISR_I2SExt+0x94>)
 8006a76:	e001      	b.n	8006a7c <I2SEx_TxISR_I2SExt+0x68>
 8006a78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a80:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7fa fb6f 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40003800 	.word	0x40003800
 8006aa8:	40003400 	.word	0x40003400

08006aac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68d8      	ldr	r0, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	1c99      	adds	r1, r3, #2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006ac4:	b282      	uxth	r2, r0
 8006ac6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d113      	bne.n	8006b08 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006aee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d106      	bne.n	8006b08 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fa fb38 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ba0 <I2SEx_RxISR_I2SExt+0x90>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <I2SEx_RxISR_I2SExt+0x16>
 8006b22:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <I2SEx_RxISR_I2SExt+0x94>)
 8006b24:	e001      	b.n	8006b2a <I2SEx_RxISR_I2SExt+0x1a>
 8006b26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b2a:	68d8      	ldr	r0, [r3, #12]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	1c99      	adds	r1, r3, #2
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006b36:	b282      	uxth	r2, r0
 8006b38:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d121      	bne.n	8006b96 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a12      	ldr	r2, [pc, #72]	@ (8006ba0 <I2SEx_RxISR_I2SExt+0x90>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d101      	bne.n	8006b60 <I2SEx_RxISR_I2SExt+0x50>
 8006b5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <I2SEx_RxISR_I2SExt+0x94>)
 8006b5e:	e001      	b.n	8006b64 <I2SEx_RxISR_I2SExt+0x54>
 8006b60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	490d      	ldr	r1, [pc, #52]	@ (8006ba0 <I2SEx_RxISR_I2SExt+0x90>)
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	d101      	bne.n	8006b74 <I2SEx_RxISR_I2SExt+0x64>
 8006b70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba4 <I2SEx_RxISR_I2SExt+0x94>)
 8006b72:	e001      	b.n	8006b78 <I2SEx_RxISR_I2SExt+0x68>
 8006b74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b7c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d106      	bne.n	8006b96 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fa faf1 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	40003800 	.word	0x40003800
 8006ba4:	40003400 	.word	0x40003400

08006ba8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e267      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d075      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bc6:	4b88      	ldr	r3, [pc, #544]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 030c 	and.w	r3, r3, #12
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d00c      	beq.n	8006bec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd2:	4b85      	ldr	r3, [pc, #532]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d112      	bne.n	8006c04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bde:	4b82      	ldr	r3, [pc, #520]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bea:	d10b      	bne.n	8006c04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bec:	4b7e      	ldr	r3, [pc, #504]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d05b      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x108>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d157      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e242      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCC_OscConfig+0x74>
 8006c0e:	4b76      	ldr	r3, [pc, #472]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a75      	ldr	r2, [pc, #468]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	e01d      	b.n	8006c58 <HAL_RCC_OscConfig+0xb0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCC_OscConfig+0x98>
 8006c26:	4b70      	ldr	r3, [pc, #448]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a6f      	ldr	r2, [pc, #444]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c30:	6013      	str	r3, [r2, #0]
 8006c32:	4b6d      	ldr	r3, [pc, #436]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a6c      	ldr	r2, [pc, #432]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	e00b      	b.n	8006c58 <HAL_RCC_OscConfig+0xb0>
 8006c40:	4b69      	ldr	r3, [pc, #420]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a68      	ldr	r2, [pc, #416]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4b66      	ldr	r3, [pc, #408]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a65      	ldr	r2, [pc, #404]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d013      	beq.n	8006c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c60:	f7fb f922 	bl	8001ea8 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fb f91e 	bl	8001ea8 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	@ 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e207      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f0      	beq.n	8006c68 <HAL_RCC_OscConfig+0xc0>
 8006c86:	e014      	b.n	8006cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c88:	f7fb f90e 	bl	8001ea8 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c90:	f7fb f90a 	bl	8001ea8 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b64      	cmp	r3, #100	@ 0x64
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e1f3      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca2:	4b51      	ldr	r3, [pc, #324]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0xe8>
 8006cae:	e000      	b.n	8006cb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d063      	beq.n	8006d86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00b      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cca:	4b47      	ldr	r3, [pc, #284]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cd2:	2b08      	cmp	r3, #8
 8006cd4:	d11c      	bne.n	8006d10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cd6:	4b44      	ldr	r3, [pc, #272]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d116      	bne.n	8006d10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce2:	4b41      	ldr	r3, [pc, #260]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_RCC_OscConfig+0x152>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d001      	beq.n	8006cfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e1c7      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	4937      	ldr	r1, [pc, #220]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0e:	e03a      	b.n	8006d86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d18:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1e:	f7fb f8c3 	bl	8001ea8 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d26:	f7fb f8bf 	bl	8001ea8 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e1a8      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d38:	4b2b      	ldr	r3, [pc, #172]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d0f0      	beq.n	8006d26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d44:	4b28      	ldr	r3, [pc, #160]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	00db      	lsls	r3, r3, #3
 8006d52:	4925      	ldr	r1, [pc, #148]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	600b      	str	r3, [r1, #0]
 8006d58:	e015      	b.n	8006d86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d5a:	4b24      	ldr	r3, [pc, #144]	@ (8006dec <HAL_RCC_OscConfig+0x244>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d60:	f7fb f8a2 	bl	8001ea8 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d66:	e008      	b.n	8006d7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d68:	f7fb f89e 	bl	8001ea8 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d901      	bls.n	8006d7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e187      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f0      	bne.n	8006d68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0308 	and.w	r3, r3, #8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d036      	beq.n	8006e00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d016      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d9a:	4b15      	ldr	r3, [pc, #84]	@ (8006df0 <HAL_RCC_OscConfig+0x248>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da0:	f7fb f882 	bl	8001ea8 <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da8:	f7fb f87e 	bl	8001ea8 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e167      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dba:	4b0b      	ldr	r3, [pc, #44]	@ (8006de8 <HAL_RCC_OscConfig+0x240>)
 8006dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0f0      	beq.n	8006da8 <HAL_RCC_OscConfig+0x200>
 8006dc6:	e01b      	b.n	8006e00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <HAL_RCC_OscConfig+0x248>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dce:	f7fb f86b 	bl	8001ea8 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd4:	e00e      	b.n	8006df4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd6:	f7fb f867 	bl	8001ea8 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d907      	bls.n	8006df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e150      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
 8006de8:	40023800 	.word	0x40023800
 8006dec:	42470000 	.word	0x42470000
 8006df0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df4:	4b88      	ldr	r3, [pc, #544]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ea      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8097 	beq.w	8006f3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e12:	4b81      	ldr	r3, [pc, #516]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10f      	bne.n	8006e3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	4b7d      	ldr	r3, [pc, #500]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	4a7c      	ldr	r2, [pc, #496]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2e:	4b7a      	ldr	r3, [pc, #488]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3e:	4b77      	ldr	r3, [pc, #476]	@ (800701c <HAL_RCC_OscConfig+0x474>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d118      	bne.n	8006e7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e4a:	4b74      	ldr	r3, [pc, #464]	@ (800701c <HAL_RCC_OscConfig+0x474>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a73      	ldr	r2, [pc, #460]	@ (800701c <HAL_RCC_OscConfig+0x474>)
 8006e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e56:	f7fb f827 	bl	8001ea8 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e5c:	e008      	b.n	8006e70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5e:	f7fb f823 	bl	8001ea8 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e10c      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e70:	4b6a      	ldr	r3, [pc, #424]	@ (800701c <HAL_RCC_OscConfig+0x474>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0f0      	beq.n	8006e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x2ea>
 8006e84:	4b64      	ldr	r3, [pc, #400]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e88:	4a63      	ldr	r2, [pc, #396]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e8a:	f043 0301 	orr.w	r3, r3, #1
 8006e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e90:	e01c      	b.n	8006ecc <HAL_RCC_OscConfig+0x324>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d10c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x30c>
 8006e9a:	4b5f      	ldr	r3, [pc, #380]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9e:	4a5e      	ldr	r2, [pc, #376]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	f043 0304 	orr.w	r3, r3, #4
 8006ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea6:	4b5c      	ldr	r3, [pc, #368]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb2:	e00b      	b.n	8006ecc <HAL_RCC_OscConfig+0x324>
 8006eb4:	4b58      	ldr	r3, [pc, #352]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb8:	4a57      	ldr	r2, [pc, #348]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ec0:	4b55      	ldr	r3, [pc, #340]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec4:	4a54      	ldr	r2, [pc, #336]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006ec6:	f023 0304 	bic.w	r3, r3, #4
 8006eca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d015      	beq.n	8006f00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fa ffe8 	bl	8001ea8 <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eda:	e00a      	b.n	8006ef2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006edc:	f7fa ffe4 	bl	8001ea8 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e0cb      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ef2:	4b49      	ldr	r3, [pc, #292]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0ee      	beq.n	8006edc <HAL_RCC_OscConfig+0x334>
 8006efe:	e014      	b.n	8006f2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f00:	f7fa ffd2 	bl	8001ea8 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f08:	f7fa ffce 	bl	8001ea8 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e0b5      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1ee      	bne.n	8006f08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d105      	bne.n	8006f3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f30:	4b39      	ldr	r3, [pc, #228]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f34:	4a38      	ldr	r2, [pc, #224]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80a1 	beq.w	8007088 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f46:	4b34      	ldr	r3, [pc, #208]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 030c 	and.w	r3, r3, #12
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d05c      	beq.n	800700c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d141      	bne.n	8006fde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5a:	4b31      	ldr	r3, [pc, #196]	@ (8007020 <HAL_RCC_OscConfig+0x478>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f60:	f7fa ffa2 	bl	8001ea8 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fa ff9e 	bl	8001ea8 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e087      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	4b27      	ldr	r3, [pc, #156]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69da      	ldr	r2, [r3, #28]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	019b      	lsls	r3, r3, #6
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	041b      	lsls	r3, r3, #16
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	491b      	ldr	r1, [pc, #108]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <HAL_RCC_OscConfig+0x478>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb6:	f7fa ff77 	bl	8001ea8 <HAL_GetTick>
 8006fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fbe:	f7fa ff73 	bl	8001ea8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e05c      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fd0:	4b11      	ldr	r3, [pc, #68]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <HAL_RCC_OscConfig+0x416>
 8006fdc:	e054      	b.n	8007088 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fde:	4b10      	ldr	r3, [pc, #64]	@ (8007020 <HAL_RCC_OscConfig+0x478>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fa ff60 	bl	8001ea8 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fa ff5c 	bl	8001ea8 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e045      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffe:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <HAL_RCC_OscConfig+0x470>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x444>
 800700a:	e03d      	b.n	8007088 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d107      	bne.n	8007024 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e038      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
 8007018:	40023800 	.word	0x40023800
 800701c:	40007000 	.word	0x40007000
 8007020:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007024:	4b1b      	ldr	r3, [pc, #108]	@ (8007094 <HAL_RCC_OscConfig+0x4ec>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d028      	beq.n	8007084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800703c:	429a      	cmp	r2, r3
 800703e:	d121      	bne.n	8007084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800704a:	429a      	cmp	r2, r3
 800704c:	d11a      	bne.n	8007084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007054:	4013      	ands	r3, r2
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800705a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800705c:	4293      	cmp	r3, r2
 800705e:	d111      	bne.n	8007084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	3b01      	subs	r3, #1
 800706e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007070:	429a      	cmp	r2, r3
 8007072:	d107      	bne.n	8007084 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e000      	b.n	800708a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800

08007098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d101      	bne.n	80070ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0cc      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070ac:	4b68      	ldr	r3, [pc, #416]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d90c      	bls.n	80070d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ba:	4b65      	ldr	r3, [pc, #404]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c2:	4b63      	ldr	r3, [pc, #396]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e0b8      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d020      	beq.n	8007122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070ec:	4b59      	ldr	r3, [pc, #356]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4a58      	ldr	r2, [pc, #352]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d005      	beq.n	8007110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007104:	4b53      	ldr	r3, [pc, #332]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	4a52      	ldr	r2, [pc, #328]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800710e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007110:	4b50      	ldr	r3, [pc, #320]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	494d      	ldr	r1, [pc, #308]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	4313      	orrs	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d044      	beq.n	80071b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d107      	bne.n	8007146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007136:	4b47      	ldr	r3, [pc, #284]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d119      	bne.n	8007176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e07f      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d003      	beq.n	8007156 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007152:	2b03      	cmp	r3, #3
 8007154:	d107      	bne.n	8007166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007156:	4b3f      	ldr	r3, [pc, #252]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e06f      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007166:	4b3b      	ldr	r3, [pc, #236]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e067      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007176:	4b37      	ldr	r3, [pc, #220]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f023 0203 	bic.w	r2, r3, #3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	4934      	ldr	r1, [pc, #208]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007184:	4313      	orrs	r3, r2
 8007186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007188:	f7fa fe8e 	bl	8001ea8 <HAL_GetTick>
 800718c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718e:	e00a      	b.n	80071a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007190:	f7fa fe8a 	bl	8001ea8 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e04f      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f003 020c 	and.w	r2, r3, #12
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d1eb      	bne.n	8007190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b8:	4b25      	ldr	r3, [pc, #148]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d20c      	bcs.n	80071e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c6:	4b22      	ldr	r3, [pc, #136]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	b2d2      	uxtb	r2, r2
 80071cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ce:	4b20      	ldr	r3, [pc, #128]	@ (8007250 <HAL_RCC_ClockConfig+0x1b8>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d001      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e032      	b.n	8007246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d008      	beq.n	80071fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ec:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	4916      	ldr	r1, [pc, #88]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d009      	beq.n	800721e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800720a:	4b12      	ldr	r3, [pc, #72]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	490e      	ldr	r1, [pc, #56]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	4313      	orrs	r3, r2
 800721c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800721e:	f000 f821 	bl	8007264 <HAL_RCC_GetSysClockFreq>
 8007222:	4602      	mov	r2, r0
 8007224:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	091b      	lsrs	r3, r3, #4
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	490a      	ldr	r1, [pc, #40]	@ (8007258 <HAL_RCC_ClockConfig+0x1c0>)
 8007230:	5ccb      	ldrb	r3, [r1, r3]
 8007232:	fa22 f303 	lsr.w	r3, r2, r3
 8007236:	4a09      	ldr	r2, [pc, #36]	@ (800725c <HAL_RCC_ClockConfig+0x1c4>)
 8007238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800723a:	4b09      	ldr	r3, [pc, #36]	@ (8007260 <HAL_RCC_ClockConfig+0x1c8>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f7fa fdee 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40023c00 	.word	0x40023c00
 8007254:	40023800 	.word	0x40023800
 8007258:	0800bad4 	.word	0x0800bad4
 800725c:	20000000 	.word	0x20000000
 8007260:	20000004 	.word	0x20000004

08007264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007268:	b094      	sub	sp, #80	@ 0x50
 800726a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800727c:	4b79      	ldr	r3, [pc, #484]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 030c 	and.w	r3, r3, #12
 8007284:	2b08      	cmp	r3, #8
 8007286:	d00d      	beq.n	80072a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007288:	2b08      	cmp	r3, #8
 800728a:	f200 80e1 	bhi.w	8007450 <HAL_RCC_GetSysClockFreq+0x1ec>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d002      	beq.n	8007298 <HAL_RCC_GetSysClockFreq+0x34>
 8007292:	2b04      	cmp	r3, #4
 8007294:	d003      	beq.n	800729e <HAL_RCC_GetSysClockFreq+0x3a>
 8007296:	e0db      	b.n	8007450 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007298:	4b73      	ldr	r3, [pc, #460]	@ (8007468 <HAL_RCC_GetSysClockFreq+0x204>)
 800729a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800729c:	e0db      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800729e:	4b72      	ldr	r3, [pc, #456]	@ (8007468 <HAL_RCC_GetSysClockFreq+0x204>)
 80072a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072a2:	e0d8      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d063      	beq.n	8007382 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	099b      	lsrs	r3, r3, #6
 80072c0:	2200      	movs	r2, #0
 80072c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072d6:	4622      	mov	r2, r4
 80072d8:	462b      	mov	r3, r5
 80072da:	f04f 0000 	mov.w	r0, #0
 80072de:	f04f 0100 	mov.w	r1, #0
 80072e2:	0159      	lsls	r1, r3, #5
 80072e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072e8:	0150      	lsls	r0, r2, #5
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4621      	mov	r1, r4
 80072f0:	1a51      	subs	r1, r2, r1
 80072f2:	6139      	str	r1, [r7, #16]
 80072f4:	4629      	mov	r1, r5
 80072f6:	eb63 0301 	sbc.w	r3, r3, r1
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007308:	4659      	mov	r1, fp
 800730a:	018b      	lsls	r3, r1, #6
 800730c:	4651      	mov	r1, sl
 800730e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007312:	4651      	mov	r1, sl
 8007314:	018a      	lsls	r2, r1, #6
 8007316:	4651      	mov	r1, sl
 8007318:	ebb2 0801 	subs.w	r8, r2, r1
 800731c:	4659      	mov	r1, fp
 800731e:	eb63 0901 	sbc.w	r9, r3, r1
 8007322:	f04f 0200 	mov.w	r2, #0
 8007326:	f04f 0300 	mov.w	r3, #0
 800732a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800732e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007336:	4690      	mov	r8, r2
 8007338:	4699      	mov	r9, r3
 800733a:	4623      	mov	r3, r4
 800733c:	eb18 0303 	adds.w	r3, r8, r3
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	462b      	mov	r3, r5
 8007344:	eb49 0303 	adc.w	r3, r9, r3
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	f04f 0200 	mov.w	r2, #0
 800734e:	f04f 0300 	mov.w	r3, #0
 8007352:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007356:	4629      	mov	r1, r5
 8007358:	028b      	lsls	r3, r1, #10
 800735a:	4621      	mov	r1, r4
 800735c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007360:	4621      	mov	r1, r4
 8007362:	028a      	lsls	r2, r1, #10
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800736a:	2200      	movs	r2, #0
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800736e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007370:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007374:	f7f9 fa5e 	bl	8000834 <__aeabi_uldivmod>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4613      	mov	r3, r2
 800737e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007380:	e058      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007382:	4b38      	ldr	r3, [pc, #224]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	2200      	movs	r2, #0
 800738a:	4618      	mov	r0, r3
 800738c:	4611      	mov	r1, r2
 800738e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007392:	623b      	str	r3, [r7, #32]
 8007394:	2300      	movs	r3, #0
 8007396:	627b      	str	r3, [r7, #36]	@ 0x24
 8007398:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	f04f 0000 	mov.w	r0, #0
 80073a4:	f04f 0100 	mov.w	r1, #0
 80073a8:	0159      	lsls	r1, r3, #5
 80073aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073ae:	0150      	lsls	r0, r2, #5
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4641      	mov	r1, r8
 80073b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80073ba:	4649      	mov	r1, r9
 80073bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073d4:	ebb2 040a 	subs.w	r4, r2, sl
 80073d8:	eb63 050b 	sbc.w	r5, r3, fp
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	00eb      	lsls	r3, r5, #3
 80073e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ea:	00e2      	lsls	r2, r4, #3
 80073ec:	4614      	mov	r4, r2
 80073ee:	461d      	mov	r5, r3
 80073f0:	4643      	mov	r3, r8
 80073f2:	18e3      	adds	r3, r4, r3
 80073f4:	603b      	str	r3, [r7, #0]
 80073f6:	464b      	mov	r3, r9
 80073f8:	eb45 0303 	adc.w	r3, r5, r3
 80073fc:	607b      	str	r3, [r7, #4]
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800740a:	4629      	mov	r1, r5
 800740c:	028b      	lsls	r3, r1, #10
 800740e:	4621      	mov	r1, r4
 8007410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007414:	4621      	mov	r1, r4
 8007416:	028a      	lsls	r2, r1, #10
 8007418:	4610      	mov	r0, r2
 800741a:	4619      	mov	r1, r3
 800741c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741e:	2200      	movs	r2, #0
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	61fa      	str	r2, [r7, #28]
 8007424:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007428:	f7f9 fa04 	bl	8000834 <__aeabi_uldivmod>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	4613      	mov	r3, r2
 8007432:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007434:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x200>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	0c1b      	lsrs	r3, r3, #16
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	3301      	adds	r3, #1
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800744e:	e002      	b.n	8007456 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007450:	4b05      	ldr	r3, [pc, #20]	@ (8007468 <HAL_RCC_GetSysClockFreq+0x204>)
 8007452:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007458:	4618      	mov	r0, r3
 800745a:	3750      	adds	r7, #80	@ 0x50
 800745c:	46bd      	mov	sp, r7
 800745e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800
 8007468:	00f42400 	.word	0x00f42400

0800746c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007470:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <HAL_RCC_GetHCLKFreq+0x14>)
 8007472:	681b      	ldr	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000000 	.word	0x20000000

08007484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007488:	f7ff fff0 	bl	800746c <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4903      	ldr	r1, [pc, #12]	@ (80074a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	0800bae4 	.word	0x0800bae4

080074ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074b0:	f7ff ffdc 	bl	800746c <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0b5b      	lsrs	r3, r3, #13
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	@ (80074d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	0800bae4 	.word	0x0800bae4

080074d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d035      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074fc:	4b62      	ldr	r3, [pc, #392]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007502:	f7fa fcd1 	bl	8001ea8 <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007508:	e008      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800750a:	f7fa fccd 	bl	8001ea8 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e0b0      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800751c:	4b5b      	ldr	r3, [pc, #364]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f0      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	071b      	lsls	r3, r3, #28
 8007534:	4955      	ldr	r1, [pc, #340]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800753c:	4b52      	ldr	r3, [pc, #328]	@ (8007688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007542:	f7fa fcb1 	bl	8001ea8 <HAL_GetTick>
 8007546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007548:	e008      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800754a:	f7fa fcad 	bl	8001ea8 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e090      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800755c:	4b4b      	ldr	r3, [pc, #300]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8083 	beq.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	4b44      	ldr	r3, [pc, #272]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	4a43      	ldr	r2, [pc, #268]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007584:	6413      	str	r3, [r2, #64]	@ 0x40
 8007586:	4b41      	ldr	r3, [pc, #260]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007592:	4b3f      	ldr	r3, [pc, #252]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a3e      	ldr	r2, [pc, #248]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800759e:	f7fa fc83 	bl	8001ea8 <HAL_GetTick>
 80075a2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075a4:	e008      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a6:	f7fa fc7f 	bl	8001ea8 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e062      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80075b8:	4b35      	ldr	r3, [pc, #212]	@ (8007690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0f0      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075c4:	4b31      	ldr	r3, [pc, #196]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075cc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02f      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d028      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075e2:	4b2a      	ldr	r3, [pc, #168]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075ec:	4b29      	ldr	r3, [pc, #164]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075ee:	2201      	movs	r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075f2:	4b28      	ldr	r3, [pc, #160]	@ (8007694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075f8:	4a24      	ldr	r2, [pc, #144]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075fe:	4b23      	ldr	r3, [pc, #140]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b01      	cmp	r3, #1
 8007608:	d114      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800760a:	f7fa fc4d 	bl	8001ea8 <HAL_GetTick>
 800760e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007610:	e00a      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007612:	f7fa fc49 	bl	8001ea8 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007620:	4293      	cmp	r3, r2
 8007622:	d901      	bls.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e02a      	b.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	4b18      	ldr	r3, [pc, #96]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ee      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007640:	d10d      	bne.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007642:	4b12      	ldr	r3, [pc, #72]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007656:	490d      	ldr	r1, [pc, #52]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007658:	4313      	orrs	r3, r2
 800765a:	608b      	str	r3, [r1, #8]
 800765c:	e005      	b.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800765e:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	4a0a      	ldr	r2, [pc, #40]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007664:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007668:	6093      	str	r3, [r2, #8]
 800766a:	4b08      	ldr	r3, [pc, #32]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800766c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007676:	4905      	ldr	r1, [pc, #20]	@ (800768c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007678:	4313      	orrs	r3, r2
 800767a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	42470068 	.word	0x42470068
 800768c:	40023800 	.word	0x40023800
 8007690:	40007000 	.word	0x40007000
 8007694:	42470e40 	.word	0x42470e40

08007698 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d13f      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80076b6:	4b24      	ldr	r3, [pc, #144]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076be:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80076cc:	d12f      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80076ce:	4b1f      	ldr	r3, [pc, #124]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80076d0:	617b      	str	r3, [r7, #20]
          break;
 80076d2:	e02f      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e0:	d108      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076e2:	4b19      	ldr	r3, [pc, #100]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ea:	4a19      	ldr	r2, [pc, #100]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80076ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	e007      	b.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076f4:	4b14      	ldr	r3, [pc, #80]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076fc:	4a14      	ldr	r2, [pc, #80]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80076fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007702:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007704:	4b10      	ldr	r3, [pc, #64]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800770a:	099b      	lsrs	r3, r3, #6
 800770c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007718:	4b0b      	ldr	r3, [pc, #44]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800771a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800771e:	0f1b      	lsrs	r3, r3, #28
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	617b      	str	r3, [r7, #20]
          break;
 800772c:	e002      	b.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
          break;
 8007732:	bf00      	nop
        }
      }
      break;
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007736:	bf00      	nop
    }
  }
  return frequency;
 8007738:	697b      	ldr	r3, [r7, #20]
}
 800773a:	4618      	mov	r0, r3
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	40023800 	.word	0x40023800
 800774c:	00bb8000 	.word	0x00bb8000
 8007750:	00f42400 	.word	0x00f42400

08007754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e07b      	b.n	800785e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	2b00      	cmp	r3, #0
 800776c:	d108      	bne.n	8007780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007776:	d009      	beq.n	800778c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	61da      	str	r2, [r3, #28]
 800777e:	e005      	b.n	800778c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fa f8ea 	bl	8001980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007810:	ea42 0103 	orr.w	r1, r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007818:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	0c1b      	lsrs	r3, r3, #16
 800782a:	f003 0104 	and.w	r1, r3, #4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007832:	f003 0210 	and.w	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800784c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e042      	b.n	80078fe <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fa f9d9 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2224      	movs	r2, #36	@ 0x24
 8007896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f82c 	bl	8007908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800790c:	b0c0      	sub	sp, #256	@ 0x100
 800790e:	af00      	add	r7, sp, #0
 8007910:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007924:	68d9      	ldr	r1, [r3, #12]
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	ea40 0301 	orr.w	r3, r0, r1
 8007930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	431a      	orrs	r2, r3
 8007940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	431a      	orrs	r2, r3
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	4313      	orrs	r3, r2
 8007950:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007960:	f021 010c 	bic.w	r1, r1, #12
 8007964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800796e:	430b      	orrs	r3, r1
 8007970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007982:	6999      	ldr	r1, [r3, #24]
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	ea40 0301 	orr.w	r3, r0, r1
 800798e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b8f      	ldr	r3, [pc, #572]	@ (8007bd4 <UART_SetConfig+0x2cc>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d005      	beq.n	80079a8 <UART_SetConfig+0xa0>
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b8d      	ldr	r3, [pc, #564]	@ (8007bd8 <UART_SetConfig+0x2d0>)
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d104      	bne.n	80079b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079a8:	f7ff fd80 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 80079ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079b0:	e003      	b.n	80079ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079b2:	f7ff fd67 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 80079b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079be:	69db      	ldr	r3, [r3, #28]
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079c4:	f040 810c 	bne.w	8007be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079da:	4622      	mov	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	1891      	adds	r1, r2, r2
 80079e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079e2:	415b      	adcs	r3, r3
 80079e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079ea:	4621      	mov	r1, r4
 80079ec:	eb12 0801 	adds.w	r8, r2, r1
 80079f0:	4629      	mov	r1, r5
 80079f2:	eb43 0901 	adc.w	r9, r3, r1
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a0a:	4690      	mov	r8, r2
 8007a0c:	4699      	mov	r9, r3
 8007a0e:	4623      	mov	r3, r4
 8007a10:	eb18 0303 	adds.w	r3, r8, r3
 8007a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a18:	462b      	mov	r3, r5
 8007a1a:	eb49 0303 	adc.w	r3, r9, r3
 8007a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a36:	460b      	mov	r3, r1
 8007a38:	18db      	adds	r3, r3, r3
 8007a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	eb42 0303 	adc.w	r3, r2, r3
 8007a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a4c:	f7f8 fef2 	bl	8000834 <__aeabi_uldivmod>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4b61      	ldr	r3, [pc, #388]	@ (8007bdc <UART_SetConfig+0x2d4>)
 8007a56:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5a:	095b      	lsrs	r3, r3, #5
 8007a5c:	011c      	lsls	r4, r3, #4
 8007a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a70:	4642      	mov	r2, r8
 8007a72:	464b      	mov	r3, r9
 8007a74:	1891      	adds	r1, r2, r2
 8007a76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a78:	415b      	adcs	r3, r3
 8007a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a80:	4641      	mov	r1, r8
 8007a82:	eb12 0a01 	adds.w	sl, r2, r1
 8007a86:	4649      	mov	r1, r9
 8007a88:	eb43 0b01 	adc.w	fp, r3, r1
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007aa0:	4692      	mov	sl, r2
 8007aa2:	469b      	mov	fp, r3
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8007aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007acc:	460b      	mov	r3, r1
 8007ace:	18db      	adds	r3, r3, r3
 8007ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	eb42 0303 	adc.w	r3, r2, r3
 8007ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ae2:	f7f8 fea7 	bl	8000834 <__aeabi_uldivmod>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	4b3b      	ldr	r3, [pc, #236]	@ (8007bdc <UART_SetConfig+0x2d4>)
 8007aee:	fba3 2301 	umull	r2, r3, r3, r1
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	2264      	movs	r2, #100	@ 0x64
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	1acb      	subs	r3, r1, r3
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b02:	4b36      	ldr	r3, [pc, #216]	@ (8007bdc <UART_SetConfig+0x2d4>)
 8007b04:	fba3 2302 	umull	r2, r3, r3, r2
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b10:	441c      	add	r4, r3
 8007b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b24:	4642      	mov	r2, r8
 8007b26:	464b      	mov	r3, r9
 8007b28:	1891      	adds	r1, r2, r2
 8007b2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b34:	4641      	mov	r1, r8
 8007b36:	1851      	adds	r1, r2, r1
 8007b38:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b3a:	4649      	mov	r1, r9
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b40:	f04f 0200 	mov.w	r2, #0
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	00cb      	lsls	r3, r1, #3
 8007b50:	4651      	mov	r1, sl
 8007b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b56:	4651      	mov	r1, sl
 8007b58:	00ca      	lsls	r2, r1, #3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4642      	mov	r2, r8
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b68:	464b      	mov	r3, r9
 8007b6a:	460a      	mov	r2, r1
 8007b6c:	eb42 0303 	adc.w	r3, r2, r3
 8007b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b88:	460b      	mov	r3, r1
 8007b8a:	18db      	adds	r3, r3, r3
 8007b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b8e:	4613      	mov	r3, r2
 8007b90:	eb42 0303 	adc.w	r3, r2, r3
 8007b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b9e:	f7f8 fe49 	bl	8000834 <__aeabi_uldivmod>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8007bdc <UART_SetConfig+0x2d4>)
 8007ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	2164      	movs	r1, #100	@ 0x64
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	3332      	adds	r3, #50	@ 0x32
 8007bba:	4a08      	ldr	r2, [pc, #32]	@ (8007bdc <UART_SetConfig+0x2d4>)
 8007bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f003 0207 	and.w	r2, r3, #7
 8007bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4422      	add	r2, r4
 8007bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bd0:	e106      	b.n	8007de0 <UART_SetConfig+0x4d8>
 8007bd2:	bf00      	nop
 8007bd4:	40011000 	.word	0x40011000
 8007bd8:	40011400 	.word	0x40011400
 8007bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007bf2:	4642      	mov	r2, r8
 8007bf4:	464b      	mov	r3, r9
 8007bf6:	1891      	adds	r1, r2, r2
 8007bf8:	6239      	str	r1, [r7, #32]
 8007bfa:	415b      	adcs	r3, r3
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c02:	4641      	mov	r1, r8
 8007c04:	1854      	adds	r4, r2, r1
 8007c06:	4649      	mov	r1, r9
 8007c08:	eb43 0501 	adc.w	r5, r3, r1
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	f04f 0300 	mov.w	r3, #0
 8007c14:	00eb      	lsls	r3, r5, #3
 8007c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c1a:	00e2      	lsls	r2, r4, #3
 8007c1c:	4614      	mov	r4, r2
 8007c1e:	461d      	mov	r5, r3
 8007c20:	4643      	mov	r3, r8
 8007c22:	18e3      	adds	r3, r4, r3
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c28:	464b      	mov	r3, r9
 8007c2a:	eb45 0303 	adc.w	r3, r5, r3
 8007c2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	f04f 0300 	mov.w	r3, #0
 8007c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c4e:	4629      	mov	r1, r5
 8007c50:	008b      	lsls	r3, r1, #2
 8007c52:	4621      	mov	r1, r4
 8007c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c58:	4621      	mov	r1, r4
 8007c5a:	008a      	lsls	r2, r1, #2
 8007c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c60:	f7f8 fde8 	bl	8000834 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4b60      	ldr	r3, [pc, #384]	@ (8007dec <UART_SetConfig+0x4e4>)
 8007c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	011c      	lsls	r4, r3, #4
 8007c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c84:	4642      	mov	r2, r8
 8007c86:	464b      	mov	r3, r9
 8007c88:	1891      	adds	r1, r2, r2
 8007c8a:	61b9      	str	r1, [r7, #24]
 8007c8c:	415b      	adcs	r3, r3
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c94:	4641      	mov	r1, r8
 8007c96:	1851      	adds	r1, r2, r1
 8007c98:	6139      	str	r1, [r7, #16]
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	414b      	adcs	r3, r1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007cac:	4659      	mov	r1, fp
 8007cae:	00cb      	lsls	r3, r1, #3
 8007cb0:	4651      	mov	r1, sl
 8007cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cb6:	4651      	mov	r1, sl
 8007cb8:	00ca      	lsls	r2, r1, #3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cc8:	464b      	mov	r3, r9
 8007cca:	460a      	mov	r2, r1
 8007ccc:	eb42 0303 	adc.w	r3, r2, r3
 8007cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ce0:	f04f 0200 	mov.w	r2, #0
 8007ce4:	f04f 0300 	mov.w	r3, #0
 8007ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007cec:	4649      	mov	r1, r9
 8007cee:	008b      	lsls	r3, r1, #2
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cf6:	4641      	mov	r1, r8
 8007cf8:	008a      	lsls	r2, r1, #2
 8007cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cfe:	f7f8 fd99 	bl	8000834 <__aeabi_uldivmod>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	4b38      	ldr	r3, [pc, #224]	@ (8007dec <UART_SetConfig+0x4e4>)
 8007d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d0e:	095b      	lsrs	r3, r3, #5
 8007d10:	2264      	movs	r2, #100	@ 0x64
 8007d12:	fb02 f303 	mul.w	r3, r2, r3
 8007d16:	1acb      	subs	r3, r1, r3
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	3332      	adds	r3, #50	@ 0x32
 8007d1c:	4a33      	ldr	r2, [pc, #204]	@ (8007dec <UART_SetConfig+0x4e4>)
 8007d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d28:	441c      	add	r4, r3
 8007d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d2e:	2200      	movs	r2, #0
 8007d30:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d32:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d38:	4642      	mov	r2, r8
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	1891      	adds	r1, r2, r2
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	415b      	adcs	r3, r3
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d48:	4641      	mov	r1, r8
 8007d4a:	1851      	adds	r1, r2, r1
 8007d4c:	6039      	str	r1, [r7, #0]
 8007d4e:	4649      	mov	r1, r9
 8007d50:	414b      	adcs	r3, r1
 8007d52:	607b      	str	r3, [r7, #4]
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	f04f 0300 	mov.w	r3, #0
 8007d5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d60:	4659      	mov	r1, fp
 8007d62:	00cb      	lsls	r3, r1, #3
 8007d64:	4651      	mov	r1, sl
 8007d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d6a:	4651      	mov	r1, sl
 8007d6c:	00ca      	lsls	r2, r1, #3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4619      	mov	r1, r3
 8007d72:	4603      	mov	r3, r0
 8007d74:	4642      	mov	r2, r8
 8007d76:	189b      	adds	r3, r3, r2
 8007d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	eb42 0303 	adc.w	r3, r2, r3
 8007d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d90:	f04f 0200 	mov.w	r2, #0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	008b      	lsls	r3, r1, #2
 8007da0:	4641      	mov	r1, r8
 8007da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007da6:	4641      	mov	r1, r8
 8007da8:	008a      	lsls	r2, r1, #2
 8007daa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007dae:	f7f8 fd41 	bl	8000834 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <UART_SetConfig+0x4e4>)
 8007db8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	2164      	movs	r1, #100	@ 0x64
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	3332      	adds	r3, #50	@ 0x32
 8007dca:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <UART_SetConfig+0x4e4>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f003 020f 	and.w	r2, r3, #15
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4422      	add	r2, r4
 8007dde:	609a      	str	r2, [r3, #8]
}
 8007de0:	bf00      	nop
 8007de2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007de6:	46bd      	mov	sp, r7
 8007de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dec:	51eb851f 	.word	0x51eb851f

08007df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007df0:	b084      	sub	sp, #16
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	f107 001c 	add.w	r0, r7, #28
 8007dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d123      	bne.n	8007e52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007e1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d105      	bne.n	8007e46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f9dc 	bl	8008204 <USB_CoreReset>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73fb      	strb	r3, [r7, #15]
 8007e50:	e01b      	b.n	8007e8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9d0 	bl	8008204 <USB_CoreReset>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d106      	bne.n	8007e7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e7c:	e005      	b.n	8007e8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e8a:	7fbb      	ldrb	r3, [r7, #30]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d10b      	bne.n	8007ea8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f043 0206 	orr.w	r2, r3, #6
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f043 0220 	orr.w	r2, r3, #32
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eb4:	b004      	add	sp, #16
 8007eb6:	4770      	bx	lr

08007eb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f043 0201 	orr.w	r2, r3, #1
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f023 0201 	bic.w	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d115      	bne.n	8007f4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f2a:	200a      	movs	r0, #10
 8007f2c:	f7f9 ffc8 	bl	8001ec0 <HAL_Delay>
      ms += 10U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	330a      	adds	r3, #10
 8007f34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f956 	bl	80081e8 <USB_GetMode>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d01e      	beq.n	8007f80 <USB_SetCurrentMode+0x84>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f46:	d9f0      	bls.n	8007f2a <USB_SetCurrentMode+0x2e>
 8007f48:	e01a      	b.n	8007f80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d115      	bne.n	8007f7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007f5c:	200a      	movs	r0, #10
 8007f5e:	f7f9 ffaf 	bl	8001ec0 <HAL_Delay>
      ms += 10U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	330a      	adds	r3, #10
 8007f66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f93d 	bl	80081e8 <USB_GetMode>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <USB_SetCurrentMode+0x84>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f78:	d9f0      	bls.n	8007f5c <USB_SetCurrentMode+0x60>
 8007f7a:	e001      	b.n	8007f80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e005      	b.n	8007f8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f84:	d101      	bne.n	8007f8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fae:	d901      	bls.n	8007fb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e01b      	b.n	8007fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	daf2      	bge.n	8007fa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	019b      	lsls	r3, r3, #6
 8007fc4:	f043 0220 	orr.w	r2, r3, #32
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fd8:	d901      	bls.n	8007fde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e006      	b.n	8007fec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d0f0      	beq.n	8007fcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008010:	d901      	bls.n	8008016 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e018      	b.n	8008048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	daf2      	bge.n	8008004 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2210      	movs	r2, #16
 8008026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3301      	adds	r3, #1
 800802c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008034:	d901      	bls.n	800803a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e006      	b.n	8008048 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b10      	cmp	r3, #16
 8008044:	d0f0      	beq.n	8008028 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008054:	b480      	push	{r7}
 8008056:	b089      	sub	sp, #36	@ 0x24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	4611      	mov	r1, r2
 8008060:	461a      	mov	r2, r3
 8008062:	460b      	mov	r3, r1
 8008064:	71fb      	strb	r3, [r7, #7]
 8008066:	4613      	mov	r3, r2
 8008068:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008072:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d123      	bne.n	80080c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800807a:	88bb      	ldrh	r3, [r7, #4]
 800807c:	3303      	adds	r3, #3
 800807e:	089b      	lsrs	r3, r3, #2
 8008080:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008082:	2300      	movs	r3, #0
 8008084:	61bb      	str	r3, [r7, #24]
 8008086:	e018      	b.n	80080ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	031a      	lsls	r2, r3, #12
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4413      	add	r3, r2
 8008090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008094:	461a      	mov	r2, r3
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	3301      	adds	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	3301      	adds	r3, #1
 80080ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	3301      	adds	r3, #1
 80080b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	3301      	adds	r3, #1
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d3e2      	bcc.n	8008088 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3724      	adds	r7, #36	@ 0x24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b08b      	sub	sp, #44	@ 0x2c
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	089b      	lsrs	r3, r3, #2
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	f003 0303 	and.w	r3, r3, #3
 80080f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80080f6:	2300      	movs	r3, #0
 80080f8:	623b      	str	r3, [r7, #32]
 80080fa:	e014      	b.n	8008126 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008106:	601a      	str	r2, [r3, #0]
    pDest++;
 8008108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810a:	3301      	adds	r3, #1
 800810c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	3301      	adds	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	3301      	adds	r3, #1
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	3301      	adds	r3, #1
 800811e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	3301      	adds	r3, #1
 8008124:	623b      	str	r3, [r7, #32]
 8008126:	6a3a      	ldr	r2, [r7, #32]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	429a      	cmp	r2, r3
 800812c:	d3e6      	bcc.n	80080fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800812e:	8bfb      	ldrh	r3, [r7, #30]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01e      	beq.n	8008172 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800813e:	461a      	mov	r2, r3
 8008140:	f107 0310 	add.w	r3, r7, #16
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
 8008154:	b2da      	uxtb	r2, r3
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	701a      	strb	r2, [r3, #0]
      i++;
 800815a:	6a3b      	ldr	r3, [r7, #32]
 800815c:	3301      	adds	r3, #1
 800815e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008162:	3301      	adds	r3, #1
 8008164:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008166:	8bfb      	ldrh	r3, [r7, #30]
 8008168:	3b01      	subs	r3, #1
 800816a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800816c:	8bfb      	ldrh	r3, [r7, #30]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1ea      	bne.n	8008148 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008174:	4618      	mov	r0, r3
 8008176:	372c      	adds	r7, #44	@ 0x2c
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	695b      	ldr	r3, [r3, #20]
 800818c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008198:	68fb      	ldr	r3, [r7, #12]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b085      	sub	sp, #20
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80081c6:	78fb      	ldrb	r3, [r7, #3]
 80081c8:	015a      	lsls	r2, r3, #5
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80081da:	68bb      	ldr	r3, [r7, #8]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0301 	and.w	r3, r3, #1
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800821c:	d901      	bls.n	8008222 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e01b      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	daf2      	bge.n	8008210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	f043 0201 	orr.w	r2, r3, #1
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008246:	d901      	bls.n	800824c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e006      	b.n	800825a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b01      	cmp	r3, #1
 8008256:	d0f0      	beq.n	800823a <USB_CoreReset+0x36>

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008268:	b084      	sub	sp, #16
 800826a:	b580      	push	{r7, lr}
 800826c:	b086      	sub	sp, #24
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008288:	461a      	mov	r2, r3
 800828a:	2300      	movs	r3, #0
 800828c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008292:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d119      	bne.n	80082f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80082be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10a      	bne.n	80082dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082d4:	f043 0304 	orr.w	r3, r3, #4
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e014      	b.n	8008306 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082ea:	f023 0304 	bic.w	r3, r3, #4
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	e009      	b.n	8008306 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008300:	f023 0304 	bic.w	r3, r3, #4
 8008304:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008306:	2110      	movs	r1, #16
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fe43 	bl	8007f94 <USB_FlushTxFifo>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f7ff fe6d 	bl	8007ff8 <USB_FlushRxFifo>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	e015      	b.n	800835a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800833a:	461a      	mov	r2, r3
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834e:	461a      	mov	r2, r3
 8008350:	2300      	movs	r3, #0
 8008352:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	3301      	adds	r3, #1
 8008358:	613b      	str	r3, [r7, #16]
 800835a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800835e:	461a      	mov	r2, r3
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	4293      	cmp	r3, r2
 8008364:	d3e3      	bcc.n	800832e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a18      	ldr	r2, [pc, #96]	@ (80083d8 <USB_HostInit+0x170>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d10b      	bne.n	8008394 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008382:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a15      	ldr	r2, [pc, #84]	@ (80083dc <USB_HostInit+0x174>)
 8008388:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a14      	ldr	r2, [pc, #80]	@ (80083e0 <USB_HostInit+0x178>)
 800838e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008392:	e009      	b.n	80083a8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2280      	movs	r2, #128	@ 0x80
 8008398:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a11      	ldr	r2, [pc, #68]	@ (80083e4 <USB_HostInit+0x17c>)
 800839e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <USB_HostInit+0x180>)
 80083a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d105      	bne.n	80083bc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	f043 0210 	orr.w	r2, r3, #16
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	699a      	ldr	r2, [r3, #24]
 80083c0:	4b0a      	ldr	r3, [pc, #40]	@ (80083ec <USB_HostInit+0x184>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083d4:	b004      	add	sp, #16
 80083d6:	4770      	bx	lr
 80083d8:	40040000 	.word	0x40040000
 80083dc:	01000200 	.word	0x01000200
 80083e0:	00e00300 	.word	0x00e00300
 80083e4:	00600080 	.word	0x00600080
 80083e8:	004000e0 	.word	0x004000e0
 80083ec:	a3200008 	.word	0xa3200008

080083f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800840e:	f023 0303 	bic.w	r3, r3, #3
 8008412:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	78fb      	ldrb	r3, [r7, #3]
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	68f9      	ldr	r1, [r7, #12]
 8008424:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008428:	4313      	orrs	r3, r2
 800842a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d107      	bne.n	8008442 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008438:	461a      	mov	r2, r3
 800843a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800843e:	6053      	str	r3, [r2, #4]
 8008440:	e00c      	b.n	800845c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d107      	bne.n	8008458 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800844e:	461a      	mov	r2, r3
 8008450:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	e001      	b.n	800845c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e000      	b.n	800845e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800848a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008498:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800849a:	2064      	movs	r0, #100	@ 0x64
 800849c:	f7f9 fd10 	bl	8001ec0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80084ae:	200a      	movs	r0, #10
 80084b0:	f7f9 fd06 	bl	8001ec0 <HAL_Delay>

  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <USB_DriveVbus+0x44>
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d106      	bne.n	8008502 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008500:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800850c:	d109      	bne.n	8008522 <USB_DriveVbus+0x64>
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800851c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008520:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	0c5b      	lsrs	r3, r3, #17
 800854e:	f003 0303 	and.w	r3, r3, #3
}
 8008552:	4618      	mov	r0, r3
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	b29b      	uxth	r3, r3
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	461a      	mov	r2, r3
 800858e:	4603      	mov	r3, r0
 8008590:	70fb      	strb	r3, [r7, #3]
 8008592:	460b      	mov	r3, r1
 8008594:	70bb      	strb	r3, [r7, #2]
 8008596:	4613      	mov	r3, r2
 8008598:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80085a2:	78fb      	ldrb	r3, [r7, #3]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ae:	461a      	mov	r2, r3
 80085b0:	f04f 33ff 	mov.w	r3, #4294967295
 80085b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80085b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d87c      	bhi.n	80086b8 <USB_HC_Init+0x138>
 80085be:	a201      	add	r2, pc, #4	@ (adr r2, 80085c4 <USB_HC_Init+0x44>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	0800867b 	.word	0x0800867b
 80085cc:	080085d5 	.word	0x080085d5
 80085d0:	0800863d 	.word	0x0800863d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e0:	461a      	mov	r2, r3
 80085e2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80085e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80085e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	da10      	bge.n	8008612 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	440a      	add	r2, r1
 8008606:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800860a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800860e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008610:	e055      	b.n	80086be <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a6f      	ldr	r2, [pc, #444]	@ (80087d4 <USB_HC_Init+0x254>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d151      	bne.n	80086be <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	015a      	lsls	r2, r3, #5
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	4413      	add	r3, r2
 8008622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	0151      	lsls	r1, r2, #5
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	440a      	add	r2, r1
 8008630:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008634:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008638:	60d3      	str	r3, [r2, #12]
      break;
 800863a:	e040      	b.n	80086be <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008648:	461a      	mov	r2, r3
 800864a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800864e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008654:	2b00      	cmp	r3, #0
 8008656:	da34      	bge.n	80086c2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	015a      	lsls	r2, r3, #5
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	4413      	add	r3, r2
 8008660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	0151      	lsls	r1, r2, #5
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	440a      	add	r2, r1
 800866e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008676:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008678:	e023      	b.n	80086c2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800867a:	78fb      	ldrb	r3, [r7, #3]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4413      	add	r3, r2
 8008682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008686:	461a      	mov	r2, r3
 8008688:	f240 2325 	movw	r3, #549	@ 0x225
 800868c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800868e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008692:	2b00      	cmp	r3, #0
 8008694:	da17      	bge.n	80086c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	4413      	add	r3, r2
 800869e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	78fa      	ldrb	r2, [r7, #3]
 80086a6:	0151      	lsls	r1, r2, #5
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	440a      	add	r2, r1
 80086ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086b0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80086b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80086b6:	e006      	b.n	80086c6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	77fb      	strb	r3, [r7, #31]
      break;
 80086bc:	e004      	b.n	80086c8 <USB_HC_Init+0x148>
      break;
 80086be:	bf00      	nop
 80086c0:	e002      	b.n	80086c8 <USB_HC_Init+0x148>
      break;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <USB_HC_Init+0x148>
      break;
 80086c6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80086c8:	78fb      	ldrb	r3, [r7, #3]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086d4:	461a      	mov	r2, r3
 80086d6:	2300      	movs	r3, #0
 80086d8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	015a      	lsls	r2, r3, #5
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	4413      	add	r3, r2
 80086e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	0151      	lsls	r1, r2, #5
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	440a      	add	r2, r1
 80086f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	2101      	movs	r1, #1
 800870a:	fa01 f303 	lsl.w	r3, r1, r3
 800870e:	6939      	ldr	r1, [r7, #16]
 8008710:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008714:	4313      	orrs	r3, r2
 8008716:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008728:	2b00      	cmp	r3, #0
 800872a:	da03      	bge.n	8008734 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800872c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	e001      	b.n	8008738 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff fef9 	bl	8008530 <USB_GetHostSpeed>
 800873e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008740:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008744:	2b02      	cmp	r3, #2
 8008746:	d106      	bne.n	8008756 <USB_HC_Init+0x1d6>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d003      	beq.n	8008756 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800874e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e001      	b.n	800875a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800875a:	787b      	ldrb	r3, [r7, #1]
 800875c:	059b      	lsls	r3, r3, #22
 800875e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008762:	78bb      	ldrb	r3, [r7, #2]
 8008764:	02db      	lsls	r3, r3, #11
 8008766:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800876a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800876c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008770:	049b      	lsls	r3, r3, #18
 8008772:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008776:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008778:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800877a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800877e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	431a      	orrs	r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008788:	78fa      	ldrb	r2, [r7, #3]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	440a      	add	r2, r1
 8008790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008794:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008798:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800879a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d003      	beq.n	80087aa <USB_HC_Init+0x22a>
 80087a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d10f      	bne.n	80087ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80087ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3720      	adds	r7, #32
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	40040000 	.word	0x40040000

080087d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b08c      	sub	sp, #48	@ 0x30
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	4613      	mov	r3, r2
 80087e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80087f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a5d      	ldr	r2, [pc, #372]	@ (8008970 <USB_HC_StartXfer+0x198>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d12f      	bne.n	800885e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80087fe:	79fb      	ldrb	r3, [r7, #7]
 8008800:	2b01      	cmp	r3, #1
 8008802:	d11c      	bne.n	800883e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	7c9b      	ldrb	r3, [r3, #18]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <USB_HC_StartXfer+0x3c>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	7c9b      	ldrb	r3, [r3, #18]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d124      	bne.n	800885e <USB_HC_StartXfer+0x86>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	799b      	ldrb	r3, [r3, #6]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d120      	bne.n	800885e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	015a      	lsls	r2, r3, #5
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	4413      	add	r3, r2
 8008824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	0151      	lsls	r1, r2, #5
 800882e:	6a3a      	ldr	r2, [r7, #32]
 8008830:	440a      	add	r2, r1
 8008832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800883a:	60d3      	str	r3, [r2, #12]
 800883c:	e00f      	b.n	800885e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <USB_HC_StartXfer+0x86>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	795b      	ldrb	r3, [r3, #5]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d107      	bne.n	800885e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	785b      	ldrb	r3, [r3, #1]
 8008852:	4619      	mov	r1, r3
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 fb6b 	bl	8008f30 <USB_DoPing>
        return HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	e232      	b.n	8008cc4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	799b      	ldrb	r3, [r3, #6]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d158      	bne.n	8008918 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008866:	2301      	movs	r3, #1
 8008868:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	78db      	ldrb	r3, [r3, #3]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d007      	beq.n	8008882 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008872:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	8a92      	ldrh	r2, [r2, #20]
 8008878:	fb03 f202 	mul.w	r2, r3, r2
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	61da      	str	r2, [r3, #28]
 8008880:	e07c      	b.n	800897c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	7c9b      	ldrb	r3, [r3, #18]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d130      	bne.n	80088ec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008890:	d918      	bls.n	80088c4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	8a9b      	ldrh	r3, [r3, #20]
 8008896:	461a      	mov	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d003      	beq.n	80088b4 <USB_HC_StartXfer+0xdc>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d103      	bne.n	80088bc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2202      	movs	r2, #2
 80088b8:	60da      	str	r2, [r3, #12]
 80088ba:	e05f      	b.n	800897c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2201      	movs	r2, #1
 80088c0:	60da      	str	r2, [r3, #12]
 80088c2:	e05b      	b.n	800897c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6a1a      	ldr	r2, [r3, #32]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d007      	beq.n	80088e4 <USB_HC_StartXfer+0x10c>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d003      	beq.n	80088e4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2204      	movs	r2, #4
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	e04b      	b.n	800897c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	2203      	movs	r2, #3
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e047      	b.n	800897c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d10d      	bne.n	800890e <USB_HC_StartXfer+0x136>
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	8a92      	ldrh	r2, [r2, #20]
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d907      	bls.n	800890e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	8a92      	ldrh	r2, [r2, #20]
 8008904:	fb03 f202 	mul.w	r2, r3, r2
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	61da      	str	r2, [r3, #28]
 800890c:	e036      	b.n	800897c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6a1a      	ldr	r2, [r3, #32]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	61da      	str	r2, [r3, #28]
 8008916:	e031      	b.n	800897c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d018      	beq.n	8008952 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	8a92      	ldrh	r2, [r2, #20]
 8008928:	4413      	add	r3, r2
 800892a:	3b01      	subs	r3, #1
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	8a92      	ldrh	r2, [r2, #20]
 8008930:	fbb3 f3f2 	udiv	r3, r3, r2
 8008934:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008936:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008938:	8b7b      	ldrh	r3, [r7, #26]
 800893a:	429a      	cmp	r2, r3
 800893c:	d90b      	bls.n	8008956 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800893e:	8b7b      	ldrh	r3, [r7, #26]
 8008940:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008942:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	8a92      	ldrh	r2, [r2, #20]
 8008948:	fb03 f202 	mul.w	r2, r3, r2
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	61da      	str	r2, [r3, #28]
 8008950:	e001      	b.n	8008956 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008952:	2301      	movs	r3, #1
 8008954:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800895e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	8a92      	ldrh	r2, [r2, #20]
 8008964:	fb03 f202 	mul.w	r2, r3, r2
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	61da      	str	r2, [r3, #28]
 800896c:	e006      	b.n	800897c <USB_HC_StartXfer+0x1a4>
 800896e:	bf00      	nop
 8008970:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6a1a      	ldr	r2, [r3, #32]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008984:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008986:	04d9      	lsls	r1, r3, #19
 8008988:	4ba3      	ldr	r3, [pc, #652]	@ (8008c18 <USB_HC_StartXfer+0x440>)
 800898a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800898c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	7d9b      	ldrb	r3, [r3, #22]
 8008992:	075b      	lsls	r3, r3, #29
 8008994:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008998:	69f9      	ldr	r1, [r7, #28]
 800899a:	0148      	lsls	r0, r1, #5
 800899c:	6a39      	ldr	r1, [r7, #32]
 800899e:	4401      	add	r1, r0
 80089a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	6999      	ldr	r1, [r3, #24]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089be:	460a      	mov	r2, r1
 80089c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	bf0c      	ite	eq
 80089d2:	2301      	moveq	r3, #1
 80089d4:	2300      	movne	r3, #0
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69fa      	ldr	r2, [r7, #28]
 80089ea:	0151      	lsls	r1, r2, #5
 80089ec:	6a3a      	ldr	r2, [r7, #32]
 80089ee:	440a      	add	r2, r1
 80089f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	7e7b      	ldrb	r3, [r7, #25]
 8008a0a:	075b      	lsls	r3, r3, #29
 8008a0c:	69f9      	ldr	r1, [r7, #28]
 8008a0e:	0148      	lsls	r0, r1, #5
 8008a10:	6a39      	ldr	r1, [r7, #32]
 8008a12:	4401      	add	r1, r0
 8008a14:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	799b      	ldrb	r3, [r3, #6]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	f040 80c3 	bne.w	8008bac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	7c5b      	ldrb	r3, [r3, #17]
 8008a2a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a30:	4313      	orrs	r3, r2
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008a42:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	015a      	lsls	r2, r3, #5
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	0151      	lsls	r1, r2, #5
 8008a56:	6a3a      	ldr	r2, [r7, #32]
 8008a58:	440a      	add	r2, r1
 8008a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a5e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	79db      	ldrb	r3, [r3, #7]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d123      	bne.n	8008ab4 <USB_HC_StartXfer+0x2dc>
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	78db      	ldrb	r3, [r3, #3]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d11f      	bne.n	8008ab4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	6a3a      	ldr	r2, [r7, #32]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a92:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	69fa      	ldr	r2, [r7, #28]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	7c9b      	ldrb	r3, [r3, #18]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d003      	beq.n	8008ac4 <USB_HC_StartXfer+0x2ec>
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	7c9b      	ldrb	r3, [r3, #18]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d117      	bne.n	8008af4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d113      	bne.n	8008af4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	78db      	ldrb	r3, [r3, #3]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d10f      	bne.n	8008af4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	015a      	lsls	r2, r3, #5
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	4413      	add	r3, r2
 8008adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	0151      	lsls	r1, r2, #5
 8008ae6:	6a3a      	ldr	r2, [r7, #32]
 8008ae8:	440a      	add	r2, r1
 8008aea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008af2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	7c9b      	ldrb	r3, [r3, #18]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d162      	bne.n	8008bc2 <USB_HC_StartXfer+0x3ea>
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	78db      	ldrb	r3, [r3, #3]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d15e      	bne.n	8008bc2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d858      	bhi.n	8008bc0 <USB_HC_StartXfer+0x3e8>
 8008b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <USB_HC_StartXfer+0x33c>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b47 	.word	0x08008b47
 8008b1c:	08008b69 	.word	0x08008b69
 8008b20:	08008b8b 	.word	0x08008b8b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b42:	6053      	str	r3, [r2, #4]
          break;
 8008b44:	e03d      	b.n	8008bc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	69fa      	ldr	r2, [r7, #28]
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	6a3a      	ldr	r2, [r7, #32]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b60:	f043 030e 	orr.w	r3, r3, #14
 8008b64:	6053      	str	r3, [r2, #4]
          break;
 8008b66:	e02c      	b.n	8008bc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	69fa      	ldr	r2, [r7, #28]
 8008b78:	0151      	lsls	r1, r2, #5
 8008b7a:	6a3a      	ldr	r2, [r7, #32]
 8008b7c:	440a      	add	r2, r1
 8008b7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b86:	6053      	str	r3, [r2, #4]
          break;
 8008b88:	e01b      	b.n	8008bc2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	0151      	lsls	r1, r2, #5
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	440a      	add	r2, r1
 8008ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ba8:	6053      	str	r3, [r2, #4]
          break;
 8008baa:	e00a      	b.n	8008bc2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bb8:	461a      	mov	r2, r3
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6053      	str	r3, [r2, #4]
 8008bbe:	e000      	b.n	8008bc2 <USB_HC_StartXfer+0x3ea>
          break;
 8008bc0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	015a      	lsls	r2, r3, #5
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	4413      	add	r3, r2
 8008bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bd8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	78db      	ldrb	r3, [r3, #3]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	e003      	b.n	8008bf4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bf2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bfa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c08:	461a      	mov	r2, r3
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d003      	beq.n	8008c1c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e055      	b.n	8008cc4 <USB_HC_StartXfer+0x4ec>
 8008c18:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	78db      	ldrb	r3, [r3, #3]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d14e      	bne.n	8008cc2 <USB_HC_StartXfer+0x4ea>
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d04a      	beq.n	8008cc2 <USB_HC_StartXfer+0x4ea>
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	79db      	ldrb	r3, [r3, #7]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d146      	bne.n	8008cc2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	7c9b      	ldrb	r3, [r3, #18]
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d831      	bhi.n	8008ca0 <USB_HC_StartXfer+0x4c8>
 8008c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c44 <USB_HC_StartXfer+0x46c>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c55 	.word	0x08008c55
 8008c48:	08008c79 	.word	0x08008c79
 8008c4c:	08008c55 	.word	0x08008c55
 8008c50:	08008c79 	.word	0x08008c79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	3303      	adds	r3, #3
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c5e:	8afa      	ldrh	r2, [r7, #22]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d91c      	bls.n	8008ca4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699b      	ldr	r3, [r3, #24]
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c76:	e015      	b.n	8008ca4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	3303      	adds	r3, #3
 8008c7e:	089b      	lsrs	r3, r3, #2
 8008c80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c82:	8afa      	ldrh	r2, [r7, #22]
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d90a      	bls.n	8008ca8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c9e:	e003      	b.n	8008ca8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008ca0:	bf00      	nop
 8008ca2:	e002      	b.n	8008caa <USB_HC_StartXfer+0x4d2>
        break;
 8008ca4:	bf00      	nop
 8008ca6:	e000      	b.n	8008caa <USB_HC_StartXfer+0x4d2>
        break;
 8008ca8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	6999      	ldr	r1, [r3, #24]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	785a      	ldrb	r2, [r3, #1]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2000      	movs	r0, #0
 8008cba:	9000      	str	r0, [sp, #0]
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff f9c9 	bl	8008054 <USB_WritePacket>
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3728      	adds	r7, #40	@ 0x28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	b29b      	uxth	r3, r3
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr

08008cee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008cee:	b480      	push	{r7}
 8008cf0:	b089      	sub	sp, #36	@ 0x24
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008d02:	2300      	movs	r3, #0
 8008d04:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	0c9b      	lsrs	r3, r3, #18
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	0fdb      	lsrs	r3, r3, #31
 8008d2c:	f003 0301 	and.w	r3, r3, #1
 8008d30:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	0fdb      	lsrs	r3, r3, #31
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d10d      	bne.n	8008d70 <USB_HC_Halt+0x82>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <USB_HC_Halt+0x82>
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d002      	beq.n	8008d6c <USB_HC_Halt+0x7e>
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d101      	bne.n	8008d70 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e0d8      	b.n	8008f22 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <USB_HC_Halt+0x8e>
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d173      	bne.n	8008e64 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d9a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d14a      	bne.n	8008e3e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d133      	bne.n	8008e1c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dd2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008df2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	3301      	adds	r3, #1
 8008df8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e00:	d82e      	bhi.n	8008e60 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e18:	d0ec      	beq.n	8008df4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e1a:	e081      	b.n	8008f20 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	0151      	lsls	r1, r2, #5
 8008e2e:	69fa      	ldr	r2, [r7, #28]
 8008e30:	440a      	add	r2, r1
 8008e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e3a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e3c:	e070      	b.n	8008f20 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	0151      	lsls	r1, r2, #5
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	440a      	add	r2, r1
 8008e54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e5c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e5e:	e05f      	b.n	8008f20 <USB_HC_Halt+0x232>
            break;
 8008e60:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008e62:	e05d      	b.n	8008f20 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	69ba      	ldr	r2, [r7, #24]
 8008e74:	0151      	lsls	r1, r2, #5
 8008e76:	69fa      	ldr	r2, [r7, #28]
 8008e78:	440a      	add	r2, r1
 8008e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e82:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d133      	bne.n	8008efc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008eb2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	69fa      	ldr	r2, [r7, #28]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ece:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ed2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ee0:	d81d      	bhi.n	8008f1e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ef8:	d0ec      	beq.n	8008ed4 <USB_HC_Halt+0x1e6>
 8008efa:	e011      	b.n	8008f20 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	e000      	b.n	8008f20 <USB_HC_Halt+0x232>
          break;
 8008f1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3724      	adds	r7, #36	@ 0x24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008f44:	2301      	movs	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	04da      	lsls	r2, r3, #19
 8008f4c:	4b15      	ldr	r3, [pc, #84]	@ (8008fa4 <USB_DoPing+0x74>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	0151      	lsls	r1, r2, #5
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	440a      	add	r2, r1
 8008f58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f8e:	461a      	mov	r2, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	1ff80000 	.word	0x1ff80000

08008fa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7fe ff8c 	bl	8007eda <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fc2:	2110      	movs	r1, #16
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7fe ffe5 	bl	8007f94 <USB_FlushTxFifo>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff f80f 	bl	8007ff8 <USB_FlushRxFifo>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
 8008fe8:	e01f      	b.n	800902a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009000:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009008:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009010:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	015a      	lsls	r2, r3, #5
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	4413      	add	r3, r2
 800901a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800901e:	461a      	mov	r2, r3
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	3301      	adds	r3, #1
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b0f      	cmp	r3, #15
 800902e:	d9dc      	bls.n	8008fea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009030:	2300      	movs	r3, #0
 8009032:	61bb      	str	r3, [r7, #24]
 8009034:	e034      	b.n	80090a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	4413      	add	r3, r2
 800903e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800904c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800905c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906a:	461a      	mov	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	3301      	adds	r3, #1
 8009074:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800907c:	d80c      	bhi.n	8009098 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	015a      	lsls	r2, r3, #5
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	4413      	add	r3, r2
 8009086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009094:	d0ec      	beq.n	8009070 <USB_StopHost+0xc8>
 8009096:	e000      	b.n	800909a <USB_StopHost+0xf2>
        break;
 8009098:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	3301      	adds	r3, #1
 800909e:	61bb      	str	r3, [r7, #24]
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	d9c7      	bls.n	8009036 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80090ac:	461a      	mov	r2, r3
 80090ae:	f04f 33ff 	mov.w	r3, #4294967295
 80090b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f7fe fefb 	bl	8007eb8 <USB_EnableGlobalInt>

  return ret;
 80090c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3720      	adds	r7, #32
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b089      	sub	sp, #36	@ 0x24
 80090d0:	af04      	add	r7, sp, #16
 80090d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80090d4:	2301      	movs	r3, #1
 80090d6:	2202      	movs	r2, #2
 80090d8:	2102      	movs	r1, #2
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fc85 	bl	80099ea <USBH_FindInterface>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090e4:	7bfb      	ldrb	r3, [r7, #15]
 80090e6:	2bff      	cmp	r3, #255	@ 0xff
 80090e8:	d002      	beq.n	80090f0 <USBH_CDC_InterfaceInit+0x24>
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d901      	bls.n	80090f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090f0:	2302      	movs	r3, #2
 80090f2:	e13d      	b.n	8009370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fc5a 	bl	80099b2 <USBH_SelectInterface>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009108:	2302      	movs	r3, #2
 800910a:	e131      	b.n	8009370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009112:	2050      	movs	r0, #80	@ 0x50
 8009114:	f002 fb84 	bl	800b820 <malloc>
 8009118:	4603      	mov	r3, r0
 800911a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800912c:	2302      	movs	r3, #2
 800912e:	e11f      	b.n	8009370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009130:	2250      	movs	r2, #80	@ 0x50
 8009132:	2100      	movs	r1, #0
 8009134:	68b8      	ldr	r0, [r7, #8]
 8009136:	f002 fc31 	bl	800b99c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	211a      	movs	r1, #26
 8009140:	fb01 f303 	mul.w	r3, r1, r3
 8009144:	4413      	add	r3, r2
 8009146:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	b25b      	sxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	da15      	bge.n	800917e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	211a      	movs	r1, #26
 8009158:	fb01 f303 	mul.w	r3, r1, r3
 800915c:	4413      	add	r3, r2
 800915e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009162:	781a      	ldrb	r2, [r3, #0]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	211a      	movs	r1, #26
 800916e:	fb01 f303 	mul.w	r3, r1, r3
 8009172:	4413      	add	r3, r2
 8009174:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009178:	881a      	ldrh	r2, [r3, #0]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	4619      	mov	r1, r3
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 ffbe 	bl	800b106 <USBH_AllocPipe>
 800918a:	4603      	mov	r3, r0
 800918c:	461a      	mov	r2, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	7819      	ldrb	r1, [r3, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7858      	ldrb	r0, [r3, #1]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	8952      	ldrh	r2, [r2, #10]
 80091aa:	9202      	str	r2, [sp, #8]
 80091ac:	2203      	movs	r2, #3
 80091ae:	9201      	str	r2, [sp, #4]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	4623      	mov	r3, r4
 80091b4:	4602      	mov	r2, r0
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 ff76 	bl	800b0a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f002 fa85 	bl	800b6d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80091ca:	2300      	movs	r3, #0
 80091cc:	2200      	movs	r2, #0
 80091ce:	210a      	movs	r1, #10
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fc0a 	bl	80099ea <USBH_FindInterface>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2bff      	cmp	r3, #255	@ 0xff
 80091de:	d002      	beq.n	80091e6 <USBH_CDC_InterfaceInit+0x11a>
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d901      	bls.n	80091ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	e0c2      	b.n	8009370 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	211a      	movs	r1, #26
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da16      	bge.n	8009230 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	211a      	movs	r1, #26
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	4413      	add	r3, r2
 800920e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009212:	781a      	ldrb	r2, [r3, #0]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	211a      	movs	r1, #26
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009228:	881a      	ldrh	r2, [r3, #0]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	835a      	strh	r2, [r3, #26]
 800922e:	e015      	b.n	800925c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	211a      	movs	r1, #26
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	4413      	add	r3, r2
 800923c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	211a      	movs	r1, #26
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	4413      	add	r3, r2
 8009252:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009256:	881a      	ldrh	r2, [r3, #0]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	211a      	movs	r1, #26
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	b25b      	sxtb	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	da16      	bge.n	80092a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	211a      	movs	r1, #26
 800927a:	fb01 f303 	mul.w	r3, r1, r3
 800927e:	4413      	add	r3, r2
 8009280:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	211a      	movs	r1, #26
 8009290:	fb01 f303 	mul.w	r3, r1, r3
 8009294:	4413      	add	r3, r2
 8009296:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800929a:	881a      	ldrh	r2, [r3, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	835a      	strh	r2, [r3, #26]
 80092a0:	e015      	b.n	80092ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	211a      	movs	r1, #26
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80092b2:	781a      	ldrb	r2, [r3, #0]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	211a      	movs	r1, #26
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092c8:	881a      	ldrh	r2, [r3, #0]
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	7b9b      	ldrb	r3, [r3, #14]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 ff16 	bl	800b106 <USBH_AllocPipe>
 80092da:	4603      	mov	r3, r0
 80092dc:	461a      	mov	r2, r3
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	7bdb      	ldrb	r3, [r3, #15]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 ff0c 	bl	800b106 <USBH_AllocPipe>
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	7b59      	ldrb	r1, [r3, #13]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	7b98      	ldrb	r0, [r3, #14]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	8b12      	ldrh	r2, [r2, #24]
 800930e:	9202      	str	r2, [sp, #8]
 8009310:	2202      	movs	r2, #2
 8009312:	9201      	str	r2, [sp, #4]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4623      	mov	r3, r4
 8009318:	4602      	mov	r2, r0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f001 fec4 	bl	800b0a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7b19      	ldrb	r1, [r3, #12]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	7bd8      	ldrb	r0, [r3, #15]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	8b52      	ldrh	r2, [r2, #26]
 8009338:	9202      	str	r2, [sp, #8]
 800933a:	2202      	movs	r2, #2
 800933c:	9201      	str	r2, [sp, #4]
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4623      	mov	r3, r4
 8009342:	4602      	mov	r2, r0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 feaf 	bl	800b0a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	7b5b      	ldrb	r3, [r3, #13]
 8009356:	2200      	movs	r2, #0
 8009358:	4619      	mov	r1, r3
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f002 f9ba 	bl	800b6d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	7b1b      	ldrb	r3, [r3, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f002 f9b3 	bl	800b6d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	bd90      	pop	{r4, r7, pc}

08009378 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00e      	beq.n	80093b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fea4 	bl	800b0e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f001 fecf 	bl	800b148 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	7b1b      	ldrb	r3, [r3, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00e      	beq.n	80093d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	7b1b      	ldrb	r3, [r3, #12]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 fe91 	bl	800b0e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	7b1b      	ldrb	r3, [r3, #12]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f001 febc 	bl	800b148 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2200      	movs	r2, #0
 80093d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	7b5b      	ldrb	r3, [r3, #13]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00e      	beq.n	80093fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	7b5b      	ldrb	r3, [r3, #13]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 fe7e 	bl	800b0e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	7b5b      	ldrb	r3, [r3, #13]
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 fea9 	bl	800b148 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00b      	beq.n	8009420 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	4618      	mov	r0, r3
 8009412:	f002 fa0d 	bl	800b830 <free>
    phost->pActiveClass->pData = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800941c:	2200      	movs	r2, #0
 800941e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3340      	adds	r3, #64	@ 0x40
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f8b1 	bl	80095aa <GetLineCoding>
 8009448:	4603      	mov	r3, r0
 800944a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800944c:	7afb      	ldrb	r3, [r7, #11]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d105      	bne.n	800945e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009458:	2102      	movs	r1, #2
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800945e:	7afb      	ldrb	r3, [r7, #11]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009488:	2b04      	cmp	r3, #4
 800948a:	d877      	bhi.n	800957c <USBH_CDC_Process+0x114>
 800948c:	a201      	add	r2, pc, #4	@ (adr r2, 8009494 <USBH_CDC_Process+0x2c>)
 800948e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009492:	bf00      	nop
 8009494:	080094a9 	.word	0x080094a9
 8009498:	080094af 	.word	0x080094af
 800949c:	080094df 	.word	0x080094df
 80094a0:	08009553 	.word	0x08009553
 80094a4:	08009561 	.word	0x08009561
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	73fb      	strb	r3, [r7, #15]
      break;
 80094ac:	e06d      	b.n	800958a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f897 	bl	80095e8 <SetLineCoding>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094be:	7bbb      	ldrb	r3, [r7, #14]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094cc:	e058      	b.n	8009580 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d055      	beq.n	8009580 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2204      	movs	r2, #4
 80094d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80094dc:	e050      	b.n	8009580 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3340      	adds	r3, #64	@ 0x40
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f860 	bl	80095aa <GetLineCoding>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d126      	bne.n	8009542 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009506:	791b      	ldrb	r3, [r3, #4]
 8009508:	429a      	cmp	r2, r3
 800950a:	d13b      	bne.n	8009584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009516:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009518:	429a      	cmp	r2, r3
 800951a:	d133      	bne.n	8009584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009526:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009528:	429a      	cmp	r2, r3
 800952a:	d12b      	bne.n	8009584 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009534:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009536:	429a      	cmp	r2, r3
 8009538:	d124      	bne.n	8009584 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f958 	bl	80097f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009540:	e020      	b.n	8009584 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d01d      	beq.n	8009584 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2204      	movs	r2, #4
 800954c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009550:	e018      	b.n	8009584 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f867 	bl	8009626 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 f8da 	bl	8009712 <CDC_ProcessReception>
      break;
 800955e:	e014      	b.n	800958a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009560:	2100      	movs	r1, #0
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 f81a 	bl	800a59c <USBH_ClrFeature>
 8009568:	4603      	mov	r3, r0
 800956a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800957a:	e005      	b.n	8009588 <USBH_CDC_Process+0x120>

    default:
      break;
 800957c:	bf00      	nop
 800957e:	e004      	b.n	800958a <USBH_CDC_Process+0x122>
      break;
 8009580:	bf00      	nop
 8009582:	e002      	b.n	800958a <USBH_CDC_Process+0x122>
      break;
 8009584:	bf00      	nop
 8009586:	e000      	b.n	800958a <USBH_CDC_Process+0x122>
      break;
 8009588:	bf00      	nop

  }

  return status;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	22a1      	movs	r2, #161	@ 0xa1
 80095b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2221      	movs	r2, #33	@ 0x21
 80095be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2207      	movs	r2, #7
 80095d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2207      	movs	r2, #7
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fb14 	bl	800ac06 <USBH_CtlReq>
 80095de:	4603      	mov	r3, r0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2221      	movs	r2, #33	@ 0x21
 80095f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2220      	movs	r2, #32
 80095fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2207      	movs	r2, #7
 800960e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2207      	movs	r2, #7
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 faf5 	bl	800ac06 <USBH_CtlReq>
 800961c:	4603      	mov	r3, r0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af02      	add	r7, sp, #8
 800962c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009638:	2300      	movs	r3, #0
 800963a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009642:	2b01      	cmp	r3, #1
 8009644:	d002      	beq.n	800964c <CDC_ProcessTransmission+0x26>
 8009646:	2b02      	cmp	r3, #2
 8009648:	d023      	beq.n	8009692 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800964a:	e05e      	b.n	800970a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	8b12      	ldrh	r2, [r2, #24]
 8009654:	4293      	cmp	r3, r2
 8009656:	d90b      	bls.n	8009670 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	69d9      	ldr	r1, [r3, #28]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8b1a      	ldrh	r2, [r3, #24]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	7b5b      	ldrb	r3, [r3, #13]
 8009664:	2001      	movs	r0, #1
 8009666:	9000      	str	r0, [sp, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f001 fcda 	bl	800b022 <USBH_BulkSendData>
 800966e:	e00b      	b.n	8009688 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	7b5b      	ldrb	r3, [r3, #13]
 800967e:	2001      	movs	r0, #1
 8009680:	9000      	str	r0, [sp, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 fccd 	bl	800b022 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2202      	movs	r2, #2
 800968c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009690:	e03b      	b.n	800970a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	7b5b      	ldrb	r3, [r3, #13]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fff1 	bl	800b680 <USBH_LL_GetURBState>
 800969e:	4603      	mov	r3, r0
 80096a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80096a2:	7afb      	ldrb	r3, [r7, #11]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d128      	bne.n	80096fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	8b12      	ldrh	r2, [r2, #24]
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d90e      	bls.n	80096d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	8b12      	ldrh	r2, [r2, #24]
 80096bc:	1a9a      	subs	r2, r3, r2
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	8b12      	ldrh	r2, [r2, #24]
 80096ca:	441a      	add	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	61da      	str	r2, [r3, #28]
 80096d0:	e002      	b.n	80096d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096e8:	e00e      	b.n	8009708 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f868 	bl	80097c8 <USBH_CDC_TransmitCallback>
      break;
 80096f8:	e006      	b.n	8009708 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80096fa:	7afb      	ldrb	r3, [r7, #11]
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d103      	bne.n	8009708 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2201      	movs	r2, #1
 8009704:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009708:	bf00      	nop
  }
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009724:	2300      	movs	r3, #0
 8009726:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800972e:	2b03      	cmp	r3, #3
 8009730:	d002      	beq.n	8009738 <CDC_ProcessReception+0x26>
 8009732:	2b04      	cmp	r3, #4
 8009734:	d00e      	beq.n	8009754 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009736:	e043      	b.n	80097c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	6a19      	ldr	r1, [r3, #32]
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	8b5a      	ldrh	r2, [r3, #26]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	7b1b      	ldrb	r3, [r3, #12]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fc91 	bl	800b06c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	2204      	movs	r2, #4
 800974e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009752:	e035      	b.n	80097c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	7b1b      	ldrb	r3, [r3, #12]
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f001 ff90 	bl	800b680 <USBH_LL_GetURBState>
 8009760:	4603      	mov	r3, r0
 8009762:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009764:	7cfb      	ldrb	r3, [r7, #19]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d129      	bne.n	80097be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	7b1b      	ldrb	r3, [r3, #12]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fef3 	bl	800b55c <USBH_LL_GetLastXferSize>
 8009776:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	429a      	cmp	r2, r3
 8009780:	d016      	beq.n	80097b0 <CDC_ProcessReception+0x9e>
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	8b5b      	ldrh	r3, [r3, #26]
 8009786:	461a      	mov	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4293      	cmp	r3, r2
 800978c:	d110      	bne.n	80097b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1ad2      	subs	r2, r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	441a      	add	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2203      	movs	r2, #3
 80097aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80097ae:	e006      	b.n	80097be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f80f 	bl	80097dc <USBH_CDC_ReceiveCallback>
      break;
 80097be:	bf00      	nop
  }
}
 80097c0:	bf00      	nop
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	4613      	mov	r3, r2
 8009810:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d101      	bne.n	800981c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	e029      	b.n	8009870 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	79fa      	ldrb	r2, [r7, #7]
 8009820:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f81f 	bl	8009878 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f001 fdc3 	bl	800b3f4 <USBH_LL_Init>

  return USBH_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e009      	b.n	800989e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	33e0      	adds	r3, #224	@ 0xe0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	2200      	movs	r2, #0
 8009896:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d9f2      	bls.n	800988a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	e009      	b.n	80098be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098b4:	2200      	movs	r2, #0
 80098b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098c4:	d3f1      	bcc.n	80098aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2240      	movs	r2, #64	@ 0x40
 80098ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	331c      	adds	r3, #28
 8009916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800991a:	2100      	movs	r1, #0
 800991c:	4618      	mov	r0, r3
 800991e:	f002 f83d 	bl	800b99c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f002 f834 	bl	800b99c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800993a:	2212      	movs	r2, #18
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f002 f82c 	bl	800b99c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800994a:	223e      	movs	r2, #62	@ 0x3e
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f002 f824 	bl	800b99c <memset>

  return USBH_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800995e:	b480      	push	{r7}
 8009960:	b085      	sub	sp, #20
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009968:	2300      	movs	r3, #0
 800996a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10e      	bne.n	800999a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009982:	1c59      	adds	r1, r3, #1
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	33de      	adds	r3, #222	@ 0xde
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]
 8009998:	e004      	b.n	80099a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800999a:	2302      	movs	r3, #2
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	e001      	b.n	80099a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80099a0:	2302      	movs	r3, #2
 80099a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80099b2:	b480      	push	{r7}
 80099b4:	b085      	sub	sp, #20
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	460b      	mov	r3, r1
 80099bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80099c8:	78fa      	ldrb	r2, [r7, #3]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d204      	bcs.n	80099d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80099d6:	e001      	b.n	80099dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099d8:	2302      	movs	r3, #2
 80099da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b087      	sub	sp, #28
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	4608      	mov	r0, r1
 80099f4:	4611      	mov	r1, r2
 80099f6:	461a      	mov	r2, r3
 80099f8:	4603      	mov	r3, r0
 80099fa:	70fb      	strb	r3, [r7, #3]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70bb      	strb	r3, [r7, #2]
 8009a00:	4613      	mov	r3, r2
 8009a02:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009a12:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a14:	e025      	b.n	8009a62 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	221a      	movs	r2, #26
 8009a1a:	fb02 f303 	mul.w	r3, r2, r3
 8009a1e:	3308      	adds	r3, #8
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	3302      	adds	r3, #2
 8009a26:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	795b      	ldrb	r3, [r3, #5]
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d002      	beq.n	8009a38 <USBH_FindInterface+0x4e>
 8009a32:	78fb      	ldrb	r3, [r7, #3]
 8009a34:	2bff      	cmp	r3, #255	@ 0xff
 8009a36:	d111      	bne.n	8009a5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a3c:	78ba      	ldrb	r2, [r7, #2]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d002      	beq.n	8009a48 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a42:	78bb      	ldrb	r3, [r7, #2]
 8009a44:	2bff      	cmp	r3, #255	@ 0xff
 8009a46:	d109      	bne.n	8009a5c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a4c:	787a      	ldrb	r2, [r7, #1]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d002      	beq.n	8009a58 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a52:	787b      	ldrb	r3, [r7, #1]
 8009a54:	2bff      	cmp	r3, #255	@ 0xff
 8009a56:	d101      	bne.n	8009a5c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	e006      	b.n	8009a6a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d9d6      	bls.n	8009a16 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a68:	23ff      	movs	r3, #255	@ 0xff
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	371c      	adds	r7, #28
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b082      	sub	sp, #8
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 fcf4 	bl	800b46c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a84:	2101      	movs	r1, #1
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f001 fe0d 	bl	800b6a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af04      	add	r7, sp, #16
 8009a9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d102      	bne.n	8009aba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b0b      	cmp	r3, #11
 8009ac2:	f200 81bb 	bhi.w	8009e3c <USBH_Process+0x3a4>
 8009ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8009acc <USBH_Process+0x34>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009afd 	.word	0x08009afd
 8009ad0:	08009b2f 	.word	0x08009b2f
 8009ad4:	08009b97 	.word	0x08009b97
 8009ad8:	08009dd7 	.word	0x08009dd7
 8009adc:	08009e3d 	.word	0x08009e3d
 8009ae0:	08009c37 	.word	0x08009c37
 8009ae4:	08009d7d 	.word	0x08009d7d
 8009ae8:	08009c6d 	.word	0x08009c6d
 8009aec:	08009c8d 	.word	0x08009c8d
 8009af0:	08009cab 	.word	0x08009cab
 8009af4:	08009cef 	.word	0x08009cef
 8009af8:	08009dbf 	.word	0x08009dbf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 819b 	beq.w	8009e40 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009b10:	20c8      	movs	r0, #200	@ 0xc8
 8009b12:	f001 fe12 	bl	800b73a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fd05 	bl	800b526 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b2c:	e188      	b.n	8009e40 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d107      	bne.n	8009b48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b46:	e18a      	b.n	8009e5e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b52:	d914      	bls.n	8009b7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d903      	bls.n	8009b76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	220d      	movs	r2, #13
 8009b72:	701a      	strb	r2, [r3, #0]
      break;
 8009b74:	e173      	b.n	8009e5e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	701a      	strb	r2, [r3, #0]
      break;
 8009b7c:	e16f      	b.n	8009e5e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b84:	f103 020a 	add.w	r2, r3, #10
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009b8e:	200a      	movs	r0, #10
 8009b90:	f001 fdd3 	bl	800b73a <USBH_Delay>
      break;
 8009b94:	e163      	b.n	8009e5e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009bac:	2064      	movs	r0, #100	@ 0x64
 8009bae:	f001 fdc4 	bl	800b73a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 fc90 	bl	800b4d8 <USBH_LL_GetSpeed>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2205      	movs	r2, #5
 8009bc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 fa9b 	bl	800b106 <USBH_AllocPipe>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009bd8:	2180      	movs	r1, #128	@ 0x80
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fa93 	bl	800b106 <USBH_AllocPipe>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7919      	ldrb	r1, [r3, #4]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bfc:	9202      	str	r2, [sp, #8]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	9201      	str	r2, [sp, #4]
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	4603      	mov	r3, r0
 8009c06:	2280      	movs	r2, #128	@ 0x80
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 fa4d 	bl	800b0a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7959      	ldrb	r1, [r3, #5]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	2200      	movs	r2, #0
 8009c26:	9201      	str	r2, [sp, #4]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fa3a 	bl	800b0a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c34:	e113      	b.n	8009e5e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f916 	bl	8009e68 <USBH_HandleEnum>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c40:	7bbb      	ldrb	r3, [r7, #14]
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f040 80fd 	bne.w	8009e44 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d103      	bne.n	8009c64 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2208      	movs	r2, #8
 8009c60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c62:	e0ef      	b.n	8009e44 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2207      	movs	r2, #7
 8009c68:	701a      	strb	r2, [r3, #0]
      break;
 8009c6a:	e0eb      	b.n	8009e44 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 80e8 	beq.w	8009e48 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c7e:	2101      	movs	r1, #1
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2208      	movs	r2, #8
 8009c88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009c8a:	e0dd      	b.n	8009e48 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fc3a 	bl	800a50e <USBH_SetCfg>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f040 80d5 	bne.w	8009e4c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2209      	movs	r2, #9
 8009ca6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ca8:	e0d0      	b.n	8009e4c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d016      	beq.n	8009ce6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009cb8:	2101      	movs	r1, #1
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fc4a 	bl	800a554 <USBH_SetFeature>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	220a      	movs	r2, #10
 8009cd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cd2:	e0bd      	b.n	8009e50 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	f040 80b9 	bne.w	8009e50 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	220a      	movs	r2, #10
 8009ce2:	701a      	strb	r2, [r3, #0]
      break;
 8009ce4:	e0b4      	b.n	8009e50 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	220a      	movs	r2, #10
 8009cea:	701a      	strb	r2, [r3, #0]
      break;
 8009cec:	e0b0      	b.n	8009e50 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 80ad 	beq.w	8009e54 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d02:	2300      	movs	r3, #0
 8009d04:	73fb      	strb	r3, [r7, #15]
 8009d06:	e016      	b.n	8009d36 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009d08:	7bfa      	ldrb	r2, [r7, #15]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	32de      	adds	r2, #222	@ 0xde
 8009d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d12:	791a      	ldrb	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d108      	bne.n	8009d30 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009d1e:	7bfa      	ldrb	r2, [r7, #15]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	32de      	adds	r2, #222	@ 0xde
 8009d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009d2e:	e005      	b.n	8009d3c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
 8009d32:	3301      	adds	r3, #1
 8009d34:	73fb      	strb	r3, [r7, #15]
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0e5      	beq.n	8009d08 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d016      	beq.n	8009d74 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	4798      	blx	r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2206      	movs	r2, #6
 8009d5c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d64:	2103      	movs	r1, #3
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d6a:	e073      	b.n	8009e54 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	220d      	movs	r2, #13
 8009d70:	701a      	strb	r2, [r3, #0]
      break;
 8009d72:	e06f      	b.n	8009e54 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	220d      	movs	r2, #13
 8009d78:	701a      	strb	r2, [r3, #0]
      break;
 8009d7a:	e06b      	b.n	8009e54 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d017      	beq.n	8009db6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d103      	bne.n	8009da6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	220b      	movs	r2, #11
 8009da2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009da4:	e058      	b.n	8009e58 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d154      	bne.n	8009e58 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	220d      	movs	r2, #13
 8009db2:	701a      	strb	r2, [r3, #0]
      break;
 8009db4:	e050      	b.n	8009e58 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	220d      	movs	r2, #13
 8009dba:	701a      	strb	r2, [r3, #0]
      break;
 8009dbc:	e04c      	b.n	8009e58 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d049      	beq.n	8009e5c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	4798      	blx	r3
      }
      break;
 8009dd4:	e042      	b.n	8009e5c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fd4a 	bl	8009878 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d005      	beq.n	8009e18 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009e12:	2105      	movs	r1, #5
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d107      	bne.n	8009e34 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fe22 	bl	8009a76 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e32:	e014      	b.n	8009e5e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 fb19 	bl	800b46c <USBH_LL_Start>
      break;
 8009e3a:	e010      	b.n	8009e5e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e3c:	bf00      	nop
 8009e3e:	e00e      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e40:	bf00      	nop
 8009e42:	e00c      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e44:	bf00      	nop
 8009e46:	e00a      	b.n	8009e5e <USBH_Process+0x3c6>
    break;
 8009e48:	bf00      	nop
 8009e4a:	e008      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e4c:	bf00      	nop
 8009e4e:	e006      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e50:	bf00      	nop
 8009e52:	e004      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e54:	bf00      	nop
 8009e56:	e002      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e58:	bf00      	nop
 8009e5a:	e000      	b.n	8009e5e <USBH_Process+0x3c6>
      break;
 8009e5c:	bf00      	nop
  }
  return USBH_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af04      	add	r7, sp, #16
 8009e6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e70:	2301      	movs	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e74:	2301      	movs	r3, #1
 8009e76:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b07      	cmp	r3, #7
 8009e7e:	f200 81bd 	bhi.w	800a1fc <USBH_HandleEnum+0x394>
 8009e82:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <USBH_HandleEnum+0x20>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009ea9 	.word	0x08009ea9
 8009e8c:	08009f63 	.word	0x08009f63
 8009e90:	08009fcd 	.word	0x08009fcd
 8009e94:	0800a057 	.word	0x0800a057
 8009e98:	0800a0c1 	.word	0x0800a0c1
 8009e9c:	0800a131 	.word	0x0800a131
 8009ea0:	0800a177 	.word	0x0800a177
 8009ea4:	0800a1bd 	.word	0x0800a1bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009ea8:	2108      	movs	r1, #8
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa4c 	bl	800a348 <USBH_Get_DevDesc>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d12e      	bne.n	8009f18 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7919      	ldrb	r1, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ede:	9202      	str	r2, [sp, #8]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	9201      	str	r2, [sp, #4]
 8009ee4:	9300      	str	r3, [sp, #0]
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2280      	movs	r2, #128	@ 0x80
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 f8dc 	bl	800b0a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7959      	ldrb	r1, [r3, #5]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	9201      	str	r2, [sp, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 f8c9 	bl	800b0a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f16:	e173      	b.n	800a200 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	f040 8170 	bne.w	800a200 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f26:	3301      	adds	r3, #1
 8009f28:	b2da      	uxtb	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d903      	bls.n	8009f42 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	220d      	movs	r2, #13
 8009f3e:	701a      	strb	r2, [r3, #0]
      break;
 8009f40:	e15e      	b.n	800a200 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	795b      	ldrb	r3, [r3, #5]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 f8fd 	bl	800b148 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	791b      	ldrb	r3, [r3, #4]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f8f7 	bl	800b148 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
      break;
 8009f60:	e14e      	b.n	800a200 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f62:	2112      	movs	r1, #18
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9ef 	bl	800a348 <USBH_Get_DevDesc>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f7a:	e143      	b.n	800a204 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	f040 8140 	bne.w	800a204 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d903      	bls.n	8009fa6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	220d      	movs	r2, #13
 8009fa2:	701a      	strb	r2, [r3, #0]
      break;
 8009fa4:	e12e      	b.n	800a204 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	795b      	ldrb	r3, [r3, #5]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 f8cb 	bl	800b148 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	791b      	ldrb	r3, [r3, #4]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f001 f8c5 	bl	800b148 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	701a      	strb	r2, [r3, #0]
      break;
 8009fca:	e11b      	b.n	800a204 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009fcc:	2101      	movs	r1, #1
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa79 	bl	800a4c6 <USBH_SetAddress>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d130      	bne.n	800a040 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009fde:	2002      	movs	r0, #2
 8009fe0:	f001 fbab 	bl	800b73a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2203      	movs	r2, #3
 8009ff0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	7919      	ldrb	r1, [r3, #4]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a006:	9202      	str	r2, [sp, #8]
 800a008:	2200      	movs	r2, #0
 800a00a:	9201      	str	r2, [sp, #4]
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	4603      	mov	r3, r0
 800a010:	2280      	movs	r2, #128	@ 0x80
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 f848 	bl	800b0a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7959      	ldrb	r1, [r3, #5]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a02c:	9202      	str	r2, [sp, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	9201      	str	r2, [sp, #4]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	4603      	mov	r3, r0
 800a036:	2200      	movs	r2, #0
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f835 	bl	800b0a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a03e:	e0e3      	b.n	800a208 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	2b03      	cmp	r3, #3
 800a044:	f040 80e0 	bne.w	800a208 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	220d      	movs	r2, #13
 800a04c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	705a      	strb	r2, [r3, #1]
      break;
 800a054:	e0d8      	b.n	800a208 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a056:	2109      	movs	r1, #9
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f9a1 	bl	800a3a0 <USBH_Get_CfgDesc>
 800a05e:	4603      	mov	r3, r0
 800a060:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a062:	7bbb      	ldrb	r3, [r7, #14]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2204      	movs	r2, #4
 800a06c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a06e:	e0cd      	b.n	800a20c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a070:	7bbb      	ldrb	r3, [r7, #14]
 800a072:	2b03      	cmp	r3, #3
 800a074:	f040 80ca 	bne.w	800a20c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a07e:	3301      	adds	r3, #1
 800a080:	b2da      	uxtb	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a08e:	2b03      	cmp	r3, #3
 800a090:	d903      	bls.n	800a09a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	220d      	movs	r2, #13
 800a096:	701a      	strb	r2, [r3, #0]
      break;
 800a098:	e0b8      	b.n	800a20c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	795b      	ldrb	r3, [r3, #5]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f001 f851 	bl	800b148 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	791b      	ldrb	r3, [r3, #4]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 f84b 	bl	800b148 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	701a      	strb	r2, [r3, #0]
      break;
 800a0be:	e0a5      	b.n	800a20c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 f969 	bl	800a3a0 <USBH_Get_CfgDesc>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2205      	movs	r2, #5
 800a0dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0de:	e097      	b.n	800a210 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f040 8094 	bne.w	800a210 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d903      	bls.n	800a10a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	220d      	movs	r2, #13
 800a106:	701a      	strb	r2, [r3, #0]
      break;
 800a108:	e082      	b.n	800a210 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	4619      	mov	r1, r3
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f001 f819 	bl	800b148 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	791b      	ldrb	r3, [r3, #4]
 800a11a:	4619      	mov	r1, r3
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f813 	bl	800b148 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e06f      	b.n	800a210 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a136:	2b00      	cmp	r3, #0
 800a138:	d019      	beq.n	800a16e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a146:	23ff      	movs	r3, #255	@ 0xff
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f953 	bl	800a3f4 <USBH_Get_StringDesc>
 800a14e:	4603      	mov	r3, r0
 800a150:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2206      	movs	r2, #6
 800a15c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a15e:	e059      	b.n	800a214 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	2b03      	cmp	r3, #3
 800a164:	d156      	bne.n	800a214 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2206      	movs	r2, #6
 800a16a:	705a      	strb	r2, [r3, #1]
      break;
 800a16c:	e052      	b.n	800a214 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2206      	movs	r2, #6
 800a172:	705a      	strb	r2, [r3, #1]
      break;
 800a174:	e04e      	b.n	800a214 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d019      	beq.n	800a1b4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a18c:	23ff      	movs	r3, #255	@ 0xff
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f930 	bl	800a3f4 <USBH_Get_StringDesc>
 800a194:	4603      	mov	r3, r0
 800a196:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2207      	movs	r2, #7
 800a1a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a1a4:	e038      	b.n	800a218 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1a6:	7bbb      	ldrb	r3, [r7, #14]
 800a1a8:	2b03      	cmp	r3, #3
 800a1aa:	d135      	bne.n	800a218 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2207      	movs	r2, #7
 800a1b0:	705a      	strb	r2, [r3, #1]
      break;
 800a1b2:	e031      	b.n	800a218 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2207      	movs	r2, #7
 800a1b8:	705a      	strb	r2, [r3, #1]
      break;
 800a1ba:	e02d      	b.n	800a218 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d017      	beq.n	800a1f6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1d2:	23ff      	movs	r3, #255	@ 0xff
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f90d 	bl	800a3f4 <USBH_Get_StringDesc>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1de:	7bbb      	ldrb	r3, [r7, #14]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d102      	bne.n	800a1ea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a1e8:	e018      	b.n	800a21c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d115      	bne.n	800a21c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f4:	e012      	b.n	800a21c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1fa:	e00f      	b.n	800a21c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a1fc:	bf00      	nop
 800a1fe:	e00e      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a200:	bf00      	nop
 800a202:	e00c      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a204:	bf00      	nop
 800a206:	e00a      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a208:	bf00      	nop
 800a20a:	e008      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a20c:	bf00      	nop
 800a20e:	e006      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a210:	bf00      	nop
 800a212:	e004      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a214:	bf00      	nop
 800a216:	e002      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a218:	bf00      	nop
 800a21a:	e000      	b.n	800a21e <USBH_HandleEnum+0x3b6>
      break;
 800a21c:	bf00      	nop
  }
  return Status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	683a      	ldr	r2, [r7, #0]
 800a236:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a23a:	bf00      	nop
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b082      	sub	sp, #8
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f804 	bl	800a26a <USBH_HandleSof>
}
 800a262:	bf00      	nop
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	2b0b      	cmp	r3, #11
 800a27a:	d10a      	bne.n	800a292 <USBH_HandleSof+0x28>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a282:	2b00      	cmp	r3, #0
 800a284:	d005      	beq.n	800a292 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
  }
}
 800a292:	bf00      	nop
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b083      	sub	sp, #12
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a2aa:	bf00      	nop
}
 800a2ac:	370c      	adds	r7, #12
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b083      	sub	sp, #12
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a2c6:	bf00      	nop
}
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b083      	sub	sp, #12
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f8be 	bl	800b4a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	791b      	ldrb	r3, [r3, #4]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 ff0b 	bl	800b148 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	795b      	ldrb	r3, [r3, #5]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 ff05 	bl	800b148 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af02      	add	r7, sp, #8
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a354:	887b      	ldrh	r3, [r7, #2]
 800a356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a35a:	d901      	bls.n	800a360 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e01b      	b.n	800a398 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a366:	887b      	ldrh	r3, [r7, #2]
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	4613      	mov	r3, r2
 800a36c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a370:	2100      	movs	r1, #0
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f872 	bl	800a45c <USBH_GetDescriptor>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d109      	bne.n	800a396 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a388:	887a      	ldrh	r2, [r7, #2]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 f929 	bl	800a5e4 <USBH_ParseDevDesc>
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	331c      	adds	r3, #28
 800a3b0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a3b2:	887b      	ldrh	r3, [r7, #2]
 800a3b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b8:	d901      	bls.n	800a3be <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e016      	b.n	800a3ec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a3be:	887b      	ldrh	r3, [r7, #2]
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f846 	bl	800a45c <USBH_GetDescriptor>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d107      	bne.n	800a3ea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a3da:	887b      	ldrh	r3, [r7, #2]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68b9      	ldr	r1, [r7, #8]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f9af 	bl	800a744 <USBH_ParseCfgDesc>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	607a      	str	r2, [r7, #4]
 800a3fe:	461a      	mov	r2, r3
 800a400:	460b      	mov	r3, r1
 800a402:	72fb      	strb	r3, [r7, #11]
 800a404:	4613      	mov	r3, r2
 800a406:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a408:	893b      	ldrh	r3, [r7, #8]
 800a40a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a40e:	d802      	bhi.n	800a416 <USBH_Get_StringDesc+0x22>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a416:	2303      	movs	r3, #3
 800a418:	e01c      	b.n	800a454 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a422:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a42a:	893b      	ldrh	r3, [r7, #8]
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	460b      	mov	r3, r1
 800a430:	2100      	movs	r1, #0
 800a432:	68f8      	ldr	r0, [r7, #12]
 800a434:	f000 f812 	bl	800a45c <USBH_GetDescriptor>
 800a438:	4603      	mov	r3, r0
 800a43a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a43c:	7dfb      	ldrb	r3, [r7, #23]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d107      	bne.n	800a452 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a448:	893a      	ldrh	r2, [r7, #8]
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fb8d 	bl	800ab6c <USBH_ParseStringDesc>
  }

  return status;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	607b      	str	r3, [r7, #4]
 800a466:	460b      	mov	r3, r1
 800a468:	72fb      	strb	r3, [r7, #11]
 800a46a:	4613      	mov	r3, r2
 800a46c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	789b      	ldrb	r3, [r3, #2]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d11c      	bne.n	800a4b0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2206      	movs	r2, #6
 800a486:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	893a      	ldrh	r2, [r7, #8]
 800a48c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a48e:	893b      	ldrh	r3, [r7, #8]
 800a490:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a494:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a498:	d104      	bne.n	800a4a4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a4a0:	829a      	strh	r2, [r3, #20]
 800a4a2:	e002      	b.n	800a4aa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8b3a      	ldrh	r2, [r7, #24]
 800a4ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a4b0:	8b3b      	ldrh	r3, [r7, #24]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fba5 	bl	800ac06 <USBH_CtlReq>
 800a4bc:	4603      	mov	r3, r0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10f      	bne.n	800a4fa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fb81 	bl	800ac06 <USBH_CtlReq>
 800a504:	4603      	mov	r3, r0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b082      	sub	sp, #8
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	789b      	ldrb	r3, [r3, #2]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d10e      	bne.n	800a540 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2209      	movs	r2, #9
 800a52c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	887a      	ldrh	r2, [r7, #2]
 800a532:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fb5e 	bl	800ac06 <USBH_CtlReq>
 800a54a:	4603      	mov	r3, r0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	789b      	ldrb	r3, [r3, #2]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d10f      	bne.n	800a588 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2203      	movs	r2, #3
 800a572:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	b29a      	uxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a588:	2200      	movs	r2, #0
 800a58a:	2100      	movs	r1, #0
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 fb3a 	bl	800ac06 <USBH_CtlReq>
 800a592:	4603      	mov	r3, r0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10f      	bne.n	800a5d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2202      	movs	r2, #2
 800a5b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fb16 	bl	800ac06 <USBH_CtlReq>
 800a5da:	4603      	mov	r3, r0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a5f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a604:	2302      	movs	r3, #2
 800a606:	e094      	b.n	800a732 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	785a      	ldrb	r2, [r3, #1]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3302      	adds	r3, #2
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	3303      	adds	r3, #3
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	021b      	lsls	r3, r3, #8
 800a628:	b29b      	uxth	r3, r3
 800a62a:	4313      	orrs	r3, r2
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	791a      	ldrb	r2, [r3, #4]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	795a      	ldrb	r2, [r3, #5]
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	799a      	ldrb	r2, [r3, #6]
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	79da      	ldrb	r2, [r3, #7]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a662:	2b01      	cmp	r3, #1
 800a664:	d11b      	bne.n	800a69e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	79db      	ldrb	r3, [r3, #7]
 800a66a:	2b20      	cmp	r3, #32
 800a66c:	dc0f      	bgt.n	800a68e <USBH_ParseDevDesc+0xaa>
 800a66e:	2b08      	cmp	r3, #8
 800a670:	db0f      	blt.n	800a692 <USBH_ParseDevDesc+0xae>
 800a672:	3b08      	subs	r3, #8
 800a674:	4a32      	ldr	r2, [pc, #200]	@ (800a740 <USBH_ParseDevDesc+0x15c>)
 800a676:	fa22 f303 	lsr.w	r3, r2, r3
 800a67a:	f003 0301 	and.w	r3, r3, #1
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bf14      	ite	ne
 800a682:	2301      	movne	r3, #1
 800a684:	2300      	moveq	r3, #0
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <USBH_ParseDevDesc+0xb6>
 800a68c:	e001      	b.n	800a692 <USBH_ParseDevDesc+0xae>
 800a68e:	2b40      	cmp	r3, #64	@ 0x40
 800a690:	d003      	beq.n	800a69a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2208      	movs	r2, #8
 800a696:	71da      	strb	r2, [r3, #7]
        break;
 800a698:	e000      	b.n	800a69c <USBH_ParseDevDesc+0xb8>
        break;
 800a69a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a69c:	e00e      	b.n	800a6bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d107      	bne.n	800a6b8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	79db      	ldrb	r3, [r3, #7]
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d005      	beq.n	800a6bc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2208      	movs	r2, #8
 800a6b4:	71da      	strb	r2, [r3, #7]
 800a6b6:	e001      	b.n	800a6bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d936      	bls.n	800a730 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	3308      	adds	r3, #8
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	3309      	adds	r3, #9
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	021b      	lsls	r3, r3, #8
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	330a      	adds	r3, #10
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	330b      	adds	r3, #11
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	021b      	lsls	r3, r3, #8
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	330c      	adds	r3, #12
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	330d      	adds	r3, #13
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	b29b      	uxth	r3, r3
 800a708:	4313      	orrs	r3, r2
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	7b9a      	ldrb	r2, [r3, #14]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	7bda      	ldrb	r2, [r3, #15]
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	7c1a      	ldrb	r2, [r3, #16]
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	7c5a      	ldrb	r2, [r3, #17]
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
}
 800a732:	4618      	mov	r0, r3
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	01000101 	.word	0x01000101

0800a744 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08c      	sub	sp, #48	@ 0x30
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	4613      	mov	r3, r2
 800a750:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a758:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a772:	2302      	movs	r3, #2
 800a774:	e0da      	b.n	800a92c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	2b09      	cmp	r3, #9
 800a780:	d002      	beq.n	800a788 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a784:	2209      	movs	r2, #9
 800a786:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	785a      	ldrb	r2, [r3, #1]
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3302      	adds	r3, #2
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	461a      	mov	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	021b      	lsls	r3, r3, #8
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7b2:	bf28      	it	cs
 800a7b4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	791a      	ldrb	r2, [r3, #4]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	795a      	ldrb	r2, [r3, #5]
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	799a      	ldrb	r2, [r3, #6]
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	79da      	ldrb	r2, [r3, #7]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	7a1a      	ldrb	r2, [r3, #8]
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	f240 809d 	bls.w	800a928 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7ee:	2309      	movs	r3, #9
 800a7f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7f6:	e081      	b.n	800a8fc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7f8:	f107 0316 	add.w	r3, r7, #22
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a800:	f000 f9e7 	bl	800abd2 <USBH_GetNextDesc>
 800a804:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	785b      	ldrb	r3, [r3, #1]
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	d176      	bne.n	800a8fc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b09      	cmp	r3, #9
 800a814:	d002      	beq.n	800a81c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a818:	2209      	movs	r2, #9
 800a81a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a81c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a820:	221a      	movs	r2, #26
 800a822:	fb02 f303 	mul.w	r3, r2, r3
 800a826:	3308      	adds	r3, #8
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	4413      	add	r3, r2
 800a82c:	3302      	adds	r3, #2
 800a82e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a832:	69f8      	ldr	r0, [r7, #28]
 800a834:	f000 f87e 	bl	800a934 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a842:	e043      	b.n	800a8cc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a844:	f107 0316 	add.w	r3, r7, #22
 800a848:	4619      	mov	r1, r3
 800a84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a84c:	f000 f9c1 	bl	800abd2 <USBH_GetNextDesc>
 800a850:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	2b05      	cmp	r3, #5
 800a858:	d138      	bne.n	800a8cc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	795b      	ldrb	r3, [r3, #5]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d113      	bne.n	800a88a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a866:	2b02      	cmp	r3, #2
 800a868:	d003      	beq.n	800a872 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	799b      	ldrb	r3, [r3, #6]
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d10b      	bne.n	800a88a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	79db      	ldrb	r3, [r3, #7]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10b      	bne.n	800a892 <USBH_ParseCfgDesc+0x14e>
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b09      	cmp	r3, #9
 800a880:	d007      	beq.n	800a892 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a884:	2209      	movs	r2, #9
 800a886:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a888:	e003      	b.n	800a892 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a88c:	2207      	movs	r2, #7
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	e000      	b.n	800a894 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a892:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a898:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a89c:	3201      	adds	r2, #1
 800a89e:	00d2      	lsls	r2, r2, #3
 800a8a0:	211a      	movs	r1, #26
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	6a3a      	ldr	r2, [r7, #32]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a8b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8b4:	69b9      	ldr	r1, [r7, #24]
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 f870 	bl	800a99c <USBH_ParseEPDesc>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a8c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	791b      	ldrb	r3, [r3, #4]
 800a8d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d204      	bcs.n	800a8e2 <USBH_ParseCfgDesc+0x19e>
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	885a      	ldrh	r2, [r3, #2]
 800a8dc:	8afb      	ldrh	r3, [r7, #22]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d8b0      	bhi.n	800a844 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	791b      	ldrb	r3, [r3, #4]
 800a8e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d201      	bcs.n	800a8f2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e01c      	b.n	800a92c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a900:	2b01      	cmp	r3, #1
 800a902:	d805      	bhi.n	800a910 <USBH_ParseCfgDesc+0x1cc>
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	885a      	ldrh	r2, [r3, #2]
 800a908:	8afb      	ldrh	r3, [r7, #22]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	f63f af74 	bhi.w	800a7f8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	791b      	ldrb	r3, [r3, #4]
 800a914:	2b02      	cmp	r3, #2
 800a916:	bf28      	it	cs
 800a918:	2302      	movcs	r3, #2
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a920:	429a      	cmp	r2, r3
 800a922:	d201      	bcs.n	800a928 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a924:	2303      	movs	r3, #3
 800a926:	e001      	b.n	800a92c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a928:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3730      	adds	r7, #48	@ 0x30
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	781a      	ldrb	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	785a      	ldrb	r2, [r3, #1]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	789a      	ldrb	r2, [r3, #2]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	78da      	ldrb	r2, [r3, #3]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	3304      	adds	r3, #4
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b02      	cmp	r3, #2
 800a966:	bf28      	it	cs
 800a968:	2302      	movcs	r3, #2
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	795a      	ldrb	r2, [r3, #5]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	799a      	ldrb	r2, [r3, #6]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	79da      	ldrb	r2, [r3, #7]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	7a1a      	ldrb	r2, [r3, #8]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	721a      	strb	r2, [r3, #8]
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	785a      	ldrb	r2, [r3, #1]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	789a      	ldrb	r2, [r3, #2]
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	78da      	ldrb	r2, [r3, #3]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3304      	adds	r3, #4
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	3305      	adds	r3, #5
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	021b      	lsls	r3, r3, #8
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	799a      	ldrb	r2, [r3, #6]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	889b      	ldrh	r3, [r3, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d009      	beq.n	800aa0a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9fe:	d804      	bhi.n	800aa0a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa08:	d901      	bls.n	800aa0e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d136      	bne.n	800aa86 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	78db      	ldrb	r3, [r3, #3]
 800aa1c:	f003 0303 	and.w	r3, r3, #3
 800aa20:	2b02      	cmp	r3, #2
 800aa22:	d108      	bne.n	800aa36 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	889b      	ldrh	r3, [r3, #4]
 800aa28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa2c:	f240 8097 	bls.w	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa30:	2303      	movs	r3, #3
 800aa32:	75fb      	strb	r3, [r7, #23]
 800aa34:	e093      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	78db      	ldrb	r3, [r3, #3]
 800aa3a:	f003 0303 	and.w	r3, r3, #3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d107      	bne.n	800aa52 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	889b      	ldrh	r3, [r3, #4]
 800aa46:	2b40      	cmp	r3, #64	@ 0x40
 800aa48:	f240 8089 	bls.w	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	75fb      	strb	r3, [r7, #23]
 800aa50:	e085      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	78db      	ldrb	r3, [r3, #3]
 800aa56:	f003 0303 	and.w	r3, r3, #3
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d005      	beq.n	800aa6a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	78db      	ldrb	r3, [r3, #3]
 800aa62:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d10a      	bne.n	800aa80 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	799b      	ldrb	r3, [r3, #6]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <USBH_ParseEPDesc+0xde>
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	799b      	ldrb	r3, [r3, #6]
 800aa76:	2b10      	cmp	r3, #16
 800aa78:	d970      	bls.n	800ab5c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa7e:	e06d      	b.n	800ab5c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa80:	2303      	movs	r3, #3
 800aa82:	75fb      	strb	r3, [r7, #23]
 800aa84:	e06b      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d13c      	bne.n	800ab0a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	78db      	ldrb	r3, [r3, #3]
 800aa94:	f003 0303 	and.w	r3, r3, #3
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d005      	beq.n	800aaa8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	78db      	ldrb	r3, [r3, #3]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	889b      	ldrh	r3, [r3, #4]
 800aaac:	2b40      	cmp	r3, #64	@ 0x40
 800aaae:	d956      	bls.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aab0:	2303      	movs	r3, #3
 800aab2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aab4:	e053      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	78db      	ldrb	r3, [r3, #3]
 800aaba:	f003 0303 	and.w	r3, r3, #3
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d10e      	bne.n	800aae0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	799b      	ldrb	r3, [r3, #6]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d007      	beq.n	800aada <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aace:	2b10      	cmp	r3, #16
 800aad0:	d803      	bhi.n	800aada <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aad6:	2b40      	cmp	r3, #64	@ 0x40
 800aad8:	d941      	bls.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aada:	2303      	movs	r3, #3
 800aadc:	75fb      	strb	r3, [r7, #23]
 800aade:	e03e      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	78db      	ldrb	r3, [r3, #3]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b03      	cmp	r3, #3
 800aaea:	d10b      	bne.n	800ab04 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	799b      	ldrb	r3, [r3, #6]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d004      	beq.n	800aafe <USBH_ParseEPDesc+0x162>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	889b      	ldrh	r3, [r3, #4]
 800aaf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aafc:	d32f      	bcc.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aafe:	2303      	movs	r3, #3
 800ab00:	75fb      	strb	r3, [r7, #23]
 800ab02:	e02c      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab04:	2303      	movs	r3, #3
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	e029      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d120      	bne.n	800ab56 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	78db      	ldrb	r3, [r3, #3]
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d106      	bne.n	800ab2e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	889b      	ldrh	r3, [r3, #4]
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d01a      	beq.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab28:	2303      	movs	r3, #3
 800ab2a:	75fb      	strb	r3, [r7, #23]
 800ab2c:	e017      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	78db      	ldrb	r3, [r3, #3]
 800ab32:	f003 0303 	and.w	r3, r3, #3
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d10a      	bne.n	800ab50 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	799b      	ldrb	r3, [r3, #6]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d003      	beq.n	800ab4a <USBH_ParseEPDesc+0x1ae>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	889b      	ldrh	r3, [r3, #4]
 800ab46:	2b08      	cmp	r3, #8
 800ab48:	d909      	bls.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	75fb      	strb	r3, [r7, #23]
 800ab4e:	e006      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab50:	2303      	movs	r3, #3
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	e003      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab56:	2303      	movs	r3, #3
 800ab58:	75fb      	strb	r3, [r7, #23]
 800ab5a:	e000      	b.n	800ab5e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab5c:	bf00      	nop
  }

  return status;
 800ab5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d120      	bne.n	800abc6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	1e9a      	subs	r2, r3, #2
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	bf28      	it	cs
 800ab90:	4613      	movcs	r3, r2
 800ab92:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3302      	adds	r3, #2
 800ab98:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	82fb      	strh	r3, [r7, #22]
 800ab9e:	e00b      	b.n	800abb8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aba0:	8afb      	ldrh	r3, [r7, #22]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	4413      	add	r3, r2
 800aba6:	781a      	ldrb	r2, [r3, #0]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3301      	adds	r3, #1
 800abb0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abb2:	8afb      	ldrh	r3, [r7, #22]
 800abb4:	3302      	adds	r3, #2
 800abb6:	82fb      	strh	r3, [r7, #22]
 800abb8:	8afa      	ldrh	r2, [r7, #22]
 800abba:	8abb      	ldrh	r3, [r7, #20]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d3ef      	bcc.n	800aba0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2200      	movs	r2, #0
 800abc4:	701a      	strb	r2, [r3, #0]
  }
}
 800abc6:	bf00      	nop
 800abc8:	371c      	adds	r7, #28
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b085      	sub	sp, #20
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	881b      	ldrh	r3, [r3, #0]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	7812      	ldrb	r2, [r2, #0]
 800abe4:	4413      	add	r3, r2
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abf8:	68fb      	ldr	r3, [r7, #12]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	4613      	mov	r3, r2
 800ac12:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac14:	2301      	movs	r3, #1
 800ac16:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	789b      	ldrb	r3, [r3, #2]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d002      	beq.n	800ac26 <USBH_CtlReq+0x20>
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d00f      	beq.n	800ac44 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac24:	e027      	b.n	800ac76 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	88fa      	ldrh	r2, [r7, #6]
 800ac30:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	75fb      	strb	r3, [r7, #23]
      break;
 800ac42:	e018      	b.n	800ac76 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f81b 	bl	800ac80 <USBH_HandleControl>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <USBH_CtlReq+0x54>
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d106      	bne.n	800ac68 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	761a      	strb	r2, [r3, #24]
      break;
 800ac66:	e005      	b.n	800ac74 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac68:	7dfb      	ldrb	r3, [r7, #23]
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d102      	bne.n	800ac74 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2201      	movs	r2, #1
 800ac72:	709a      	strb	r2, [r3, #2]
      break;
 800ac74:	bf00      	nop
  }
  return status;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	7e1b      	ldrb	r3, [r3, #24]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	2b0a      	cmp	r3, #10
 800ac98:	f200 8156 	bhi.w	800af48 <USBH_HandleControl+0x2c8>
 800ac9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aca4 <USBH_HandleControl+0x24>)
 800ac9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aca2:	bf00      	nop
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	0800aceb 	.word	0x0800aceb
 800acac:	0800ad55 	.word	0x0800ad55
 800acb0:	0800ad7b 	.word	0x0800ad7b
 800acb4:	0800adb3 	.word	0x0800adb3
 800acb8:	0800addd 	.word	0x0800addd
 800acbc:	0800ae2f 	.word	0x0800ae2f
 800acc0:	0800ae51 	.word	0x0800ae51
 800acc4:	0800ae8d 	.word	0x0800ae8d
 800acc8:	0800aeb3 	.word	0x0800aeb3
 800accc:	0800aef1 	.word	0x0800aef1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f103 0110 	add.w	r1, r3, #16
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	795b      	ldrb	r3, [r3, #5]
 800acda:	461a      	mov	r2, r3
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f943 	bl	800af68 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2202      	movs	r2, #2
 800ace6:	761a      	strb	r2, [r3, #24]
      break;
 800ace8:	e139      	b.n	800af5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	795b      	ldrb	r3, [r3, #5]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fcc5 	bl	800b680 <USBH_LL_GetURBState>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d11e      	bne.n	800ad3e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7c1b      	ldrb	r3, [r3, #16]
 800ad04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ad08:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	8adb      	ldrh	r3, [r3, #22]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00a      	beq.n	800ad28 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad12:	7b7b      	ldrb	r3, [r7, #13]
 800ad14:	2b80      	cmp	r3, #128	@ 0x80
 800ad16:	d103      	bne.n	800ad20 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2203      	movs	r2, #3
 800ad1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad1e:	e115      	b.n	800af4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2205      	movs	r2, #5
 800ad24:	761a      	strb	r2, [r3, #24]
      break;
 800ad26:	e111      	b.n	800af4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad28:	7b7b      	ldrb	r3, [r7, #13]
 800ad2a:	2b80      	cmp	r3, #128	@ 0x80
 800ad2c:	d103      	bne.n	800ad36 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2209      	movs	r2, #9
 800ad32:	761a      	strb	r2, [r3, #24]
      break;
 800ad34:	e10a      	b.n	800af4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2207      	movs	r2, #7
 800ad3a:	761a      	strb	r2, [r3, #24]
      break;
 800ad3c:	e106      	b.n	800af4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	2b04      	cmp	r3, #4
 800ad42:	d003      	beq.n	800ad4c <USBH_HandleControl+0xcc>
 800ad44:	7bbb      	ldrb	r3, [r7, #14]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	f040 8100 	bne.w	800af4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	220b      	movs	r2, #11
 800ad50:	761a      	strb	r2, [r3, #24]
      break;
 800ad52:	e0fb      	b.n	800af4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6899      	ldr	r1, [r3, #8]
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	899a      	ldrh	r2, [r3, #12]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f93a 	bl	800afe6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2204      	movs	r2, #4
 800ad76:	761a      	strb	r2, [r3, #24]
      break;
 800ad78:	e0f1      	b.n	800af5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	791b      	ldrb	r3, [r3, #4]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 fc7d 	bl	800b680 <USBH_LL_GetURBState>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d102      	bne.n	800ad96 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2209      	movs	r2, #9
 800ad94:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	2b05      	cmp	r3, #5
 800ad9a:	d102      	bne.n	800ada2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ada0:	e0d6      	b.n	800af50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	f040 80d3 	bne.w	800af50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	220b      	movs	r2, #11
 800adae:	761a      	strb	r2, [r3, #24]
      break;
 800adb0:	e0ce      	b.n	800af50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6899      	ldr	r1, [r3, #8]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	899a      	ldrh	r2, [r3, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	795b      	ldrb	r3, [r3, #5]
 800adbe:	2001      	movs	r0, #1
 800adc0:	9000      	str	r0, [sp, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f8ea 	bl	800af9c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adce:	b29a      	uxth	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2206      	movs	r2, #6
 800add8:	761a      	strb	r2, [r3, #24]
      break;
 800adda:	e0c0      	b.n	800af5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	795b      	ldrb	r3, [r3, #5]
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fc4c 	bl	800b680 <USBH_LL_GetURBState>
 800ade8:	4603      	mov	r3, r0
 800adea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d103      	bne.n	800adfa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2207      	movs	r2, #7
 800adf6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800adf8:	e0ac      	b.n	800af54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b05      	cmp	r3, #5
 800adfe:	d105      	bne.n	800ae0c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	220c      	movs	r2, #12
 800ae04:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae06:	2303      	movs	r3, #3
 800ae08:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0a:	e0a3      	b.n	800af54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d103      	bne.n	800ae1a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2205      	movs	r2, #5
 800ae16:	761a      	strb	r2, [r3, #24]
      break;
 800ae18:	e09c      	b.n	800af54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	f040 8099 	bne.w	800af54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	220b      	movs	r2, #11
 800ae26:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae28:	2302      	movs	r3, #2
 800ae2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2c:	e092      	b.n	800af54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	791b      	ldrb	r3, [r3, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	2100      	movs	r1, #0
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 f8d5 	bl	800afe6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	761a      	strb	r2, [r3, #24]

      break;
 800ae4e:	e086      	b.n	800af5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	791b      	ldrb	r3, [r3, #4]
 800ae54:	4619      	mov	r1, r3
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fc12 	bl	800b680 <USBH_LL_GetURBState>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d105      	bne.n	800ae72 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	220d      	movs	r2, #13
 800ae6a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae70:	e072      	b.n	800af58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d103      	bne.n	800ae80 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	220b      	movs	r2, #11
 800ae7c:	761a      	strb	r2, [r3, #24]
      break;
 800ae7e:	e06b      	b.n	800af58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae80:	7bbb      	ldrb	r3, [r7, #14]
 800ae82:	2b05      	cmp	r3, #5
 800ae84:	d168      	bne.n	800af58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae86:	2303      	movs	r3, #3
 800ae88:	73fb      	strb	r3, [r7, #15]
      break;
 800ae8a:	e065      	b.n	800af58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	795b      	ldrb	r3, [r3, #5]
 800ae90:	2201      	movs	r2, #1
 800ae92:	9200      	str	r2, [sp, #0]
 800ae94:	2200      	movs	r2, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f87f 	bl	800af9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	220a      	movs	r2, #10
 800aeae:	761a      	strb	r2, [r3, #24]
      break;
 800aeb0:	e055      	b.n	800af5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	795b      	ldrb	r3, [r3, #5]
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fbe1 	bl	800b680 <USBH_LL_GetURBState>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d105      	bne.n	800aed4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	220d      	movs	r2, #13
 800aed0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aed2:	e043      	b.n	800af5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d103      	bne.n	800aee2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2209      	movs	r2, #9
 800aede:	761a      	strb	r2, [r3, #24]
      break;
 800aee0:	e03c      	b.n	800af5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	d139      	bne.n	800af5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	220b      	movs	r2, #11
 800aeec:	761a      	strb	r2, [r3, #24]
      break;
 800aeee:	e035      	b.n	800af5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7e5b      	ldrb	r3, [r3, #25]
 800aef4:	3301      	adds	r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	765a      	strb	r2, [r3, #25]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7e5b      	ldrb	r3, [r3, #25]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d806      	bhi.n	800af12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af10:	e025      	b.n	800af5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800af18:	2106      	movs	r1, #6
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	795b      	ldrb	r3, [r3, #5]
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f90c 	bl	800b148 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	791b      	ldrb	r3, [r3, #4]
 800af34:	4619      	mov	r1, r3
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 f906 	bl	800b148 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af42:	2302      	movs	r3, #2
 800af44:	73fb      	strb	r3, [r7, #15]
      break;
 800af46:	e00a      	b.n	800af5e <USBH_HandleControl+0x2de>

    default:
      break;
 800af48:	bf00      	nop
 800af4a:	e008      	b.n	800af5e <USBH_HandleControl+0x2de>
      break;
 800af4c:	bf00      	nop
 800af4e:	e006      	b.n	800af5e <USBH_HandleControl+0x2de>
      break;
 800af50:	bf00      	nop
 800af52:	e004      	b.n	800af5e <USBH_HandleControl+0x2de>
      break;
 800af54:	bf00      	nop
 800af56:	e002      	b.n	800af5e <USBH_HandleControl+0x2de>
      break;
 800af58:	bf00      	nop
 800af5a:	e000      	b.n	800af5e <USBH_HandleControl+0x2de>
      break;
 800af5c:	bf00      	nop
  }

  return status;
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af04      	add	r7, sp, #16
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af76:	79f9      	ldrb	r1, [r7, #7]
 800af78:	2300      	movs	r3, #0
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	2308      	movs	r3, #8
 800af7e:	9302      	str	r3, [sp, #8]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	2300      	movs	r3, #0
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	2300      	movs	r3, #0
 800af8a:	2200      	movs	r2, #0
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 fb46 	bl	800b61e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af04      	add	r7, sp, #16
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4611      	mov	r1, r2
 800afa8:	461a      	mov	r2, r3
 800afaa:	460b      	mov	r3, r1
 800afac:	80fb      	strh	r3, [r7, #6]
 800afae:	4613      	mov	r3, r2
 800afb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afc0:	7979      	ldrb	r1, [r7, #5]
 800afc2:	7e3b      	ldrb	r3, [r7, #24]
 800afc4:	9303      	str	r3, [sp, #12]
 800afc6:	88fb      	ldrh	r3, [r7, #6]
 800afc8:	9302      	str	r3, [sp, #8]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	9301      	str	r3, [sp, #4]
 800afce:	2301      	movs	r3, #1
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	2300      	movs	r3, #0
 800afd4:	2200      	movs	r2, #0
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f000 fb21 	bl	800b61e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b088      	sub	sp, #32
 800afea:	af04      	add	r7, sp, #16
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	4611      	mov	r1, r2
 800aff2:	461a      	mov	r2, r3
 800aff4:	460b      	mov	r3, r1
 800aff6:	80fb      	strh	r3, [r7, #6]
 800aff8:	4613      	mov	r3, r2
 800affa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800affc:	7979      	ldrb	r1, [r7, #5]
 800affe:	2300      	movs	r3, #0
 800b000:	9303      	str	r3, [sp, #12]
 800b002:	88fb      	ldrh	r3, [r7, #6]
 800b004:	9302      	str	r3, [sp, #8]
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	9301      	str	r3, [sp, #4]
 800b00a:	2301      	movs	r3, #1
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	2300      	movs	r3, #0
 800b010:	2201      	movs	r2, #1
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f000 fb03 	bl	800b61e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b018:	2300      	movs	r3, #0

}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b088      	sub	sp, #32
 800b026:	af04      	add	r7, sp, #16
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	4611      	mov	r1, r2
 800b02e:	461a      	mov	r2, r3
 800b030:	460b      	mov	r3, r1
 800b032:	80fb      	strh	r3, [r7, #6]
 800b034:	4613      	mov	r3, r2
 800b036:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b046:	7979      	ldrb	r1, [r7, #5]
 800b048:	7e3b      	ldrb	r3, [r7, #24]
 800b04a:	9303      	str	r3, [sp, #12]
 800b04c:	88fb      	ldrh	r3, [r7, #6]
 800b04e:	9302      	str	r3, [sp, #8]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	9301      	str	r3, [sp, #4]
 800b054:	2301      	movs	r3, #1
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	2302      	movs	r3, #2
 800b05a:	2200      	movs	r2, #0
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f000 fade 	bl	800b61e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af04      	add	r7, sp, #16
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	4611      	mov	r1, r2
 800b078:	461a      	mov	r2, r3
 800b07a:	460b      	mov	r3, r1
 800b07c:	80fb      	strh	r3, [r7, #6]
 800b07e:	4613      	mov	r3, r2
 800b080:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b082:	7979      	ldrb	r1, [r7, #5]
 800b084:	2300      	movs	r3, #0
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	88fb      	ldrh	r3, [r7, #6]
 800b08a:	9302      	str	r3, [sp, #8]
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	2301      	movs	r3, #1
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2302      	movs	r3, #2
 800b096:	2201      	movs	r2, #1
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fac0 	bl	800b61e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af04      	add	r7, sp, #16
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	70fb      	strb	r3, [r7, #3]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	70bb      	strb	r3, [r7, #2]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0c2:	7878      	ldrb	r0, [r7, #1]
 800b0c4:	78ba      	ldrb	r2, [r7, #2]
 800b0c6:	78f9      	ldrb	r1, [r7, #3]
 800b0c8:	8b3b      	ldrh	r3, [r7, #24]
 800b0ca:	9302      	str	r3, [sp, #8]
 800b0cc:	7d3b      	ldrb	r3, [r7, #20]
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	7c3b      	ldrb	r3, [r7, #16]
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fa53 	bl	800b582 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b0f2:	78fb      	ldrb	r3, [r7, #3]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa72 	bl	800b5e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b084      	sub	sp, #16
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	460b      	mov	r3, r1
 800b110:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f836 	bl	800b184 <USBH_GetFreePipe>
 800b118:	4603      	mov	r3, r0
 800b11a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b11c:	89fb      	ldrh	r3, [r7, #14]
 800b11e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b122:	4293      	cmp	r3, r2
 800b124:	d00a      	beq.n	800b13c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	89fb      	ldrh	r3, [r7, #14]
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	33e0      	adds	r3, #224	@ 0xe0
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b13c:	89fb      	ldrh	r3, [r7, #14]
 800b13e:	b2db      	uxtb	r3, r3
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	460b      	mov	r3, r1
 800b152:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	2b0f      	cmp	r3, #15
 800b158:	d80d      	bhi.n	800b176 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b15a:	78fb      	ldrb	r3, [r7, #3]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	33e0      	adds	r3, #224	@ 0xe0
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	78fb      	ldrb	r3, [r7, #3]
 800b168:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	33e0      	adds	r3, #224	@ 0xe0
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
 800b194:	e00f      	b.n	800b1b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	33e0      	adds	r3, #224	@ 0xe0
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	e007      	b.n	800b1c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	73fb      	strb	r3, [r7, #15]
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	2b0f      	cmp	r3, #15
 800b1ba:	d9ec      	bls.n	800b196 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	490e      	ldr	r1, [pc, #56]	@ (800b20c <MX_USB_HOST_Init+0x40>)
 800b1d4:	480e      	ldr	r0, [pc, #56]	@ (800b210 <MX_USB_HOST_Init+0x44>)
 800b1d6:	f7fe fb15 	bl	8009804 <USBH_Init>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d001      	beq.n	800b1e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1e0:	f7f6 f9a8 	bl	8001534 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b1e4:	490b      	ldr	r1, [pc, #44]	@ (800b214 <MX_USB_HOST_Init+0x48>)
 800b1e6:	480a      	ldr	r0, [pc, #40]	@ (800b210 <MX_USB_HOST_Init+0x44>)
 800b1e8:	f7fe fbb9 	bl	800995e <USBH_RegisterClass>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1f2:	f7f6 f99f 	bl	8001534 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b1f6:	4806      	ldr	r0, [pc, #24]	@ (800b210 <MX_USB_HOST_Init+0x44>)
 800b1f8:	f7fe fc3d 	bl	8009a76 <USBH_Start>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b202:	f7f6 f997 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b206:	bf00      	nop
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	0800b22d 	.word	0x0800b22d
 800b210:	20002304 	.word	0x20002304
 800b214:	2000000c 	.word	0x2000000c

0800b218 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b21c:	4802      	ldr	r0, [pc, #8]	@ (800b228 <MX_USB_HOST_Process+0x10>)
 800b21e:	f7fe fc3b 	bl	8009a98 <USBH_Process>
}
 800b222:	bf00      	nop
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	20002304 	.word	0x20002304

0800b22c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	2b04      	cmp	r3, #4
 800b23e:	d819      	bhi.n	800b274 <USBH_UserProcess+0x48>
 800b240:	a201      	add	r2, pc, #4	@ (adr r2, 800b248 <USBH_UserProcess+0x1c>)
 800b242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b246:	bf00      	nop
 800b248:	0800b275 	.word	0x0800b275
 800b24c:	0800b265 	.word	0x0800b265
 800b250:	0800b275 	.word	0x0800b275
 800b254:	0800b26d 	.word	0x0800b26d
 800b258:	0800b25d 	.word	0x0800b25d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b25c:	4b09      	ldr	r3, [pc, #36]	@ (800b284 <USBH_UserProcess+0x58>)
 800b25e:	2203      	movs	r2, #3
 800b260:	701a      	strb	r2, [r3, #0]
  break;
 800b262:	e008      	b.n	800b276 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b264:	4b07      	ldr	r3, [pc, #28]	@ (800b284 <USBH_UserProcess+0x58>)
 800b266:	2202      	movs	r2, #2
 800b268:	701a      	strb	r2, [r3, #0]
  break;
 800b26a:	e004      	b.n	800b276 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b26c:	4b05      	ldr	r3, [pc, #20]	@ (800b284 <USBH_UserProcess+0x58>)
 800b26e:	2201      	movs	r2, #1
 800b270:	701a      	strb	r2, [r3, #0]
  break;
 800b272:	e000      	b.n	800b276 <USBH_UserProcess+0x4a>

  default:
  break;
 800b274:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b276:	bf00      	nop
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr
 800b282:	bf00      	nop
 800b284:	200026dc 	.word	0x200026dc

0800b288 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08a      	sub	sp, #40	@ 0x28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b290:	f107 0314 	add.w	r3, r7, #20
 800b294:	2200      	movs	r2, #0
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	605a      	str	r2, [r3, #4]
 800b29a:	609a      	str	r2, [r3, #8]
 800b29c:	60da      	str	r2, [r3, #12]
 800b29e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2a8:	d147      	bne.n	800b33a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	4b25      	ldr	r3, [pc, #148]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b2:	4a24      	ldr	r2, [pc, #144]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b2b4:	f043 0301 	orr.w	r3, r3, #1
 800b2b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2ba:	4b22      	ldr	r3, [pc, #136]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b2c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b2d4:	f107 0314 	add.w	r3, r7, #20
 800b2d8:	4619      	mov	r1, r3
 800b2da:	481b      	ldr	r0, [pc, #108]	@ (800b348 <HAL_HCD_MspInit+0xc0>)
 800b2dc:	f7f7 fa96 	bl	800280c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b2e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b2e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b2f2:	230a      	movs	r3, #10
 800b2f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4812      	ldr	r0, [pc, #72]	@ (800b348 <HAL_HCD_MspInit+0xc0>)
 800b2fe:	f7f7 fa85 	bl	800280c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b302:	4b10      	ldr	r3, [pc, #64]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b306:	4a0f      	ldr	r2, [pc, #60]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b30c:	6353      	str	r3, [r2, #52]	@ 0x34
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	4b0c      	ldr	r3, [pc, #48]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b316:	4a0b      	ldr	r2, [pc, #44]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b31c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b31e:	4b09      	ldr	r3, [pc, #36]	@ (800b344 <HAL_HCD_MspInit+0xbc>)
 800b320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b32a:	2200      	movs	r2, #0
 800b32c:	2100      	movs	r1, #0
 800b32e:	2043      	movs	r0, #67	@ 0x43
 800b330:	f7f6 fec5 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b334:	2043      	movs	r0, #67	@ 0x43
 800b336:	f7f6 fede 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b33a:	bf00      	nop
 800b33c:	3728      	adds	r7, #40	@ 0x28
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	40023800 	.word	0x40023800
 800b348:	40020000 	.word	0x40020000

0800b34c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe ff73 	bl	800a246 <USBH_LL_IncTimer>
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe ffab 	bl	800a2d2 <USBH_LL_Connect>
}
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe ffb4 	bl	800a300 <USBH_LL_Disconnect>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fe ff65 	bl	800a29a <USBH_LL_PortEnabled>
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe ff65 	bl	800a2b6 <USBH_LL_PortDisabled>
}
 800b3ec:	bf00      	nop
 800b3ee:	3708      	adds	r7, #8
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b402:	2b01      	cmp	r3, #1
 800b404:	d12a      	bne.n	800b45c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b406:	4a18      	ldr	r2, [pc, #96]	@ (800b468 <USBH_LL_Init+0x74>)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a15      	ldr	r2, [pc, #84]	@ (800b468 <USBH_LL_Init+0x74>)
 800b412:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b416:	4b14      	ldr	r3, [pc, #80]	@ (800b468 <USBH_LL_Init+0x74>)
 800b418:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b41c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b41e:	4b12      	ldr	r3, [pc, #72]	@ (800b468 <USBH_LL_Init+0x74>)
 800b420:	2208      	movs	r2, #8
 800b422:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b424:	4b10      	ldr	r3, [pc, #64]	@ (800b468 <USBH_LL_Init+0x74>)
 800b426:	2201      	movs	r2, #1
 800b428:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b42a:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <USBH_LL_Init+0x74>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b430:	4b0d      	ldr	r3, [pc, #52]	@ (800b468 <USBH_LL_Init+0x74>)
 800b432:	2202      	movs	r2, #2
 800b434:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b436:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <USBH_LL_Init+0x74>)
 800b438:	2200      	movs	r2, #0
 800b43a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b43c:	480a      	ldr	r0, [pc, #40]	@ (800b468 <USBH_LL_Init+0x74>)
 800b43e:	f7f7 fbb4 	bl	8002baa <HAL_HCD_Init>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b448:	f7f6 f874 	bl	8001534 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b44c:	4806      	ldr	r0, [pc, #24]	@ (800b468 <USBH_LL_Init+0x74>)
 800b44e:	f7f8 f815 	bl	800347c <HAL_HCD_GetCurrentFrame>
 800b452:	4603      	mov	r3, r0
 800b454:	4619      	mov	r1, r3
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f7fe fee6 	bl	800a228 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	200026e0 	.word	0x200026e0

0800b46c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b478:	2300      	movs	r3, #0
 800b47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b482:	4618      	mov	r0, r3
 800b484:	f7f7 ff82 	bl	800338c <HAL_HCD_Start>
 800b488:	4603      	mov	r3, r0
 800b48a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f95e 	bl	800b750 <USBH_Get_USB_Status>
 800b494:	4603      	mov	r3, r0
 800b496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b498:	7bbb      	ldrb	r3, [r7, #14]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7f7 ff8a 	bl	80033d2 <HAL_HCD_Stop>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4c2:	7bfb      	ldrb	r3, [r7, #15]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f000 f943 	bl	800b750 <USBH_Get_USB_Status>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f7 ffd4 	bl	8003498 <HAL_HCD_GetCurrentSpeed>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d00c      	beq.n	800b510 <USBH_LL_GetSpeed+0x38>
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d80d      	bhi.n	800b516 <USBH_LL_GetSpeed+0x3e>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d002      	beq.n	800b504 <USBH_LL_GetSpeed+0x2c>
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d003      	beq.n	800b50a <USBH_LL_GetSpeed+0x32>
 800b502:	e008      	b.n	800b516 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b504:	2300      	movs	r3, #0
 800b506:	73fb      	strb	r3, [r7, #15]
    break;
 800b508:	e008      	b.n	800b51c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b50a:	2301      	movs	r3, #1
 800b50c:	73fb      	strb	r3, [r7, #15]
    break;
 800b50e:	e005      	b.n	800b51c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b510:	2302      	movs	r3, #2
 800b512:	73fb      	strb	r3, [r7, #15]
    break;
 800b514:	e002      	b.n	800b51c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b516:	2301      	movs	r3, #1
 800b518:	73fb      	strb	r3, [r7, #15]
    break;
 800b51a:	bf00      	nop
  }
  return  speed;
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7f7 ff65 	bl	800340c <HAL_HCD_ResetPort>
 800b542:	4603      	mov	r3, r0
 800b544:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f901 	bl	800b750 <USBH_Get_USB_Status>
 800b54e:	4603      	mov	r3, r0
 800b550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b552:	7bbb      	ldrb	r3, [r7, #14]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b56e:	78fa      	ldrb	r2, [r7, #3]
 800b570:	4611      	mov	r1, r2
 800b572:	4618      	mov	r0, r3
 800b574:	f7f7 ff6d 	bl	8003452 <HAL_HCD_HC_GetXferCount>
 800b578:	4603      	mov	r3, r0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b582:	b590      	push	{r4, r7, lr}
 800b584:	b089      	sub	sp, #36	@ 0x24
 800b586:	af04      	add	r7, sp, #16
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	461a      	mov	r2, r3
 800b590:	4603      	mov	r3, r0
 800b592:	70fb      	strb	r3, [r7, #3]
 800b594:	460b      	mov	r3, r1
 800b596:	70bb      	strb	r3, [r7, #2]
 800b598:	4613      	mov	r3, r2
 800b59a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b5aa:	787c      	ldrb	r4, [r7, #1]
 800b5ac:	78ba      	ldrb	r2, [r7, #2]
 800b5ae:	78f9      	ldrb	r1, [r7, #3]
 800b5b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b5b2:	9302      	str	r3, [sp, #8]
 800b5b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5be:	9300      	str	r3, [sp, #0]
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	f7f7 fb59 	bl	8002c78 <HAL_HCD_HC_Init>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f000 f8bf 	bl	800b750 <USBH_Get_USB_Status>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd90      	pop	{r4, r7, pc}

0800b5e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5fa:	78fa      	ldrb	r2, [r7, #3]
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f7 fbf2 	bl	8002de8 <HAL_HCD_HC_Halt>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 f8a0 	bl	800b750 <USBH_Get_USB_Status>
 800b610:	4603      	mov	r3, r0
 800b612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b614:	7bbb      	ldrb	r3, [r7, #14]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b61e:	b590      	push	{r4, r7, lr}
 800b620:	b089      	sub	sp, #36	@ 0x24
 800b622:	af04      	add	r7, sp, #16
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	4608      	mov	r0, r1
 800b628:	4611      	mov	r1, r2
 800b62a:	461a      	mov	r2, r3
 800b62c:	4603      	mov	r3, r0
 800b62e:	70fb      	strb	r3, [r7, #3]
 800b630:	460b      	mov	r3, r1
 800b632:	70bb      	strb	r3, [r7, #2]
 800b634:	4613      	mov	r3, r2
 800b636:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b646:	787c      	ldrb	r4, [r7, #1]
 800b648:	78ba      	ldrb	r2, [r7, #2]
 800b64a:	78f9      	ldrb	r1, [r7, #3]
 800b64c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b654:	9302      	str	r3, [sp, #8]
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	4623      	mov	r3, r4
 800b662:	f7f7 fbe5 	bl	8002e30 <HAL_HCD_HC_SubmitRequest>
 800b666:	4603      	mov	r3, r0
 800b668:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 f86f 	bl	800b750 <USBH_Get_USB_Status>
 800b672:	4603      	mov	r3, r0
 800b674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b676:	7bbb      	ldrb	r3, [r7, #14]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3714      	adds	r7, #20
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd90      	pop	{r4, r7, pc}

0800b680 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b692:	78fa      	ldrb	r2, [r7, #3]
 800b694:	4611      	mov	r1, r2
 800b696:	4618      	mov	r0, r3
 800b698:	f7f7 fec6 	bl	8003428 <HAL_HCD_HC_GetURBState>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d103      	bne.n	800b6c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 f872 	bl	800b7a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b6c4:	20c8      	movs	r0, #200	@ 0xc8
 800b6c6:	f7f6 fbfb 	bl	8001ec0 <HAL_Delay>
  return USBH_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	70fb      	strb	r3, [r7, #3]
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6ec:	78fa      	ldrb	r2, [r7, #3]
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	011b      	lsls	r3, r3, #4
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	3317      	adds	r3, #23
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	68f9      	ldr	r1, [r7, #12]
 800b706:	4613      	mov	r3, r2
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	333c      	adds	r3, #60	@ 0x3c
 800b712:	78ba      	ldrb	r2, [r7, #2]
 800b714:	701a      	strb	r2, [r3, #0]
 800b716:	e009      	b.n	800b72c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b718:	78fa      	ldrb	r2, [r7, #3]
 800b71a:	68f9      	ldr	r1, [r7, #12]
 800b71c:	4613      	mov	r3, r2
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	1a9b      	subs	r3, r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	333d      	adds	r3, #61	@ 0x3d
 800b728:	78ba      	ldrb	r2, [r7, #2]
 800b72a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f7f6 fbbc 	bl	8001ec0 <HAL_Delay>
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b75e:	79fb      	ldrb	r3, [r7, #7]
 800b760:	2b03      	cmp	r3, #3
 800b762:	d817      	bhi.n	800b794 <USBH_Get_USB_Status+0x44>
 800b764:	a201      	add	r2, pc, #4	@ (adr r2, 800b76c <USBH_Get_USB_Status+0x1c>)
 800b766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76a:	bf00      	nop
 800b76c:	0800b77d 	.word	0x0800b77d
 800b770:	0800b783 	.word	0x0800b783
 800b774:	0800b789 	.word	0x0800b789
 800b778:	0800b78f 	.word	0x0800b78f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
    break;
 800b780:	e00b      	b.n	800b79a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b782:	2302      	movs	r3, #2
 800b784:	73fb      	strb	r3, [r7, #15]
    break;
 800b786:	e008      	b.n	800b79a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b788:	2301      	movs	r3, #1
 800b78a:	73fb      	strb	r3, [r7, #15]
    break;
 800b78c:	e005      	b.n	800b79a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b78e:	2302      	movs	r3, #2
 800b790:	73fb      	strb	r3, [r7, #15]
    break;
 800b792:	e002      	b.n	800b79a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b794:	2302      	movs	r3, #2
 800b796:	73fb      	strb	r3, [r7, #15]
    break;
 800b798:	bf00      	nop
  }
  return usb_status;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af04      	add	r7, sp, #16
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800b7be:	79fb      	ldrb	r3, [r7, #7]
 800b7c0:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800b7c6:	7b7b      	ldrb	r3, [r7, #13]
 800b7c8:	b299      	uxth	r1, r3
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	2364      	movs	r3, #100	@ 0x64
 800b7d0:	9302      	str	r3, [sp, #8]
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	f107 030b 	add.w	r3, r7, #11
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	2301      	movs	r3, #1
 800b7de:	480f      	ldr	r0, [pc, #60]	@ (800b81c <MX_DriverVbusFS+0x74>)
 800b7e0:	f7f9 fd56 	bl	8005290 <HAL_I2C_Mem_Read>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800b7e8:	7b3a      	ldrb	r2, [r7, #12]
 800b7ea:	7afb      	ldrb	r3, [r7, #11]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800b7f2:	7b7b      	ldrb	r3, [r7, #13]
 800b7f4:	b299      	uxth	r1, r3
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	2364      	movs	r3, #100	@ 0x64
 800b7fc:	9302      	str	r3, [sp, #8]
 800b7fe:	2301      	movs	r3, #1
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	2301      	movs	r3, #1
 800b80a:	4804      	ldr	r0, [pc, #16]	@ (800b81c <MX_DriverVbusFS+0x74>)
 800b80c:	f7f9 fc46 	bl	800509c <HAL_I2C_Mem_Write>
 800b810:	4603      	mov	r3, r0
 800b812:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800b814:	bf00      	nop
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20000098 	.word	0x20000098

0800b820 <malloc>:
 800b820:	4b02      	ldr	r3, [pc, #8]	@ (800b82c <malloc+0xc>)
 800b822:	4601      	mov	r1, r0
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f000 b82d 	b.w	800b884 <_malloc_r>
 800b82a:	bf00      	nop
 800b82c:	2000002c 	.word	0x2000002c

0800b830 <free>:
 800b830:	4b02      	ldr	r3, [pc, #8]	@ (800b83c <free+0xc>)
 800b832:	4601      	mov	r1, r0
 800b834:	6818      	ldr	r0, [r3, #0]
 800b836:	f000 b8f5 	b.w	800ba24 <_free_r>
 800b83a:	bf00      	nop
 800b83c:	2000002c 	.word	0x2000002c

0800b840 <sbrk_aligned>:
 800b840:	b570      	push	{r4, r5, r6, lr}
 800b842:	4e0f      	ldr	r6, [pc, #60]	@ (800b880 <sbrk_aligned+0x40>)
 800b844:	460c      	mov	r4, r1
 800b846:	6831      	ldr	r1, [r6, #0]
 800b848:	4605      	mov	r5, r0
 800b84a:	b911      	cbnz	r1, 800b852 <sbrk_aligned+0x12>
 800b84c:	f000 f8ae 	bl	800b9ac <_sbrk_r>
 800b850:	6030      	str	r0, [r6, #0]
 800b852:	4621      	mov	r1, r4
 800b854:	4628      	mov	r0, r5
 800b856:	f000 f8a9 	bl	800b9ac <_sbrk_r>
 800b85a:	1c43      	adds	r3, r0, #1
 800b85c:	d103      	bne.n	800b866 <sbrk_aligned+0x26>
 800b85e:	f04f 34ff 	mov.w	r4, #4294967295
 800b862:	4620      	mov	r0, r4
 800b864:	bd70      	pop	{r4, r5, r6, pc}
 800b866:	1cc4      	adds	r4, r0, #3
 800b868:	f024 0403 	bic.w	r4, r4, #3
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d0f8      	beq.n	800b862 <sbrk_aligned+0x22>
 800b870:	1a21      	subs	r1, r4, r0
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f89a 	bl	800b9ac <_sbrk_r>
 800b878:	3001      	adds	r0, #1
 800b87a:	d1f2      	bne.n	800b862 <sbrk_aligned+0x22>
 800b87c:	e7ef      	b.n	800b85e <sbrk_aligned+0x1e>
 800b87e:	bf00      	nop
 800b880:	20002ac0 	.word	0x20002ac0

0800b884 <_malloc_r>:
 800b884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b888:	1ccd      	adds	r5, r1, #3
 800b88a:	f025 0503 	bic.w	r5, r5, #3
 800b88e:	3508      	adds	r5, #8
 800b890:	2d0c      	cmp	r5, #12
 800b892:	bf38      	it	cc
 800b894:	250c      	movcc	r5, #12
 800b896:	2d00      	cmp	r5, #0
 800b898:	4606      	mov	r6, r0
 800b89a:	db01      	blt.n	800b8a0 <_malloc_r+0x1c>
 800b89c:	42a9      	cmp	r1, r5
 800b89e:	d904      	bls.n	800b8aa <_malloc_r+0x26>
 800b8a0:	230c      	movs	r3, #12
 800b8a2:	6033      	str	r3, [r6, #0]
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b980 <_malloc_r+0xfc>
 800b8ae:	f000 f869 	bl	800b984 <__malloc_lock>
 800b8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b8b6:	461c      	mov	r4, r3
 800b8b8:	bb44      	cbnz	r4, 800b90c <_malloc_r+0x88>
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7ff ffbf 	bl	800b840 <sbrk_aligned>
 800b8c2:	1c43      	adds	r3, r0, #1
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	d158      	bne.n	800b97a <_malloc_r+0xf6>
 800b8c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b8cc:	4627      	mov	r7, r4
 800b8ce:	2f00      	cmp	r7, #0
 800b8d0:	d143      	bne.n	800b95a <_malloc_r+0xd6>
 800b8d2:	2c00      	cmp	r4, #0
 800b8d4:	d04b      	beq.n	800b96e <_malloc_r+0xea>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	4639      	mov	r1, r7
 800b8da:	4630      	mov	r0, r6
 800b8dc:	eb04 0903 	add.w	r9, r4, r3
 800b8e0:	f000 f864 	bl	800b9ac <_sbrk_r>
 800b8e4:	4581      	cmp	r9, r0
 800b8e6:	d142      	bne.n	800b96e <_malloc_r+0xea>
 800b8e8:	6821      	ldr	r1, [r4, #0]
 800b8ea:	1a6d      	subs	r5, r5, r1
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	f7ff ffa6 	bl	800b840 <sbrk_aligned>
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d03a      	beq.n	800b96e <_malloc_r+0xea>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	442b      	add	r3, r5
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	bb62      	cbnz	r2, 800b960 <_malloc_r+0xdc>
 800b906:	f8c8 7000 	str.w	r7, [r8]
 800b90a:	e00f      	b.n	800b92c <_malloc_r+0xa8>
 800b90c:	6822      	ldr	r2, [r4, #0]
 800b90e:	1b52      	subs	r2, r2, r5
 800b910:	d420      	bmi.n	800b954 <_malloc_r+0xd0>
 800b912:	2a0b      	cmp	r2, #11
 800b914:	d917      	bls.n	800b946 <_malloc_r+0xc2>
 800b916:	1961      	adds	r1, r4, r5
 800b918:	42a3      	cmp	r3, r4
 800b91a:	6025      	str	r5, [r4, #0]
 800b91c:	bf18      	it	ne
 800b91e:	6059      	strne	r1, [r3, #4]
 800b920:	6863      	ldr	r3, [r4, #4]
 800b922:	bf08      	it	eq
 800b924:	f8c8 1000 	streq.w	r1, [r8]
 800b928:	5162      	str	r2, [r4, r5]
 800b92a:	604b      	str	r3, [r1, #4]
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 f82f 	bl	800b990 <__malloc_unlock>
 800b932:	f104 000b 	add.w	r0, r4, #11
 800b936:	1d23      	adds	r3, r4, #4
 800b938:	f020 0007 	bic.w	r0, r0, #7
 800b93c:	1ac2      	subs	r2, r0, r3
 800b93e:	bf1c      	itt	ne
 800b940:	1a1b      	subne	r3, r3, r0
 800b942:	50a3      	strne	r3, [r4, r2]
 800b944:	e7af      	b.n	800b8a6 <_malloc_r+0x22>
 800b946:	6862      	ldr	r2, [r4, #4]
 800b948:	42a3      	cmp	r3, r4
 800b94a:	bf0c      	ite	eq
 800b94c:	f8c8 2000 	streq.w	r2, [r8]
 800b950:	605a      	strne	r2, [r3, #4]
 800b952:	e7eb      	b.n	800b92c <_malloc_r+0xa8>
 800b954:	4623      	mov	r3, r4
 800b956:	6864      	ldr	r4, [r4, #4]
 800b958:	e7ae      	b.n	800b8b8 <_malloc_r+0x34>
 800b95a:	463c      	mov	r4, r7
 800b95c:	687f      	ldr	r7, [r7, #4]
 800b95e:	e7b6      	b.n	800b8ce <_malloc_r+0x4a>
 800b960:	461a      	mov	r2, r3
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	42a3      	cmp	r3, r4
 800b966:	d1fb      	bne.n	800b960 <_malloc_r+0xdc>
 800b968:	2300      	movs	r3, #0
 800b96a:	6053      	str	r3, [r2, #4]
 800b96c:	e7de      	b.n	800b92c <_malloc_r+0xa8>
 800b96e:	230c      	movs	r3, #12
 800b970:	6033      	str	r3, [r6, #0]
 800b972:	4630      	mov	r0, r6
 800b974:	f000 f80c 	bl	800b990 <__malloc_unlock>
 800b978:	e794      	b.n	800b8a4 <_malloc_r+0x20>
 800b97a:	6005      	str	r5, [r0, #0]
 800b97c:	e7d6      	b.n	800b92c <_malloc_r+0xa8>
 800b97e:	bf00      	nop
 800b980:	20002ac4 	.word	0x20002ac4

0800b984 <__malloc_lock>:
 800b984:	4801      	ldr	r0, [pc, #4]	@ (800b98c <__malloc_lock+0x8>)
 800b986:	f000 b84b 	b.w	800ba20 <__retarget_lock_acquire_recursive>
 800b98a:	bf00      	nop
 800b98c:	20002c04 	.word	0x20002c04

0800b990 <__malloc_unlock>:
 800b990:	4801      	ldr	r0, [pc, #4]	@ (800b998 <__malloc_unlock+0x8>)
 800b992:	f000 b846 	b.w	800ba22 <__retarget_lock_release_recursive>
 800b996:	bf00      	nop
 800b998:	20002c04 	.word	0x20002c04

0800b99c <memset>:
 800b99c:	4402      	add	r2, r0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d100      	bne.n	800b9a6 <memset+0xa>
 800b9a4:	4770      	bx	lr
 800b9a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9aa:	e7f9      	b.n	800b9a0 <memset+0x4>

0800b9ac <_sbrk_r>:
 800b9ac:	b538      	push	{r3, r4, r5, lr}
 800b9ae:	4d06      	ldr	r5, [pc, #24]	@ (800b9c8 <_sbrk_r+0x1c>)
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	4608      	mov	r0, r1
 800b9b6:	602b      	str	r3, [r5, #0]
 800b9b8:	f7f6 f8aa 	bl	8001b10 <_sbrk>
 800b9bc:	1c43      	adds	r3, r0, #1
 800b9be:	d102      	bne.n	800b9c6 <_sbrk_r+0x1a>
 800b9c0:	682b      	ldr	r3, [r5, #0]
 800b9c2:	b103      	cbz	r3, 800b9c6 <_sbrk_r+0x1a>
 800b9c4:	6023      	str	r3, [r4, #0]
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	20002c00 	.word	0x20002c00

0800b9cc <__errno>:
 800b9cc:	4b01      	ldr	r3, [pc, #4]	@ (800b9d4 <__errno+0x8>)
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000002c 	.word	0x2000002c

0800b9d8 <__libc_init_array>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	4d0d      	ldr	r5, [pc, #52]	@ (800ba10 <__libc_init_array+0x38>)
 800b9dc:	4c0d      	ldr	r4, [pc, #52]	@ (800ba14 <__libc_init_array+0x3c>)
 800b9de:	1b64      	subs	r4, r4, r5
 800b9e0:	10a4      	asrs	r4, r4, #2
 800b9e2:	2600      	movs	r6, #0
 800b9e4:	42a6      	cmp	r6, r4
 800b9e6:	d109      	bne.n	800b9fc <__libc_init_array+0x24>
 800b9e8:	4d0b      	ldr	r5, [pc, #44]	@ (800ba18 <__libc_init_array+0x40>)
 800b9ea:	4c0c      	ldr	r4, [pc, #48]	@ (800ba1c <__libc_init_array+0x44>)
 800b9ec:	f000 f864 	bl	800bab8 <_init>
 800b9f0:	1b64      	subs	r4, r4, r5
 800b9f2:	10a4      	asrs	r4, r4, #2
 800b9f4:	2600      	movs	r6, #0
 800b9f6:	42a6      	cmp	r6, r4
 800b9f8:	d105      	bne.n	800ba06 <__libc_init_array+0x2e>
 800b9fa:	bd70      	pop	{r4, r5, r6, pc}
 800b9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba00:	4798      	blx	r3
 800ba02:	3601      	adds	r6, #1
 800ba04:	e7ee      	b.n	800b9e4 <__libc_init_array+0xc>
 800ba06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba0a:	4798      	blx	r3
 800ba0c:	3601      	adds	r6, #1
 800ba0e:	e7f2      	b.n	800b9f6 <__libc_init_array+0x1e>
 800ba10:	0800bafc 	.word	0x0800bafc
 800ba14:	0800bafc 	.word	0x0800bafc
 800ba18:	0800bafc 	.word	0x0800bafc
 800ba1c:	0800bb00 	.word	0x0800bb00

0800ba20 <__retarget_lock_acquire_recursive>:
 800ba20:	4770      	bx	lr

0800ba22 <__retarget_lock_release_recursive>:
 800ba22:	4770      	bx	lr

0800ba24 <_free_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4605      	mov	r5, r0
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	d041      	beq.n	800bab0 <_free_r+0x8c>
 800ba2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba30:	1f0c      	subs	r4, r1, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfb8      	it	lt
 800ba36:	18e4      	addlt	r4, r4, r3
 800ba38:	f7ff ffa4 	bl	800b984 <__malloc_lock>
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bab4 <_free_r+0x90>)
 800ba3e:	6813      	ldr	r3, [r2, #0]
 800ba40:	b933      	cbnz	r3, 800ba50 <_free_r+0x2c>
 800ba42:	6063      	str	r3, [r4, #4]
 800ba44:	6014      	str	r4, [r2, #0]
 800ba46:	4628      	mov	r0, r5
 800ba48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba4c:	f7ff bfa0 	b.w	800b990 <__malloc_unlock>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d908      	bls.n	800ba66 <_free_r+0x42>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf01      	itttt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	1809      	addeq	r1, r1, r0
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	e7ed      	b.n	800ba42 <_free_r+0x1e>
 800ba66:	461a      	mov	r2, r3
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	b10b      	cbz	r3, 800ba70 <_free_r+0x4c>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d9fa      	bls.n	800ba66 <_free_r+0x42>
 800ba70:	6811      	ldr	r1, [r2, #0]
 800ba72:	1850      	adds	r0, r2, r1
 800ba74:	42a0      	cmp	r0, r4
 800ba76:	d10b      	bne.n	800ba90 <_free_r+0x6c>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	4401      	add	r1, r0
 800ba7c:	1850      	adds	r0, r2, r1
 800ba7e:	4283      	cmp	r3, r0
 800ba80:	6011      	str	r1, [r2, #0]
 800ba82:	d1e0      	bne.n	800ba46 <_free_r+0x22>
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	6053      	str	r3, [r2, #4]
 800ba8a:	4408      	add	r0, r1
 800ba8c:	6010      	str	r0, [r2, #0]
 800ba8e:	e7da      	b.n	800ba46 <_free_r+0x22>
 800ba90:	d902      	bls.n	800ba98 <_free_r+0x74>
 800ba92:	230c      	movs	r3, #12
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	e7d6      	b.n	800ba46 <_free_r+0x22>
 800ba98:	6820      	ldr	r0, [r4, #0]
 800ba9a:	1821      	adds	r1, r4, r0
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf04      	itt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	6063      	str	r3, [r4, #4]
 800baa6:	bf04      	itt	eq
 800baa8:	1809      	addeq	r1, r1, r0
 800baaa:	6021      	streq	r1, [r4, #0]
 800baac:	6054      	str	r4, [r2, #4]
 800baae:	e7ca      	b.n	800ba46 <_free_r+0x22>
 800bab0:	bd38      	pop	{r3, r4, r5, pc}
 800bab2:	bf00      	nop
 800bab4:	20002ac4 	.word	0x20002ac4

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
