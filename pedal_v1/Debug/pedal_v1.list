
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080070e0  080070e0  000080e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000080e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070ec  080070ec  000080ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080070f0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009014  2**0
                  CONTENTS
 10 .bss          00000bcc  20000014  20000014  00009014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000be0  20000be0  00009014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fd5  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003465  00000000  00000000  0001e019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e99  00000000  00000000  00022780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000236d8  00000000  00000000  00023619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001728d  00000000  00000000  00046cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6197  00000000  00000000  0005df7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134115  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fb8  00000000  00000000  00134158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00139110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070a8 	.word	0x080070a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080070a8 	.word	0x080070a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 fa10 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f83c 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa1e 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 f9de 	bl	80008c4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000508:	f000 f91c 	bl	8000744 <MX_I2C1_Init>
  MX_SPI1_Init();
 800050c:	f000 f976 	bl	80007fc <MX_SPI1_Init>
  MX_DAC_Init();
 8000510:	f000 f8ee 	bl	80006f0 <MX_DAC_Init>
  MX_I2S3_Init();
 8000514:	f000 f944 	bl	80007a0 <MX_I2S3_Init>
  MX_ADC1_Init();
 8000518:	f000 f898 	bl	800064c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800051c:	f000 f9a4 	bl	8000868 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  cs43l22_Init(CODEC_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 50, 48000);
 8000520:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000524:	2232      	movs	r2, #50	@ 0x32
 8000526:	2102      	movs	r1, #2
 8000528:	2094      	movs	r0, #148	@ 0x94
 800052a:	f000 fe97 	bl	800125c <cs43l22_Init>
  cs43l22_SetMute(CODEC_ADDRESS, 0);
 800052e:	2100      	movs	r1, #0
 8000530:	2094      	movs	r0, #148	@ 0x94
 8000532:	f001 f80f 	bl	8001554 <cs43l22_SetMute>
  cs43l22_Play(CODEC_ADDRESS, (uint16_t*)audio_buffer, AUDIO_BUFFER_SIZE);
 8000536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800053a:	490b      	ldr	r1, [pc, #44]	@ (8000568 <main+0x74>)
 800053c:	2094      	movs	r0, #148	@ 0x94
 800053e:	f000 ff71 	bl	8001424 <cs43l22_Play>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	@ (800056c <main+0x78>)
 8000546:	f001 ffc4 	bl	80024d2 <HAL_DAC_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)audio_buffer, AUDIO_BUFFER_SIZE);
 800054a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800054e:	4906      	ldr	r1, [pc, #24]	@ (8000568 <main+0x74>)
 8000550:	4807      	ldr	r0, [pc, #28]	@ (8000570 <main+0x7c>)
 8000552:	f001 fabd 	bl	8001ad0 <HAL_ADC_Start_DMA>
  HAL_I2S_Transmit_DMA(&hi2s3, audio_buffer, AUDIO_BUFFER_SIZE);
 8000556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800055a:	4903      	ldr	r1, [pc, #12]	@ (8000568 <main+0x74>)
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <main+0x80>)
 800055e:	f003 fcb7 	bl	8003ed0 <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	bf00      	nop
 8000564:	e7fd      	b.n	8000562 <main+0x6e>
 8000566:	bf00      	nop
 8000568:	20000030 	.word	0x20000030
 800056c:	200004d8 	.word	0x200004d8
 8000570:	20000430 	.word	0x20000430
 8000574:	20000540 	.word	0x20000540

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 fd61 	bl	800704e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ec:	23a8      	movs	r3, #168	@ 0xa8
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f005 f8bf 	bl	8005780 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 fa98 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000618:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2105      	movs	r1, #5
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fb20 	bl	8005c70 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000636:	f000 fa81 	bl	8000b3c <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <MX_ADC1_Init+0x9c>)
 8000662:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000666:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800066a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066c:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <MX_ADC1_Init+0x98>)
 800067a:	2201      	movs	r2, #1
 800067c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068c:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_ADC1_Init+0x98>)
 800068e:	4a17      	ldr	r2, [pc, #92]	@ (80006ec <MX_ADC1_Init+0xa0>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_ADC1_Init+0x98>)
 800069a:	2201      	movs	r2, #1
 800069c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_ADC1_Init+0x98>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ac:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_ADC1_Init+0x98>)
 80006ae:	f001 f9cb 	bl	8001a48 <HAL_ADC_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006b8:	f000 fa40 	bl	8000b3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006bc:	2301      	movs	r3, #1
 80006be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	4619      	mov	r1, r3
 80006cc:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_ADC1_Init+0x98>)
 80006ce:	f001 fb2d 	bl	8001d2c <HAL_ADC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006d8:	f000 fa30 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000430 	.word	0x20000430
 80006e8:	40012000 	.word	0x40012000
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_DAC_Init+0x4c>)
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <MX_DAC_Init+0x50>)
 8000702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_DAC_Init+0x4c>)
 8000706:	f001 fec2 	bl	800248e <HAL_DAC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000710:	f000 fa14 	bl	8000b3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	@ (800073c <MX_DAC_Init+0x4c>)
 8000724:	f001 ff2c 	bl	8002580 <HAL_DAC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800072e:	f000 fa05 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200004d8 	.word	0x200004d8
 8000740:	40007400 	.word	0x40007400

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f002 fd79 	bl	8003278 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 f9d6 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200004ec 	.word	0x200004ec
 8000798:	40005400 	.word	0x40005400
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2201      	movs	r2, #1
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f003 fa36 	bl	8003c50 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f9a7 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000540 	.word	0x20000540
 80007f8:	40003c00 	.word	0x40003c00

080007fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000800:	4b17      	ldr	r3, [pc, #92]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	@ (8000864 <MX_SPI1_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	@ (8000860 <MX_SPI1_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_SPI1_Init+0x64>)
 800084e:	f005 fd59 	bl	8006304 <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000858:	f000 f970 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000648 	.word	0x20000648
 8000864:	40013000 	.word	0x40013000

08000868 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2204      	movs	r2, #4
 8000878:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2202      	movs	r2, #2
 800087e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2202      	movs	r2, #2
 800088a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	f003 ff4a 	bl	8004744 <HAL_PCD_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f941 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200006a0 	.word	0x200006a0

080008c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_DMA_Init+0x78>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a1a      	ldr	r2, [pc, #104]	@ (800093c <MX_DMA_Init+0x78>)
 80008d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_DMA_Init+0x78>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_DMA_Init+0x78>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a13      	ldr	r2, [pc, #76]	@ (800093c <MX_DMA_Init+0x78>)
 80008f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_DMA_Init+0x78>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f001 fd8b 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f001 fda4 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2010      	movs	r0, #16
 8000918:	f001 fd83 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800091c:	2010      	movs	r0, #16
 800091e:	f001 fd9c 	bl	800245a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2038      	movs	r0, #56	@ 0x38
 8000928:	f001 fd7b 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800092c:	2038      	movs	r0, #56	@ 0x38
 800092e:	f001 fd94 	bl	800245a <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	4b72      	ldr	r3, [pc, #456]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a71      	ldr	r2, [pc, #452]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b6f      	ldr	r3, [pc, #444]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0310 	and.w	r3, r3, #16
 800096e:	61bb      	str	r3, [r7, #24]
 8000970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	4b6b      	ldr	r3, [pc, #428]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b68      	ldr	r3, [pc, #416]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b64      	ldr	r3, [pc, #400]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a63      	ldr	r2, [pc, #396]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b61      	ldr	r3, [pc, #388]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a5c      	ldr	r2, [pc, #368]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b56      	ldr	r3, [pc, #344]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a55      	ldr	r2, [pc, #340]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b53      	ldr	r3, [pc, #332]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a4e      	ldr	r2, [pc, #312]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b4c      	ldr	r3, [pc, #304]	@ (8000b24 <MX_GPIO_Init+0x1e4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2108      	movs	r1, #8
 8000a02:	4849      	ldr	r0, [pc, #292]	@ (8000b28 <MX_GPIO_Init+0x1e8>)
 8000a04:	f002 fc1e 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	4847      	ldr	r0, [pc, #284]	@ (8000b2c <MX_GPIO_Init+0x1ec>)
 8000a0e:	f002 fc19 	bl	8003244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a12:	2200      	movs	r2, #0
 8000a14:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a18:	4845      	ldr	r0, [pc, #276]	@ (8000b30 <MX_GPIO_Init+0x1f0>)
 8000a1a:	f002 fc13 	bl	8003244 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	483c      	ldr	r0, [pc, #240]	@ (8000b28 <MX_GPIO_Init+0x1e8>)
 8000a36:	f002 f96d 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4836      	ldr	r0, [pc, #216]	@ (8000b2c <MX_GPIO_Init+0x1ec>)
 8000a52:	f002 f95f 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a56:	2308      	movs	r3, #8
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a66:	2305      	movs	r3, #5
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	482e      	ldr	r0, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0x1ec>)
 8000a72:	f002 f94f 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a7a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	482a      	ldr	r0, [pc, #168]	@ (8000b34 <MX_GPIO_Init+0x1f4>)
 8000a8c:	f002 f942 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a90:	2304      	movs	r3, #4
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4825      	ldr	r0, [pc, #148]	@ (8000b38 <MX_GPIO_Init+0x1f8>)
 8000aa4:	f002 f936 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000aa8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aba:	2305      	movs	r3, #5
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481c      	ldr	r0, [pc, #112]	@ (8000b38 <MX_GPIO_Init+0x1f8>)
 8000ac6:	f002 f925 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000aca:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000ace:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <MX_GPIO_Init+0x1f0>)
 8000ae4:	f002 f916 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ae8:	2320      	movs	r3, #32
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	@ (8000b30 <MX_GPIO_Init+0x1f0>)
 8000afc:	f002 f90a 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b04:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_GPIO_Init+0x1e8>)
 8000b16:	f002 f8fd 	bl	8002d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	@ 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40020c00 	.word	0x40020c00
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <Error_Handler+0x8>

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b86:	2007      	movs	r0, #7
 8000b88:	f001 fc40 	bl	800240c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	@ 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <HAL_ADC_MspInit+0xdc>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d158      	bne.n	8000c6c <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <HAL_ADC_MspInit+0xe0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	481d      	ldr	r0, [pc, #116]	@ (8000c7c <HAL_ADC_MspInit+0xe4>)
 8000c06:	f002 f885 	bl	8002d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c84 <HAL_ADC_MspInit+0xec>)
 8000c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c32:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c48:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c52:	f001 fcef 	bl	8002634 <HAL_DMA_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c5c:	f7ff ff6e 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c64:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c66:	4a06      	ldr	r2, [pc, #24]	@ (8000c80 <HAL_ADC_MspInit+0xe8>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	@ 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012000 	.word	0x40012000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	20000478 	.word	0x20000478
 8000c84:	40026410 	.word	0x40026410

08000c88 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	@ 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <HAL_DAC_MspInit+0x7c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d127      	bne.n	8000cfa <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000cb4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <HAL_DAC_MspInit+0x80>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce2:	2310      	movs	r3, #16
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_DAC_MspInit+0x84>)
 8000cf6:	f002 f80d 	bl	8002d14 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	@ 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40007400 	.word	0x40007400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_I2C_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12c      	bne.n	8000d8c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d4e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d54:	2312      	movs	r3, #18
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d60:	2304      	movs	r3, #4
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <HAL_I2C_MspInit+0x8c>)
 8000d6c:	f001 ffd2 	bl	8002d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	@ 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40005400 	.word	0x40005400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <HAL_I2C_MspDeInit+0x38>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10e      	bne.n	8000dd0 <HAL_I2C_MspDeInit+0x30>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_I2C_MspDeInit+0x3c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <HAL_I2C_MspDeInit+0x3c>)
 8000db8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8000dbe:	2140      	movs	r1, #64	@ 0x40
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <HAL_I2C_MspDeInit+0x40>)
 8000dc2:	f002 f943 	bl	800304c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8000dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <HAL_I2C_MspDeInit+0x40>)
 8000dcc:	f002 f93e 	bl	800304c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	@ 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6c      	ldr	r2, [pc, #432]	@ (8000fc0 <HAL_I2S_MspInit+0x1dc>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	f040 80d0 	bne.w	8000fb6 <HAL_I2S_MspInit+0x1d2>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e16:	2301      	movs	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000e1a:	2332      	movs	r3, #50	@ 0x32
 8000e1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4618      	mov	r0, r3
 8000e28:	f005 f92c 	bl	8006084 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000e32:	f7ff fe83 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b62      	ldr	r3, [pc, #392]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a61      	ldr	r2, [pc, #388]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b5f      	ldr	r3, [pc, #380]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b58      	ldr	r3, [pc, #352]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b54      	ldr	r3, [pc, #336]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a53      	ldr	r2, [pc, #332]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	4b51      	ldr	r3, [pc, #324]	@ (8000fc4 <HAL_I2S_MspInit+0x1e0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e8a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4848      	ldr	r0, [pc, #288]	@ (8000fc8 <HAL_I2S_MspInit+0x1e4>)
 8000ea8:	f001 ff34 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4840      	ldr	r0, [pc, #256]	@ (8000fcc <HAL_I2S_MspInit+0x1e8>)
 8000eca:	f001 ff23 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ece:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000edc:	2300      	movs	r3, #0
 8000ede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4837      	ldr	r0, [pc, #220]	@ (8000fc8 <HAL_I2S_MspInit+0x1e4>)
 8000eec:	f001 ff12 	bl	8002d14 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000ef0:	4b37      	ldr	r3, [pc, #220]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000ef2:	4a38      	ldr	r2, [pc, #224]	@ (8000fd4 <HAL_I2S_MspInit+0x1f0>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000ef6:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000ef8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b34      	ldr	r3, [pc, #208]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f28:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f2a:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f2c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f30:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f32:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000f38:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f3a:	f001 fb7b 	bl	8002634 <HAL_DMA_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_I2S_MspInit+0x164>
    {
      Error_Handler();
 8000f44:	f7ff fdfa 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f4e:	4a20      	ldr	r2, [pc, #128]	@ (8000fd0 <HAL_I2S_MspInit+0x1ec>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <HAL_I2S_MspInit+0x1f8>)
 8000f58:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f62:	2240      	movs	r2, #64	@ 0x40
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f74:	4b18      	ldr	r3, [pc, #96]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f7a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000f84:	4b14      	ldr	r3, [pc, #80]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f8a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f92:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000f9a:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000f9c:	f001 fb4a 	bl	8002634 <HAL_DMA_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 8000fa6:	f7ff fdc9 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fb0:	4a09      	ldr	r2, [pc, #36]	@ (8000fd8 <HAL_I2S_MspInit+0x1f4>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000fb6:	bf00      	nop
 8000fb8:	3738      	adds	r7, #56	@ 0x38
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40003c00 	.word	0x40003c00
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	20000588 	.word	0x20000588
 8000fd4:	40026010 	.word	0x40026010
 8000fd8:	200005e8 	.word	0x200005e8
 8000fdc:	40026088 	.word	0x40026088

08000fe0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_SPI_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a17      	ldr	r2, [pc, #92]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_SPI_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800103a:	23e0      	movs	r3, #224	@ 0xe0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <HAL_SPI_MspInit+0x8c>)
 8001056:	f001 fe5d 	bl	8002d14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	@ 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013000 	.word	0x40013000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001090:	d147      	bne.n	8001122 <HAL_PCD_MspInit+0xb2>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a24      	ldr	r2, [pc, #144]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80010ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	481b      	ldr	r0, [pc, #108]	@ (8001130 <HAL_PCD_MspInit+0xc0>)
 80010c4:	f001 fe26 	bl	8002d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80010c8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010da:	230a      	movs	r3, #10
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4812      	ldr	r0, [pc, #72]	@ (8001130 <HAL_PCD_MspInit+0xc0>)
 80010e6:	f001 fe15 	bl	8002d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	4a0f      	ldr	r2, [pc, #60]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001104:	6453      	str	r3, [r2, #68]	@ 0x44
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <HAL_PCD_MspInit+0xbc>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2043      	movs	r0, #67	@ 0x43
 8001118:	f001 f983 	bl	8002422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800111c:	2043      	movs	r0, #67	@ 0x43
 800111e:	f001 f99c 	bl	800245a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	@ 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <MemManage_Handler+0x4>

0800114c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <UsageFault_Handler+0x4>

0800115c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118a:	f000 fc19 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <DMA1_Stream0_IRQHandler+0x10>)
 800119a:	f001 fb51 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000588 	.word	0x20000588

080011a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Stream5_IRQHandler+0x10>)
 80011ae:	f001 fb47 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200005e8 	.word	0x200005e8

080011bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA2_Stream0_IRQHandler+0x10>)
 80011c2:	f001 fb3d 	bl	8002840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000478 	.word	0x20000478

080011d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <OTG_FS_IRQHandler+0x10>)
 80011d6:	f003 fbc4 	bl	8004962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200006a0 	.word	0x200006a0

080011e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	@ (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800120c:	f7ff ffea 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f005 ff13 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff f95b 	bl	80004f4 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800124c:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8001250:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001254:	20000be0 	.word	0x20000be0

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	4603      	mov	r3, r0
 8001266:	81fb      	strh	r3, [r7, #14]
 8001268:	460b      	mov	r3, r1
 800126a:	81bb      	strh	r3, [r7, #12]
 800126c:	4613      	mov	r3, r2
 800126e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8001274:	f000 fa9a 	bl	80017ac <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2201      	movs	r2, #1
 800127e:	2102      	movs	r1, #2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f9c5 	bl	8001610 <CODEC_IO_Write>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	3b01      	subs	r3, #1
 8001294:	2b03      	cmp	r3, #3
 8001296:	d81b      	bhi.n	80012d0 <cs43l22_Init+0x74>
 8001298:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <cs43l22_Init+0x44>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012b1 	.word	0x080012b1
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	080012c1 	.word	0x080012c1
 80012ac:	080012c9 	.word	0x080012c9
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80012b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012b2:	22fa      	movs	r2, #250	@ 0xfa
 80012b4:	701a      	strb	r2, [r3, #0]
    break;
 80012b6:	e00f      	b.n	80012d8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80012b8:	4b59      	ldr	r3, [pc, #356]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012ba:	22af      	movs	r2, #175	@ 0xaf
 80012bc:	701a      	strb	r2, [r3, #0]
    break;
 80012be:	e00b      	b.n	80012d8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80012c0:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012c2:	22aa      	movs	r2, #170	@ 0xaa
 80012c4:	701a      	strb	r2, [r3, #0]
    break;
 80012c6:	e007      	b.n	80012d8 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 80012c8:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	701a      	strb	r2, [r3, #0]
    break;    
 80012ce:	e003      	b.n	80012d8 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012d2:	2205      	movs	r2, #5
 80012d4:	701a      	strb	r2, [r3, #0]
    break;    
 80012d6:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4a50      	ldr	r2, [pc, #320]	@ (8001420 <cs43l22_Init+0x1c4>)
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	2104      	movs	r1, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f993 	bl	8001610 <CODEC_IO_Write>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2281      	movs	r2, #129	@ 0x81
 80012fa:	2105      	movs	r1, #5
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f987 	bl	8001610 <CODEC_IO_Write>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 800130c:	89fb      	ldrh	r3, [r7, #14]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2204      	movs	r2, #4
 8001312:	2106      	movs	r1, #6
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f97b 	bl	8001610 <CODEC_IO_Write>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4413      	add	r3, r2
 8001322:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001324:	7afa      	ldrb	r2, [r7, #11]
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8b4 	bl	8001498 <cs43l22_SetVolume>
 8001330:	4602      	mov	r2, r0
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001338:	89bb      	ldrh	r3, [r7, #12]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d023      	beq.n	8001386 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2206      	movs	r2, #6
 8001344:	210f      	movs	r1, #15
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f962 	bl	8001610 <CODEC_IO_Write>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4413      	add	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2200      	movs	r2, #0
 800135c:	2124      	movs	r1, #36	@ 0x24
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f956 	bl	8001610 <CODEC_IO_Write>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	4413      	add	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2200      	movs	r2, #0
 8001374:	2125      	movs	r1, #37	@ 0x25
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f94a 	bl	8001610 <CODEC_IO_Write>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2200      	movs	r2, #0
 800138c:	210a      	movs	r1, #10
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f93e 	bl	8001610 <CODEC_IO_Write>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	4413      	add	r3, r2
 800139c:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2204      	movs	r2, #4
 80013a4:	210e      	movs	r1, #14
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f932 	bl	8001610 <CODEC_IO_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2200      	movs	r2, #0
 80013bc:	2127      	movs	r1, #39	@ 0x27
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f926 	bl	8001610 <CODEC_IO_Write>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	220f      	movs	r2, #15
 80013d4:	211f      	movs	r1, #31
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f91a 	bl	8001610 <CODEC_IO_Write>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4413      	add	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	220a      	movs	r2, #10
 80013ec:	211a      	movs	r1, #26
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f90e 	bl	8001610 <CODEC_IO_Write>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	4413      	add	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	220a      	movs	r2, #10
 8001404:	211b      	movs	r1, #27
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f902 	bl	8001610 <CODEC_IO_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	4413      	add	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8001416:	697b      	ldr	r3, [r7, #20]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000b84 	.word	0x20000b84

08001424 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	4613      	mov	r3, r2
 8001432:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <cs43l22_Play+0x70>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d123      	bne.n	8001488 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2206      	movs	r2, #6
 8001446:	210e      	movs	r1, #14
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8e1 	bl	8001610 <CODEC_IO_Write>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f879 	bl	8001554 <cs43l22_SetMute>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	229e      	movs	r2, #158	@ 0x9e
 8001470:	2102      	movs	r1, #2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8cc 	bl	8001610 <CODEC_IO_Write>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <cs43l22_Play+0x70>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8001488:	68fb      	ldr	r3, [r7, #12]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000004 	.word	0x20000004

08001498 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	80fb      	strh	r3, [r7, #6]
 80014a4:	4613      	mov	r3, r2
 80014a6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80014ac:	797b      	ldrb	r3, [r7, #5]
 80014ae:	2b64      	cmp	r3, #100	@ 0x64
 80014b0:	d80b      	bhi.n	80014ca <cs43l22_SetVolume+0x32>
 80014b2:	797a      	ldrb	r2, [r7, #5]
 80014b4:	4613      	mov	r3, r2
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	4a25      	ldr	r2, [pc, #148]	@ (8001550 <cs43l22_SetVolume+0xb8>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1152      	asrs	r2, r2, #5
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	e000      	b.n	80014cc <cs43l22_SetVolume+0x34>
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80014ce:	7afb      	ldrb	r3, [r7, #11]
 80014d0:	2be6      	cmp	r3, #230	@ 0xe6
 80014d2:	d91c      	bls.n	800150e <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	b2d8      	uxtb	r0, r3
 80014d8:	7afb      	ldrb	r3, [r7, #11]
 80014da:	3319      	adds	r3, #25
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	2120      	movs	r1, #32
 80014e2:	f000 f895 	bl	8001610 <CODEC_IO_Write>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	b2d8      	uxtb	r0, r3
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3319      	adds	r3, #25
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	2121      	movs	r1, #33	@ 0x21
 80014fe:	f000 f887 	bl	8001610 <CODEC_IO_Write>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e01b      	b.n	8001546 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	3319      	adds	r3, #25
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	2120      	movs	r1, #32
 800151c:	f000 f878 	bl	8001610 <CODEC_IO_Write>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	7afb      	ldrb	r3, [r7, #11]
 8001530:	3319      	adds	r3, #25
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	2121      	movs	r1, #33	@ 0x21
 8001538:	f000 f86a 	bl	8001610 <CODEC_IO_Write>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	51eb851f 	.word	0x51eb851f

08001554 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d124      	bne.n	80015b4 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	22ff      	movs	r2, #255	@ 0xff
 8001570:	2104      	movs	r1, #4
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f84c 	bl	8001610 <CODEC_IO_Write>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2201      	movs	r2, #1
 8001588:	2122      	movs	r1, #34	@ 0x22
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f840 	bl	8001610 <CODEC_IO_Write>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2201      	movs	r2, #1
 80015a0:	2123      	movs	r1, #35	@ 0x23
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f834 	bl	8001610 <CODEC_IO_Write>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e025      	b.n	8001600 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2200      	movs	r2, #0
 80015ba:	2122      	movs	r1, #34	@ 0x22
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f827 	bl	8001610 <CODEC_IO_Write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2200      	movs	r2, #0
 80015d2:	2123      	movs	r1, #35	@ 0x23
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 f81b 	bl	8001610 <CODEC_IO_Write>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4a08      	ldr	r2, [pc, #32]	@ (800160c <cs43l22_SetMute+0xb8>)
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	2104      	movs	r1, #4
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 f80d 	bl	8001610 <CODEC_IO_Write>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461a      	mov	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001600:	68fb      	ldr	r3, [r7, #12]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000b84 	.word	0x20000b84

08001610 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	460b      	mov	r3, r1
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001626:	797a      	ldrb	r2, [r7, #5]
 8001628:	79b9      	ldrb	r1, [r7, #6]
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f8f5 	bl	800181c <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	b2db      	uxtb	r3, r3
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001644:	480e      	ldr	r0, [pc, #56]	@ (8001680 <I2Cx_Init+0x40>)
 8001646:	f002 f885 	bl	8003754 <HAL_I2C_GetState>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d114      	bne.n	800167a <I2Cx_Init+0x3a>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 8001650:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <I2Cx_Init+0x40>)
 8001652:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <I2Cx_Init+0x44>)
 8001654:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001656:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <I2Cx_Init+0x40>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1 = 0x33;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <I2Cx_Init+0x40>)
 800165e:	2233      	movs	r2, #51	@ 0x33
 8001660:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <I2Cx_Init+0x40>)
 8001664:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001668:	611a      	str	r2, [r3, #16]
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800166a:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <I2Cx_Init+0x40>)
 800166c:	4a06      	ldr	r2, [pc, #24]	@ (8001688 <I2Cx_Init+0x48>)
 800166e:	601a      	str	r2, [r3, #0]
      
    /* Init the I2C */
    I2Cx_MspInit();
 8001670:	f000 f848 	bl	8001704 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <I2Cx_Init+0x40>)
 8001676:	f001 fdff 	bl	8003278 <HAL_I2C_Init>
  }
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000b88 	.word	0x20000b88
 8001684:	000186a0 	.word	0x000186a0
 8001688:	40005400 	.word	0x40005400

0800168c <I2Cx_WriteData>:
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  * @retval HAL status
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af04      	add	r7, sp, #16
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	460b      	mov	r3, r1
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	4613      	mov	r3, r2
 800169c:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	b299      	uxth	r1, r3
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <I2Cx_WriteData+0x50>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	1d7b      	adds	r3, r7, #5
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2301      	movs	r3, #1
 80016ba:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <I2Cx_WriteData+0x54>)
 80016bc:	f001 ff50 	bl	8003560 <HAL_I2C_Mem_Write>
 80016c0:	4603      	mov	r3, r0
 80016c2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <I2Cx_WriteData+0x46>
  {
    /* Execute user timeout callback */
    I2Cx_Error(Addr);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f809 	bl	80016e4 <I2Cx_Error>
  }
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000b88 	.word	0x20000b88

080016e4 <I2Cx_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address 
  */
static void I2Cx_Error(uint8_t Addr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&I2cHandle);
 80016ee:	4804      	ldr	r0, [pc, #16]	@ (8001700 <I2Cx_Error+0x1c>)
 80016f0:	f001 ff06 	bl	8003500 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 80016f4:	f7ff ffa4 	bl	8001640 <I2Cx_Init>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000b88 	.word	0x20000b88

08001704 <I2Cx_MspInit>:

/**
  * @brief I2C MSP Initialization
  */
static void I2Cx_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a24      	ldr	r2, [pc, #144]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
 8001726:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001738:	2304      	movs	r3, #4
 800173a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	4819      	ldr	r0, [pc, #100]	@ (80017a8 <I2Cx_MspInit+0xa4>)
 8001744:	f001 fae6 	bl	8002d14 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a14      	ldr	r2, [pc, #80]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001752:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001764:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 800176a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800176e:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <I2Cx_MspInit+0xa0>)
 8001776:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800177a:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	201f      	movs	r0, #31
 8001782:	f000 fe4e 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001786:	201f      	movs	r0, #31
 8001788:	f000 fe67 	bl	800245a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2020      	movs	r0, #32
 8001792:	f000 fe46 	bl	8002422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001796:	2020      	movs	r0, #32
 8001798:	f000 fe5f 	bl	800245a <HAL_NVIC_EnableIRQ>
}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <AUDIO_IO_Init+0x68>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <AUDIO_IO_Init+0x68>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <AUDIO_IO_Init+0x68>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 80017ce:	2310      	movs	r3, #16
 80017d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017d6:	2302      	movs	r3, #2
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	480d      	ldr	r0, [pc, #52]	@ (8001818 <AUDIO_IO_Init+0x6c>)
 80017e4:	f001 fa96 	bl	8002d14 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80017e8:	f7ff ff2a 	bl	8001640 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2110      	movs	r1, #16
 80017f0:	4809      	ldr	r0, [pc, #36]	@ (8001818 <AUDIO_IO_Init+0x6c>)
 80017f2:	f001 fd27 	bl	8003244 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 80017f6:	2005      	movs	r0, #5
 80017f8:	f000 f902 	bl	8001a00 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2110      	movs	r1, #16
 8001800:	4805      	ldr	r0, [pc, #20]	@ (8001818 <AUDIO_IO_Init+0x6c>)
 8001802:	f001 fd1f 	bl	8003244 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001806:	2005      	movs	r0, #5
 8001808:	f000 f8fa 	bl	8001a00 <HAL_Delay>
}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40023800 	.word	0x40023800
 8001818:	40020c00 	.word	0x40020c00

0800181c <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	460b      	mov	r3, r1
 8001828:	71bb      	strb	r3, [r7, #6]
 800182a:	4613      	mov	r3, r2
 800182c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 800182e:	797a      	ldrb	r2, [r7, #5]
 8001830:	79b9      	ldrb	r1, [r7, #6]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff29 	bl	800168c <I2Cx_WriteData>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a04      	ldr	r2, [pc, #16]	@ (8001864 <HAL_I2S_TxCpltCallback+0x20>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001856:	f000 f819 	bl	800188c <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40003c00 	.word	0x40003c00

08001868 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 800187a:	f000 f80e 	bl	800189a <BSP_AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40003c00 	.word	0x40003c00

0800188c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
  * @brief  Manages the DMA Half Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80018be:	f000 f804 	bl	80018ca <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_I2S_ErrorCallback+0x2c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80018fa:	f7ff ffd5 	bl	80018a8 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <HAL_I2S_ErrorCallback+0x30>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001908:	f7ff ffe6 	bl	80018d8 <BSP_AUDIO_IN_Error_Callback>
  }
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40003c00 	.word	0x40003c00
 8001918:	40003800 	.word	0x40003800

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <HAL_Init+0x40>)
 8001926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800192c:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <HAL_Init+0x40>)
 8001932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a07      	ldr	r2, [pc, #28]	@ (800195c <HAL_Init+0x40>)
 800193e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001944:	2003      	movs	r0, #3
 8001946:	f000 fd61 	bl	800240c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f808 	bl	8001960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001950:	f7ff f8fa 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00

08001960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_InitTick+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_InitTick+0x58>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fd79 	bl	8002476 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800199c:	f000 fd41 	bl	8002422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <HAL_InitTick+0x5c>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000010 	.word	0x20000010
 80019bc:	2000000c 	.word	0x2000000c

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000010 	.word	0x20000010
 80019e4:	20000bdc 	.word	0x20000bdc

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000bdc 	.word	0x20000bdc

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000010 	.word	0x20000010

08001a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e033      	b.n	8001ac6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff f896 	bl	8000b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d118      	bne.n	8001ab8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a8e:	f023 0302 	bic.w	r3, r3, #2
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa68 	bl	8001f70 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ab6:	e001      	b.n	8001abc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Start_DMA+0x1e>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e0e9      	b.n	8001cc2 <HAL_ADC_Start_DMA+0x1f2>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d018      	beq.n	8001b36 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b14:	4b6d      	ldr	r3, [pc, #436]	@ (8001ccc <HAL_ADC_Start_DMA+0x1fc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd0 <HAL_ADC_Start_DMA+0x200>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9a      	lsrs	r2, r3, #18
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b44:	d107      	bne.n	8001b56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f040 80a1 	bne.w	8001ca8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ba4:	d106      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f023 0206 	bic.w	r2, r3, #6
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001bb2:	e002      	b.n	8001bba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc2:	4b44      	ldr	r3, [pc, #272]	@ (8001cd4 <HAL_ADC_Start_DMA+0x204>)
 8001bc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bca:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <HAL_ADC_Start_DMA+0x208>)
 8001bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd2:	4a42      	ldr	r2, [pc, #264]	@ (8001cdc <HAL_ADC_Start_DMA+0x20c>)
 8001bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bda:	4a41      	ldr	r2, [pc, #260]	@ (8001ce0 <HAL_ADC_Start_DMA+0x210>)
 8001bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001be6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c06:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	334c      	adds	r3, #76	@ 0x4c
 8001c12:	4619      	mov	r1, r3
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f000 fdba 	bl	8002790 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d12a      	bne.n	8001c7e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <HAL_ADC_Start_DMA+0x214>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d015      	beq.n	8001c5e <HAL_ADC_Start_DMA+0x18e>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce8 <HAL_ADC_Start_DMA+0x218>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d105      	bne.n	8001c48 <HAL_ADC_Start_DMA+0x178>
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_ADC_Start_DMA+0x204>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a27      	ldr	r2, [pc, #156]	@ (8001cec <HAL_ADC_Start_DMA+0x21c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d136      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_ADC_Start_DMA+0x204>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d130      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d129      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	e020      	b.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a18      	ldr	r2, [pc, #96]	@ (8001ce4 <HAL_ADC_Start_DMA+0x214>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d11b      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d114      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f043 0210 	orr.w	r2, r3, #16
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	08002169 	.word	0x08002169
 8001cdc:	08002223 	.word	0x08002223
 8001ce0:	0800223f 	.word	0x0800223f
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	40012100 	.word	0x40012100
 8001cec:	40012200 	.word	0x40012200

08001cf0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e105      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x228>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d925      	bls.n	8001da4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b1e      	subs	r3, #30
 8001d6e:	2207      	movs	r2, #7
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4403      	add	r3, r0
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	e022      	b.n	8001dea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	2207      	movs	r2, #7
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6919      	ldr	r1, [r3, #16]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4403      	add	r3, r0
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d824      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b05      	subs	r3, #5
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b05      	subs	r3, #5
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e3a:	e04c      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d824      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b23      	subs	r3, #35	@ 0x23
 8001e56:	221f      	movs	r2, #31
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b23      	subs	r3, #35	@ 0x23
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e8c:	e023      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b41      	subs	r3, #65	@ 0x41
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b41      	subs	r3, #65	@ 0x41
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <HAL_ADC_ConfigChannel+0x234>)
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_ADC_ConfigChannel+0x238>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_ADC_ConfigChannel+0x238>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d123      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x1e6>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b11      	cmp	r3, #17
 8001f10:	d11b      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d111      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_ADC_ConfigChannel+0x23c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_ADC_ConfigChannel+0x240>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9a      	lsrs	r2, r3, #18
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	40012000 	.word	0x40012000
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b79      	ldr	r3, [pc, #484]	@ (8002160 <ADC_Init+0x1f0>)
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <ADC_Init+0x1f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	035a      	lsls	r2, r3, #13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051a      	lsls	r2, r3, #20
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002126:	025a      	lsls	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	029a      	lsls	r2, r3, #10
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	0f000001 	.word	0x0f000001

08002168 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d13c      	bne.n	80021fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d12b      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d127      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d119      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0220 	bic.w	r2, r2, #32
 80021ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fd7b 	bl	8001cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021fa:	e00e      	b.n	800221a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7ff fd85 	bl	8001d18 <HAL_ADC_ErrorCallback>
}
 800220e:	e004      	b.n	800221a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fd67 	bl	8001d04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fd5a 	bl	8001d18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002288:	4013      	ands	r3, r2
 800228a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002294:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800229c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800229e:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <__NVIC_SetPriorityGrouping+0x44>)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	60d3      	str	r3, [r2, #12]
}
 80022a4:	bf00      	nop
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <__NVIC_GetPriorityGrouping+0x18>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	0a1b      	lsrs	r3, r3, #8
 80022be:	f003 0307 	and.w	r3, r3, #7
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	db0b      	blt.n	80022fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <__NVIC_EnableIRQ+0x38>)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2001      	movs	r0, #1
 80022f2:	fa00 f202 	lsl.w	r2, r0, r2
 80022f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db0a      	blt.n	8002336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	490c      	ldr	r1, [pc, #48]	@ (8002358 <__NVIC_SetPriority+0x4c>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	0112      	lsls	r2, r2, #4
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	440b      	add	r3, r1
 8002330:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002334:	e00a      	b.n	800234c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4908      	ldr	r1, [pc, #32]	@ (800235c <__NVIC_SetPriority+0x50>)
 800233c:	79fb      	ldrb	r3, [r7, #7]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3b04      	subs	r3, #4
 8002344:	0112      	lsls	r2, r2, #4
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	440b      	add	r3, r1
 800234a:	761a      	strb	r2, [r3, #24]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b480      	push	{r7}
 8002362:	b089      	sub	sp, #36	@ 0x24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	bf28      	it	cs
 800237e:	2304      	movcs	r3, #4
 8002380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3304      	adds	r3, #4
 8002386:	2b06      	cmp	r3, #6
 8002388:	d902      	bls.n	8002390 <NVIC_EncodePriority+0x30>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3b03      	subs	r3, #3
 800238e:	e000      	b.n	8002392 <NVIC_EncodePriority+0x32>
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	43d9      	mvns	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	4313      	orrs	r3, r2
         );
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3724      	adds	r7, #36	@ 0x24
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d8:	d301      	bcc.n	80023de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023da:	2301      	movs	r3, #1
 80023dc:	e00f      	b.n	80023fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023de:	4a0a      	ldr	r2, [pc, #40]	@ (8002408 <SysTick_Config+0x40>)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e6:	210f      	movs	r1, #15
 80023e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023ec:	f7ff ff8e 	bl	800230c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f0:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <SysTick_Config+0x40>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f6:	4b04      	ldr	r3, [pc, #16]	@ (8002408 <SysTick_Config+0x40>)
 80023f8:	2207      	movs	r2, #7
 80023fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	e000e010 	.word	0xe000e010

0800240c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff29 	bl	800226c <__NVIC_SetPriorityGrouping>
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002422:	b580      	push	{r7, lr}
 8002424:	b086      	sub	sp, #24
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002434:	f7ff ff3e 	bl	80022b4 <__NVIC_GetPriorityGrouping>
 8002438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f7ff ff8e 	bl	8002360 <NVIC_EncodePriority>
 8002444:	4602      	mov	r2, r0
 8002446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff5d 	bl	800230c <__NVIC_SetPriority>
}
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff31 	bl	80022d0 <__NVIC_EnableIRQ>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffa2 	bl	80023c8 <SysTick_Config>
 8002484:	4603      	mov	r3, r0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e014      	b.n	80024ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7fe fbe9 	bl	8000c88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e046      	b.n	8002574 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	795b      	ldrb	r3, [r3, #5]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_DAC_Start+0x20>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e040      	b.n	8002574 <HAL_DAC_Start+0xa2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2201      	movs	r2, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10f      	bne.n	800253c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002526:	2b3c      	cmp	r3, #60	@ 0x3c
 8002528:	d11d      	bne.n	8002566 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e014      	b.n	8002566 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	213c      	movs	r1, #60	@ 0x3c
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	429a      	cmp	r2, r3
 8002554:	d107      	bne.n	8002566 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0202 	orr.w	r2, r2, #2
 8002564:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_DAC_ConfigChannel+0x1c>
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e042      	b.n	8002626 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	795b      	ldrb	r3, [r3, #5]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_DAC_ConfigChannel+0x2c>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e03c      	b.n	8002626 <HAL_DAC_ConfigChannel+0xa6>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2202      	movs	r2, #2
 80025b6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	22c0      	movs	r2, #192	@ 0xc0
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002624:	7ffb      	ldrb	r3, [r7, #31]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	@ 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff f9d2 	bl	80019e8 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e099      	b.n	8002784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002670:	e00f      	b.n	8002692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002672:	f7ff f9b9 	bl	80019e8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b05      	cmp	r3, #5
 800267e:	d908      	bls.n	8002692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2203      	movs	r2, #3
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e078      	b.n	8002784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1e8      	bne.n	8002672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4b38      	ldr	r3, [pc, #224]	@ (800278c <HAL_DMA_Init+0x158>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f4:	4313      	orrs	r3, r2
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f023 0307 	bic.w	r3, r3, #7
 8002712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	2b04      	cmp	r3, #4
 8002724:	d117      	bne.n	8002756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4313      	orrs	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00e      	beq.n	8002756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fa6f 	bl	8002c1c <DMA_CheckFifoParam>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2240      	movs	r2, #64	@ 0x40
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002752:	2301      	movs	r3, #1
 8002754:	e016      	b.n	8002784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fa26 	bl	8002bb0 <DMA_CalcBaseAndBitshift>
 8002764:	4603      	mov	r3, r0
 8002766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276c:	223f      	movs	r2, #63	@ 0x3f
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	f010803f 	.word	0xf010803f

08002790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_DMA_Start_IT+0x26>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e040      	b.n	8002838 <HAL_DMA_Start_IT+0xa8>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d12f      	bne.n	800282a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2202      	movs	r2, #2
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f9b8 	bl	8002b54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e8:	223f      	movs	r2, #63	@ 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0216 	orr.w	r2, r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0208 	orr.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e005      	b.n	8002836 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002832:	2302      	movs	r3, #2
 8002834:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800284c:	4b8e      	ldr	r3, [pc, #568]	@ (8002a88 <HAL_DMA_IRQHandler+0x248>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8e      	ldr	r2, [pc, #568]	@ (8002a8c <HAL_DMA_IRQHandler+0x24c>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	2208      	movs	r2, #8
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d01a      	beq.n	80028ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	2208      	movs	r2, #8
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2201      	movs	r2, #1
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	2201      	movs	r2, #1
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e6:	2204      	movs	r2, #4
 80028e8:	409a      	lsls	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00b      	beq.n	8002918 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	2204      	movs	r2, #4
 8002906:	409a      	lsls	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002910:	f043 0204 	orr.w	r2, r3, #4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	2210      	movs	r2, #16
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d043      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	2b00      	cmp	r3, #0
 8002934:	d03c      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2210      	movs	r2, #16
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d018      	beq.n	8002982 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d108      	bne.n	8002970 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d024      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
 800296e:	e01f      	b.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e016      	b.n	80029b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0208 	bic.w	r2, r2, #8
 800299e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	2220      	movs	r2, #32
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 808f 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8087 	beq.w	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d6:	2220      	movs	r2, #32
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b05      	cmp	r3, #5
 80029e8:	d136      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0216 	bic.w	r2, r2, #22
 80029f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_DMA_IRQHandler+0x1da>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d007      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0208 	bic.w	r2, r2, #8
 8002a28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2e:	223f      	movs	r2, #63	@ 0x3f
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d07e      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
        }
        return;
 8002a56:	e079      	b.n	8002b4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10d      	bne.n	8002a90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d031      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
 8002a84:	e02c      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d023      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	4798      	blx	r3
 8002aa0:	e01e      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0210 	bic.w	r2, r2, #16
 8002abe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d032      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d022      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2205      	movs	r2, #5
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0201 	bic.w	r2, r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d307      	bcc.n	8002b28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f2      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x2cc>
 8002b26:	e000      	b.n	8002b2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b4c:	bf00      	nop
    }
  }
}
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b40      	cmp	r3, #64	@ 0x40
 8002b80:	d108      	bne.n	8002b94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b92:	e007      	b.n	8002ba4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	60da      	str	r2, [r3, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	3b10      	subs	r3, #16
 8002bc0:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <DMA_CalcBaseAndBitshift+0x64>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bca:	4a13      	ldr	r2, [pc, #76]	@ (8002c18 <DMA_CalcBaseAndBitshift+0x68>)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d909      	bls.n	8002bf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	1d1a      	adds	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bf0:	e007      	b.n	8002c02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	aaaaaaab 	.word	0xaaaaaaab
 8002c18:	080070d8 	.word	0x080070d8

08002c1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d11f      	bne.n	8002c76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d856      	bhi.n	8002cea <DMA_CheckFifoParam+0xce>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <DMA_CheckFifoParam+0x28>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c67 	.word	0x08002c67
 8002c4c:	08002c55 	.word	0x08002c55
 8002c50:	08002ceb 	.word	0x08002ceb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d046      	beq.n	8002cee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c64:	e043      	b.n	8002cee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c6e:	d140      	bne.n	8002cf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c74:	e03d      	b.n	8002cf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c7e:	d121      	bne.n	8002cc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d837      	bhi.n	8002cf6 <DMA_CheckFifoParam+0xda>
 8002c86:	a201      	add	r2, pc, #4	@ (adr r2, 8002c8c <DMA_CheckFifoParam+0x70>)
 8002c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002ca3 	.word	0x08002ca3
 8002c94:	08002c9d 	.word	0x08002c9d
 8002c98:	08002cb5 	.word	0x08002cb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e030      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d025      	beq.n	8002cfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb2:	e022      	b.n	8002cfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cbc:	d11f      	bne.n	8002cfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cc2:	e01c      	b.n	8002cfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d903      	bls.n	8002cd2 <DMA_CheckFifoParam+0xb6>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d003      	beq.n	8002cd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cd0:	e018      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd6:	e015      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	e00b      	b.n	8002d02 <DMA_CheckFifoParam+0xe6>
      break;
 8002cea:	bf00      	nop
 8002cec:	e00a      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e008      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e006      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e004      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfa:	bf00      	nop
 8002cfc:	e002      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cfe:	bf00      	nop
 8002d00:	e000      	b.n	8002d04 <DMA_CheckFifoParam+0xe8>
      break;
 8002d02:	bf00      	nop
    }
  } 
  
  return status; 
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	@ 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e16b      	b.n	8003008 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 815a 	bne.w	8003002 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80b4 	beq.w	8003002 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b60      	ldr	r3, [pc, #384]	@ (8003020 <HAL_GPIO_Init+0x30c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8003020 <HAL_GPIO_Init+0x30c>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	@ (8003020 <HAL_GPIO_Init+0x30c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	@ (8003024 <HAL_GPIO_Init+0x310>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d02b      	beq.n	8002f3a <HAL_GPIO_Init+0x226>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a51      	ldr	r2, [pc, #324]	@ (800302c <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d025      	beq.n	8002f36 <HAL_GPIO_Init+0x222>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a50      	ldr	r2, [pc, #320]	@ (8003030 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01f      	beq.n	8002f32 <HAL_GPIO_Init+0x21e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8003034 <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d019      	beq.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4e      	ldr	r2, [pc, #312]	@ (8003038 <HAL_GPIO_Init+0x324>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0x216>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4d      	ldr	r2, [pc, #308]	@ (800303c <HAL_GPIO_Init+0x328>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00d      	beq.n	8002f26 <HAL_GPIO_Init+0x212>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003040 <HAL_GPIO_Init+0x32c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d007      	beq.n	8002f22 <HAL_GPIO_Init+0x20e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4b      	ldr	r2, [pc, #300]	@ (8003044 <HAL_GPIO_Init+0x330>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d101      	bne.n	8002f1e <HAL_GPIO_Init+0x20a>
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	e00e      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	e00c      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f22:	2306      	movs	r3, #6
 8002f24:	e00a      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f26:	2305      	movs	r3, #5
 8002f28:	e008      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e004      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x228>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f002 0203 	and.w	r2, r2, #3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4093      	lsls	r3, r2
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4c:	4935      	ldr	r1, [pc, #212]	@ (8003024 <HAL_GPIO_Init+0x310>)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7e:	4a32      	ldr	r2, [pc, #200]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f84:	4b30      	ldr	r3, [pc, #192]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa8:	4a27      	ldr	r2, [pc, #156]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fae:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffc:	4a12      	ldr	r2, [pc, #72]	@ (8003048 <HAL_GPIO_Init+0x334>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f67f ae90 	bls.w	8002d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40013800 	.word	0x40013800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00
 8003038:	40021000 	.word	0x40021000
 800303c:	40021400 	.word	0x40021400
 8003040:	40021800 	.word	0x40021800
 8003044:	40021c00 	.word	0x40021c00
 8003048:	40013c00 	.word	0x40013c00

0800304c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e0cd      	b.n	8003204 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	429a      	cmp	r2, r3
 8003080:	f040 80bd 	bne.w	80031fe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003084:	4a65      	ldr	r2, [pc, #404]	@ (800321c <HAL_GPIO_DeInit+0x1d0>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3302      	adds	r3, #2
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	220f      	movs	r2, #15
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	4013      	ands	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003220 <HAL_GPIO_DeInit+0x1d4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02b      	beq.n	8003106 <HAL_GPIO_DeInit+0xba>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003224 <HAL_GPIO_DeInit+0x1d8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_DeInit+0xb6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a5b      	ldr	r2, [pc, #364]	@ (8003228 <HAL_GPIO_DeInit+0x1dc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_DeInit+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a5a      	ldr	r2, [pc, #360]	@ (800322c <HAL_GPIO_DeInit+0x1e0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_DeInit+0xae>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a59      	ldr	r2, [pc, #356]	@ (8003230 <HAL_GPIO_DeInit+0x1e4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_DeInit+0xaa>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a58      	ldr	r2, [pc, #352]	@ (8003234 <HAL_GPIO_DeInit+0x1e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_DeInit+0xa6>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a57      	ldr	r2, [pc, #348]	@ (8003238 <HAL_GPIO_DeInit+0x1ec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_DeInit+0xa2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a56      	ldr	r2, [pc, #344]	@ (800323c <HAL_GPIO_DeInit+0x1f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_DeInit+0x9e>
 80030e6:	2307      	movs	r3, #7
 80030e8:	e00e      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030ea:	2308      	movs	r3, #8
 80030ec:	e00c      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00a      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030f2:	2305      	movs	r3, #5
 80030f4:	e008      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030f6:	2304      	movs	r3, #4
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e004      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 80030fe:	2302      	movs	r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_GPIO_DeInit+0xbc>
 8003106:	2300      	movs	r3, #0
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	f002 0203 	and.w	r2, r2, #3
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4093      	lsls	r3, r2
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	429a      	cmp	r2, r3
 8003116:	d132      	bne.n	800317e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003118:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	43db      	mvns	r3, r3
 8003120:	4947      	ldr	r1, [pc, #284]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 8003122:	4013      	ands	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003126:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	43db      	mvns	r3, r3
 800312e:	4944      	ldr	r1, [pc, #272]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 8003130:	4013      	ands	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003134:	4b42      	ldr	r3, [pc, #264]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	4940      	ldr	r1, [pc, #256]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 800313e:	4013      	ands	r3, r2
 8003140:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003142:	4b3f      	ldr	r3, [pc, #252]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	493d      	ldr	r1, [pc, #244]	@ (8003240 <HAL_GPIO_DeInit+0x1f4>)
 800314c:	4013      	ands	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	220f      	movs	r2, #15
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003160:	4a2e      	ldr	r2, [pc, #184]	@ (800321c <HAL_GPIO_DeInit+0x1d0>)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	43da      	mvns	r2, r3
 8003170:	482a      	ldr	r0, [pc, #168]	@ (800321c <HAL_GPIO_DeInit+0x1d0>)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	400a      	ands	r2, r1
 8003178:	3302      	adds	r3, #2
 800317a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2103      	movs	r1, #3
 8003188:	fa01 f303 	lsl.w	r3, r1, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	08da      	lsrs	r2, r3, #3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	08d2      	lsrs	r2, r2, #3
 80031b4:	4019      	ands	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3208      	adds	r2, #8
 80031ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2103      	movs	r1, #3
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	2101      	movs	r1, #1
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	fa01 f303 	lsl.w	r3, r1, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2103      	movs	r1, #3
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	401a      	ands	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	3301      	adds	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	f67f af2e 	bls.w	8003068 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40013800 	.word	0x40013800
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400
 8003228:	40020800 	.word	0x40020800
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40021000 	.word	0x40021000
 8003234:	40021400 	.word	0x40021400
 8003238:	40021800 	.word	0x40021800
 800323c:	40021c00 	.word	0x40021c00
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
 8003250:	4613      	mov	r3, r2
 8003252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003254:	787b      	ldrb	r3, [r7, #1]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003260:	e003      	b.n	800326a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	041a      	lsls	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
	...

08003278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e12b      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fd36 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	@ 0x24
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032dc:	f002 febe 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4a81      	ldr	r2, [pc, #516]	@ (80034ec <HAL_I2C_Init+0x274>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d807      	bhi.n	80032fc <HAL_I2C_Init+0x84>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a80      	ldr	r2, [pc, #512]	@ (80034f0 <HAL_I2C_Init+0x278>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	bf94      	ite	ls
 80032f4:	2301      	movls	r3, #1
 80032f6:	2300      	movhi	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e006      	b.n	800330a <HAL_I2C_Init+0x92>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a7d      	ldr	r2, [pc, #500]	@ (80034f4 <HAL_I2C_Init+0x27c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e0e7      	b.n	80034e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a78      	ldr	r2, [pc, #480]	@ (80034f8 <HAL_I2C_Init+0x280>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a6a      	ldr	r2, [pc, #424]	@ (80034ec <HAL_I2C_Init+0x274>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d802      	bhi.n	800334c <HAL_I2C_Init+0xd4>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3301      	adds	r3, #1
 800334a:	e009      	b.n	8003360 <HAL_I2C_Init+0xe8>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	4a69      	ldr	r2, [pc, #420]	@ (80034fc <HAL_I2C_Init+0x284>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	3301      	adds	r3, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6812      	ldr	r2, [r2, #0]
 8003364:	430b      	orrs	r3, r1
 8003366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003372:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	495c      	ldr	r1, [pc, #368]	@ (80034ec <HAL_I2C_Init+0x274>)
 800337c:	428b      	cmp	r3, r1
 800337e:	d819      	bhi.n	80033b4 <HAL_I2C_Init+0x13c>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e59      	subs	r1, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fbb1 f3f3 	udiv	r3, r1, r3
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003394:	400b      	ands	r3, r1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_I2C_Init+0x138>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1e59      	subs	r1, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	e051      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b0:	2304      	movs	r3, #4
 80033b2:	e04f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_I2C_Init+0x168>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	440b      	add	r3, r1
 80033ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e012      	b.n	8003406 <HAL_I2C_Init+0x18e>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	0099      	lsls	r1, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x196>
 800340a:	2301      	movs	r3, #1
 800340c:	e022      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10e      	bne.n	8003434 <HAL_I2C_Init+0x1bc>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1e58      	subs	r0, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	440b      	add	r3, r1
 8003424:	fbb0 f3f3 	udiv	r3, r0, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003432:	e00f      	b.n	8003454 <HAL_I2C_Init+0x1dc>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1e58      	subs	r0, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	460b      	mov	r3, r1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	0099      	lsls	r1, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	fbb0 f3f3 	udiv	r3, r0, r3
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	6809      	ldr	r1, [r1, #0]
 8003458:	4313      	orrs	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69da      	ldr	r2, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6911      	ldr	r1, [r2, #16]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	430b      	orrs	r3, r1
 8003496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	000186a0 	.word	0x000186a0
 80034f0:	001e847f 	.word	0x001e847f
 80034f4:	003d08ff 	.word	0x003d08ff
 80034f8:	431bde83 	.word	0x431bde83
 80034fc:	10624dd3 	.word	0x10624dd3

08003500 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e021      	b.n	8003556 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2224      	movs	r2, #36	@ 0x24
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fc38 	bl	8000da0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800357a:	f7fe fa35 	bl	80019e8 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b20      	cmp	r3, #32
 800358a:	f040 80d9 	bne.w	8003740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2319      	movs	r3, #25
 8003594:	2201      	movs	r2, #1
 8003596:	496d      	ldr	r1, [pc, #436]	@ (800374c <HAL_I2C_Mem_Write+0x1ec>)
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f97f 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0cc      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2C_Mem_Write+0x56>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0c5      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2221      	movs	r2, #33	@ 0x21
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	@ 0x40
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800360c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a4d      	ldr	r2, [pc, #308]	@ (8003750 <HAL_I2C_Mem_Write+0x1f0>)
 800361c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800361e:	88f8      	ldrh	r0, [r7, #6]
 8003620:	893a      	ldrh	r2, [r7, #8]
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4603      	mov	r3, r0
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f89e 	bl	8003770 <I2C_RequestMemoryWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d052      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e081      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa44 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00d      	beq.n	800366a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2b04      	cmp	r3, #4
 8003654:	d107      	bne.n	8003666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e06b      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366e:	781a      	ldrb	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x180>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d017      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1aa      	bne.n	800363e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa37 	bl	8003b60 <I2C_WaitOnBTFFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00d      	beq.n	8003714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d107      	bne.n	8003710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e016      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	00100002 	.word	0x00100002
 8003750:	ffff0000 	.word	0xffff0000

08003754 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f878 	bl	800389c <I2C_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00d      	beq.n	80037ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037c0:	d103      	bne.n	80037ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e05f      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	492d      	ldr	r1, [pc, #180]	@ (8003898 <I2C_RequestMemoryWrite+0x128>)
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f8d3 	bl	8003990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e04c      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f95e 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e02b      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d105      	bne.n	8003848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800383c:	893b      	ldrh	r3, [r7, #8]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e021      	b.n	800388c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003848:	893b      	ldrh	r3, [r7, #8]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	b29b      	uxth	r3, r3
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003858:	6a39      	ldr	r1, [r7, #32]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f938 	bl	8003ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	2b04      	cmp	r3, #4
 800386c:	d107      	bne.n	800387e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800387c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e005      	b.n	800388e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003882:	893b      	ldrh	r3, [r7, #8]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	00010002 	.word	0x00010002

0800389c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ac:	e048      	b.n	8003940 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038b4:	d044      	beq.n	8003940 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b6:	f7fe f897 	bl	80019e8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d302      	bcc.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d139      	bne.n	8003940 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10d      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	e00c      	b.n	800390c <I2C_WaitOnFlagUntilTimeout+0x70>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	43da      	mvns	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4013      	ands	r3, r2
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	429a      	cmp	r2, r3
 8003910:	d116      	bne.n	8003940 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e023      	b.n	8003988 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d10d      	bne.n	8003966 <I2C_WaitOnFlagUntilTimeout+0xca>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	43da      	mvns	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4013      	ands	r3, r2
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf0c      	ite	eq
 800395c:	2301      	moveq	r3, #1
 800395e:	2300      	movne	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	e00c      	b.n	8003980 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	43da      	mvns	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4013      	ands	r3, r2
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	429a      	cmp	r2, r3
 8003984:	d093      	beq.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800399e:	e071      	b.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ae:	d123      	bne.n	80039f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f043 0204 	orr.w	r2, r3, #4
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e067      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fe:	d041      	beq.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fd fff2 	bl	80019e8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d136      	bne.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10c      	bne.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf14      	ite	ne
 8003a32:	2301      	movne	r3, #1
 8003a34:	2300      	moveq	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	e00b      	b.n	8003a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e021      	b.n	8003ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	0c1b      	lsrs	r3, r3, #16
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d10c      	bne.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e00b      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f47f af6d 	bne.w	80039a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003adc:	e034      	b.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f886 	bl	8003bf0 <I2C_IsAcknowledgeFailed>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e034      	b.n	8003b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af4:	d028      	beq.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fd ff77 	bl	80019e8 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d11d      	bne.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d016      	beq.n	8003b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	f043 0220 	orr.w	r2, r3, #32
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e007      	b.n	8003b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b52:	2b80      	cmp	r3, #128	@ 0x80
 8003b54:	d1c3      	bne.n	8003ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6c:	e034      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f83e 	bl	8003bf0 <I2C_IsAcknowledgeFailed>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e034      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b84:	d028      	beq.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fd ff2f 	bl	80019e8 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d11d      	bne.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d016      	beq.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	f043 0220 	orr.w	r2, r3, #32
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d1c3      	bne.n	8003b6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c06:	d11b      	bne.n	8003c40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e128      	b.n	8003eb4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a90      	ldr	r2, [pc, #576]	@ (8003ebc <HAL_I2S_Init+0x26c>)
 8003c7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7fd f8b1 	bl	8000de4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c98:	f023 030f 	bic.w	r3, r3, #15
 8003c9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d060      	beq.n	8003d70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e001      	b.n	8003cc0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003cbc:	2320      	movs	r3, #32
 8003cbe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d802      	bhi.n	8003cce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f002 faba 	bl	8006248 <HAL_RCCEx_GetPeriphCLKFreq>
 8003cd4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cde:	d125      	bne.n	8003d2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d04:	3305      	adds	r3, #5
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	e01f      	b.n	8003d4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	3305      	adds	r3, #5
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e00e      	b.n	8003d4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d46:	3305      	adds	r3, #5
 8003d48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec0 <HAL_I2S_Init+0x270>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e003      	b.n	8003d78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d70:	2302      	movs	r3, #2
 8003d72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d902      	bls.n	8003d84 <HAL_I2S_Init+0x134>
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	2bff      	cmp	r3, #255	@ 0xff
 8003d82:	d907      	bls.n	8003d94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e08f      	b.n	8003eb4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	ea42 0103 	orr.w	r1, r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003db2:	f023 030f 	bic.w	r3, r3, #15
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6851      	ldr	r1, [r2, #4]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6892      	ldr	r2, [r2, #8]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	68d2      	ldr	r2, [r2, #12]
 8003dc4:	4311      	orrs	r1, r2
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6992      	ldr	r2, [r2, #24]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d161      	bne.n	8003ea4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a38      	ldr	r2, [pc, #224]	@ (8003ec4 <HAL_I2S_Init+0x274>)
 8003de4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a37      	ldr	r2, [pc, #220]	@ (8003ec8 <HAL_I2S_Init+0x278>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_I2S_Init+0x1a4>
 8003df0:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <HAL_I2S_Init+0x27c>)
 8003df2:	e001      	b.n	8003df8 <HAL_I2S_Init+0x1a8>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	4932      	ldr	r1, [pc, #200]	@ (8003ec8 <HAL_I2S_Init+0x278>)
 8003e00:	428a      	cmp	r2, r1
 8003e02:	d101      	bne.n	8003e08 <HAL_I2S_Init+0x1b8>
 8003e04:	4a31      	ldr	r2, [pc, #196]	@ (8003ecc <HAL_I2S_Init+0x27c>)
 8003e06:	e001      	b.n	8003e0c <HAL_I2S_Init+0x1bc>
 8003e08:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003e0c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003e10:	f023 030f 	bic.w	r3, r3, #15
 8003e14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ec8 <HAL_I2S_Init+0x278>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_I2S_Init+0x1d4>
 8003e20:	4b2a      	ldr	r3, [pc, #168]	@ (8003ecc <HAL_I2S_Init+0x27c>)
 8003e22:	e001      	b.n	8003e28 <HAL_I2S_Init+0x1d8>
 8003e24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e28:	2202      	movs	r2, #2
 8003e2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a25      	ldr	r2, [pc, #148]	@ (8003ec8 <HAL_I2S_Init+0x278>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_I2S_Init+0x1ea>
 8003e36:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <HAL_I2S_Init+0x27c>)
 8003e38:	e001      	b.n	8003e3e <HAL_I2S_Init+0x1ee>
 8003e3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4a:	d003      	beq.n	8003e54 <HAL_I2S_Init+0x204>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d103      	bne.n	8003e5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	e001      	b.n	8003e60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	897b      	ldrh	r3, [r7, #10]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a0d      	ldr	r2, [pc, #52]	@ (8003ec8 <HAL_I2S_Init+0x278>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d101      	bne.n	8003e9c <HAL_I2S_Init+0x24c>
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <HAL_I2S_Init+0x27c>)
 8003e9a:	e001      	b.n	8003ea0 <HAL_I2S_Init+0x250>
 8003e9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ea0:	897a      	ldrh	r2, [r7, #10]
 8003ea2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	0800417d 	.word	0x0800417d
 8003ec0:	cccccccd 	.word	0xcccccccd
 8003ec4:	08004291 	.word	0x08004291
 8003ec8:	40003800 	.word	0x40003800
 8003ecc:	40003400 	.word	0x40003400

08003ed0 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_I2S_Transmit_DMA+0x1a>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e08a      	b.n	8004004 <HAL_I2S_Transmit_DMA+0x134>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d001      	beq.n	8003efe <HAL_I2S_Transmit_DMA+0x2e>
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
 8003efc:	e082      	b.n	8004004 <HAL_I2S_Transmit_DMA+0x134>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2S_Transmit_DMA+0x3e>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e07a      	b.n	8004004 <HAL_I2S_Transmit_DMA+0x134>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d002      	beq.n	8003f42 <HAL_I2S_Transmit_DMA+0x72>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10a      	bne.n	8003f58 <HAL_I2S_Transmit_DMA+0x88>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f56:	e005      	b.n	8003f64 <HAL_I2S_Transmit_DMA+0x94>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f68:	4a28      	ldr	r2, [pc, #160]	@ (800400c <HAL_I2S_Transmit_DMA+0x13c>)
 8003f6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f70:	4a27      	ldr	r2, [pc, #156]	@ (8004010 <HAL_I2S_Transmit_DMA+0x140>)
 8003f72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	4a26      	ldr	r2, [pc, #152]	@ (8004014 <HAL_I2S_Transmit_DMA+0x144>)
 8003f7a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f84:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f8c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f92:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003f94:	f7fe fbfc 	bl	8002790 <HAL_DMA_Start_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00f      	beq.n	8003fbe <HAL_I2S_Transmit_DMA+0xee>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f043 0208 	orr.w	r2, r3, #8
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_I2S_Transmit_DMA+0x134>
  }

  __HAL_UNLOCK(hi2s);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0202 	orr.w	r2, r2, #2
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004000:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	0800405b 	.word	0x0800405b
 8004010:	08004019 	.word	0x08004019
 8004014:	08004077 	.word	0x08004077

08004018 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004024:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10e      	bne.n	800404c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0202 	bic.w	r2, r2, #2
 800403c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7fd fbf9 	bl	8001844 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004066:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7fd fbfd 	bl	8001868 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0203 	bic.w	r2, r2, #3
 8004092:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ac:	f043 0208 	orr.w	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7fd fc17 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	881a      	ldrh	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10e      	bne.n	8004116 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004106:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fd fb97 	bl	8001844 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	b292      	uxth	r2, r2
 8004132:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	1c9a      	adds	r2, r3, #2
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10e      	bne.n	8004174 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004164:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fba1 	bl	80018b6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b04      	cmp	r3, #4
 8004196:	d13a      	bne.n	800420e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d109      	bne.n	80041b6 <I2S_IRQHandler+0x3a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d102      	bne.n	80041b6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffb4 	bl	800411e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b40      	cmp	r3, #64	@ 0x40
 80041be:	d126      	bne.n	800420e <I2S_IRQHandler+0x92>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d11f      	bne.n	800420e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041dc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004200:	f043 0202 	orr.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fb6d 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b03      	cmp	r3, #3
 8004218:	d136      	bne.n	8004288 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b02      	cmp	r3, #2
 8004222:	d109      	bne.n	8004238 <I2S_IRQHandler+0xbc>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800422e:	2b80      	cmp	r3, #128	@ 0x80
 8004230:	d102      	bne.n	8004238 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ff45 	bl	80040c2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d122      	bne.n	8004288 <I2S_IRQHandler+0x10c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d11b      	bne.n	8004288 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800425e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fd fb30 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a92      	ldr	r2, [pc, #584]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d101      	bne.n	80042ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042aa:	4b92      	ldr	r3, [pc, #584]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ac:	e001      	b.n	80042b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a8b      	ldr	r2, [pc, #556]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d101      	bne.n	80042cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042c8:	4b8a      	ldr	r3, [pc, #552]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042ca:	e001      	b.n	80042d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042dc:	d004      	beq.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f040 8099 	bne.w	800441a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d107      	bne.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f925 	bl	800454c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9c8 	bl	80046ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004322:	2b40      	cmp	r3, #64	@ 0x40
 8004324:	d13a      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d035      	beq.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6e      	ldr	r2, [pc, #440]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800433a:	4b6e      	ldr	r3, [pc, #440]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800433c:	e001      	b.n	8004342 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800433e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4969      	ldr	r1, [pc, #420]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800434a:	428b      	cmp	r3, r1
 800434c:	d101      	bne.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800434e:	4b69      	ldr	r3, [pc, #420]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004350:	e001      	b.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004352:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004356:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800436a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438e:	f043 0202 	orr.w	r2, r3, #2
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd faa6 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	f040 80c3 	bne.w	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80bd 	beq.w	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a49      	ldr	r2, [pc, #292]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043ce:	4b49      	ldr	r3, [pc, #292]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d0:	e001      	b.n	80043d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4944      	ldr	r1, [pc, #272]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043de:	428b      	cmp	r3, r1
 80043e0:	d101      	bne.n	80043e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043e2:	4b44      	ldr	r3, [pc, #272]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043e4:	e001      	b.n	80043ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043f0:	2300      	movs	r3, #0
 80043f2:	60bb      	str	r3, [r7, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f043 0204 	orr.w	r2, r3, #4
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fa68 	bl	80018e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004418:	e089      	b.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d107      	bne.n	8004434 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8be 	bl	80045b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f8fd 	bl	8004648 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004454:	2b40      	cmp	r3, #64	@ 0x40
 8004456:	d12f      	bne.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d02a      	beq.n	80044b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004470:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800447e:	e001      	b.n	8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004480:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4919      	ldr	r1, [pc, #100]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800448c:	428b      	cmp	r3, r1
 800448e:	d101      	bne.n	8004494 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004490:	4b18      	ldr	r3, [pc, #96]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004492:	e001      	b.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004494:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004498:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800449c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f043 0202 	orr.w	r2, r3, #2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fa18 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d136      	bne.n	8004530 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d031      	beq.n	8004530 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a07      	ldr	r2, [pc, #28]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044d6:	4b07      	ldr	r3, [pc, #28]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044d8:	e001      	b.n	80044de <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4902      	ldr	r1, [pc, #8]	@ (80044f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044e6:	428b      	cmp	r3, r1
 80044e8:	d106      	bne.n	80044f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80044ea:	4b02      	ldr	r3, [pc, #8]	@ (80044f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044ec:	e006      	b.n	80044fc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80044ee:	bf00      	nop
 80044f0:	40003800 	.word	0x40003800
 80044f4:	40003400 	.word	0x40003400
 80044f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004500:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004510:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f043 0204 	orr.w	r2, r3, #4
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd f9de 	bl	80018e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800452c:	e000      	b.n	8004530 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800452e:	bf00      	nop
}
 8004530:	bf00      	nop
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004558:	1c99      	adds	r1, r3, #2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6251      	str	r1, [r2, #36]	@ 0x24
 800455e:	881a      	ldrh	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800458c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ffc9 	bl	8004538 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	1c99      	adds	r1, r3, #2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80045c2:	8819      	ldrh	r1, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004640 <I2SEx_TxISR_I2SExt+0x90>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <I2SEx_TxISR_I2SExt+0x22>
 80045ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004644 <I2SEx_TxISR_I2SExt+0x94>)
 80045d0:	e001      	b.n	80045d6 <I2SEx_TxISR_I2SExt+0x26>
 80045d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045d6:	460a      	mov	r2, r1
 80045d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d121      	bne.n	8004636 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <I2SEx_TxISR_I2SExt+0x90>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <I2SEx_TxISR_I2SExt+0x50>
 80045fc:	4b11      	ldr	r3, [pc, #68]	@ (8004644 <I2SEx_TxISR_I2SExt+0x94>)
 80045fe:	e001      	b.n	8004604 <I2SEx_TxISR_I2SExt+0x54>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	490d      	ldr	r1, [pc, #52]	@ (8004640 <I2SEx_TxISR_I2SExt+0x90>)
 800460c:	428b      	cmp	r3, r1
 800460e:	d101      	bne.n	8004614 <I2SEx_TxISR_I2SExt+0x64>
 8004610:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <I2SEx_TxISR_I2SExt+0x94>)
 8004612:	e001      	b.n	8004618 <I2SEx_TxISR_I2SExt+0x68>
 8004614:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004618:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800461c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff81 	bl	8004538 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40003800 	.word	0x40003800
 8004644:	40003400 	.word	0x40003400

08004648 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68d8      	ldr	r0, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465a:	1c99      	adds	r1, r3, #2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004660:	b282      	uxth	r2, r0
 8004662:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800468a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff ff4a 	bl	8004538 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a20      	ldr	r2, [pc, #128]	@ (800473c <I2SEx_RxISR_I2SExt+0x90>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <I2SEx_RxISR_I2SExt+0x16>
 80046be:	4b20      	ldr	r3, [pc, #128]	@ (8004740 <I2SEx_RxISR_I2SExt+0x94>)
 80046c0:	e001      	b.n	80046c6 <I2SEx_RxISR_I2SExt+0x1a>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046c6:	68d8      	ldr	r0, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	1c99      	adds	r1, r3, #2
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80046d2:	b282      	uxth	r2, r0
 80046d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d121      	bne.n	8004732 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a12      	ldr	r2, [pc, #72]	@ (800473c <I2SEx_RxISR_I2SExt+0x90>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <I2SEx_RxISR_I2SExt+0x50>
 80046f8:	4b11      	ldr	r3, [pc, #68]	@ (8004740 <I2SEx_RxISR_I2SExt+0x94>)
 80046fa:	e001      	b.n	8004700 <I2SEx_RxISR_I2SExt+0x54>
 80046fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	490d      	ldr	r1, [pc, #52]	@ (800473c <I2SEx_RxISR_I2SExt+0x90>)
 8004708:	428b      	cmp	r3, r1
 800470a:	d101      	bne.n	8004710 <I2SEx_RxISR_I2SExt+0x64>
 800470c:	4b0c      	ldr	r3, [pc, #48]	@ (8004740 <I2SEx_RxISR_I2SExt+0x94>)
 800470e:	e001      	b.n	8004714 <I2SEx_RxISR_I2SExt+0x68>
 8004710:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004714:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004718:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff ff03 	bl	8004538 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40003800 	.word	0x40003800
 8004740:	40003400 	.word	0x40003400

08004744 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af02      	add	r7, sp, #8
 800474a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e101      	b.n	800495a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7fc fc7d 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2203      	movs	r2, #3
 800477a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004784:	d102      	bne.n	800478c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f001 ff47 	bl	8006624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7c1a      	ldrb	r2, [r3, #16]
 800479e:	f88d 2000 	strb.w	r2, [sp]
 80047a2:	3304      	adds	r3, #4
 80047a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047a6:	f001 fe36 	bl	8006416 <USB_CoreInit>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0ce      	b.n	800495a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 ff3f 	bl	8006646 <USB_SetCurrentMode>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e0bf      	b.n	800495a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e04a      	b.n	8004876 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047e0:	7bfa      	ldrb	r2, [r7, #15]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	3315      	adds	r3, #21
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047f4:	7bfa      	ldrb	r2, [r7, #15]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	3314      	adds	r3, #20
 8004804:	7bfa      	ldrb	r2, [r7, #15]
 8004806:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	b298      	uxth	r0, r3
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	332e      	adds	r3, #46	@ 0x2e
 800481c:	4602      	mov	r2, r0
 800481e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3318      	adds	r3, #24
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	331c      	adds	r3, #28
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	4413      	add	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3320      	adds	r3, #32
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800485c:	7bfa      	ldrb	r2, [r7, #15]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3324      	adds	r3, #36	@ 0x24
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	3301      	adds	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	791b      	ldrb	r3, [r3, #4]
 800487a:	7bfa      	ldrb	r2, [r7, #15]
 800487c:	429a      	cmp	r2, r3
 800487e:	d3af      	bcc.n	80047e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e044      	b.n	8004910 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004886:	7bfa      	ldrb	r2, [r7, #15]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3301      	adds	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	791b      	ldrb	r3, [r3, #4]
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	429a      	cmp	r2, r3
 8004918:	d3b5      	bcc.n	8004886 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7c1a      	ldrb	r2, [r3, #16]
 8004922:	f88d 2000 	strb.w	r2, [sp]
 8004926:	3304      	adds	r3, #4
 8004928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492a:	f001 fed9 	bl	80066e0 <USB_DevInit>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e00c      	b.n	800495a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f002 fa06 	bl	8006d64 <USB_DevDisconnect>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004962:	b590      	push	{r4, r7, lr}
 8004964:	b08d      	sub	sp, #52	@ 0x34
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f002 faa7 	bl	8006ecc <USB_GetMode>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 848c 	bne.w	800529e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f002 fa0b 	bl	8006da6 <USB_ReadInterrupts>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8482 	beq.w	800529c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f002 f9f8 	bl	8006da6 <USB_ReadInterrupts>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d107      	bne.n	80049d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f002 0202 	and.w	r2, r2, #2
 80049ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f002 f9e6 	bl	8006da6 <USB_ReadInterrupts>
 80049da:	4603      	mov	r3, r0
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d161      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0210 	bic.w	r2, r2, #16
 80049f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004a1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a1e:	d124      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d035      	beq.n	8004a98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6a38      	ldr	r0, [r7, #32]
 8004a40:	f002 f938 	bl	8006cb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a50:	441a      	add	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	091b      	lsrs	r3, r3, #4
 8004a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a62:	441a      	add	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	615a      	str	r2, [r3, #20]
 8004a68:	e016      	b.n	8004a98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004a70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a74:	d110      	bne.n	8004a98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6a38      	ldr	r0, [r7, #32]
 8004a82:	f002 f917 	bl	8006cb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a92:	441a      	add	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0210 	orr.w	r2, r2, #16
 8004aa6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f002 f97a 	bl	8006da6 <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004abc:	f040 80a7 	bne.w	8004c0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 f97f 	bl	8006dcc <USB_ReadDevAllOutEpInterrupt>
 8004ace:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004ad0:	e099      	b.n	8004c06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 808e 	beq.w	8004bfa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f002 f9a3 	bl	8006e34 <USB_ReadDevOutEPInterrupt>
 8004aee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	2301      	movs	r3, #1
 8004b0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fcfc 	bl	800550c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00c      	beq.n	8004b38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fdd2 	bl	80056dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2310      	movs	r3, #16
 8004b52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d030      	beq.n	8004bc0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d109      	bne.n	8004b7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	4413      	add	r3, r2
 8004b90:	3304      	adds	r3, #4
 8004b92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	78db      	ldrb	r3, [r3, #3]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fbc5 	bl	8005338 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2320      	movs	r3, #32
 8004bda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bf8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	085b      	lsrs	r3, r3, #1
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f af62 	bne.w	8004ad2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 f8c7 	bl	8006da6 <USB_ReadInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c22:	f040 80db 	bne.w	8004ddc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f002 f8e8 	bl	8006e00 <USB_ReadDevAllInEpInterrupt>
 8004c30:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004c36:	e0cd      	b.n	8004dd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 80c2 	beq.w	8004dc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f002 f90e 	bl	8006e70 <USB_ReadDevInEPInterrupt>
 8004c54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d057      	beq.n	8004d10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	2201      	movs	r2, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	69f9      	ldr	r1, [r7, #28]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c80:	4013      	ands	r3, r2
 8004c82:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	461a      	mov	r2, r3
 8004c92:	2301      	movs	r3, #1
 8004c94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d132      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	3320      	adds	r3, #32
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4403      	add	r3, r0
 8004cbe:	331c      	adds	r3, #28
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4419      	add	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4403      	add	r3, r0
 8004cd2:	3320      	adds	r3, #32
 8004cd4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d113      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x3a2>
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	3324      	adds	r3, #36	@ 0x24
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d108      	bne.n	8004d04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2101      	movs	r1, #1
 8004d00:	f002 f916 	bl	8006f30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	4619      	mov	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fad6 	bl	80052bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d008      	beq.n	8004d2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d26:	461a      	mov	r2, r3
 8004d28:	2308      	movs	r3, #8
 8004d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	461a      	mov	r2, r3
 8004d44:	2310      	movs	r3, #16
 8004d46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2340      	movs	r3, #64	@ 0x40
 8004d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d023      	beq.n	8004db6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d70:	6a38      	ldr	r0, [r7, #32]
 8004d72:	f001 fe19 	bl	80069a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	3310      	adds	r3, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4413      	add	r3, r2
 8004d86:	3304      	adds	r3, #4
 8004d88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	78db      	ldrb	r3, [r3, #3]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d108      	bne.n	8004da4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2200      	movs	r2, #0
 8004d96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fad6 	bl	8005350 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db0:	461a      	mov	r2, r3
 8004db2:	2302      	movs	r3, #2
 8004db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fb15 	bl	80053f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	3301      	adds	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f47f af2e 	bne.w	8004c38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 ffe0 	bl	8006da6 <USB_ReadInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df0:	d122      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69fa      	ldr	r2, [r7, #28]
 8004dfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fca4 	bl	8005768 <HAL_PCDEx_LPM_Callback>
 8004e20:	e002      	b.n	8004e28 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa7e 	bl	8005324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 ffb2 	bl	8006da6 <USB_ReadInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e4c:	d112      	bne.n	8004e74 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d102      	bne.n	8004e64 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa56 	bl	8005310 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004e72:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 ff94 	bl	8006da6 <USB_ReadInterrupts>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e88:	f040 80b7 	bne.w	8004ffa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 fd7e 	bl	80069a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eb0:	e046      	b.n	8004f40 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ec4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ee4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ef8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	791b      	ldrb	r3, [r3, #4]
 8004f44:	461a      	mov	r2, r3
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d3b2      	bcc.n	8004eb2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f5a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004f5e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	7bdb      	ldrb	r3, [r3, #15]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d016      	beq.n	8004f96 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f78:	f043 030b 	orr.w	r3, r3, #11
 8004f7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f8e:	f043 030b 	orr.w	r3, r3, #11
 8004f92:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f94:	e015      	b.n	8004fc2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004fa8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004fac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fbc:	f043 030b 	orr.w	r3, r3, #11
 8004fc0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fd0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004fd4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f001 ffa3 	bl	8006f30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 fed1 	bl	8006da6 <USB_ReadInterrupts>
 8005004:	4603      	mov	r3, r0
 8005006:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500e:	d123      	bne.n	8005058 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f001 ff67 	bl	8006ee8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fd3b 	bl	8006a9a <USB_GetDevSpeed>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681c      	ldr	r4, [r3, #0]
 8005030:	f001 f808 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8005034:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800503a:	461a      	mov	r2, r3
 800503c:	4620      	mov	r0, r4
 800503e:	f001 fa4f 	bl	80064e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f95a 	bl	80052fc <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695a      	ldr	r2, [r3, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005056:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fea2 	bl	8006da6 <USB_ReadInterrupts>
 8005062:	4603      	mov	r3, r0
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b08      	cmp	r3, #8
 800506a:	d10a      	bne.n	8005082 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f93b 	bl	80052e8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f002 0208 	and.w	r2, r2, #8
 8005080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f001 fe8d 	bl	8006da6 <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	2b80      	cmp	r3, #128	@ 0x80
 8005094:	d123      	bne.n	80050de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050a2:	2301      	movs	r3, #1
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a6:	e014      	b.n	80050d2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80050c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f962 	bl	8005390 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	3301      	adds	r3, #1
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	791b      	ldrb	r3, [r3, #4]
 80050d6:	461a      	mov	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	4293      	cmp	r3, r2
 80050dc:	d3e4      	bcc.n	80050a8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fe5f 	bl	8006da6 <USB_ReadInterrupts>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f2:	d13c      	bne.n	800516e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050f4:	2301      	movs	r3, #1
 80050f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f8:	e02b      	b.n	8005152 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510e:	4613      	mov	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3318      	adds	r3, #24
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d115      	bne.n	800514c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005120:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005122:	2b00      	cmp	r3, #0
 8005124:	da12      	bge.n	800514c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	4613      	mov	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	3317      	adds	r3, #23
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005142:	b2db      	uxtb	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f922 	bl	8005390 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	3301      	adds	r3, #1
 8005150:	627b      	str	r3, [r7, #36]	@ 0x24
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	461a      	mov	r2, r3
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	4293      	cmp	r3, r2
 800515c:	d3cd      	bcc.n	80050fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695a      	ldr	r2, [r3, #20]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800516c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fe17 	bl	8006da6 <USB_ReadInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800517e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005182:	d156      	bne.n	8005232 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005184:	2301      	movs	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
 8005188:	e045      	b.n	8005216 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519e:	4613      	mov	r3, r2
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d12e      	bne.n	8005210 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	da2b      	bge.n	8005210 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80051c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d121      	bne.n	8005210 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800520c:	6053      	str	r3, [r2, #4]
            break;
 800520e:	e008      	b.n	8005222 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	3301      	adds	r3, #1
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	791b      	ldrb	r3, [r3, #4]
 800521a:	461a      	mov	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521e:	4293      	cmp	r3, r2
 8005220:	d3b3      	bcc.n	800518a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695a      	ldr	r2, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f001 fdb5 	bl	8006da6 <USB_ReadInterrupts>
 800523c:	4603      	mov	r3, r0
 800523e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005246:	d10a      	bne.n	800525e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f88d 	bl	8005368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695a      	ldr	r2, [r3, #20]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800525c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f001 fd9f 	bl	8006da6 <USB_ReadInterrupts>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d115      	bne.n	800529e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f879 	bl	800537c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e000      	b.n	800529e <HAL_PCD_IRQHandler+0x93c>
      return;
 800529c:	bf00      	nop
    }
  }
}
 800529e:	3734      	adds	r7, #52	@ 0x34
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd90      	pop	{r4, r7, pc}

080052a4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	460b      	mov	r3, r1
 800539a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800539c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	da0c      	bge.n	80053be <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	4613      	mov	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	3310      	adds	r3, #16
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	4413      	add	r3, r2
 80053b8:	3304      	adds	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e00c      	b.n	80053d8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	f003 020f 	and.w	r2, r3, #15
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	4413      	add	r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	4413      	add	r3, r2
 80053d4:	3304      	adds	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 fb80 	bl	8006ae4 <USB_EPStopXfer>
 80053e4:	4603      	mov	r3, r0
 80053e6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053e8:	7afb      	ldrb	r3, [r7, #11]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b08a      	sub	sp, #40	@ 0x28
 80053f6:	af02      	add	r7, sp, #8
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	3310      	adds	r3, #16
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4413      	add	r3, r2
 8005416:	3304      	adds	r3, #4
 8005418:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	429a      	cmp	r2, r3
 8005424:	d901      	bls.n	800542a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e06b      	b.n	8005502 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	d902      	bls.n	8005446 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3303      	adds	r3, #3
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800544e:	e02a      	b.n	80054a6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	69fa      	ldr	r2, [r7, #28]
 8005462:	429a      	cmp	r2, r3
 8005464:	d902      	bls.n	800546c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	3303      	adds	r3, #3
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	68d9      	ldr	r1, [r3, #12]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4603      	mov	r3, r0
 8005488:	6978      	ldr	r0, [r7, #20]
 800548a:	f001 fbd5 	bl	8006c38 <USB_WritePacket>

    ep->xfer_buff  += len;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	441a      	add	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d809      	bhi.n	80054d0 <PCD_WriteEmptyTxFifo+0xde>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d203      	bcs.n	80054d0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1bf      	bne.n	8005450 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d811      	bhi.n	8005500 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	2201      	movs	r2, #1
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	6939      	ldr	r1, [r7, #16]
 80054f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054fc:	4013      	ands	r3, r2
 80054fe:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	333c      	adds	r3, #60	@ 0x3c
 8005524:	3304      	adds	r3, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	799b      	ldrb	r3, [r3, #6]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d17b      	bne.n	800563a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d015      	beq.n	8005578 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	4a61      	ldr	r2, [pc, #388]	@ (80056d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	f240 80b9 	bls.w	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80b3 	beq.w	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800556e:	461a      	mov	r2, r3
 8005570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005574:	6093      	str	r3, [r2, #8]
 8005576:	e0a7      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	2320      	movs	r3, #32
 8005592:	6093      	str	r3, [r2, #8]
 8005594:	e098      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 8093 	bne.w	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	4a4b      	ldr	r2, [pc, #300]	@ (80056d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d90f      	bls.n	80055ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c0:	461a      	mov	r2, r3
 80055c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c6:	6093      	str	r3, [r2, #8]
 80055c8:	e07e      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	3304      	adds	r3, #4
 80055de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	0159      	lsls	r1, r3, #5
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	440b      	add	r3, r1
 80055ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d114      	bne.n	800562c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005614:	461a      	mov	r2, r3
 8005616:	2101      	movs	r1, #1
 8005618:	f001 fc8a 	bl	8006f30 <USB_EP0_OutStart>
 800561c:	e006      	b.n	800562c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	441a      	add	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff fe36 	bl	80052a4 <HAL_PCD_DataOutStageCallback>
 8005638:	e046      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4a26      	ldr	r2, [pc, #152]	@ (80056d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d124      	bne.n	800568c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00a      	beq.n	8005662 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005658:	461a      	mov	r2, r3
 800565a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800565e:	6093      	str	r3, [r2, #8]
 8005660:	e032      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005678:	461a      	mov	r2, r3
 800567a:	2320      	movs	r3, #32
 800567c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fe0d 	bl	80052a4 <HAL_PCD_DataOutStageCallback>
 800568a:	e01d      	b.n	80056c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d114      	bne.n	80056bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4413      	add	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80056b4:	461a      	mov	r2, r3
 80056b6:	2100      	movs	r1, #0
 80056b8:	f001 fc3a 	bl	8006f30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff fdee 	bl	80052a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3720      	adds	r7, #32
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	4f54300a 	.word	0x4f54300a
 80056d8:	4f54310a 	.word	0x4f54310a

080056dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	333c      	adds	r3, #60	@ 0x3c
 80056f4:	3304      	adds	r3, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <PCD_EP_OutSetupPacket_int+0x88>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d90e      	bls.n	8005730 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800572e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fdcf 	bl	80052d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a0a      	ldr	r2, [pc, #40]	@ (8005764 <PCD_EP_OutSetupPacket_int+0x88>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d90c      	bls.n	8005758 <PCD_EP_OutSetupPacket_int+0x7c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	799b      	ldrb	r3, [r3, #6]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d108      	bne.n	8005758 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005750:	461a      	mov	r2, r3
 8005752:	2101      	movs	r1, #1
 8005754:	f001 fbec 	bl	8006f30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	4f54300a 	.word	0x4f54300a

08005768 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e267      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d075      	beq.n	800588a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800579e:	4b88      	ldr	r3, [pc, #544]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00c      	beq.n	80057c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057aa:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d112      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b6:	4b82      	ldr	r3, [pc, #520]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c2:	d10b      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	4b7e      	ldr	r3, [pc, #504]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05b      	beq.n	8005888 <HAL_RCC_OscConfig+0x108>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d157      	bne.n	8005888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e242      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e4:	d106      	bne.n	80057f4 <HAL_RCC_OscConfig+0x74>
 80057e6:	4b76      	ldr	r3, [pc, #472]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a75      	ldr	r2, [pc, #468]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x98>
 80057fe:	4b70      	ldr	r3, [pc, #448]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6f      	ldr	r2, [pc, #444]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6d      	ldr	r3, [pc, #436]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6c      	ldr	r2, [pc, #432]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 8005818:	4b69      	ldr	r3, [pc, #420]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a68      	ldr	r2, [pc, #416]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fc f8d6 	bl	80019e8 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fc f8d2 	bl	80019e8 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	@ 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e207      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b5b      	ldr	r3, [pc, #364]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xc0>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fc f8c2 	bl	80019e8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fc f8be 	bl	80019e8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	@ 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1f3      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b51      	ldr	r3, [pc, #324]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0xe8>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005896:	4b4a      	ldr	r3, [pc, #296]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a2:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ae:	4b44      	ldr	r3, [pc, #272]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b41      	ldr	r3, [pc, #260]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1c7      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4937      	ldr	r1, [pc, #220]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e03a      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b34      	ldr	r3, [pc, #208]	@ (80059c4 <HAL_RCC_OscConfig+0x244>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fc f877 	bl	80019e8 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fe:	f7fc f873 	bl	80019e8 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e1a8      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4925      	ldr	r1, [pc, #148]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005932:	4b24      	ldr	r3, [pc, #144]	@ (80059c4 <HAL_RCC_OscConfig+0x244>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fc f856 	bl	80019e8 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005940:	f7fc f852 	bl	80019e8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e187      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d036      	beq.n	80059d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <HAL_RCC_OscConfig+0x248>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fc f836 	bl	80019e8 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fc f832 	bl	80019e8 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e167      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x200>
 800599e:	e01b      	b.n	80059d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RCC_OscConfig+0x248>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fc f81f 	bl	80019e8 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ac:	e00e      	b.n	80059cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fc f81b 	bl	80019e8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d907      	bls.n	80059cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e150      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470000 	.word	0x42470000
 80059c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b88      	ldr	r3, [pc, #544]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ea      	bne.n	80059ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8097 	beq.w	8005b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b81      	ldr	r3, [pc, #516]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	4b7d      	ldr	r3, [pc, #500]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	4a7c      	ldr	r2, [pc, #496]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a06:	4b7a      	ldr	r3, [pc, #488]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a16:	4b77      	ldr	r3, [pc, #476]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d118      	bne.n	8005a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a22:	4b74      	ldr	r3, [pc, #464]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a73      	ldr	r2, [pc, #460]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2e:	f7fb ffdb 	bl	80019e8 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a36:	f7fb ffd7 	bl	80019e8 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e10c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x2ea>
 8005a5c:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a60:	4a63      	ldr	r2, [pc, #396]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x30c>
 8005a72:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4a5e      	ldr	r2, [pc, #376]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a82:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a8a:	e00b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a8c:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a57      	ldr	r2, [pc, #348]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a98:	4b55      	ldr	r3, [pc, #340]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	4a54      	ldr	r2, [pc, #336]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fb ff9c 	bl	80019e8 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab4:	f7fb ff98 	bl	80019e8 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0cb      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aca:	4b49      	ldr	r3, [pc, #292]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0ee      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x334>
 8005ad6:	e014      	b.n	8005b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad8:	f7fb ff86 	bl	80019e8 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f7fb ff82 	bl	80019e8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0b5      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ee      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b08:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	4a38      	ldr	r2, [pc, #224]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a1 	beq.w	8005c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b1e:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d05c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d141      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fb ff56 	bl	80019e8 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fb ff52 	bl	80019e8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e087      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	4b27      	ldr	r3, [pc, #156]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	491b      	ldr	r1, [pc, #108]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fb ff2b 	bl	80019e8 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fb ff27 	bl	80019e8 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e05c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x416>
 8005bb4:	e054      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb6:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fb ff14 	bl	80019e8 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fb ff10 	bl	80019e8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e045      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x444>
 8005be2:	e03d      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e038      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <HAL_RCC_OscConfig+0x4ec>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d028      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d121      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d11a      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	3b01      	subs	r3, #1
 8005c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0cc      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b68      	ldr	r3, [pc, #416]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90c      	bls.n	8005cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b65      	ldr	r3, [pc, #404]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d044      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d119      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d003      	beq.n	8005d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e06f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e067      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4934      	ldr	r1, [pc, #208]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d60:	f7fb fe42 	bl	80019e8 <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	e00a      	b.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fb fe3e 	bl	80019e8 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e04f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 020c 	and.w	r2, r3, #12
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1eb      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b25      	ldr	r3, [pc, #148]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d20c      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b22      	ldr	r3, [pc, #136]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de2:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fb fda2 	bl	8001960 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40023c00 	.word	0x40023c00
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	080070c0 	.word	0x080070c0
 8005e34:	20000000 	.word	0x20000000
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b094      	sub	sp, #80	@ 0x50
 8005e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e54:	4b79      	ldr	r3, [pc, #484]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d00d      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x40>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	f200 80e1 	bhi.w	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e6e:	e0db      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b73      	ldr	r3, [pc, #460]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e74:	e0db      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e76:	4b72      	ldr	r3, [pc, #456]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e7a:	e0d8      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e86:	4b6d      	ldr	r3, [pc, #436]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d063      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b6a      	ldr	r3, [pc, #424]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	0159      	lsls	r1, r3, #5
 8005ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec0:	0150      	lsls	r0, r2, #5
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	1a51      	subs	r1, r2, r1
 8005eca:	6139      	str	r1, [r7, #16]
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	018b      	lsls	r3, r1, #6
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eea:	4651      	mov	r1, sl
 8005eec:	018a      	lsls	r2, r1, #6
 8005eee:	4651      	mov	r1, sl
 8005ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	eb49 0303 	adc.w	r3, r9, r3
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f2e:	4629      	mov	r1, r5
 8005f30:	028b      	lsls	r3, r1, #10
 8005f32:	4621      	mov	r1, r4
 8005f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f38:	4621      	mov	r1, r4
 8005f3a:	028a      	lsls	r2, r1, #10
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f42:	2200      	movs	r2, #0
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f4c:	f7fa f93c 	bl	80001c8 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4613      	mov	r3, r2
 8005f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f58:	e058      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b38      	ldr	r3, [pc, #224]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	4611      	mov	r1, r2
 8005f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	f04f 0000 	mov.w	r0, #0
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f86:	0150      	lsls	r0, r2, #5
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fac:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb45 0303 	adc.w	r3, r5, r3
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	028b      	lsls	r3, r1, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fec:	4621      	mov	r1, r4
 8005fee:	028a      	lsls	r2, r1, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006000:	f7fa f8e2 	bl	80001c8 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4613      	mov	r3, r2
 800600a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800600c:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800601c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800601e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006026:	e002      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800602c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006030:	4618      	mov	r0, r3
 8006032:	3750      	adds	r7, #80	@ 0x50
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	00f42400 	.word	0x00f42400

08006044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b03      	ldr	r3, [pc, #12]	@ (8006058 <HAL_RCC_GetHCLKFreq+0x14>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000000 	.word	0x20000000

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006060:	f7ff fff0 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	0a9b      	lsrs	r3, r3, #10
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4903      	ldr	r1, [pc, #12]	@ (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	080070d0 	.word	0x080070d0

08006084 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d035      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060ac:	4b62      	ldr	r3, [pc, #392]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060b2:	f7fb fc99 	bl	80019e8 <HAL_GetTick>
 80060b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ba:	f7fb fc95 	bl	80019e8 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e0b0      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060cc:	4b5b      	ldr	r3, [pc, #364]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	019a      	lsls	r2, r3, #6
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	071b      	lsls	r3, r3, #28
 80060e4:	4955      	ldr	r1, [pc, #340]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060ec:	4b52      	ldr	r3, [pc, #328]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060f2:	f7fb fc79 	bl	80019e8 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060fa:	f7fb fc75 	bl	80019e8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e090      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800610c:	4b4b      	ldr	r3, [pc, #300]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8083 	beq.w	800622c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	4b44      	ldr	r3, [pc, #272]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612e:	4a43      	ldr	r2, [pc, #268]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006134:	6413      	str	r3, [r2, #64]	@ 0x40
 8006136:	4b41      	ldr	r3, [pc, #260]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006142:	4b3f      	ldr	r3, [pc, #252]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3e      	ldr	r2, [pc, #248]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800614c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800614e:	f7fb fc4b 	bl	80019e8 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006156:	f7fb fc47 	bl	80019e8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e062      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006168:	4b35      	ldr	r3, [pc, #212]	@ (8006240 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f0      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006174:	4b31      	ldr	r3, [pc, #196]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800617c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d02f      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	429a      	cmp	r2, r3
 8006190:	d028      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006192:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800619a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800619c:	4b29      	ldr	r3, [pc, #164]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061a2:	4b28      	ldr	r3, [pc, #160]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061a8:	4a24      	ldr	r2, [pc, #144]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061ae:	4b23      	ldr	r3, [pc, #140]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d114      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061ba:	f7fb fc15 	bl	80019e8 <HAL_GetTick>
 80061be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c0:	e00a      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fb fc11 	bl	80019e8 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e02a      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d8:	4b18      	ldr	r3, [pc, #96]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0ee      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061f0:	d10d      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061f2:	4b12      	ldr	r3, [pc, #72]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006206:	490d      	ldr	r1, [pc, #52]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006208:	4313      	orrs	r3, r2
 800620a:	608b      	str	r3, [r1, #8]
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800620e:	4b0b      	ldr	r3, [pc, #44]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4a0a      	ldr	r2, [pc, #40]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006214:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006218:	6093      	str	r3, [r2, #8]
 800621a:	4b08      	ldr	r3, [pc, #32]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800621c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006226:	4905      	ldr	r1, [pc, #20]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	42470068 	.word	0x42470068
 800623c:	40023800 	.word	0x40023800
 8006240:	40007000 	.word	0x40007000
 8006244:	42470e40 	.word	0x42470e40

08006248 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d13f      	bne.n	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006266:	4b24      	ldr	r3, [pc, #144]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800626e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800627c:	d12f      	bne.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800627e:	4b1f      	ldr	r3, [pc, #124]	@ (80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006280:	617b      	str	r3, [r7, #20]
          break;
 8006282:	e02f      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006284:	4b1c      	ldr	r3, [pc, #112]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800628c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006290:	d108      	bne.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006292:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800629a:	4a19      	ldr	r2, [pc, #100]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e007      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80062a4:	4b14      	ldr	r3, [pc, #80]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80062ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80062b4:	4b10      	ldr	r3, [pc, #64]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ba:	099b      	lsrs	r3, r3, #6
 80062bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	fb02 f303 	mul.w	r3, r2, r3
 80062c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ce:	0f1b      	lsrs	r3, r3, #28
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
          break;
 80062dc:	e002      	b.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
          break;
 80062e2:	bf00      	nop
        }
      }
      break;
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80062e6:	bf00      	nop
    }
  }
  return frequency;
 80062e8:	697b      	ldr	r3, [r7, #20]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800
 80062fc:	00bb8000 	.word	0x00bb8000
 8006300:	00f42400 	.word	0x00f42400

08006304 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e07b      	b.n	800640e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	2b00      	cmp	r3, #0
 800631c:	d108      	bne.n	8006330 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006326:	d009      	beq.n	800633c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	61da      	str	r2, [r3, #28]
 800632e:	e005      	b.n	800633c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fa fe42 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006372:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	431a      	orrs	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69db      	ldr	r3, [r3, #28]
 80063b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c0:	ea42 0103 	orr.w	r1, r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	f003 0104 	and.w	r1, r3, #4
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	f003 0210 	and.w	r2, r3, #16
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006416:	b084      	sub	sp, #16
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	f107 001c 	add.w	r0, r7, #28
 8006424:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006428:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800642c:	2b01      	cmp	r3, #1
 800642e:	d123      	bne.n	8006478 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006458:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800645c:	2b01      	cmp	r3, #1
 800645e:	d105      	bne.n	800646c <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fdbd 	bl	8006fec <USB_CoreReset>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	e01b      	b.n	80064b0 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fdb1 	bl	8006fec <USB_CoreReset>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800648e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80064a2:	e005      	b.n	80064b0 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064b0:	7fbb      	ldrb	r3, [r7, #30]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d10b      	bne.n	80064ce <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f043 0206 	orr.w	r2, r3, #6
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f043 0220 	orr.w	r2, r3, #32
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064da:	b004      	add	sp, #16
 80064dc:	4770      	bx	lr
	...

080064e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d165      	bne.n	80065c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	4a41      	ldr	r2, [pc, #260]	@ (80065fc <USB_SetTurnaroundTime+0x11c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d906      	bls.n	800650a <USB_SetTurnaroundTime+0x2a>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a40      	ldr	r2, [pc, #256]	@ (8006600 <USB_SetTurnaroundTime+0x120>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d202      	bcs.n	800650a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006504:	230f      	movs	r3, #15
 8006506:	617b      	str	r3, [r7, #20]
 8006508:	e062      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	4a3c      	ldr	r2, [pc, #240]	@ (8006600 <USB_SetTurnaroundTime+0x120>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d306      	bcc.n	8006520 <USB_SetTurnaroundTime+0x40>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4a3b      	ldr	r2, [pc, #236]	@ (8006604 <USB_SetTurnaroundTime+0x124>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d202      	bcs.n	8006520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800651a:	230e      	movs	r3, #14
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	e057      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4a38      	ldr	r2, [pc, #224]	@ (8006604 <USB_SetTurnaroundTime+0x124>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d306      	bcc.n	8006536 <USB_SetTurnaroundTime+0x56>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a37      	ldr	r2, [pc, #220]	@ (8006608 <USB_SetTurnaroundTime+0x128>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d202      	bcs.n	8006536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006530:	230d      	movs	r3, #13
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e04c      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a33      	ldr	r2, [pc, #204]	@ (8006608 <USB_SetTurnaroundTime+0x128>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d306      	bcc.n	800654c <USB_SetTurnaroundTime+0x6c>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a32      	ldr	r2, [pc, #200]	@ (800660c <USB_SetTurnaroundTime+0x12c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d802      	bhi.n	800654c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006546:	230c      	movs	r3, #12
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e041      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a2f      	ldr	r2, [pc, #188]	@ (800660c <USB_SetTurnaroundTime+0x12c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d906      	bls.n	8006562 <USB_SetTurnaroundTime+0x82>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a2e      	ldr	r2, [pc, #184]	@ (8006610 <USB_SetTurnaroundTime+0x130>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d802      	bhi.n	8006562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800655c:	230b      	movs	r3, #11
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e036      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a2a      	ldr	r2, [pc, #168]	@ (8006610 <USB_SetTurnaroundTime+0x130>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d906      	bls.n	8006578 <USB_SetTurnaroundTime+0x98>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4a29      	ldr	r2, [pc, #164]	@ (8006614 <USB_SetTurnaroundTime+0x134>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d802      	bhi.n	8006578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006572:	230a      	movs	r3, #10
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e02b      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a26      	ldr	r2, [pc, #152]	@ (8006614 <USB_SetTurnaroundTime+0x134>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d906      	bls.n	800658e <USB_SetTurnaroundTime+0xae>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4a25      	ldr	r2, [pc, #148]	@ (8006618 <USB_SetTurnaroundTime+0x138>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d202      	bcs.n	800658e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006588:	2309      	movs	r3, #9
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e020      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a21      	ldr	r2, [pc, #132]	@ (8006618 <USB_SetTurnaroundTime+0x138>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d306      	bcc.n	80065a4 <USB_SetTurnaroundTime+0xc4>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4a20      	ldr	r2, [pc, #128]	@ (800661c <USB_SetTurnaroundTime+0x13c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d802      	bhi.n	80065a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800659e:	2308      	movs	r3, #8
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e015      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4a1d      	ldr	r2, [pc, #116]	@ (800661c <USB_SetTurnaroundTime+0x13c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d906      	bls.n	80065ba <USB_SetTurnaroundTime+0xda>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006620 <USB_SetTurnaroundTime+0x140>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d202      	bcs.n	80065ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065b4:	2307      	movs	r3, #7
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e00a      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ba:	2306      	movs	r3, #6
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e007      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065c6:	2309      	movs	r3, #9
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e001      	b.n	80065d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065cc:	2309      	movs	r3, #9
 80065ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr
 80065fc:	00d8acbf 	.word	0x00d8acbf
 8006600:	00e4e1c0 	.word	0x00e4e1c0
 8006604:	00f42400 	.word	0x00f42400
 8006608:	01067380 	.word	0x01067380
 800660c:	011a499f 	.word	0x011a499f
 8006610:	01312cff 	.word	0x01312cff
 8006614:	014ca43f 	.word	0x014ca43f
 8006618:	016e3600 	.word	0x016e3600
 800661c:	01a6ab1f 	.word	0x01a6ab1f
 8006620:	01e84800 	.word	0x01e84800

08006624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f023 0201 	bic.w	r2, r3, #1
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d115      	bne.n	8006694 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006674:	200a      	movs	r0, #10
 8006676:	f7fb f9c3 	bl	8001a00 <HAL_Delay>
      ms += 10U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	330a      	adds	r3, #10
 800667e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc23 	bl	8006ecc <USB_GetMode>
 8006686:	4603      	mov	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d01e      	beq.n	80066ca <USB_SetCurrentMode+0x84>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006690:	d9f0      	bls.n	8006674 <USB_SetCurrentMode+0x2e>
 8006692:	e01a      	b.n	80066ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d115      	bne.n	80066c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066a6:	200a      	movs	r0, #10
 80066a8:	f7fb f9aa 	bl	8001a00 <HAL_Delay>
      ms += 10U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	330a      	adds	r3, #10
 80066b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fc0a 	bl	8006ecc <USB_GetMode>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d005      	beq.n	80066ca <USB_SetCurrentMode+0x84>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80066c2:	d9f0      	bls.n	80066a6 <USB_SetCurrentMode+0x60>
 80066c4:	e001      	b.n	80066ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e005      	b.n	80066d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80066ce:	d101      	bne.n	80066d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e000      	b.n	80066d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
	...

080066e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e0:	b084      	sub	sp, #16
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e009      	b.n	8006714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3340      	adds	r3, #64	@ 0x40
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b0e      	cmp	r3, #14
 8006718:	d9f2      	bls.n	8006700 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800671a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11c      	bne.n	800675c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006752:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
 800675a:	e00b      	b.n	8006774 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006760:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800677a:	461a      	mov	r2, r3
 800677c:	2300      	movs	r3, #0
 800677e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006780:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10d      	bne.n	80067a4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800678c:	2b00      	cmp	r3, #0
 800678e:	d104      	bne.n	800679a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006790:	2100      	movs	r1, #0
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f968 	bl	8006a68 <USB_SetDevSpeed>
 8006798:	e008      	b.n	80067ac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800679a:	2101      	movs	r1, #1
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f963 	bl	8006a68 <USB_SetDevSpeed>
 80067a2:	e003      	b.n	80067ac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067a4:	2103      	movs	r1, #3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f95e 	bl	8006a68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067ac:	2110      	movs	r1, #16
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f8fa 	bl	80069a8 <USB_FlushTxFifo>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f924 	bl	8006a0c <USB_FlushRxFifo>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d4:	461a      	mov	r2, r3
 80067d6:	2300      	movs	r3, #0
 80067d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e0:	461a      	mov	r2, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ec:	461a      	mov	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e043      	b.n	8006880 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800680a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680e:	d118      	bne.n	8006842 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	015a      	lsls	r2, r3, #5
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	4413      	add	r3, r2
 800681e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006822:	461a      	mov	r2, r3
 8006824:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	e013      	b.n	8006854 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	e008      	b.n	8006854 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800684e:	461a      	mov	r2, r3
 8006850:	2300      	movs	r3, #0
 8006852:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006860:	461a      	mov	r2, r3
 8006862:	2300      	movs	r3, #0
 8006864:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006872:	461a      	mov	r2, r3
 8006874:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006878:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	3301      	adds	r3, #1
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006884:	461a      	mov	r2, r3
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4293      	cmp	r3, r2
 800688a:	d3b5      	bcc.n	80067f8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	e043      	b.n	800691a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a8:	d118      	bne.n	80068dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068bc:	461a      	mov	r2, r3
 80068be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e013      	b.n	80068ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d2:	461a      	mov	r2, r3
 80068d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e008      	b.n	80068ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	461a      	mov	r2, r3
 80068ea:	2300      	movs	r3, #0
 80068ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fa:	461a      	mov	r2, r3
 80068fc:	2300      	movs	r3, #0
 80068fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	3301      	adds	r3, #1
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800691e:	461a      	mov	r2, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4293      	cmp	r3, r2
 8006924:	d3b5      	bcc.n	8006892 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006938:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006946:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006948:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	4b10      	ldr	r3, [pc, #64]	@ (80069a4 <USB_DevInit+0x2c4>)
 8006962:	4313      	orrs	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006968:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800696c:	2b00      	cmp	r3, #0
 800696e:	d005      	beq.n	800697c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	f043 0208 	orr.w	r2, r3, #8
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800697c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a0:	b004      	add	sp, #16
 80069a2:	4770      	bx	lr
 80069a4:	803c3800 	.word	0x803c3800

080069a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069c2:	d901      	bls.n	80069c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01b      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	daf2      	bge.n	80069b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	019b      	lsls	r3, r3, #6
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069ec:	d901      	bls.n	80069f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e006      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d0f0      	beq.n	80069e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a24:	d901      	bls.n	8006a2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e018      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	daf2      	bge.n	8006a18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2210      	movs	r2, #16
 8006a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a48:	d901      	bls.n	8006a4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e006      	b.n	8006a5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d0f0      	beq.n	8006a3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0306 	and.w	r3, r3, #6
 8006ab2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d102      	bne.n	8006ac0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
 8006abe:	e00a      	b.n	8006ad6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d002      	beq.n	8006acc <USB_GetDevSpeed+0x32>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b06      	cmp	r3, #6
 8006aca:	d102      	bne.n	8006ad2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
 8006ad0:	e001      	b.n	8006ad6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ad2:	230f      	movs	r3, #15
 8006ad4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d14a      	bne.n	8006b98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1a:	f040 8086 	bne.w	8006c2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	7812      	ldrb	r2, [r2, #0]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d902      	bls.n	8006b7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7a:	e056      	b.n	8006c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b94:	d0e7      	beq.n	8006b66 <USB_EPStopXfer+0x82>
 8006b96:	e048      	b.n	8006c2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb0:	d13b      	bne.n	8006c2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	7812      	ldrb	r2, [r2, #0]
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	7812      	ldrb	r2, [r2, #0]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d902      	bls.n	8006c10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c0e:	e00c      	b.n	8006c2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c28:	d0e7      	beq.n	8006bfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b089      	sub	sp, #36	@ 0x24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4611      	mov	r1, r2
 8006c44:	461a      	mov	r2, r3
 8006c46:	460b      	mov	r3, r1
 8006c48:	71fb      	strb	r3, [r7, #7]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d123      	bne.n	8006ca6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c5e:	88bb      	ldrh	r3, [r7, #4]
 8006c60:	3303      	adds	r3, #3
 8006c62:	089b      	lsrs	r3, r3, #2
 8006c64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	61bb      	str	r3, [r7, #24]
 8006c6a:	e018      	b.n	8006c9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
 8006c6e:	031a      	lsls	r2, r3, #12
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c78:	461a      	mov	r2, r3
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3301      	adds	r3, #1
 8006c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d3e2      	bcc.n	8006c6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3724      	adds	r7, #36	@ 0x24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b08b      	sub	sp, #44	@ 0x2c
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	089b      	lsrs	r3, r3, #2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	f003 0303 	and.w	r3, r3, #3
 8006cd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cda:	2300      	movs	r3, #0
 8006cdc:	623b      	str	r3, [r7, #32]
 8006cde:	e014      	b.n	8006d0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	3301      	adds	r3, #1
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	3301      	adds	r3, #1
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d04:	6a3b      	ldr	r3, [r7, #32]
 8006d06:	3301      	adds	r3, #1
 8006d08:	623b      	str	r3, [r7, #32]
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d3e6      	bcc.n	8006ce0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d12:	8bfb      	ldrh	r3, [r7, #30]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01e      	beq.n	8006d56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d22:	461a      	mov	r2, r3
 8006d24:	f107 0310 	add.w	r3, r7, #16
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	701a      	strb	r2, [r3, #0]
      i++;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	3301      	adds	r3, #1
 8006d42:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	3301      	adds	r3, #1
 8006d48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d4a:	8bfb      	ldrh	r3, [r7, #30]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d50:	8bfb      	ldrh	r3, [r7, #30]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ea      	bne.n	8006d2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	372c      	adds	r7, #44	@ 0x2c
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d92:	f043 0302 	orr.w	r3, r3, #2
 8006d96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	0c1b      	lsrs	r3, r3, #16
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4013      	ands	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	b29b      	uxth	r3, r3
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e62:	68bb      	ldr	r3, [r7, #8]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea0:	01db      	lsls	r3, r3, #7
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f02:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
	...

08006f30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	333c      	adds	r3, #60	@ 0x3c
 8006f46:	3304      	adds	r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4a26      	ldr	r2, [pc, #152]	@ (8006fe8 <USB_EP0_OutStart+0xb8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d90a      	bls.n	8006f6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f64:	d101      	bne.n	8006f6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e037      	b.n	8006fda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f98:	f043 0318 	orr.w	r3, r3, #24
 8006f9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006fb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fb2:	7afb      	ldrb	r3, [r7, #11]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d10f      	bne.n	8006fd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fd2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	4f54300a 	.word	0x4f54300a

08006fec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007004:	d901      	bls.n	800700a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e01b      	b.n	8007042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	daf2      	bge.n	8006ff8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800702e:	d901      	bls.n	8007034 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e006      	b.n	8007042 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b01      	cmp	r3, #1
 800703e:	d0f0      	beq.n	8007022 <USB_CoreReset+0x36>

  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <memset>:
 800704e:	4402      	add	r2, r0
 8007050:	4603      	mov	r3, r0
 8007052:	4293      	cmp	r3, r2
 8007054:	d100      	bne.n	8007058 <memset+0xa>
 8007056:	4770      	bx	lr
 8007058:	f803 1b01 	strb.w	r1, [r3], #1
 800705c:	e7f9      	b.n	8007052 <memset+0x4>
	...

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	@ (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	@ (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	@ (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	@ (80070a4 <__libc_init_array+0x44>)
 8007074:	f000 f818 	bl	80070a8 <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	080070e8 	.word	0x080070e8
 800709c:	080070e8 	.word	0x080070e8
 80070a0:	080070e8 	.word	0x080070e8
 80070a4:	080070ec 	.word	0x080070ec

080070a8 <_init>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr

080070b4 <_fini>:
 80070b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b6:	bf00      	nop
 80070b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ba:	bc08      	pop	{r3}
 80070bc:	469e      	mov	lr, r3
 80070be:	4770      	bx	lr
