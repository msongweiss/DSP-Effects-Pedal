
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1ec  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800c374  0800c374  0000d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c768  0800c768  0000e07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c768  0800c768  0000d768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c770  0800c770  0000e07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c770  0800c770  0000d770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c774  0800c774  0000d774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800c778  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e07c  2**0
                  CONTENTS
 10 .bss          00002b8c  2000007c  2000007c  0000e07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c08  20002c08  0000e07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbea  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dce  00000000  00000000  0002ac96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f8  00000000  00000000  000310a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025de3  00000000  00000000  000321a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002098b  00000000  00000000  00057f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1377  00000000  00000000  0007890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149c85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006050  00000000  00000000  00149cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014fd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c35c 	.word	0x0800c35c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800c35c 	.word	0x0800c35c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b988 	b.w	8000b5c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	468e      	mov	lr, r1
 800086c:	4604      	mov	r4, r0
 800086e:	4688      	mov	r8, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d962      	bls.n	8000940 <__udivmoddi4+0xdc>
 800087a:	fab2 f682 	clz	r6, r2
 800087e:	b14e      	cbz	r6, 8000894 <__udivmoddi4+0x30>
 8000880:	f1c6 0320 	rsb	r3, r6, #32
 8000884:	fa01 f806 	lsl.w	r8, r1, r6
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	40b7      	lsls	r7, r6
 800088e:	ea43 0808 	orr.w	r8, r3, r8
 8000892:	40b4      	lsls	r4, r6
 8000894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000898:	fa1f fc87 	uxth.w	ip, r7
 800089c:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a0:	0c23      	lsrs	r3, r4, #16
 80008a2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008aa:	fb01 f20c 	mul.w	r2, r1, ip
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008b8:	f080 80ea 	bcs.w	8000a90 <__udivmoddi4+0x22c>
 80008bc:	429a      	cmp	r2, r3
 80008be:	f240 80e7 	bls.w	8000a90 <__udivmoddi4+0x22c>
 80008c2:	3902      	subs	r1, #2
 80008c4:	443b      	add	r3, r7
 80008c6:	1a9a      	subs	r2, r3, r2
 80008c8:	b2a3      	uxth	r3, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008d6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008da:	459c      	cmp	ip, r3
 80008dc:	d909      	bls.n	80008f2 <__udivmoddi4+0x8e>
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e4:	f080 80d6 	bcs.w	8000a94 <__udivmoddi4+0x230>
 80008e8:	459c      	cmp	ip, r3
 80008ea:	f240 80d3 	bls.w	8000a94 <__udivmoddi4+0x230>
 80008ee:	443b      	add	r3, r7
 80008f0:	3802      	subs	r0, #2
 80008f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f6:	eba3 030c 	sub.w	r3, r3, ip
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11d      	cbz	r5, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40f3      	lsrs	r3, r6
 8000900:	2200      	movs	r2, #0
 8000902:	e9c5 3200 	strd	r3, r2, [r5]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d905      	bls.n	800091a <__udivmoddi4+0xb6>
 800090e:	b10d      	cbz	r5, 8000914 <__udivmoddi4+0xb0>
 8000910:	e9c5 0100 	strd	r0, r1, [r5]
 8000914:	2100      	movs	r1, #0
 8000916:	4608      	mov	r0, r1
 8000918:	e7f5      	b.n	8000906 <__udivmoddi4+0xa2>
 800091a:	fab3 f183 	clz	r1, r3
 800091e:	2900      	cmp	r1, #0
 8000920:	d146      	bne.n	80009b0 <__udivmoddi4+0x14c>
 8000922:	4573      	cmp	r3, lr
 8000924:	d302      	bcc.n	800092c <__udivmoddi4+0xc8>
 8000926:	4282      	cmp	r2, r0
 8000928:	f200 8105 	bhi.w	8000b36 <__udivmoddi4+0x2d2>
 800092c:	1a84      	subs	r4, r0, r2
 800092e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000932:	2001      	movs	r0, #1
 8000934:	4690      	mov	r8, r2
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0e5      	beq.n	8000906 <__udivmoddi4+0xa2>
 800093a:	e9c5 4800 	strd	r4, r8, [r5]
 800093e:	e7e2      	b.n	8000906 <__udivmoddi4+0xa2>
 8000940:	2a00      	cmp	r2, #0
 8000942:	f000 8090 	beq.w	8000a66 <__udivmoddi4+0x202>
 8000946:	fab2 f682 	clz	r6, r2
 800094a:	2e00      	cmp	r6, #0
 800094c:	f040 80a4 	bne.w	8000a98 <__udivmoddi4+0x234>
 8000950:	1a8a      	subs	r2, r1, r2
 8000952:	0c03      	lsrs	r3, r0, #16
 8000954:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000958:	b280      	uxth	r0, r0
 800095a:	b2bc      	uxth	r4, r7
 800095c:	2101      	movs	r1, #1
 800095e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000962:	fb0e 221c 	mls	r2, lr, ip, r2
 8000966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096a:	fb04 f20c 	mul.w	r2, r4, ip
 800096e:	429a      	cmp	r2, r3
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x11e>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x11c>
 800097a:	429a      	cmp	r2, r3
 800097c:	f200 80e0 	bhi.w	8000b40 <__udivmoddi4+0x2dc>
 8000980:	46c4      	mov	ip, r8
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	fbb3 f2fe 	udiv	r2, r3, lr
 8000988:	fb0e 3312 	mls	r3, lr, r2, r3
 800098c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000990:	fb02 f404 	mul.w	r4, r2, r4
 8000994:	429c      	cmp	r4, r3
 8000996:	d907      	bls.n	80009a8 <__udivmoddi4+0x144>
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	f102 30ff 	add.w	r0, r2, #4294967295
 800099e:	d202      	bcs.n	80009a6 <__udivmoddi4+0x142>
 80009a0:	429c      	cmp	r4, r3
 80009a2:	f200 80ca 	bhi.w	8000b3a <__udivmoddi4+0x2d6>
 80009a6:	4602      	mov	r2, r0
 80009a8:	1b1b      	subs	r3, r3, r4
 80009aa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009ae:	e7a5      	b.n	80008fc <__udivmoddi4+0x98>
 80009b0:	f1c1 0620 	rsb	r6, r1, #32
 80009b4:	408b      	lsls	r3, r1
 80009b6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ba:	431f      	orrs	r7, r3
 80009bc:	fa0e f401 	lsl.w	r4, lr, r1
 80009c0:	fa20 f306 	lsr.w	r3, r0, r6
 80009c4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009cc:	4323      	orrs	r3, r4
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	fa1f fc87 	uxth.w	ip, r7
 80009d6:	fbbe f0f9 	udiv	r0, lr, r9
 80009da:	0c1c      	lsrs	r4, r3, #16
 80009dc:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009e4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	fa02 f201 	lsl.w	r2, r2, r1
 80009ee:	d909      	bls.n	8000a04 <__udivmoddi4+0x1a0>
 80009f0:	193c      	adds	r4, r7, r4
 80009f2:	f100 3aff 	add.w	sl, r0, #4294967295
 80009f6:	f080 809c 	bcs.w	8000b32 <__udivmoddi4+0x2ce>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f240 8099 	bls.w	8000b32 <__udivmoddi4+0x2ce>
 8000a00:	3802      	subs	r0, #2
 8000a02:	443c      	add	r4, r7
 8000a04:	eba4 040e 	sub.w	r4, r4, lr
 8000a08:	fa1f fe83 	uxth.w	lr, r3
 8000a0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a10:	fb09 4413 	mls	r4, r9, r3, r4
 8000a14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a1c:	45a4      	cmp	ip, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x1ce>
 8000a20:	193c      	adds	r4, r7, r4
 8000a22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a26:	f080 8082 	bcs.w	8000b2e <__udivmoddi4+0x2ca>
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d97f      	bls.n	8000b2e <__udivmoddi4+0x2ca>
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	443c      	add	r4, r7
 8000a32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a36:	eba4 040c 	sub.w	r4, r4, ip
 8000a3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a3e:	4564      	cmp	r4, ip
 8000a40:	4673      	mov	r3, lr
 8000a42:	46e1      	mov	r9, ip
 8000a44:	d362      	bcc.n	8000b0c <__udivmoddi4+0x2a8>
 8000a46:	d05f      	beq.n	8000b08 <__udivmoddi4+0x2a4>
 8000a48:	b15d      	cbz	r5, 8000a62 <__udivmoddi4+0x1fe>
 8000a4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a52:	fa04 f606 	lsl.w	r6, r4, r6
 8000a56:	fa22 f301 	lsr.w	r3, r2, r1
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	40cc      	lsrs	r4, r1
 8000a5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a62:	2100      	movs	r1, #0
 8000a64:	e74f      	b.n	8000906 <__udivmoddi4+0xa2>
 8000a66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a6a:	0c01      	lsrs	r1, r0, #16
 8000a6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a70:	b280      	uxth	r0, r0
 8000a72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a76:	463b      	mov	r3, r7
 8000a78:	4638      	mov	r0, r7
 8000a7a:	463c      	mov	r4, r7
 8000a7c:	46b8      	mov	r8, r7
 8000a7e:	46be      	mov	lr, r7
 8000a80:	2620      	movs	r6, #32
 8000a82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a86:	eba2 0208 	sub.w	r2, r2, r8
 8000a8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a8e:	e766      	b.n	800095e <__udivmoddi4+0xfa>
 8000a90:	4601      	mov	r1, r0
 8000a92:	e718      	b.n	80008c6 <__udivmoddi4+0x62>
 8000a94:	4610      	mov	r0, r2
 8000a96:	e72c      	b.n	80008f2 <__udivmoddi4+0x8e>
 8000a98:	f1c6 0220 	rsb	r2, r6, #32
 8000a9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa0:	40b7      	lsls	r7, r6
 8000aa2:	40b1      	lsls	r1, r6
 8000aa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	430a      	orrs	r2, r1
 8000aae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ab2:	b2bc      	uxth	r4, r7
 8000ab4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ab8:	0c11      	lsrs	r1, r2, #16
 8000aba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000abe:	fb08 f904 	mul.w	r9, r8, r4
 8000ac2:	40b0      	lsls	r0, r6
 8000ac4:	4589      	cmp	r9, r1
 8000ac6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000aca:	b280      	uxth	r0, r0
 8000acc:	d93e      	bls.n	8000b4c <__udivmoddi4+0x2e8>
 8000ace:	1879      	adds	r1, r7, r1
 8000ad0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ad4:	d201      	bcs.n	8000ada <__udivmoddi4+0x276>
 8000ad6:	4589      	cmp	r9, r1
 8000ad8:	d81f      	bhi.n	8000b1a <__udivmoddi4+0x2b6>
 8000ada:	eba1 0109 	sub.w	r1, r1, r9
 8000ade:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae2:	fb09 f804 	mul.w	r8, r9, r4
 8000ae6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aea:	b292      	uxth	r2, r2
 8000aec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af0:	4542      	cmp	r2, r8
 8000af2:	d229      	bcs.n	8000b48 <__udivmoddi4+0x2e4>
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000afa:	d2c4      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000afc:	4542      	cmp	r2, r8
 8000afe:	d2c2      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000b00:	f1a9 0102 	sub.w	r1, r9, #2
 8000b04:	443a      	add	r2, r7
 8000b06:	e7be      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b08:	45f0      	cmp	r8, lr
 8000b0a:	d29d      	bcs.n	8000a48 <__udivmoddi4+0x1e4>
 8000b0c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b10:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b14:	3801      	subs	r0, #1
 8000b16:	46e1      	mov	r9, ip
 8000b18:	e796      	b.n	8000a48 <__udivmoddi4+0x1e4>
 8000b1a:	eba7 0909 	sub.w	r9, r7, r9
 8000b1e:	4449      	add	r1, r9
 8000b20:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b24:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b28:	fb09 f804 	mul.w	r8, r9, r4
 8000b2c:	e7db      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b2e:	4673      	mov	r3, lr
 8000b30:	e77f      	b.n	8000a32 <__udivmoddi4+0x1ce>
 8000b32:	4650      	mov	r0, sl
 8000b34:	e766      	b.n	8000a04 <__udivmoddi4+0x1a0>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e6fd      	b.n	8000936 <__udivmoddi4+0xd2>
 8000b3a:	443b      	add	r3, r7
 8000b3c:	3a02      	subs	r2, #2
 8000b3e:	e733      	b.n	80009a8 <__udivmoddi4+0x144>
 8000b40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b44:	443b      	add	r3, r7
 8000b46:	e71c      	b.n	8000982 <__udivmoddi4+0x11e>
 8000b48:	4649      	mov	r1, r9
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b4c:	eba1 0109 	sub.w	r1, r1, r9
 8000b50:	46c4      	mov	ip, r8
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fb09 f804 	mul.w	r8, r9, r4
 8000b5a:	e7c4      	b.n	8000ae6 <__udivmoddi4+0x282>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f9bb 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f9d4 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f001 f9b3 	bl	8001f02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f001 f9cc 	bl	8001f3a <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b78      	ldr	r3, [pc, #480]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a77      	ldr	r2, [pc, #476]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b75      	ldr	r3, [pc, #468]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b71      	ldr	r3, [pc, #452]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a70      	ldr	r2, [pc, #448]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b6a      	ldr	r3, [pc, #424]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a69      	ldr	r2, [pc, #420]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b63      	ldr	r3, [pc, #396]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a62      	ldr	r2, [pc, #392]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b60      	ldr	r3, [pc, #384]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b59      	ldr	r3, [pc, #356]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a54      	ldr	r2, [pc, #336]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b52      	ldr	r3, [pc, #328]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	484f      	ldr	r0, [pc, #316]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000c74:	f001 fe88 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000c7e:	f001 fe83 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c82:	2200      	movs	r2, #0
 8000c84:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c88:	484b      	ldr	r0, [pc, #300]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000c8a:	f001 fe7d 	bl	8002988 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4842      	ldr	r0, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000ca6:	f001 fcd3 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	483c      	ldr	r0, [pc, #240]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000cc2:	f001 fcc5 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4838      	ldr	r0, [pc, #224]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cdc:	f001 fcb8 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cf4:	f001 fcac 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d0c:	f001 fca0 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d10:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d2a:	f001 fc91 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d2e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d40:	2306      	movs	r3, #6
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481a      	ldr	r0, [pc, #104]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000d4c:	f001 fc80 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d50:	2320      	movs	r3, #32
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d64:	f001 fc74 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d68:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480e      	ldr	r0, [pc, #56]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d86:	f001 fc63 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000da0:	f001 fc56 	bl	8002650 <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <MX_I2C3_Init+0x54>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd0:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_I2C3_Init+0x58>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000de2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000e02:	f003 ff29 	bl	8004c58 <HAL_I2C_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e0c:	f000 fb88 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000098 	.word	0x20000098
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	000186a0 	.word	0x000186a0

08000e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ee4 <HAL_I2C_MspInit+0xc4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14b      	bne.n	8000eda <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a20      	ldr	r2, [pc, #128]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4815      	ldr	r0, [pc, #84]	@ (8000eec <HAL_I2C_MspInit+0xcc>)
 8000e98:	f001 fbda 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <HAL_I2C_MspInit+0xd0>)
 8000eba:	f001 fbc9 	bl	8002650 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005c00 	.word	0x40005c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <MX_I2S2_Init+0x58>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f1c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000f20:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f36:	f004 feb3 	bl	8005ca0 <HAL_I2S_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000f40:	f000 faee 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000ec 	.word	0x200000ec
 8000f4c:	40003800 	.word	0x40003800

08000f50 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001138 <HAL_I2S_MspInit+0x1e8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f040 80d7 	bne.w	8001130 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000f86:	2360      	movs	r3, #96	@ 0x60
 8000f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 f9c0 	bl	8007318 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f9e:	f000 fabf 	bl	8001520 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a64      	ldr	r2, [pc, #400]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a5d      	ldr	r2, [pc, #372]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b54      	ldr	r3, [pc, #336]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 8000ff6:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001008:	2305      	movs	r3, #5
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	484b      	ldr	r0, [pc, #300]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001014:	f001 fb1c 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001018:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800102a:	2306      	movs	r3, #6
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4842      	ldr	r0, [pc, #264]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001036:	f001 fb0b 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	483b      	ldr	r0, [pc, #236]	@ (8001144 <HAL_I2S_MspInit+0x1f4>)
 8001056:	f001 fafb 	bl	8002650 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800105c:	4a3b      	ldr	r2, [pc, #236]	@ (800114c <HAL_I2S_MspInit+0x1fc>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001062:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001066:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001068:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800107e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001082:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001094:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001096:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80010a2:	4829      	ldr	r0, [pc, #164]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010a4:	f000 ff64 	bl	8001f70 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 80010ae:	f000 fa37 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a24      	ldr	r2, [pc, #144]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_I2S_MspInit+0x204>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001106:	f000 ff33 	bl	8001f70 <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001110:	f000 fa06 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2024      	movs	r0, #36	@ 0x24
 8001126:	f000 feec 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800112a:	2024      	movs	r0, #36	@ 0x24
 800112c:	f000 ff05 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40003800 	.word	0x40003800
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	20000134 	.word	0x20000134
 800114c:	40026058 	.word	0x40026058
 8001150:	20000194 	.word	0x20000194
 8001154:	40026070 	.word	0x40026070

08001158 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

// FOR DOUBLE BUFFERING
// Half complete buffer
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001f4 	.word	0x200001f4

08001178 <HAL_I2SEx_TxRxCpltCallback>:

// Fully complete buffer
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001182:	2202      	movs	r2, #2
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001f4 	.word	0x200001f4

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fd3f 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f953 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f7ff fd03 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011aa:	f7ff fcd9 	bl	8000b60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fc41 	bl	8001a34 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011b2:	f000 fa3f 	bl	8001634 <MX_SPI1_Init>
  MX_I2C3_Init();
 80011b6:	f7ff fe05 	bl	8000dc4 <MX_I2C3_Init>
  MX_USB_HOST_Init();
 80011ba:	f009 ff29 	bl	800b010 <MX_USB_HOST_Init>
  MX_I2S2_Init();
 80011be:	f7ff fe99 	bl	8000ef4 <MX_I2S2_Init>
  // Initialize overdrive
  // 41.6kHz Fs
  // 800Hz HPF input stage
  // 4000Hz LPF output stage
  // See OD_GAIN defined in user defines
  Overdrive_Init(&od, 41666.0f, 800.0f, 4000.0f, OD_GAIN);
 80011c2:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800140c <main+0x274>
 80011c6:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8001410 <main+0x278>
 80011ca:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8001414 <main+0x27c>
 80011ce:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8001418 <main+0x280>
 80011d2:	4892      	ldr	r0, [pc, #584]	@ (800141c <main+0x284>)
 80011d4:	f000 f9ac 	bl	8001530 <Overdrive_Init>

  Tremolo_Init(&tr, 41666.0f, TR_RATE, TR_DEPTH);
 80011d8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80011dc:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80011e0:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8001418 <main+0x280>
 80011e4:	488e      	ldr	r0, [pc, #568]	@ (8001420 <main+0x288>)
 80011e6:	f000 fb6b 	bl	80018c0 <Tremolo_Init>

  // Initialize I2S DMA
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80011ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ee:	4a8d      	ldr	r2, [pc, #564]	@ (8001424 <main+0x28c>)
 80011f0:	498d      	ldr	r1, [pc, #564]	@ (8001428 <main+0x290>)
 80011f2:	488e      	ldr	r0, [pc, #568]	@ (800142c <main+0x294>)
 80011f4:	f004 ff92 	bl	800611c <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state != 0) {
 80011f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001430 <main+0x298>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8101 	beq.w	8001404 <main+0x26c>

		  // decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8001202:	4b8b      	ldr	r3, [pc, #556]	@ (8001430 <main+0x298>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <main+0x80>
			  	  offset_r_ptr = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  	  offset_w_ptr = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	  w_ptr = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	e00a      	b.n	800122e <main+0x96>
			  	  // Set pointer to first half of DMA
			  }

		  else if (callback_state == 2) {
 8001218:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <main+0x298>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d106      	bne.n	800122e <main+0x96>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
			  w_ptr = BLOCK_SIZE_FLOAT;
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
			  // Set pointer to second half of DMA
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	e061      	b.n	80012f8 <main+0x160>

			  // Rebuild signed 24-bit sample from 16-bit rxBuf
			  int32_t sample_l = ((int32_t)(rxBuf[i] << 16) | (rxBuf[i + 1]));
 8001234:	4a7b      	ldr	r2, [pc, #492]	@ (8001424 <main+0x28c>)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	3201      	adds	r2, #1
 8001242:	4978      	ldr	r1, [pc, #480]	@ (8001424 <main+0x28c>)
 8001244:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

			  // Convert to float in range [-1.0f, 1.0f] for easier DSP
			  float sample_f_l = sample_l / 2147483648.0f;  // 2^31
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001434 <main+0x29c>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]

			  // Light up debug LED if this is somehow outside of range
			  if (sample_f_l > 1.0f | sample_f_l < -1.0f) {
 8001262:	edd7 7a02 	vldr	s15, [r7, #8]
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	bfcc      	ite	gt
 8001274:	2301      	movgt	r3, #1
 8001276:	2300      	movle	r3, #0
 8001278:	b2da      	uxtb	r2, r3
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	bf4c      	ite	mi
 800128c:	2301      	movmi	r3, #1
 800128e:	2300      	movpl	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <main+0x10c>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	4866      	ldr	r0, [pc, #408]	@ (8001438 <main+0x2a0>)
 80012a0:	f001 fb8b 	bl	80029ba <HAL_GPIO_TogglePin>
			  }
			  l_buf_in[w_ptr] = sample_f_l;
 80012a4:	4a65      	ldr	r2, [pc, #404]	@ (800143c <main+0x2a4>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	601a      	str	r2, [r3, #0]

			  // Repeat for right channel
			  int32_t sample_r = ((int32_t)(rxBuf[i + 2] << 16) | (rxBuf[i + 3]));
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	3302      	adds	r3, #2
 80012b4:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <main+0x28c>)
 80012b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	3203      	adds	r2, #3
 80012c0:	4958      	ldr	r1, [pc, #352]	@ (8001424 <main+0x28c>)
 80012c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	607b      	str	r3, [r7, #4]
			  float sample_f_r = sample_r / 2147483648.0f;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001434 <main+0x29c>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	edc7 7a00 	vstr	s15, [r7]
			  r_buf_in[w_ptr] = sample_f_r;
 80012e0:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <main+0x2a8>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]


			  w_ptr++;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	3301      	adds	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3304      	adds	r3, #4
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	dd97      	ble.n	8001234 <main+0x9c>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e028      	b.n	800135c <main+0x1c4>
//			  // Populate output buffer with overdrive-processed input buffer data
//			  l_buf_out[i] = Overdrive_Update(&od, l_buf_in[i])/16.0f; // 1/16 for appropriate amp-level volume
//			  r_buf_out[i] = Overdrive_Update(&od, r_buf_in[i])/16.0f;

			  // Populate output buffer with tremolo-processed input buffer data
			  l_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]); // 1/16 for appropriate amp-level volume
 800130a:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <main+0x2a4>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	4841      	ldr	r0, [pc, #260]	@ (8001420 <main+0x288>)
 800131c:	f000 faf8 	bl	8001910 <Tremolo_Update>
 8001320:	eef0 7a40 	vmov.f32	s15, s0
 8001324:	4a47      	ldr	r2, [pc, #284]	@ (8001444 <main+0x2ac>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]);
 8001330:	4a42      	ldr	r2, [pc, #264]	@ (800143c <main+0x2a4>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	4837      	ldr	r0, [pc, #220]	@ (8001420 <main+0x288>)
 8001342:	f000 fae5 	bl	8001910 <Tremolo_Update>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	4a3f      	ldr	r2, [pc, #252]	@ (8001448 <main+0x2b0>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	337f      	adds	r3, #127	@ 0x7f
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	429a      	cmp	r2, r3
 8001364:	ddd1      	ble.n	800130a <main+0x172>
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e040      	b.n	80013f2 <main+0x25a>
			  int sample_out_l = (int)(l_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 8001370:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <main+0x2ac>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001434 <main+0x29c>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 3a90 	vmov	r3, s15
 800138c:	617b      	str	r3, [r7, #20]
			  txBuf[i]   = (sample_out_l >> 16) & 0xFFFF;  // upper 16 bits
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	b299      	uxth	r1, r3
 8001394:	4a24      	ldr	r2, [pc, #144]	@ (8001428 <main+0x290>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = sample_out_l & 0xFFFF;          // lower 16 bits
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	3301      	adds	r3, #1
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	b291      	uxth	r1, r2
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <main+0x290>)
 80013a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  int sample_out_r = (int)(r_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 80013aa:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <main+0x2b0>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001434 <main+0x29c>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	613b      	str	r3, [r7, #16]
			  txBuf[i+2]   = (sample_out_r >> 16) & 0xFFFF;  // upper 16 bits
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	0c1a      	lsrs	r2, r3, #16
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	3302      	adds	r3, #2
 80013d0:	b291      	uxth	r1, r2
 80013d2:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <main+0x290>)
 80013d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = sample_out_r & 0xFFFF;          // lower 16 bits
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3303      	adds	r3, #3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	b291      	uxth	r1, r2
 80013e0:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <main+0x290>)
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3304      	adds	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	ddb8      	ble.n	8001370 <main+0x1d8>
		  }

		  callback_state = 0;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <main+0x298>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001404:	f009 fe2a 	bl	800b05c <MX_USB_HOST_Process>
	  if (callback_state != 0) {
 8001408:	e6f6      	b.n	80011f8 <main+0x60>
 800140a:	bf00      	nop
 800140c:	42c80000 	.word	0x42c80000
 8001410:	457a0000 	.word	0x457a0000
 8001414:	44480000 	.word	0x44480000
 8001418:	4722c200 	.word	0x4722c200
 800141c:	200021f8 	.word	0x200021f8
 8001420:	20002248 	.word	0x20002248
 8001424:	200001f8 	.word	0x200001f8
 8001428:	200009f8 	.word	0x200009f8
 800142c:	200000ec 	.word	0x200000ec
 8001430:	200001f4 	.word	0x200001f4
 8001434:	4f000000 	.word	0x4f000000
 8001438:	40020c00 	.word	0x40020c00
 800143c:	200011f8 	.word	0x200011f8
 8001440:	200015f8 	.word	0x200015f8
 8001444:	200019f8 	.word	0x200019f8
 8001448:	20001df8 	.word	0x20001df8

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00a f9c0 	bl	800b7e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014c0:	2348      	movs	r3, #72	@ 0x48
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014c8:	2303      	movs	r3, #3
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fa8b 	bl	80069ec <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f000 f820 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fcec 	bl	8006edc <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150a:	f000 f809 	bl	8001520 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>
 800152c:	0000      	movs	r0, r0
	...

08001530 <Overdrive_Init>:
#include "overdrive.h"
#include <stdint.h>

void Overdrive_Init(Overdrive *od, float samplingFreqHz, float hpfCutoffFreqHz, float lpfCutoffFreqHz, float odPreGain) {
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6178      	str	r0, [r7, #20]
 8001538:	ed87 0a04 	vstr	s0, [r7, #16]
 800153c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001540:	ed87 1a02 	vstr	s2, [r7, #8]
 8001544:	edc7 1a01 	vstr	s3, [r7, #4]
    od->T = 1.0f / samplingFreqHz;
 8001548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800154c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a00 	vstr	s15, [r3]
    od->preGain = odPreGain;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	61da      	str	r2, [r3, #28]
    od->threshold = 1.0f/3.0f;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a33      	ldr	r2, [pc, #204]	@ (8001630 <Overdrive_Init+0x100>)
 8001564:	621a      	str	r2, [r3, #32]
    // Input lpf
    od->hpfInpBufIn[0] = 0.0f; od->hpfInpBufIn[1] = 0.0f;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
    od->hpfInpBufOut[0] = 0.0f; od->hpfInpBufOut[1] = 0.0f;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    od->hpfInpWcT = 2.0f * M_PI * hpfCutoffFreqHz * od->T;
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff f8ac 	bl	80006e4 <__aeabi_f2d>
 800158c:	a326      	add	r3, pc, #152	@ (adr r3, 8001628 <Overdrive_Init+0xf8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fe19 	bl	80001c8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f89e 	bl	80006e4 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe0a 	bl	80001c8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f8ea 	bl	8000794 <__aeabi_d2f>
 80015c0:	4602      	mov	r2, r0
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	615a      	str	r2, [r3, #20]
    od->hpfInpOut = 0.0f;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]

    // Output lpf
    od->lpfOutWcT = 2.0f * M_PI * lpfCutoffFreqHz * od->T;
 80015ce:	68b8      	ldr	r0, [r7, #8]
 80015d0:	f7ff f888 	bl	80006e4 <__aeabi_f2d>
 80015d4:	a314      	add	r3, pc, #80	@ (adr r3, 8001628 <Overdrive_Init+0xf8>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe fdf5 	bl	80001c8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f87a 	bl	80006e4 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fde6 	bl	80001c8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff f8c6 	bl	8000794 <__aeabi_d2f>
 8001608:	4602      	mov	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
    od->lpfOutDamp = 1.0f;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44

    od->Q = -0.5;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	54442d18 	.word	0x54442d18
 800162c:	401921fb 	.word	0x401921fb
 8001630:	3eaaaaab 	.word	0x3eaaaaab

08001634 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_SPI1_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_SPI1_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001686:	f005 ff87 	bl	8007598 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001690:	f7ff ff46 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000225c 	.word	0x2000225c
 800169c:	40013000 	.word	0x40013000

080016a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_SPI_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016fa:	23e0      	movs	r3, #224	@ 0xe0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170a:	2305      	movs	r3, #5
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_SPI_MspInit+0x8c>)
 8001716:	f000 ff9b 	bl	8002650 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013000 	.word	0x40013000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176e:	2007      	movs	r0, #7
 8001770:	f000 fbbc 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 fa75 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream3_IRQHandler+0x10>)
 80017e6:	f000 fcc9 	bl	800217c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000134 	.word	0x20000134

080017f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream4_IRQHandler+0x10>)
 80017fa:	f000 fcbf 	bl	800217c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000194 	.word	0x20000194

08001808 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <SPI2_IRQHandler+0x10>)
 800180e:	f004 fb87 	bl	8005f20 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000ec 	.word	0x200000ec

0800181c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <OTG_FS_IRQHandler+0x10>)
 8001822:	f001 fbc5 	bl	8002fb0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200026e0 	.word	0x200026e0

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	@ (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f009 ffd6 	bl	800b810 <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20020000 	.word	0x20020000
 8001890:	00000400 	.word	0x00000400
 8001894:	200022b4 	.word	0x200022b4
 8001898:	20002c08 	.word	0x20002c08

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Tremolo_Init>:
#include "tremolo.h"
#include <stdint.h>

void Tremolo_Init(Tremolo *tr, float samplingFreqHz, float rate, float depth) {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80018cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80018d0:	ed87 1a00 	vstr	s2, [r7]
	tr->T = 1.0f / samplingFreqHz;
 80018d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edc3 7a00 	vstr	s15, [r3]
	tr->rate = rate;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]
	tr->depth = depth;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	609a      	str	r2, [r3, #8]
	tr->phase = 0.0f;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
	tr->out = 0.0f;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	611a      	str	r2, [r3, #16]

//	for (int i = 0; i < LFO_TABLE_SIZE; i++) {
//		tr->lfo_table[i] = 0.5f * tr->depth * sinf(2.0f * M_PI * (float)i / LFO_TABLE_SIZE) + 0.5f;
//	}
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <Tremolo_Update>:



float Tremolo_Update(Tremolo *tr, float inp) {
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	ed2d 8b02 	vpush	{d8}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	ed87 0a00 	vstr	s0, [r7]
	float lfo = 0.5f*tr->depth*sinf(2.0f*M_PI*tr->rate*tr->phase) + 0.5f;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a02 	vldr	s15, [r3, #8]
 8001926:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800192a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fed6 	bl	80006e4 <__aeabi_f2d>
 8001938:	a33c      	add	r3, pc, #240	@ (adr r3, 8001a2c <Tremolo_Update+0x11c>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fc43 	bl	80001c8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fec8 	bl	80006e4 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fc34 	bl	80001c8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7fe ff14 	bl	8000794 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	ee00 3a10 	vmov	s0, r3
 8001972:	f009 ffc3 	bl	800b8fc <sinf>
 8001976:	eef0 7a40 	vmov.f32	s15, s0
 800197a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800197e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001986:	edc7 7a03 	vstr	s15, [r7, #12]
	tr->out = inp*lfo;
 800198a:	ed97 7a00 	vldr	s14, [r7]
 800198e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edc3 7a04 	vstr	s15, [r3, #16]
	tr->phase += tr->T;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	ed93 7a03 	vldr	s14, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	edc3 7a03 	vstr	s15, [r3, #12]

	if (tr->phase*tr->rate >= 1.0f) {
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	db03      	blt.n	80019d8 <Tremolo_Update+0xc8>
		tr->phase = 0.0f;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
	}

	// Ensure the signal is within -1f to 1f range
	if (tr->out > 1.0f) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edd3 7a04 	vldr	s15, [r3, #16]
 80019de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	dd04      	ble.n	80019f6 <Tremolo_Update+0xe6>
		tr->out = 1.0f;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	e00c      	b.n	8001a10 <Tremolo_Update+0x100>
	} else if (tr->out < -1.0f) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80019fc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a08:	d502      	bpl.n	8001a10 <Tremolo_Update+0x100>
		tr->out = -1.0f;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a06      	ldr	r2, [pc, #24]	@ (8001a28 <Tremolo_Update+0x118>)
 8001a0e:	611a      	str	r2, [r3, #16]
	}

	return tr->out;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	ee07 3a90 	vmov	s15, r3
}
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	ecbd 8b02 	vpop	{d8}
 8001a24:	bdb0      	pop	{r4, r5, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	bf800000 	.word	0xbf800000
 8001a2c:	54442d18 	.word	0x54442d18
 8001a30:	401921fb 	.word	0x401921fb

08001a34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <MX_USART3_UART_Init+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_USART3_UART_Init+0x4c>)
 8001a6c:	f005 fe1d 	bl	80076aa <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a76:	f7ff fd53 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200022b8 	.word	0x200022b8
 8001a84:	40004800 	.word	0x40004800

08001a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a29      	ldr	r2, [pc, #164]	@ (8001b4c <HAL_UART_MspInit+0xc4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d14b      	bne.n	8001b42 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a27      	ldr	r2, [pc, #156]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a20      	ldr	r2, [pc, #128]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_UART_MspInit+0xc8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001afe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b10:	2307      	movs	r3, #7
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480e      	ldr	r0, [pc, #56]	@ (8001b54 <HAL_UART_MspInit+0xcc>)
 8001b1c:	f000 fd98 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b32:	2307      	movs	r3, #7
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <HAL_UART_MspInit+0xd0>)
 8001b3e:	f000 fd87 	bl	8002650 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	@ 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40004800 	.word	0x40004800
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020c00 	.word	0x40020c00

08001b5c <Reset_Handler>:
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b94 <LoopFillZerobss+0xe>
 8001b60:	f7ff fe9c 	bl	800189c <SystemInit>
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x12>)
 8001b66:	490d      	ldr	r1, [pc, #52]	@ (8001b9c <LoopFillZerobss+0x16>)
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <LoopFillZerobss+0x1a>)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:
 8001b6e:	58d4      	ldr	r4, [r2, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:
 8001b74:	18c4      	adds	r4, r0, r3
 8001b76:	428c      	cmp	r4, r1
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <LoopFillZerobss+0x1e>)
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba8 <LoopFillZerobss+0x22>)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:
 8001b86:	42a2      	cmp	r2, r4
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>
 8001b8a:	f009 fe47 	bl	800b81c <__libc_init_array>
 8001b8e:	f7ff fb03 	bl	8001198 <main>
 8001b92:	4770      	bx	lr
 8001b94:	20020000 	.word	0x20020000
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	2000007c 	.word	0x2000007c
 8001ba0:	0800c778 	.word	0x0800c778
 8001ba4:	2000007c 	.word	0x2000007c
 8001ba8:	20002c08 	.word	0x20002c08

08001bac <ADC_IRQHandler>:
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>

08001bae <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001bc4:	f000 f804 	bl	8001bd0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <HAL_I2S_ErrorCallback+0x2c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001bfe:	f7ff ffd6 	bl	8001bae <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <HAL_I2S_ErrorCallback+0x30>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001c0c:	f7ff ffe7 	bl	8001bde <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40003c00 	.word	0x40003c00
 8001c1c:	40003800 	.word	0x40003800

08001c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c24:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <HAL_Init+0x40>)
 8001c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_Init+0x40>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_Init+0x40>)
 8001c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_Init+0x40>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_Init+0x40>)
 8001c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c48:	2003      	movs	r0, #3
 8001c4a:	f000 f94f 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f000 f808 	bl	8001c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c54:	f7ff fd6c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x54>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_InitTick+0x58>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f967 	bl	8001f56 <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f000 f92f 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	@ (8001cc0 <HAL_InitTick+0x5c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008
 8001ce8:	20002300 	.word	0x20002300

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20002300 	.word	0x20002300

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008

08001d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <__NVIC_SetPriorityGrouping+0x44>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <__NVIC_GetPriorityGrouping+0x18>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 0307 	and.w	r3, r3, #7
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	db0b      	blt.n	8001dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc2:	79fb      	ldrb	r3, [r7, #7]
 8001dc4:	f003 021f 	and.w	r2, r3, #31
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <__NVIC_EnableIRQ+0x38>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff8e 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	@ (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff29 	bl	8001d4c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff3e 	bl	8001d94 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff8e 	bl	8001e40 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5d 	bl	8001dec <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff31 	bl	8001db0 <__NVIC_EnableIRQ>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff ffa2 	bl	8001ea8 <SysTick_Config>
 8001f64:	4603      	mov	r3, r0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff feb6 	bl	8001cec <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e099      	b.n	80020c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fac:	e00f      	b.n	8001fce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fae:	f7ff fe9d 	bl	8001cec <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d908      	bls.n	8001fce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e078      	b.n	80020c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e8      	bne.n	8001fae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_DMA_Init+0x158>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	2b04      	cmp	r3, #4
 8002026:	d107      	bne.n	8002038 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	4313      	orrs	r3, r2
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f023 0307 	bic.w	r3, r3, #7
 800204e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	2b04      	cmp	r3, #4
 8002060:	d117      	bne.n	8002092 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00e      	beq.n	8002092 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa6f 	bl	8002558 <DMA_CheckFifoParam>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800208e:	2301      	movs	r3, #1
 8002090:	e016      	b.n	80020c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa26 	bl	80024ec <DMA_CalcBaseAndBitshift>
 80020a0:	4603      	mov	r3, r0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	223f      	movs	r2, #63	@ 0x3f
 80020aa:	409a      	lsls	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	f010803f 	.word	0xf010803f

080020cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Start_IT+0x26>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e040      	b.n	8002174 <HAL_DMA_Start_IT+0xa8>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d12f      	bne.n	8002166 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2202      	movs	r2, #2
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f9b8 	bl	8002490 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	223f      	movs	r2, #63	@ 0x3f
 8002126:	409a      	lsls	r2, r3
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0216 	orr.w	r2, r2, #22
 800213a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d007      	beq.n	8002154 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e005      	b.n	8002172 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800216e:	2302      	movs	r3, #2
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002188:	4b8e      	ldr	r3, [pc, #568]	@ (80023c4 <HAL_DMA_IRQHandler+0x248>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a8e      	ldr	r2, [pc, #568]	@ (80023c8 <HAL_DMA_IRQHandler+0x24c>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	2208      	movs	r2, #8
 80021a8:	409a      	lsls	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01a      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0204 	bic.w	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	2208      	movs	r2, #8
 80021d6:	409a      	lsls	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ec:	2201      	movs	r2, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f043 0202 	orr.w	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	2204      	movs	r2, #4
 8002224:	409a      	lsls	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d012      	beq.n	8002254 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2204      	movs	r2, #4
 8002242:	409a      	lsls	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2210      	movs	r2, #16
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d043      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d03c      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2210      	movs	r2, #16
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d018      	beq.n	80022be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d024      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	4798      	blx	r3
 80022aa:	e01f      	b.n	80022ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01b      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e016      	b.n	80022ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d107      	bne.n	80022dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0208 	bic.w	r2, r2, #8
 80022da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	2220      	movs	r2, #32
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 808f 	beq.w	800241c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8087 	beq.w	800241c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	2220      	movs	r2, #32
 8002314:	409a      	lsls	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b05      	cmp	r3, #5
 8002324:	d136      	bne.n	8002394 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0216 	bic.w	r2, r2, #22
 8002334:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002344:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_DMA_IRQHandler+0x1da>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	223f      	movs	r2, #63	@ 0x3f
 800236c:	409a      	lsls	r2, r3
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002386:	2b00      	cmp	r3, #0
 8002388:	d07e      	beq.n	8002488 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
        }
        return;
 8002392:	e079      	b.n	8002488 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01d      	beq.n	80023de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d031      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
 80023c0:	e02c      	b.n	800241c <HAL_DMA_IRQHandler+0x2a0>
 80023c2:	bf00      	nop
 80023c4:	20000000 	.word	0x20000000
 80023c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e01e      	b.n	800241c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10f      	bne.n	800240c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0210 	bic.w	r2, r2, #16
 80023fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002420:	2b00      	cmp	r3, #0
 8002422:	d032      	beq.n	800248a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d022      	beq.n	8002476 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2205      	movs	r2, #5
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	3301      	adds	r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d307      	bcc.n	8002464 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f2      	bne.n	8002448 <HAL_DMA_IRQHandler+0x2cc>
 8002462:	e000      	b.n	8002466 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002464:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
 8002486:	e000      	b.n	800248a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002488:	bf00      	nop
    }
  }
}
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b40      	cmp	r3, #64	@ 0x40
 80024bc:	d108      	bne.n	80024d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ce:	e007      	b.n	80024e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	60da      	str	r2, [r3, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	3b10      	subs	r3, #16
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <DMA_CalcBaseAndBitshift+0x64>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002506:	4a13      	ldr	r2, [pc, #76]	@ (8002554 <DMA_CalcBaseAndBitshift+0x68>)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d909      	bls.n	800252e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	@ 0x58
 800252c:	e007      	b.n	800253e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	aaaaaaab 	.word	0xaaaaaaab
 8002554:	0800c390 	.word	0x0800c390

08002558 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d11f      	bne.n	80025b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d856      	bhi.n	8002626 <DMA_CheckFifoParam+0xce>
 8002578:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <DMA_CheckFifoParam+0x28>)
 800257a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257e:	bf00      	nop
 8002580:	08002591 	.word	0x08002591
 8002584:	080025a3 	.word	0x080025a3
 8002588:	08002591 	.word	0x08002591
 800258c:	08002627 	.word	0x08002627
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d046      	beq.n	800262a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e043      	b.n	800262a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025aa:	d140      	bne.n	800262e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b0:	e03d      	b.n	800262e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ba:	d121      	bne.n	8002600 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d837      	bhi.n	8002632 <DMA_CheckFifoParam+0xda>
 80025c2:	a201      	add	r2, pc, #4	@ (adr r2, 80025c8 <DMA_CheckFifoParam+0x70>)
 80025c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c8:	080025d9 	.word	0x080025d9
 80025cc:	080025df 	.word	0x080025df
 80025d0:	080025d9 	.word	0x080025d9
 80025d4:	080025f1 	.word	0x080025f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e030      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d025      	beq.n	8002636 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ee:	e022      	b.n	8002636 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025f8:	d11f      	bne.n	800263a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025fe:	e01c      	b.n	800263a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d903      	bls.n	800260e <DMA_CheckFifoParam+0xb6>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d003      	beq.n	8002614 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800260c:	e018      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      break;
 8002612:	e015      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00e      	beq.n	800263e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e00b      	b.n	800263e <DMA_CheckFifoParam+0xe6>
      break;
 8002626:	bf00      	nop
 8002628:	e00a      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800262a:	bf00      	nop
 800262c:	e008      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e006      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e004      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e002      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;   
 800263a:	bf00      	nop
 800263c:	e000      	b.n	8002640 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
    }
  } 
  
  return status; 
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e16b      	b.n	8002944 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	429a      	cmp	r2, r3
 8002686:	f040 815a 	bne.w	800293e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b01      	cmp	r3, #1
 8002694:	d005      	beq.n	80026a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d130      	bne.n	8002704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 0201 	and.w	r2, r3, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	2b03      	cmp	r3, #3
 800270e:	d017      	beq.n	8002740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0303 	and.w	r3, r3, #3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d123      	bne.n	8002794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	69b9      	ldr	r1, [r7, #24]
 8002790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	2203      	movs	r2, #3
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80b4 	beq.w	800293e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	4b60      	ldr	r3, [pc, #384]	@ (800295c <HAL_GPIO_Init+0x30c>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	4a5f      	ldr	r2, [pc, #380]	@ (800295c <HAL_GPIO_Init+0x30c>)
 80027e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e6:	4b5d      	ldr	r3, [pc, #372]	@ (800295c <HAL_GPIO_Init+0x30c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002960 <HAL_GPIO_Init+0x310>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	089b      	lsrs	r3, r3, #2
 80027f8:	3302      	adds	r3, #2
 80027fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	220f      	movs	r2, #15
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	@ (8002964 <HAL_GPIO_Init+0x314>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x226>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a51      	ldr	r2, [pc, #324]	@ (8002968 <HAL_GPIO_Init+0x318>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x222>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a50      	ldr	r2, [pc, #320]	@ (800296c <HAL_GPIO_Init+0x31c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x21e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a4f      	ldr	r2, [pc, #316]	@ (8002970 <HAL_GPIO_Init+0x320>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x21a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4e      	ldr	r2, [pc, #312]	@ (8002974 <HAL_GPIO_Init+0x324>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x216>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4d      	ldr	r2, [pc, #308]	@ (8002978 <HAL_GPIO_Init+0x328>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x212>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4c      	ldr	r2, [pc, #304]	@ (800297c <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4b      	ldr	r2, [pc, #300]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x20a>
 8002856:	2307      	movs	r3, #7
 8002858:	e00e      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800285a:	2308      	movs	r3, #8
 800285c:	e00c      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800285e:	2306      	movs	r3, #6
 8002860:	e00a      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002862:	2305      	movs	r3, #5
 8002864:	e008      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002866:	2304      	movs	r3, #4
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x228>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x228>
 8002876:	2300      	movs	r3, #0
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	@ (8002960 <HAL_GPIO_Init+0x310>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_GPIO_Init+0x334>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a32      	ldr	r2, [pc, #200]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b30      	ldr	r3, [pc, #192]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a27      	ldr	r2, [pc, #156]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ea:	4b26      	ldr	r3, [pc, #152]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290e:	4a1d      	ldr	r2, [pc, #116]	@ (8002984 <HAL_GPIO_Init+0x334>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_GPIO_Init+0x334>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002938:	4a12      	ldr	r2, [pc, #72]	@ (8002984 <HAL_GPIO_Init+0x334>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f ae90 	bls.w	800266c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	@ 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40021400 	.word	0x40021400
 800297c:	40021800 	.word	0x40021800
 8002980:	40021c00 	.word	0x40021c00
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029cc:	887a      	ldrh	r2, [r7, #2]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	041a      	lsls	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	43d9      	mvns	r1, r3
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	400b      	ands	r3, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af02      	add	r7, sp, #8
 80029f4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e059      	b.n	8002ab4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f008 fb56 	bl	800b0cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2203      	movs	r2, #3
 8002a24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a2e:	d102      	bne.n	8002a36 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 f96f 	bl	8007d1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c1a      	ldrb	r2, [r3, #16]
 8002a48:	f88d 2000 	strb.w	r2, [sp]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a50:	f005 f8f0 	bl	8007c34 <USB_CoreInit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e026      	b.n	8002ab4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 f967 	bl	8007d40 <USB_SetCurrentMode>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e017      	b.n	8002ab4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7c1a      	ldrb	r2, [r3, #16]
 8002a8c:	f88d 2000 	strb.w	r2, [sp]
 8002a90:	3304      	adds	r3, #4
 8002a92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a94:	f005 fb0a 	bl	80080ac <USB_HostInit>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e004      	b.n	8002ab4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b08b      	sub	sp, #44	@ 0x2c
 8002ac0:	af04      	add	r7, sp, #16
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	70fb      	strb	r3, [r7, #3]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70bb      	strb	r3, [r7, #2]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002ad6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ad8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_HCD_HC_Init+0x2c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e09d      	b.n	8002c24 <HAL_HCD_HC_Init+0x168>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3319      	adds	r3, #25
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	3314      	adds	r3, #20
 8002b14:	787a      	ldrb	r2, [r7, #1]
 8002b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3315      	adds	r3, #21
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3326      	adds	r3, #38	@ 0x26
 8002b3c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002b40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	78bb      	ldrb	r3, [r7, #2]
 8002b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	3316      	adds	r3, #22
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	4619      	mov	r1, r3
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fbc8 	bl	80032f8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002b68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da0a      	bge.n	8002b86 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3317      	adds	r3, #23
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e009      	b.n	8002b9a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3317      	adds	r3, #23
 8002b96:	2200      	movs	r2, #0
 8002b98:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f005 fbe8 	bl	8008374 <USB_GetHostSpeed>
 8002ba4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002ba6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d10b      	bne.n	8002bc6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002bae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_HCD_HC_Init+0x10a>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2bbc      	cmp	r3, #188	@ 0xbc
 8002bc0:	d901      	bls.n	8002bc6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002bc2:	23bc      	movs	r3, #188	@ 0xbc
 8002bc4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	b298      	uxth	r0, r3
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	3328      	adds	r3, #40	@ 0x28
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	787c      	ldrb	r4, [r7, #1]
 8002bfe:	78ba      	ldrb	r2, [r7, #2]
 8002c00:	78f9      	ldrb	r1, [r7, #3]
 8002c02:	9302      	str	r3, [sp, #8]
 8002c04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4623      	mov	r3, r4
 8002c12:	f005 fbd7 	bl	80083c4 <USB_HC_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}

08002c2c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_HCD_HC_Halt+0x1e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e00f      	b.n	8002c6a <HAL_HCD_HC_Halt+0x3e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 ff69 	bl	8008b32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	70fb      	strb	r3, [r7, #3]
 8002c86:	460b      	mov	r3, r1
 8002c88:	70bb      	strb	r3, [r7, #2]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3317      	adds	r3, #23
 8002c9e:	78ba      	ldrb	r2, [r7, #2]
 8002ca0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	1a9b      	subs	r3, r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3326      	adds	r3, #38	@ 0x26
 8002cb2:	787a      	ldrb	r2, [r7, #1]
 8002cb4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cb6:	7c3b      	ldrb	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d114      	bne.n	8002ce6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	332a      	adds	r3, #42	@ 0x2a
 8002ccc:	2203      	movs	r2, #3
 8002cce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3319      	adds	r3, #25
 8002ce0:	7f3a      	ldrb	r2, [r7, #28]
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e009      	b.n	8002cfa <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	332a      	adds	r3, #42	@ 0x2a
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002cfa:	787b      	ldrb	r3, [r7, #1]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	f200 8102 	bhi.w	8002f06 <HAL_HCD_HC_SubmitRequest+0x292>
 8002d02:	a201      	add	r2, pc, #4	@ (adr r2, 8002d08 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002ef1 	.word	0x08002ef1
 8002d10:	08002ddd 	.word	0x08002ddd
 8002d14:	08002e67 	.word	0x08002e67
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002d18:	7c3b      	ldrb	r3, [r7, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	f040 80f5 	bne.w	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002d20:	78bb      	ldrb	r3, [r7, #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d12d      	bne.n	8002d82 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002d26:	8b3b      	ldrh	r3, [r7, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	333d      	adds	r3, #61	@ 0x3d
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333d      	adds	r3, #61	@ 0x3d
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	332a      	adds	r3, #42	@ 0x2a
 8002d66:	2200      	movs	r2, #0
 8002d68:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002d6a:	e0ce      	b.n	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	332a      	adds	r3, #42	@ 0x2a
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	701a      	strb	r2, [r3, #0]
      break;
 8002d80:	e0c3      	b.n	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	331a      	adds	r3, #26
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 80b8 	bne.w	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	333c      	adds	r3, #60	@ 0x3c
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002db0:	78fa      	ldrb	r2, [r7, #3]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	332a      	adds	r3, #42	@ 0x2a
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
      break;
 8002dc4:	e0a1      	b.n	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	332a      	adds	r3, #42	@ 0x2a
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e096      	b.n	8002f0a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ddc:	78bb      	ldrb	r3, [r7, #2]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d120      	bne.n	8002e24 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	333d      	adds	r3, #61	@ 0x3d
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	332a      	adds	r3, #42	@ 0x2a
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e0c:	e07e      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	332a      	adds	r3, #42	@ 0x2a
 8002e1e:	2202      	movs	r2, #2
 8002e20:	701a      	strb	r2, [r3, #0]
      break;
 8002e22:	e073      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	333c      	adds	r3, #60	@ 0x3c
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	332a      	adds	r3, #42	@ 0x2a
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	e05d      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	332a      	adds	r3, #42	@ 0x2a
 8002e60:	2202      	movs	r2, #2
 8002e62:	701a      	strb	r2, [r3, #0]
      break;
 8002e64:	e052      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e66:	78bb      	ldrb	r3, [r7, #2]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d120      	bne.n	8002eae <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	333d      	adds	r3, #61	@ 0x3d
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	332a      	adds	r3, #42	@ 0x2a
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e96:	e039      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	332a      	adds	r3, #42	@ 0x2a
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	701a      	strb	r2, [r3, #0]
      break;
 8002eac:	e02e      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	333c      	adds	r3, #60	@ 0x3c
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	332a      	adds	r3, #42	@ 0x2a
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
      break;
 8002ed8:	e018      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	332a      	adds	r3, #42	@ 0x2a
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
      break;
 8002eee:	e00d      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	332a      	adds	r3, #42	@ 0x2a
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002f0a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	332c      	adds	r3, #44	@ 0x2c
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	8b39      	ldrh	r1, [r7, #24]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	3334      	adds	r3, #52	@ 0x34
 8002f32:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	334c      	adds	r3, #76	@ 0x4c
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3338      	adds	r3, #56	@ 0x38
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334d      	adds	r3, #77	@ 0x4d
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6818      	ldr	r0, [r3, #0]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	3310      	adds	r3, #16
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	1d19      	adds	r1, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	799b      	ldrb	r3, [r3, #6]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f005 fb3c 	bl	800861c <USB_HC_StartXfer>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop

08002fb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f005 f830 	bl	800802c <USB_GetMode>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80fb 	bne.w	80031ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 fff3 	bl	8007fc4 <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80f1 	beq.w	80031c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 ffea 	bl	8007fc4 <USB_ReadInterrupts>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ffa:	d104      	bne.n	8003006 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003004:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f004 ffda 	bl	8007fc4 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800301a:	d104      	bne.n	8003026 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003024:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f004 ffca 	bl	8007fc4 <USB_ReadInterrupts>
 8003030:	4603      	mov	r3, r0
 8003032:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003036:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800303a:	d104      	bne.n	8003046 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003044:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 ffba 	bl	8007fc4 <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b02      	cmp	r3, #2
 8003058:	d103      	bne.n	8003062 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2202      	movs	r2, #2
 8003060:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f004 ffac 	bl	8007fc4 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003072:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003076:	d120      	bne.n	80030ba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003080:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d113      	bne.n	80030ba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003092:	2110      	movs	r1, #16
 8003094:	6938      	ldr	r0, [r7, #16]
 8003096:	f004 fe9f 	bl	8007dd8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800309a:	6938      	ldr	r0, [r7, #16]
 800309c:	f004 fece 	bl	8007e3c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7a5b      	ldrb	r3, [r3, #9]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d105      	bne.n	80030b4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f005 f8c0 	bl	8008234 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f008 f887 	bl	800b1c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 ff80 	bl	8007fc4 <USB_ReadInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030ce:	d102      	bne.n	80030d6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f001 fd4d 	bl	8004b70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f004 ff72 	bl	8007fc4 <USB_ReadInterrupts>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d106      	bne.n	80030f8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f008 f850 	bl	800b190 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2208      	movs	r2, #8
 80030f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f004 ff61 	bl	8007fc4 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003108:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800310c:	d139      	bne.n	8003182 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f005 fcfc 	bl	8008b10 <USB_HC_ReadInterrupt>
 8003118:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e025      	b.n	800316c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d018      	beq.n	8003166 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314a:	d106      	bne.n	800315a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f905 	bl	8003362 <HCD_HC_IN_IRQHandler>
 8003158:	e005      	b.n	8003166 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 ff67 	bl	8004034 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	795b      	ldrb	r3, [r3, #5]
 8003170:	461a      	mov	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	4293      	cmp	r3, r2
 8003176:	d3d3      	bcc.n	8003120 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003180:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f004 ff1c 	bl	8007fc4 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d101      	bne.n	800319a <HAL_HCD_IRQHandler+0x1ea>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_HCD_IRQHandler+0x1ec>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d014      	beq.n	80031ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0210 	bic.w	r2, r2, #16
 80031ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f001 fbfe 	bl	80049b2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0210 	orr.w	r2, r2, #16
 80031c4:	619a      	str	r2, [r3, #24]
 80031c6:	e000      	b.n	80031ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80031c8:	bf00      	nop
    }
  }
}
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_HCD_Start+0x16>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e013      	b.n	800320e <HAL_HCD_Start+0x3e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 f884 	bl	8008302 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f004 fd7c 	bl	8007cfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_HCD_Stop+0x16>
 8003228:	2302      	movs	r3, #2
 800322a:	e00d      	b.n	8003248 <HAL_HCD_Stop+0x32>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f005 fdd7 	bl	8008dec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f005 f826 	bl	80082ae <USB_ResetPort>
 8003262:	4603      	mov	r3, r0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	@ 0x4c
 8003288:	781b      	ldrb	r3, [r3, #0]
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3338      	adds	r3, #56	@ 0x38
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f005 f868 	bl	80083a2 <USB_GetCurrentFrame>
 80032d2:	4603      	mov	r3, r0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 f843 	bl	8008374 <USB_GetHostSpeed>
 80032ee:	4603      	mov	r3, r0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	331a      	adds	r3, #26
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	331b      	adds	r3, #27
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3325      	adds	r3, #37	@ 0x25
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3324      	adds	r3, #36	@ 0x24
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f004 fe32 	bl	8007fea <USB_ReadChInterrupts>
 8003386:	4603      	mov	r3, r0
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11a      	bne.n	80033c6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339c:	461a      	mov	r2, r3
 800339e:	2304      	movs	r3, #4
 80033a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	334d      	adds	r3, #77	@ 0x4d
 80033b2:	2207      	movs	r2, #7
 80033b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f005 fbb7 	bl	8008b32 <USB_HC_Halt>
 80033c4:	e09e      	b.n	8003504 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fe0b 	bl	8007fea <USB_ReadChInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033de:	d11b      	bne.n	8003418 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	2208      	movs	r2, #8
 8003406:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f005 fb8e 	bl	8008b32 <USB_HC_Halt>
 8003416:	e075      	b.n	8003504 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fde2 	bl	8007fea <USB_ReadChInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b08      	cmp	r3, #8
 800342e:	d11a      	bne.n	8003466 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2308      	movs	r3, #8
 8003440:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334d      	adds	r3, #77	@ 0x4d
 8003452:	2206      	movs	r2, #6
 8003454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f005 fb67 	bl	8008b32 <USB_HC_Halt>
 8003464:	e04e      	b.n	8003504 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f004 fdbb 	bl	8007fea <USB_ReadChInterrupts>
 8003474:	4603      	mov	r3, r0
 8003476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800347e:	d11b      	bne.n	80034b8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	461a      	mov	r2, r3
 800348e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003492:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	334d      	adds	r3, #77	@ 0x4d
 80034a4:	2209      	movs	r2, #9
 80034a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f005 fb3e 	bl	8008b32 <USB_HC_Halt>
 80034b6:	e025      	b.n	8003504 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fd92 	bl	8007fea <USB_ReadChInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034cc:	2b80      	cmp	r3, #128	@ 0x80
 80034ce:	d119      	bne.n	8003504 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034dc:	461a      	mov	r2, r3
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	334d      	adds	r3, #77	@ 0x4d
 80034f2:	2207      	movs	r2, #7
 80034f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f005 fb17 	bl	8008b32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f004 fd6c 	bl	8007fea <USB_ReadChInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800351c:	d112      	bne.n	8003544 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f005 fb03 	bl	8008b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003538:	461a      	mov	r2, r3
 800353a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	f000 bd75 	b.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fd4c 	bl	8007fea <USB_ReadChInterrupts>
 8003552:	4603      	mov	r3, r0
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 8128 	bne.w	80037ae <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2320      	movs	r3, #32
 800356e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	331b      	adds	r3, #27
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d119      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003586:	78fa      	ldrb	r2, [r7, #3]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	1a9b      	subs	r3, r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	331b      	adds	r3, #27
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	799b      	ldrb	r3, [r3, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3330      	adds	r3, #48	@ 0x30
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	1ac9      	subs	r1, r1, r3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	3338      	adds	r3, #56	@ 0x38
 80035f8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334d      	adds	r3, #77	@ 0x4d
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3344      	adds	r3, #68	@ 0x44
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003622:	78fb      	ldrb	r3, [r7, #3]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	2301      	movs	r3, #1
 8003632:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3326      	adds	r3, #38	@ 0x26
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3326      	adds	r3, #38	@ 0x26
 800365a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800365c:	2b02      	cmp	r3, #2
 800365e:	d110      	bne.n	8003682 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f005 fa62 	bl	8008b32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2310      	movs	r3, #16
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	e03d      	b.n	80036fe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3326      	adds	r3, #38	@ 0x26
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b03      	cmp	r3, #3
 8003696:	d00a      	beq.n	80036ae <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003698:	78fa      	ldrb	r2, [r7, #3]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	3326      	adds	r3, #38	@ 0x26
 80036a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d127      	bne.n	80036fe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	0151      	lsls	r1, r2, #5
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	440a      	add	r2, r1
 80036c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036cc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334c      	adds	r3, #76	@ 0x4c
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036e2:	78fa      	ldrb	r2, [r7, #3]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	334c      	adds	r3, #76	@ 0x4c
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	78fb      	ldrb	r3, [r7, #3]
 80036f6:	4619      	mov	r1, r3
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f007 fd73 	bl	800b1e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	799b      	ldrb	r3, [r3, #6]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d13b      	bne.n	800377e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3338      	adds	r3, #56	@ 0x38
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4403      	add	r3, r0
 8003726:	3328      	adds	r3, #40	@ 0x28
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	440b      	add	r3, r1
 800372c:	1e59      	subs	r1, r3, #1
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4403      	add	r3, r0
 800373c:	3328      	adds	r3, #40	@ 0x28
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	fbb1 f3f3 	udiv	r3, r1, r3
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8470 	beq.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	333c      	adds	r3, #60	@ 0x3c
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	78fa      	ldrb	r2, [r7, #3]
 8003762:	f083 0301 	eor.w	r3, r3, #1
 8003766:	b2d8      	uxtb	r0, r3
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	333c      	adds	r3, #60	@ 0x3c
 8003776:	4602      	mov	r2, r0
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	f000 bc58 	b.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	333c      	adds	r3, #60	@ 0x3c
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	f083 0301 	eor.w	r3, r3, #1
 8003796:	b2d8      	uxtb	r0, r3
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	333c      	adds	r3, #60	@ 0x3c
 80037a6:	4602      	mov	r2, r0
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	f000 bc40 	b.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f004 fc17 	bl	8007fea <USB_ReadChInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d131      	bne.n	800382a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2320      	movs	r3, #32
 80037d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	331a      	adds	r3, #26
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	f040 841f 	bne.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	331b      	adds	r3, #27
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003804:	78fa      	ldrb	r2, [r7, #3]
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	4613      	mov	r3, r2
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	1a9b      	subs	r3, r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	334d      	adds	r3, #77	@ 0x4d
 8003814:	2203      	movs	r2, #3
 8003816:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	4611      	mov	r1, r2
 8003820:	4618      	mov	r0, r3
 8003822:	f005 f986 	bl	8008b32 <USB_HC_Halt>
 8003826:	f000 bc02 	b.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fbd9 	bl	8007fea <USB_ReadChInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b02      	cmp	r3, #2
 8003840:	f040 8305 	bne.w	8003e4e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003850:	461a      	mov	r2, r3
 8003852:	2302      	movs	r3, #2
 8003854:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	334d      	adds	r3, #77	@ 0x4d
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d114      	bne.n	8003896 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	334d      	adds	r3, #77	@ 0x4d
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334c      	adds	r3, #76	@ 0x4c
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
 8003894:	e2cc      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d114      	bne.n	80038d6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	@ 0x4c
 80038d0:	2205      	movs	r2, #5
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e2ac      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	334d      	adds	r3, #77	@ 0x4d
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b07      	cmp	r3, #7
 80038ea:	d00b      	beq.n	8003904 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334d      	adds	r3, #77	@ 0x4d
 80038fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038fe:	2b09      	cmp	r3, #9
 8003900:	f040 80a6 	bne.w	8003a50 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334d      	adds	r3, #77	@ 0x4d
 8003914:	2202      	movs	r2, #2
 8003916:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3344      	adds	r3, #68	@ 0x44
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	1c59      	adds	r1, r3, #1
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	3344      	adds	r3, #68	@ 0x44
 800393a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3344      	adds	r3, #68	@ 0x44
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d943      	bls.n	80039da <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3344      	adds	r3, #68	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	331a      	adds	r3, #26
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d123      	bne.n	80039c4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	331b      	adds	r3, #27
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	331c      	adds	r3, #28
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334c      	adds	r3, #76	@ 0x4c
 80039d4:	2204      	movs	r2, #4
 80039d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039d8:	e229      	b.n	8003e2e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334c      	adds	r3, #76	@ 0x4c
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3326      	adds	r3, #38	@ 0x26
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00b      	beq.n	8003a1c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3326      	adds	r3, #38	@ 0x26
 8003a14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	f040 8209 	bne.w	8003e2e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a4e:	e1ee      	b.n	8003e2e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334d      	adds	r3, #77	@ 0x4d
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	f040 80c8 	bne.w	8003bf8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334d      	adds	r3, #77	@ 0x4d
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	331b      	adds	r3, #27
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	f040 81ce 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3326      	adds	r3, #38	@ 0x26
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d16b      	bne.n	8003b82 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003aaa:	78fa      	ldrb	r2, [r7, #3]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	1a9b      	subs	r3, r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3348      	adds	r3, #72	@ 0x48
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1c59      	adds	r1, r3, #1
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4403      	add	r3, r0
 8003aca:	3348      	adds	r3, #72	@ 0x48
 8003acc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3348      	adds	r3, #72	@ 0x48
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d943      	bls.n	8003b6c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3348      	adds	r3, #72	@ 0x48
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	331b      	adds	r3, #27
 8003b08:	2200      	movs	r2, #0
 8003b0a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003b0c:	78fa      	ldrb	r2, [r7, #3]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	3344      	adds	r3, #68	@ 0x44
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d809      	bhi.n	8003b36 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	331c      	adds	r3, #28
 8003b32:	2201      	movs	r2, #1
 8003b34:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b54:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	334c      	adds	r3, #76	@ 0x4c
 8003b66:	2204      	movs	r2, #4
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e014      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	334c      	adds	r3, #76	@ 0x4c
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e009      	b.n	8003b96 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334c      	adds	r3, #76	@ 0x4c
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3326      	adds	r3, #38	@ 0x26
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3326      	adds	r3, #38	@ 0x26
 8003bbc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	f040 8136 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bda:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003be2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e11b      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	f040 8081 	bne.w	8003d12 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	2202      	movs	r2, #2
 8003c22:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c24:	78fa      	ldrb	r2, [r7, #3]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	331b      	adds	r3, #27
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	f040 80fa 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	334c      	adds	r3, #76	@ 0x4c
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c6e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003caa:	f023 0320 	bic.w	r3, r3, #32
 8003cae:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3326      	adds	r3, #38	@ 0x26
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3326      	adds	r3, #38	@ 0x26
 8003cd6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	f040 80a9 	bne.w	8003e30 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cf4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cfc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e08e      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	334d      	adds	r3, #77	@ 0x4d
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d143      	bne.n	8003db0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	334d      	adds	r3, #77	@ 0x4d
 8003d38:	2202      	movs	r2, #2
 8003d3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	1a9b      	subs	r3, r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	334c      	adds	r3, #76	@ 0x4c
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3326      	adds	r3, #38	@ 0x26
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	3326      	adds	r3, #38	@ 0x26
 8003d76:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d159      	bne.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d9a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da8:	461a      	mov	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e03f      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334d      	adds	r3, #77	@ 0x4d
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d126      	bne.n	8003e14 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334d      	adds	r3, #77	@ 0x4d
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3344      	adds	r3, #68	@ 0x44
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c59      	adds	r1, r3, #1
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4403      	add	r3, r0
 8003dfa:	3344      	adds	r3, #68	@ 0x44
 8003dfc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	334c      	adds	r3, #76	@ 0x4c
 8003e0e:	2204      	movs	r2, #4
 8003e10:	701a      	strb	r2, [r3, #0]
 8003e12:	e00d      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	334d      	adds	r3, #77	@ 0x4d
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	f000 8100 	beq.w	800402c <HCD_HC_IN_IRQHandler+0xcca>
 8003e2c:	e000      	b.n	8003e30 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e2e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	334c      	adds	r3, #76	@ 0x4c
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	4619      	mov	r1, r3
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f007 f9cc 	bl	800b1e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e4c:	e0ef      	b.n	800402e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 f8c7 	bl	8007fea <USB_ReadChInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d12f      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e66:	78fb      	ldrb	r3, [r7, #3]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e72:	461a      	mov	r2, r3
 8003e74:	2340      	movs	r3, #64	@ 0x40
 8003e76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003e78:	78fa      	ldrb	r2, [r7, #3]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334d      	adds	r3, #77	@ 0x4d
 8003e88:	2205      	movs	r2, #5
 8003e8a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e8c:	78fa      	ldrb	r2, [r7, #3]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	331a      	adds	r3, #26
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3344      	adds	r3, #68	@ 0x44
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 fe37 	bl	8008b32 <USB_HC_Halt>
 8003ec4:	e0b3      	b.n	800402e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 f88b 	bl	8007fea <USB_ReadChInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	f040 80a7 	bne.w	800402e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ee0:	78fa      	ldrb	r2, [r7, #3]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3326      	adds	r3, #38	@ 0x26
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d11b      	bne.n	8003f2e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	3344      	adds	r3, #68	@ 0x44
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	334d      	adds	r3, #77	@ 0x4d
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f004 fe03 	bl	8008b32 <USB_HC_Halt>
 8003f2c:	e03f      	b.n	8003fae <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3326      	adds	r3, #38	@ 0x26
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f44:	78fa      	ldrb	r2, [r7, #3]
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3326      	adds	r3, #38	@ 0x26
 8003f54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d129      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	3344      	adds	r3, #68	@ 0x44
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	799b      	ldrb	r3, [r3, #6]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HCD_HC_IN_IRQHandler+0xc2a>
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	331b      	adds	r3, #27
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d110      	bne.n	8003fae <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334d      	adds	r3, #77	@ 0x4d
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fdc2 	bl	8008b32 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	1a9b      	subs	r3, r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	331b      	adds	r3, #27
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d129      	bne.n	8004018 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	331b      	adds	r3, #27
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	0151      	lsls	r1, r2, #5
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	440a      	add	r2, r1
 800400e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004024:	461a      	mov	r2, r3
 8004026:	2310      	movs	r3, #16
 8004028:	6093      	str	r3, [r2, #8]
 800402a:	e000      	b.n	800402e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800402c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 ffc9 	bl	8007fea <USB_ReadChInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b04      	cmp	r3, #4
 8004060:	d11b      	bne.n	800409a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406e:	461a      	mov	r2, r3
 8004070:	2304      	movs	r3, #4
 8004072:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334d      	adds	r3, #77	@ 0x4d
 8004084:	2207      	movs	r2, #7
 8004086:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f004 fd4e 	bl	8008b32 <USB_HC_Halt>
 8004096:	f000 bc89 	b.w	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 ffa1 	bl	8007fea <USB_ReadChInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	f040 8082 	bne.w	80041b8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	2320      	movs	r3, #32
 80040c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3319      	adds	r3, #25
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d124      	bne.n	8004126 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	3319      	adds	r3, #25
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	334c      	adds	r3, #76	@ 0x4c
 8004100:	2202      	movs	r2, #2
 8004102:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	334d      	adds	r3, #77	@ 0x4d
 8004114:	2203      	movs	r2, #3
 8004116:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	4611      	mov	r1, r2
 8004120:	4618      	mov	r0, r3
 8004122:	f004 fd06 	bl	8008b32 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	331a      	adds	r3, #26
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 8437 	bne.w	80049ac <HCD_HC_OUT_IRQHandler+0x978>
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	331b      	adds	r3, #27
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 842b 	bne.w	80049ac <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3326      	adds	r3, #38	@ 0x26
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d009      	beq.n	8004180 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	331b      	adds	r3, #27
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	334d      	adds	r3, #77	@ 0x4d
 8004190:	2203      	movs	r2, #3
 8004192:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f004 fcc8 	bl	8008b32 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	3344      	adds	r3, #68	@ 0x44
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e3f9      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 ff12 	bl	8007fea <USB_ReadChInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d0:	d111      	bne.n	80041f6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041de:	461a      	mov	r2, r3
 80041e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 fc9f 	bl	8008b32 <USB_HC_Halt>
 80041f4:	e3da      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fef3 	bl	8007fea <USB_ReadChInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d168      	bne.n	80042e0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3344      	adds	r3, #68	@ 0x44
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f003 fedd 	bl	8007fea <USB_ReadChInterrupts>
 8004230:	4603      	mov	r3, r0
 8004232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004236:	2b40      	cmp	r3, #64	@ 0x40
 8004238:	d112      	bne.n	8004260 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	3319      	adds	r3, #25
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800425a:	461a      	mov	r2, r3
 800425c:	2340      	movs	r3, #64	@ 0x40
 800425e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	4613      	mov	r3, r2
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	331b      	adds	r3, #27
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d019      	beq.n	80042aa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	331b      	adds	r3, #27
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	78fa      	ldrb	r2, [r7, #3]
 800429a:	0151      	lsls	r1, r2, #5
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	440a      	add	r2, r1
 80042a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	2301      	movs	r3, #1
 80042ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	334d      	adds	r3, #77	@ 0x4d
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f004 fc2a 	bl	8008b32 <USB_HC_Halt>
 80042de:	e365      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fe7e 	bl	8007fea <USB_ReadChInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d139      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	334d      	adds	r3, #77	@ 0x4d
 8004308:	2205      	movs	r2, #5
 800430a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	331a      	adds	r3, #26
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d109      	bne.n	8004336 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3319      	adds	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3344      	adds	r3, #68	@ 0x44
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f004 fbed 	bl	8008b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004364:	461a      	mov	r2, r3
 8004366:	2340      	movs	r3, #64	@ 0x40
 8004368:	6093      	str	r3, [r2, #8]
 800436a:	e31f      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f003 fe38 	bl	8007fea <USB_ReadChInterrupts>
 800437a:	4603      	mov	r3, r0
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b08      	cmp	r3, #8
 8004382:	d11a      	bne.n	80043ba <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004390:	461a      	mov	r2, r3
 8004392:	2308      	movs	r3, #8
 8004394:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334d      	adds	r3, #77	@ 0x4d
 80043a6:	2206      	movs	r2, #6
 80043a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	4611      	mov	r1, r2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 fbbd 	bl	8008b32 <USB_HC_Halt>
 80043b8:	e2f8      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fe11 	bl	8007fea <USB_ReadChInterrupts>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d144      	bne.n	800445c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3344      	adds	r3, #68	@ 0x44
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334d      	adds	r3, #77	@ 0x4d
 80043f6:	2204      	movs	r2, #4
 80043f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	3319      	adds	r3, #25
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d114      	bne.n	800443a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3318      	adds	r3, #24
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3319      	adds	r3, #25
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f004 fb75 	bl	8008b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	2310      	movs	r3, #16
 8004458:	6093      	str	r3, [r2, #8]
 800445a:	e2a7      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f003 fdc0 	bl	8007fea <USB_ReadChInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004470:	2b80      	cmp	r3, #128	@ 0x80
 8004472:	f040 8083 	bne.w	800457c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	799b      	ldrb	r3, [r3, #6]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d111      	bne.n	80044a2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	334d      	adds	r3, #77	@ 0x4d
 800448e:	2207      	movs	r2, #7
 8004490:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f004 fb49 	bl	8008b32 <USB_HC_Halt>
 80044a0:	e062      	b.n	8004568 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3344      	adds	r3, #68	@ 0x44
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4403      	add	r3, r0
 80044c2:	3344      	adds	r3, #68	@ 0x44
 80044c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044c6:	78fa      	ldrb	r2, [r7, #3]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	1a9b      	subs	r3, r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	3344      	adds	r3, #68	@ 0x44
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d922      	bls.n	8004522 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	3344      	adds	r3, #68	@ 0x44
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	@ 0x4c
 8004500:	2204      	movs	r2, #4
 8004502:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	334c      	adds	r3, #76	@ 0x4c
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f006 fe62 	bl	800b1e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004520:	e022      	b.n	8004568 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	334c      	adds	r3, #76	@ 0x4c
 8004532:	2202      	movs	r2, #2
 8004534:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	4413      	add	r3, r2
 800453e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800454c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004554:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	6093      	str	r3, [r2, #8]
 800457a:	e217      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f003 fd30 	bl	8007fea <USB_ReadChInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d11b      	bne.n	80045ce <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	334d      	adds	r3, #77	@ 0x4d
 80045a6:	2209      	movs	r2, #9
 80045a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	4611      	mov	r1, r2
 80045b2:	4618      	mov	r0, r3
 80045b4:	f004 fabd 	bl	8008b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	e1ee      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f003 fd07 	bl	8007fea <USB_ReadChInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	f040 81df 	bne.w	80049a6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	2302      	movs	r3, #2
 80045f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	334d      	adds	r3, #77	@ 0x4d
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 8093 	bne.w	8004738 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	334d      	adds	r3, #77	@ 0x4d
 8004622:	2202      	movs	r2, #2
 8004624:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004626:	78fa      	ldrb	r2, [r7, #3]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	334c      	adds	r3, #76	@ 0x4c
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3326      	adds	r3, #38	@ 0x26
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d00b      	beq.n	8004668 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3326      	adds	r3, #38	@ 0x26
 8004660:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004662:	2b03      	cmp	r3, #3
 8004664:	f040 8190 	bne.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	799b      	ldrb	r3, [r3, #6]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d115      	bne.n	800469c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	333d      	adds	r3, #61	@ 0x3d
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2d8      	uxtb	r0, r3
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	333d      	adds	r3, #61	@ 0x3d
 8004698:	4602      	mov	r2, r0
 800469a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	799b      	ldrb	r3, [r3, #6]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	f040 8171 	bne.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	3334      	adds	r3, #52	@ 0x34
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8165 	beq.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	3334      	adds	r3, #52	@ 0x34
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4403      	add	r3, r0
 80046de:	3328      	adds	r3, #40	@ 0x28
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	440b      	add	r3, r1
 80046e4:	1e59      	subs	r1, r3, #1
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4403      	add	r3, r0
 80046f4:	3328      	adds	r3, #40	@ 0x28
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046fc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 813f 	beq.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	333d      	adds	r3, #61	@ 0x3d
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	f083 0301 	eor.w	r3, r3, #1
 8004722:	b2d8      	uxtb	r0, r3
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	333d      	adds	r3, #61	@ 0x3d
 8004732:	4602      	mov	r2, r0
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e127      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334d      	adds	r3, #77	@ 0x4d
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d120      	bne.n	8004790 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	@ 0x4d
 800475e:	2202      	movs	r2, #2
 8004760:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	331b      	adds	r3, #27
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	f040 8107 	bne.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	334c      	adds	r3, #76	@ 0x4c
 800478a:	2202      	movs	r2, #2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	e0fb      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334d      	adds	r3, #77	@ 0x4d
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d13a      	bne.n	800481c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	334d      	adds	r3, #77	@ 0x4d
 80047b6:	2202      	movs	r2, #2
 80047b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	334c      	adds	r3, #76	@ 0x4c
 80047ca:	2202      	movs	r2, #2
 80047cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	331b      	adds	r3, #27
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	f040 80d1 	bne.w	8004988 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	331b      	adds	r3, #27
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	0151      	lsls	r1, r2, #5
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	440a      	add	r2, r1
 8004810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004818:	6053      	str	r3, [r2, #4]
 800481a:	e0b5      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	334d      	adds	r3, #77	@ 0x4d
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b05      	cmp	r3, #5
 8004830:	d114      	bne.n	800485c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	334d      	adds	r3, #77	@ 0x4d
 8004842:	2202      	movs	r2, #2
 8004844:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	334c      	adds	r3, #76	@ 0x4c
 8004856:	2202      	movs	r2, #2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e095      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	334d      	adds	r3, #77	@ 0x4d
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d114      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	334d      	adds	r3, #77	@ 0x4d
 8004882:	2202      	movs	r2, #2
 8004884:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	334c      	adds	r3, #76	@ 0x4c
 8004896:	2205      	movs	r2, #5
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e075      	b.n	8004988 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	334d      	adds	r3, #77	@ 0x4d
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b07      	cmp	r3, #7
 80048b0:	d00a      	beq.n	80048c8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	1a9b      	subs	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	334d      	adds	r3, #77	@ 0x4d
 80048c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048c4:	2b09      	cmp	r3, #9
 80048c6:	d170      	bne.n	80049aa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	334d      	adds	r3, #77	@ 0x4d
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3344      	adds	r3, #68	@ 0x44
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	4613      	mov	r3, r2
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4403      	add	r3, r0
 80048fc:	3344      	adds	r3, #68	@ 0x44
 80048fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	3344      	adds	r3, #68	@ 0x44
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d914      	bls.n	8004940 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	3344      	adds	r3, #68	@ 0x44
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	334c      	adds	r3, #76	@ 0x4c
 800493a:	2204      	movs	r2, #4
 800493c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800493e:	e022      	b.n	8004986 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	334c      	adds	r3, #76	@ 0x4c
 8004950:	2202      	movs	r2, #2
 8004952:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	4413      	add	r3, r2
 800495c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800496a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004972:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004980:	461a      	mov	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004986:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	334c      	adds	r3, #76	@ 0x4c
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	4619      	mov	r1, r3
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f006 fc20 	bl	800b1e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049a4:	e002      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80049a6:	bf00      	nop
 80049a8:	e000      	b.n	80049ac <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80049aa:	bf00      	nop
  }
}
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b08a      	sub	sp, #40	@ 0x28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	0c5b      	lsrs	r3, r3, #17
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049e6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d004      	beq.n	80049f8 <HCD_RXQLVL_IRQHandler+0x46>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	f000 80b6 	beq.w	8004b62 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80049f6:	e0b7      	b.n	8004b68 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b3 	beq.w	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4613      	mov	r3, r2
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	1a9b      	subs	r3, r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	332c      	adds	r3, #44	@ 0x2c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a7 	beq.w	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	3338      	adds	r3, #56	@ 0x38
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	18d1      	adds	r1, r2, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4403      	add	r3, r0
 8004a3c:	3334      	adds	r3, #52	@ 0x34
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4299      	cmp	r1, r3
 8004a42:	f200 8083 	bhi.w	8004b4c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	332c      	adds	r3, #44	@ 0x2c
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f003 fa57 	bl	8007f14 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	332c      	adds	r3, #44	@ 0x2c
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	18d1      	adds	r1, r2, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4613      	mov	r3, r2
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4403      	add	r3, r0
 8004a8a:	332c      	adds	r3, #44	@ 0x2c
 8004a8c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4613      	mov	r3, r2
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3338      	adds	r3, #56	@ 0x38
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	18d1      	adds	r1, r2, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4403      	add	r3, r0
 8004ab2:	3338      	adds	r3, #56	@ 0x38
 8004ab4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	0cdb      	lsrs	r3, r3, #19
 8004ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	3328      	adds	r3, #40	@ 0x28
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d13f      	bne.n	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d03c      	beq.n	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4613      	mov	r3, r2
 8004b24:	011b      	lsls	r3, r3, #4
 8004b26:	1a9b      	subs	r3, r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	333c      	adds	r3, #60	@ 0x3c
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f083 0301 	eor.w	r3, r3, #1
 8004b34:	b2d8      	uxtb	r0, r3
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	333c      	adds	r3, #60	@ 0x3c
 8004b46:	4602      	mov	r2, r0
 8004b48:	701a      	strb	r2, [r3, #0]
      break;
 8004b4a:	e00c      	b.n	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334c      	adds	r3, #76	@ 0x4c
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	701a      	strb	r2, [r3, #0]
      break;
 8004b60:	e001      	b.n	8004b66 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004b62:	bf00      	nop
 8004b64:	e000      	b.n	8004b68 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004b66:	bf00      	nop
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3728      	adds	r7, #40	@ 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d10b      	bne.n	8004bc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f006 fafa 	bl	800b1ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d132      	bne.n	8004c30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f043 0308 	orr.w	r3, r3, #8
 8004bd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d126      	bne.n	8004c2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	7a5b      	ldrb	r3, [r3, #9]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d113      	bne.n	8004c0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004bea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bee:	d106      	bne.n	8004bfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2102      	movs	r1, #2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f003 fb1c 	bl	8008234 <USB_InitFSLSPClkSel>
 8004bfc:	e011      	b.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2101      	movs	r1, #1
 8004c04:	4618      	mov	r0, r3
 8004c06:	f003 fb15 	bl	8008234 <USB_InitFSLSPClkSel>
 8004c0a:	e00a      	b.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	79db      	ldrb	r3, [r3, #7]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004c20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f006 faec 	bl	800b200 <HAL_HCD_PortEnabled_Callback>
 8004c28:	e002      	b.n	8004c30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f006 faf6 	bl	800b21c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d103      	bne.n	8004c42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0320 	orr.w	r3, r3, #32
 8004c40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c48:	461a      	mov	r2, r3
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6013      	str	r3, [r2, #0]
}
 8004c4e:	bf00      	nop
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e12b      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc f8ce 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	@ 0x24
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f002 fb04 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a81      	ldr	r2, [pc, #516]	@ (8004ecc <HAL_I2C_Init+0x274>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d807      	bhi.n	8004cdc <HAL_I2C_Init+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a80      	ldr	r2, [pc, #512]	@ (8004ed0 <HAL_I2C_Init+0x278>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e006      	b.n	8004cea <HAL_I2C_Init+0x92>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a7d      	ldr	r2, [pc, #500]	@ (8004ed4 <HAL_I2C_Init+0x27c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0e7      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a78      	ldr	r2, [pc, #480]	@ (8004ed8 <HAL_I2C_Init+0x280>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a6a      	ldr	r2, [pc, #424]	@ (8004ecc <HAL_I2C_Init+0x274>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <HAL_I2C_Init+0xd4>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	e009      	b.n	8004d40 <HAL_I2C_Init+0xe8>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a69      	ldr	r2, [pc, #420]	@ (8004edc <HAL_I2C_Init+0x284>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	3301      	adds	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	495c      	ldr	r1, [pc, #368]	@ (8004ecc <HAL_I2C_Init+0x274>)
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d819      	bhi.n	8004d94 <HAL_I2C_Init+0x13c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e59      	subs	r1, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d74:	400b      	ands	r3, r1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_I2C_Init+0x138>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e59      	subs	r1, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	e051      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d90:	2304      	movs	r3, #4
 8004d92:	e04f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <HAL_I2C_Init+0x168>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e012      	b.n	8004de6 <HAL_I2C_Init+0x18e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	0099      	lsls	r1, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x196>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e022      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_I2C_Init+0x1bc>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e58      	subs	r0, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	440b      	add	r3, r1
 8004e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6911      	ldr	r1, [r2, #16]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	000186a0 	.word	0x000186a0
 8004ed0:	001e847f 	.word	0x001e847f
 8004ed4:	003d08ff 	.word	0x003d08ff
 8004ed8:	431bde83 	.word	0x431bde83
 8004edc:	10624dd3 	.word	0x10624dd3

08004ee0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	4608      	mov	r0, r1
 8004eea:	4611      	mov	r1, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4603      	mov	r3, r0
 8004ef0:	817b      	strh	r3, [r7, #10]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	813b      	strh	r3, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004efa:	f7fc fef7 	bl	8001cec <HAL_GetTick>
 8004efe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	f040 80d9 	bne.w	80050c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2319      	movs	r3, #25
 8004f14:	2201      	movs	r2, #1
 8004f16:	496d      	ldr	r1, [pc, #436]	@ (80050cc <HAL_I2C_Mem_Write+0x1ec>)
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 fc8b 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f24:	2302      	movs	r3, #2
 8004f26:	e0cc      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_I2C_Mem_Write+0x56>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0c5      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d007      	beq.n	8004f5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0201 	orr.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2221      	movs	r2, #33	@ 0x21
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2240      	movs	r2, #64	@ 0x40
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4a4d      	ldr	r2, [pc, #308]	@ (80050d0 <HAL_I2C_Mem_Write+0x1f0>)
 8004f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f9e:	88f8      	ldrh	r0, [r7, #6]
 8004fa0:	893a      	ldrh	r2, [r7, #8]
 8004fa2:	8979      	ldrh	r1, [r7, #10]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4603      	mov	r3, r0
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 fac2 	bl	8005538 <I2C_RequestMemoryWrite>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d052      	beq.n	8005060 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e081      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 fd50 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d107      	bne.n	8004fe6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fe4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e06b      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29a      	uxth	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d11b      	bne.n	8005060 <HAL_I2C_Mem_Write+0x180>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	2b00      	cmp	r3, #0
 800502e:	d017      	beq.n	8005060 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1aa      	bne.n	8004fbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fd43 	bl	8005af8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e016      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	00100002 	.word	0x00100002
 80050d0:	ffff0000 	.word	0xffff0000

080050d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	@ 0x30
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	4608      	mov	r0, r1
 80050de:	4611      	mov	r1, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	817b      	strh	r3, [r7, #10]
 80050e6:	460b      	mov	r3, r1
 80050e8:	813b      	strh	r3, [r7, #8]
 80050ea:	4613      	mov	r3, r2
 80050ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ee:	f7fc fdfd 	bl	8001cec <HAL_GetTick>
 80050f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	f040 8214 	bne.w	800552a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	2319      	movs	r3, #25
 8005108:	2201      	movs	r2, #1
 800510a:	497b      	ldr	r1, [pc, #492]	@ (80052f8 <HAL_I2C_Mem_Read+0x224>)
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fb91 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
 800511a:	e207      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_I2C_Mem_Read+0x56>
 8005126:	2302      	movs	r3, #2
 8005128:	e200      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b01      	cmp	r3, #1
 800513e:	d007      	beq.n	8005150 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2222      	movs	r2, #34	@ 0x22
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a5b      	ldr	r2, [pc, #364]	@ (80052fc <HAL_I2C_Mem_Read+0x228>)
 8005190:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005192:	88f8      	ldrh	r0, [r7, #6]
 8005194:	893a      	ldrh	r2, [r7, #8]
 8005196:	8979      	ldrh	r1, [r7, #10]
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4603      	mov	r3, r0
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fa5e 	bl	8005664 <I2C_RequestMemoryRead>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e1bc      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d113      	bne.n	80051e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	623b      	str	r3, [r7, #32]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e190      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d11b      	bne.n	8005222 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051fa:	2300      	movs	r3, #0
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e170      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005226:	2b02      	cmp	r3, #2
 8005228:	d11b      	bne.n	8005262 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005238:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524a:	2300      	movs	r3, #0
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	e150      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005278:	e144      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527e:	2b03      	cmp	r3, #3
 8005280:	f200 80f1 	bhi.w	8005466 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005288:	2b01      	cmp	r3, #1
 800528a:	d123      	bne.n	80052d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800528c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fc79 	bl	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e145      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052d2:	e117      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d14e      	bne.n	800537a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	2200      	movs	r2, #0
 80052e4:	4906      	ldr	r1, [pc, #24]	@ (8005300 <HAL_I2C_Mem_Read+0x22c>)
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 faa4 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e11a      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
 80052f6:	bf00      	nop
 80052f8:	00100002 	.word	0x00100002
 80052fc:	ffff0000 	.word	0xffff0000
 8005300:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005312:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691a      	ldr	r2, [r3, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	1c5a      	adds	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005378:	e0c4      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	2200      	movs	r2, #0
 8005382:	496c      	ldr	r1, [pc, #432]	@ (8005534 <HAL_I2C_Mem_Read+0x460>)
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fa55 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cb      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	2200      	movs	r2, #0
 80053de:	4955      	ldr	r1, [pc, #340]	@ (8005534 <HAL_I2C_Mem_Read+0x460>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fa27 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e09d      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005464:	e04e      	b.n	8005504 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 fb8c 	bl	8005b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e058      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691a      	ldr	r2, [r3, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d124      	bne.n	8005504 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d107      	bne.n	80054d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005508:	2b00      	cmp	r3, #0
 800550a:	f47f aeb6 	bne.w	800527a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	e000      	b.n	800552c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800552a:	2302      	movs	r3, #2
  }
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	@ 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	00010004 	.word	0x00010004

08005538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	461a      	mov	r2, r3
 8005546:	4603      	mov	r3, r0
 8005548:	817b      	strh	r3, [r7, #10]
 800554a:	460b      	mov	r3, r1
 800554c:	813b      	strh	r3, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2200      	movs	r2, #0
 800556a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f960 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00d      	beq.n	8005596 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005584:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005588:	d103      	bne.n	8005592 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e05f      	b.n	8005656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005596:	897b      	ldrh	r3, [r7, #10]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	6a3a      	ldr	r2, [r7, #32]
 80055aa:	492d      	ldr	r1, [pc, #180]	@ (8005660 <I2C_RequestMemoryWrite+0x128>)
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f9bb 	bl	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e04c      	b.n	8005656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	6a39      	ldr	r1, [r7, #32]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa46 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d107      	bne.n	80055fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e02b      	b.n	8005656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d105      	bne.n	8005610 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005604:	893b      	ldrh	r3, [r7, #8]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]
 800560e:	e021      	b.n	8005654 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	0a1b      	lsrs	r3, r3, #8
 8005614:	b29b      	uxth	r3, r3
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fa20 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e005      	b.n	8005656 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	00010002 	.word	0x00010002

08005664 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	817b      	strh	r3, [r7, #10]
 8005676:	460b      	mov	r3, r1
 8005678:	813b      	strh	r3, [r7, #8]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800568c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800569c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f8c2 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c4:	d103      	bne.n	80056ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0aa      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056d2:	897b      	ldrh	r3, [r7, #10]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	6a3a      	ldr	r2, [r7, #32]
 80056e6:	4952      	ldr	r1, [pc, #328]	@ (8005830 <I2C_RequestMemoryRead+0x1cc>)
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f91d 	bl	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e097      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005710:	6a39      	ldr	r1, [r7, #32]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f9a8 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e076      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d105      	bne.n	800574c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005740:	893b      	ldrh	r3, [r7, #8]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	611a      	str	r2, [r3, #16]
 800574a:	e021      	b.n	8005790 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	0a1b      	lsrs	r3, r3, #8
 8005750:	b29b      	uxth	r3, r3
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800575c:	6a39      	ldr	r1, [r7, #32]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f982 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	2b04      	cmp	r3, #4
 8005770:	d107      	bne.n	8005782 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e050      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005786:	893b      	ldrh	r3, [r7, #8]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005792:	6a39      	ldr	r1, [r7, #32]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 f967 	bl	8005a68 <I2C_WaitOnTXEFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d107      	bne.n	80057b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e035      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f82b 	bl	8005834 <I2C_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00d      	beq.n	8005800 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f2:	d103      	bne.n	80057fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e013      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005800:	897b      	ldrh	r3, [r7, #10]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	4906      	ldr	r1, [pc, #24]	@ (8005830 <I2C_RequestMemoryRead+0x1cc>)
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f886 	bl	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	00010002 	.word	0x00010002

08005834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005844:	e048      	b.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d044      	beq.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fc fa4d 	bl	8001cec <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d139      	bne.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10d      	bne.n	800588a <I2C_WaitOnFlagUntilTimeout+0x56>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	43da      	mvns	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	e00c      	b.n	80058a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	43da      	mvns	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d116      	bne.n	80058d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	f043 0220 	orr.w	r2, r3, #32
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e023      	b.n	8005920 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	0c1b      	lsrs	r3, r3, #16
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d10d      	bne.n	80058fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	43da      	mvns	r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4013      	ands	r3, r2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf0c      	ite	eq
 80058f4:	2301      	moveq	r3, #1
 80058f6:	2300      	movne	r3, #0
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	461a      	mov	r2, r3
 80058fc:	e00c      	b.n	8005918 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	43da      	mvns	r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4013      	ands	r3, r2
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	429a      	cmp	r2, r3
 800591c:	d093      	beq.n	8005846 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005936:	e071      	b.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005946:	d123      	bne.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005956:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	f043 0204 	orr.w	r2, r3, #4
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e067      	b.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d041      	beq.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fc f9a8 	bl	8001cec <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d136      	bne.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10c      	bne.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	43da      	mvns	r2, r3
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf14      	ite	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	2300      	moveq	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e00b      	b.n	80059ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	43da      	mvns	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf14      	ite	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	2300      	moveq	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d016      	beq.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a08:	f043 0220 	orr.w	r2, r3, #32
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e021      	b.n	8005a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d10c      	bne.n	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	43da      	mvns	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	4013      	ands	r3, r2
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e00b      	b.n	8005a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f47f af6d 	bne.w	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a74:	e034      	b.n	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f8e3 	bl	8005c42 <I2C_IsAcknowledgeFailed>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d028      	beq.n	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a8e:	f7fc f92d 	bl	8001cec <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11d      	bne.n	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aae:	2b80      	cmp	r3, #128	@ 0x80
 8005ab0:	d016      	beq.n	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	f043 0220 	orr.w	r2, r3, #32
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e007      	b.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aea:	2b80      	cmp	r3, #128	@ 0x80
 8005aec:	d1c3      	bne.n	8005a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b04:	e034      	b.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f89b 	bl	8005c42 <I2C_IsAcknowledgeFailed>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e034      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d028      	beq.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1e:	f7fc f8e5 	bl	8001cec <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d302      	bcc.n	8005b34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11d      	bne.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d016      	beq.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e007      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d1c3      	bne.n	8005b06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b94:	e049      	b.n	8005c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d119      	bne.n	8005bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0210 	mvn.w	r2, #16
 8005bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e030      	b.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd8:	f7fc f888 	bl	8001cec <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d11d      	bne.n	8005c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	d016      	beq.n	8005c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e007      	b.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b40      	cmp	r3, #64	@ 0x40
 8005c36:	d1ae      	bne.n	8005b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c58:	d11b      	bne.n	8005c92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e128      	b.n	8005f04 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a90      	ldr	r2, [pc, #576]	@ (8005f0c <HAL_I2S_Init+0x26c>)
 8005cca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fb f93f 	bl	8000f50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ce8:	f023 030f 	bic.w	r3, r3, #15
 8005cec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d060      	beq.n	8005dc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d06:	2310      	movs	r3, #16
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e001      	b.n	8005d10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d802      	bhi.n	8005d1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d1e:	2001      	movs	r0, #1
 8005d20:	f001 fbdc 	bl	80074dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005d24:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d2e:	d125      	bne.n	8005d7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d42:	4613      	mov	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	3305      	adds	r3, #5
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e01f      	b.n	8005d9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	3305      	adds	r3, #5
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	e00e      	b.n	8005d9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	3305      	adds	r3, #5
 8005d98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8005f10 <HAL_I2S_Init+0x270>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e003      	b.n	8005dc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d902      	bls.n	8005dd4 <HAL_I2S_Init+0x134>
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2bff      	cmp	r3, #255	@ 0xff
 8005dd2:	d907      	bls.n	8005de4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd8:	f043 0210 	orr.w	r2, r3, #16
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e08f      	b.n	8005f04 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	ea42 0103 	orr.w	r1, r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e02:	f023 030f 	bic.w	r3, r3, #15
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6851      	ldr	r1, [r2, #4]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6892      	ldr	r2, [r2, #8]
 8005e0e:	4311      	orrs	r1, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68d2      	ldr	r2, [r2, #12]
 8005e14:	4311      	orrs	r1, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6992      	ldr	r2, [r2, #24]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e26:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d161      	bne.n	8005ef4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a38      	ldr	r2, [pc, #224]	@ (8005f14 <HAL_I2S_Init+0x274>)
 8005e34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a37      	ldr	r2, [pc, #220]	@ (8005f18 <HAL_I2S_Init+0x278>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d101      	bne.n	8005e44 <HAL_I2S_Init+0x1a4>
 8005e40:	4b36      	ldr	r3, [pc, #216]	@ (8005f1c <HAL_I2S_Init+0x27c>)
 8005e42:	e001      	b.n	8005e48 <HAL_I2S_Init+0x1a8>
 8005e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	4932      	ldr	r1, [pc, #200]	@ (8005f18 <HAL_I2S_Init+0x278>)
 8005e50:	428a      	cmp	r2, r1
 8005e52:	d101      	bne.n	8005e58 <HAL_I2S_Init+0x1b8>
 8005e54:	4a31      	ldr	r2, [pc, #196]	@ (8005f1c <HAL_I2S_Init+0x27c>)
 8005e56:	e001      	b.n	8005e5c <HAL_I2S_Init+0x1bc>
 8005e58:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e5c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e60:	f023 030f 	bic.w	r3, r3, #15
 8005e64:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f18 <HAL_I2S_Init+0x278>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d101      	bne.n	8005e74 <HAL_I2S_Init+0x1d4>
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <HAL_I2S_Init+0x27c>)
 8005e72:	e001      	b.n	8005e78 <HAL_I2S_Init+0x1d8>
 8005e74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e78:	2202      	movs	r2, #2
 8005e7a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a25      	ldr	r2, [pc, #148]	@ (8005f18 <HAL_I2S_Init+0x278>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_I2S_Init+0x1ea>
 8005e86:	4b25      	ldr	r3, [pc, #148]	@ (8005f1c <HAL_I2S_Init+0x27c>)
 8005e88:	e001      	b.n	8005e8e <HAL_I2S_Init+0x1ee>
 8005e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e9a:	d003      	beq.n	8005ea4 <HAL_I2S_Init+0x204>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	e001      	b.n	8005eb0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005eac:	2300      	movs	r3, #0
 8005eae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005edc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f18 <HAL_I2S_Init+0x278>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_I2S_Init+0x24c>
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <HAL_I2S_Init+0x27c>)
 8005eea:	e001      	b.n	8005ef0 <HAL_I2S_Init+0x250>
 8005eec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ef0:	897a      	ldrh	r2, [r7, #10]
 8005ef2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	08006007 	.word	0x08006007
 8005f10:	cccccccd 	.word	0xcccccccd
 8005f14:	080063d9 	.word	0x080063d9
 8005f18:	40003800 	.word	0x40003800
 8005f1c:	40003400 	.word	0x40003400

08005f20 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
}
 8005f30:	bf00      	nop
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	881a      	ldrh	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c9a      	adds	r2, r3, #2
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10e      	bne.n	8005fa0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f90:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ffcc 	bl	8005f38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc2:	1c9a      	adds	r2, r3, #2
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10e      	bne.n	8005ffe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7fb fddf 	bl	8001bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b04      	cmp	r3, #4
 8006020:	d13a      	bne.n	8006098 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b01      	cmp	r3, #1
 800602a:	d109      	bne.n	8006040 <I2S_IRQHandler+0x3a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b40      	cmp	r3, #64	@ 0x40
 8006038:	d102      	bne.n	8006040 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffb4 	bl	8005fa8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d126      	bne.n	8006098 <I2S_IRQHandler+0x92>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b20      	cmp	r3, #32
 8006056:	d11f      	bne.n	8006098 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006066:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006068:	2300      	movs	r3, #0
 800606a:	613b      	str	r3, [r7, #16]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	f043 0202 	orr.w	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fb fdaa 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d136      	bne.n	8006112 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d109      	bne.n	80060c2 <I2S_IRQHandler+0xbc>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b8:	2b80      	cmp	r3, #128	@ 0x80
 80060ba:	d102      	bne.n	80060c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7ff ff45 	bl	8005f4c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f003 0308 	and.w	r3, r3, #8
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d122      	bne.n	8006112 <I2S_IRQHandler+0x10c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 0320 	and.w	r3, r3, #32
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d11b      	bne.n	8006112 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006104:	f043 0204 	orr.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fb fd6d 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
 8006140:	e13c      	b.n	80063bc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 800614e:	887b      	ldrh	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e131      	b.n	80063bc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 8006164:	2302      	movs	r3, #2
 8006166:	e129      	b.n	80063bc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d002      	beq.n	8006194 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b05      	cmp	r3, #5
 8006192:	d114      	bne.n	80061be <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8006194:	887b      	ldrh	r3, [r7, #2]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80061b2:	887b      	ldrh	r3, [r7, #2]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	865a      	strh	r2, [r3, #50]	@ 0x32
 80061bc:	e00b      	b.n	80061d6 <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	887a      	ldrh	r2, [r7, #2]
 80061c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	887a      	ldrh	r2, [r7, #2]
 80061c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	887a      	ldrh	r2, [r7, #2]
 80061ce:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2205      	movs	r2, #5
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e8:	4a76      	ldr	r2, [pc, #472]	@ (80063c4 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 80061ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f0:	4a75      	ldr	r2, [pc, #468]	@ (80063c8 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 80061f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	4a74      	ldr	r2, [pc, #464]	@ (80063cc <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 80061fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	2200      	movs	r2, #0
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	2200      	movs	r2, #0
 800620a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	4a6e      	ldr	r2, [pc, #440]	@ (80063cc <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 8006212:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800621e:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006226:	d002      	beq.n	800622e <HAL_I2SEx_TransmitReceive_DMA+0x112>
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d144      	bne.n	80062b8 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a65      	ldr	r2, [pc, #404]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 8006240:	4b64      	ldr	r3, [pc, #400]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006242:	e001      	b.n	8006248 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 8006244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006248:	330c      	adds	r3, #12
 800624a:	4619      	mov	r1, r3
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006254:	b29b      	uxth	r3, r3
 8006256:	f7fb ff39 	bl	80020cc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5c      	ldr	r2, [pc, #368]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 8006264:	4b5b      	ldr	r3, [pc, #364]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006266:	e001      	b.n	800626c <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8006268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4957      	ldr	r1, [pc, #348]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006274:	428b      	cmp	r3, r1
 8006276:	d101      	bne.n	800627c <HAL_I2SEx_TransmitReceive_DMA+0x160>
 8006278:	4b56      	ldr	r3, [pc, #344]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800627a:	e001      	b.n	8006280 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 800627c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	461a      	mov	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	f7fb ff13 	bl	80020cc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0202 	orr.w	r2, r2, #2
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	e056      	b.n	8006366 <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c6:	d10a      	bne.n	80062de <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	6819      	ldr	r1, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a37      	ldr	r2, [pc, #220]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 80062f6:	4b37      	ldr	r3, [pc, #220]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80062f8:	e001      	b.n	80062fe <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 80062fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062fe:	330c      	adds	r3, #12
 8006300:	461a      	mov	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006306:	b29b      	uxth	r3, r3
 8006308:	f7fb fee0 	bl	80020cc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2f      	ldr	r2, [pc, #188]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d101      	bne.n	800631a <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 8006316:	4b2f      	ldr	r3, [pc, #188]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006318:	e001      	b.n	800631e <HAL_I2SEx_TransmitReceive_DMA+0x202>
 800631a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	492a      	ldr	r1, [pc, #168]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006326:	428b      	cmp	r3, r1
 8006328:	d101      	bne.n	800632e <HAL_I2SEx_TransmitReceive_DMA+0x212>
 800632a:	4b2a      	ldr	r3, [pc, #168]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800632c:	e001      	b.n	8006332 <HAL_I2SEx_TransmitReceive_DMA+0x216>
 800632e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006332:	f042 0202 	orr.w	r2, r2, #2
 8006336:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8006338:	1d3b      	adds	r3, r7, #4
 800633a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	330c      	adds	r3, #12
 8006346:	4619      	mov	r1, r3
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006350:	b29b      	uxth	r3, r3
 8006352:	f7fb febb 	bl	80020cc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637c:	d01d      	beq.n	80063ba <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_I2SEx_TransmitReceive_DMA+0x270>
 8006388:	4b12      	ldr	r3, [pc, #72]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800638a:	e001      	b.n	8006390 <HAL_I2SEx_TransmitReceive_DMA+0x274>
 800638c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006390:	69da      	ldr	r2, [r3, #28]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	490e      	ldr	r1, [pc, #56]	@ (80063d0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006398:	428b      	cmp	r3, r1
 800639a:	d101      	bne.n	80063a0 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 800639c:	4b0d      	ldr	r3, [pc, #52]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800639e:	e001      	b.n	80063a4 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 80063a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063a8:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063b8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	08006681 	.word	0x08006681
 80063c8:	0800669d 	.word	0x0800669d
 80063cc:	08006775 	.word	0x08006775
 80063d0:	40003800 	.word	0x40003800
 80063d4:	40003400 	.word	0x40003400

080063d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a92      	ldr	r2, [pc, #584]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80063f2:	4b92      	ldr	r3, [pc, #584]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063f4:	e001      	b.n	80063fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80063f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a8b      	ldr	r2, [pc, #556]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006410:	4b8a      	ldr	r3, [pc, #552]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006412:	e001      	b.n	8006418 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006424:	d004      	beq.n	8006430 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 8099 	bne.w	8006562 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b02      	cmp	r3, #2
 8006438:	d107      	bne.n	800644a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9d5 	bl	80067f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b01      	cmp	r3, #1
 8006452:	d107      	bne.n	8006464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa78 	bl	8006954 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646a:	2b40      	cmp	r3, #64	@ 0x40
 800646c:	d13a      	bne.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d035      	beq.n	80064e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a6e      	ldr	r2, [pc, #440]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006482:	4b6e      	ldr	r3, [pc, #440]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006484:	e001      	b.n	800648a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006486:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4969      	ldr	r1, [pc, #420]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006492:	428b      	cmp	r3, r1
 8006494:	d101      	bne.n	800649a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006496:	4b69      	ldr	r3, [pc, #420]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006498:	e001      	b.n	800649e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800649a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800649e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	f043 0202 	orr.w	r2, r3, #2
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fb fb84 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	f040 80c3 	bne.w	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80bd 	beq.w	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800650a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a49      	ldr	r2, [pc, #292]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006516:	4b49      	ldr	r3, [pc, #292]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006518:	e001      	b.n	800651e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800651a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4944      	ldr	r1, [pc, #272]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006526:	428b      	cmp	r3, r1
 8006528:	d101      	bne.n	800652e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800652a:	4b44      	ldr	r3, [pc, #272]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800652c:	e001      	b.n	8006532 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800652e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006532:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006536:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	60bb      	str	r3, [r7, #8]
 8006544:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fb fb46 	bl	8001bec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006560:	e089      	b.n	8006676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d107      	bne.n	800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f96e 	bl	8006858 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f9ad 	bl	80068f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d12f      	bne.n	8006600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f003 0320 	and.w	r3, r3, #32
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d02a      	beq.n	8006600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1e      	ldr	r2, [pc, #120]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80065c4:	4b1d      	ldr	r3, [pc, #116]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065c6:	e001      	b.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80065c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4919      	ldr	r1, [pc, #100]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065d4:	428b      	cmp	r3, r1
 80065d6:	d101      	bne.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80065d8:	4b18      	ldr	r3, [pc, #96]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065da:	e001      	b.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80065dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80065e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f043 0202 	orr.w	r2, r3, #2
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fb faf6 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b08      	cmp	r3, #8
 8006608:	d136      	bne.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d031      	beq.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a07      	ldr	r2, [pc, #28]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d101      	bne.n	8006622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800661e:	4b07      	ldr	r3, [pc, #28]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006620:	e001      	b.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006622:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4902      	ldr	r1, [pc, #8]	@ (8006638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800662e:	428b      	cmp	r3, r1
 8006630:	d106      	bne.n	8006640 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006632:	4b02      	ldr	r3, [pc, #8]	@ (800663c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006634:	e006      	b.n	8006644 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006636:	bf00      	nop
 8006638:	40003800 	.word	0x40003800
 800663c:	40003400 	.word	0x40003400
 8006640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006644:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006648:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006658:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fabc 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006674:	e000      	b.n	8006678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006676:	bf00      	nop
}
 8006678:	bf00      	nop
 800667a:	3720      	adds	r7, #32
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7fa fd62 	bl	8001158 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d155      	bne.n	800675e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c0:	d006      	beq.n	80066d0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11e      	bne.n	800670e <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a25      	ldr	r2, [pc, #148]	@ (800676c <I2SEx_TxRxDMACplt+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d101      	bne.n	80066de <I2SEx_TxRxDMACplt+0x42>
 80066da:	4b25      	ldr	r3, [pc, #148]	@ (8006770 <I2SEx_TxRxDMACplt+0xd4>)
 80066dc:	e001      	b.n	80066e2 <I2SEx_TxRxDMACplt+0x46>
 80066de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4920      	ldr	r1, [pc, #128]	@ (800676c <I2SEx_TxRxDMACplt+0xd0>)
 80066ea:	428b      	cmp	r3, r1
 80066ec:	d101      	bne.n	80066f2 <I2SEx_TxRxDMACplt+0x56>
 80066ee:	4b20      	ldr	r3, [pc, #128]	@ (8006770 <I2SEx_TxRxDMACplt+0xd4>)
 80066f0:	e001      	b.n	80066f6 <I2SEx_TxRxDMACplt+0x5a>
 80066f2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0202 	bic.w	r2, r2, #2
 800670a:	605a      	str	r2, [r3, #4]
 800670c:	e01d      	b.n	800674a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0201 	bic.w	r2, r2, #1
 800671c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a12      	ldr	r2, [pc, #72]	@ (800676c <I2SEx_TxRxDMACplt+0xd0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <I2SEx_TxRxDMACplt+0x90>
 8006728:	4b11      	ldr	r3, [pc, #68]	@ (8006770 <I2SEx_TxRxDMACplt+0xd4>)
 800672a:	e001      	b.n	8006730 <I2SEx_TxRxDMACplt+0x94>
 800672c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	490d      	ldr	r1, [pc, #52]	@ (800676c <I2SEx_TxRxDMACplt+0xd0>)
 8006738:	428b      	cmp	r3, r1
 800673a:	d101      	bne.n	8006740 <I2SEx_TxRxDMACplt+0xa4>
 800673c:	4b0c      	ldr	r3, [pc, #48]	@ (8006770 <I2SEx_TxRxDMACplt+0xd4>)
 800673e:	e001      	b.n	8006744 <I2SEx_TxRxDMACplt+0xa8>
 8006740:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006744:	f022 0202 	bic.w	r2, r2, #2
 8006748:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7fa fd0a 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40003800 	.word	0x40003800
 8006770:	40003400 	.word	0x40003400

08006774 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006780:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0203 	bic.w	r2, r2, #3
 8006790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <I2SEx_TxRxDMAError+0x78>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <I2SEx_TxRxDMAError+0x2c>
 800679c:	4b14      	ldr	r3, [pc, #80]	@ (80067f0 <I2SEx_TxRxDMAError+0x7c>)
 800679e:	e001      	b.n	80067a4 <I2SEx_TxRxDMAError+0x30>
 80067a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4910      	ldr	r1, [pc, #64]	@ (80067ec <I2SEx_TxRxDMAError+0x78>)
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d101      	bne.n	80067b4 <I2SEx_TxRxDMAError+0x40>
 80067b0:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <I2SEx_TxRxDMAError+0x7c>)
 80067b2:	e001      	b.n	80067b8 <I2SEx_TxRxDMAError+0x44>
 80067b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067b8:	f022 0203 	bic.w	r2, r2, #3
 80067bc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	f043 0208 	orr.w	r2, r3, #8
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f7fb fa04 	bl	8001bec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40003800 	.word	0x40003800
 80067f0:	40003400 	.word	0x40003400

080067f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006800:	1c99      	adds	r1, r3, #2
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6251      	str	r1, [r2, #36]	@ 0x24
 8006806:	881a      	ldrh	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d113      	bne.n	800684e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fa fc95 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006864:	1c99      	adds	r1, r3, #2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6251      	str	r1, [r2, #36]	@ 0x24
 800686a:	8819      	ldrh	r1, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1d      	ldr	r2, [pc, #116]	@ (80068e8 <I2SEx_TxISR_I2SExt+0x90>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d101      	bne.n	800687a <I2SEx_TxISR_I2SExt+0x22>
 8006876:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <I2SEx_TxISR_I2SExt+0x94>)
 8006878:	e001      	b.n	800687e <I2SEx_TxISR_I2SExt+0x26>
 800687a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800687e:	460a      	mov	r2, r1
 8006880:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006886:	b29b      	uxth	r3, r3
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d121      	bne.n	80068de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <I2SEx_TxISR_I2SExt+0x90>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d101      	bne.n	80068a8 <I2SEx_TxISR_I2SExt+0x50>
 80068a4:	4b11      	ldr	r3, [pc, #68]	@ (80068ec <I2SEx_TxISR_I2SExt+0x94>)
 80068a6:	e001      	b.n	80068ac <I2SEx_TxISR_I2SExt+0x54>
 80068a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	490d      	ldr	r1, [pc, #52]	@ (80068e8 <I2SEx_TxISR_I2SExt+0x90>)
 80068b4:	428b      	cmp	r3, r1
 80068b6:	d101      	bne.n	80068bc <I2SEx_TxISR_I2SExt+0x64>
 80068b8:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <I2SEx_TxISR_I2SExt+0x94>)
 80068ba:	e001      	b.n	80068c0 <I2SEx_TxISR_I2SExt+0x68>
 80068bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d106      	bne.n	80068de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fa fc4d 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40003800 	.word	0x40003800
 80068ec:	40003400 	.word	0x40003400

080068f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68d8      	ldr	r0, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	1c99      	adds	r1, r3, #2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006908:	b282      	uxth	r2, r0
 800690a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d113      	bne.n	800694c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006932:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fa fc16 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a20      	ldr	r2, [pc, #128]	@ (80069e4 <I2SEx_RxISR_I2SExt+0x90>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <I2SEx_RxISR_I2SExt+0x16>
 8006966:	4b20      	ldr	r3, [pc, #128]	@ (80069e8 <I2SEx_RxISR_I2SExt+0x94>)
 8006968:	e001      	b.n	800696e <I2SEx_RxISR_I2SExt+0x1a>
 800696a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800696e:	68d8      	ldr	r0, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006974:	1c99      	adds	r1, r3, #2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800697a:	b282      	uxth	r2, r0
 800697c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d121      	bne.n	80069da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a12      	ldr	r2, [pc, #72]	@ (80069e4 <I2SEx_RxISR_I2SExt+0x90>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d101      	bne.n	80069a4 <I2SEx_RxISR_I2SExt+0x50>
 80069a0:	4b11      	ldr	r3, [pc, #68]	@ (80069e8 <I2SEx_RxISR_I2SExt+0x94>)
 80069a2:	e001      	b.n	80069a8 <I2SEx_RxISR_I2SExt+0x54>
 80069a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	490d      	ldr	r1, [pc, #52]	@ (80069e4 <I2SEx_RxISR_I2SExt+0x90>)
 80069b0:	428b      	cmp	r3, r1
 80069b2:	d101      	bne.n	80069b8 <I2SEx_RxISR_I2SExt+0x64>
 80069b4:	4b0c      	ldr	r3, [pc, #48]	@ (80069e8 <I2SEx_RxISR_I2SExt+0x94>)
 80069b6:	e001      	b.n	80069bc <I2SEx_RxISR_I2SExt+0x68>
 80069b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fa fbcf 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40003800 	.word	0x40003800
 80069e8:	40003400 	.word	0x40003400

080069ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e267      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d075      	beq.n	8006af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a0a:	4b88      	ldr	r3, [pc, #544]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d00c      	beq.n	8006a30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a16:	4b85      	ldr	r3, [pc, #532]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d112      	bne.n	8006a48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a22:	4b82      	ldr	r3, [pc, #520]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a2e:	d10b      	bne.n	8006a48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a30:	4b7e      	ldr	r3, [pc, #504]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d05b      	beq.n	8006af4 <HAL_RCC_OscConfig+0x108>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d157      	bne.n	8006af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e242      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d106      	bne.n	8006a60 <HAL_RCC_OscConfig+0x74>
 8006a52:	4b76      	ldr	r3, [pc, #472]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a75      	ldr	r2, [pc, #468]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e01d      	b.n	8006a9c <HAL_RCC_OscConfig+0xb0>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0x98>
 8006a6a:	4b70      	ldr	r3, [pc, #448]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	4b6d      	ldr	r3, [pc, #436]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e00b      	b.n	8006a9c <HAL_RCC_OscConfig+0xb0>
 8006a84:	4b69      	ldr	r3, [pc, #420]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a68      	ldr	r2, [pc, #416]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b66      	ldr	r3, [pc, #408]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a65      	ldr	r2, [pc, #404]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d013      	beq.n	8006acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7fb f922 	bl	8001cec <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aac:	f7fb f91e 	bl	8001cec <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	@ 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e207      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006abe:	4b5b      	ldr	r3, [pc, #364]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0f0      	beq.n	8006aac <HAL_RCC_OscConfig+0xc0>
 8006aca:	e014      	b.n	8006af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006acc:	f7fb f90e 	bl	8001cec <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fb f90a 	bl	8001cec <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	@ 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e1f3      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae6:	4b51      	ldr	r3, [pc, #324]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f0      	bne.n	8006ad4 <HAL_RCC_OscConfig+0xe8>
 8006af2:	e000      	b.n	8006af6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d063      	beq.n	8006bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b02:	4b4a      	ldr	r3, [pc, #296]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 030c 	and.w	r3, r3, #12
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b0e:	4b47      	ldr	r3, [pc, #284]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b16:	2b08      	cmp	r3, #8
 8006b18:	d11c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1a:	4b44      	ldr	r3, [pc, #272]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d116      	bne.n	8006b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b26:	4b41      	ldr	r3, [pc, #260]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <HAL_RCC_OscConfig+0x152>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e1c7      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4937      	ldr	r1, [pc, #220]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b52:	e03a      	b.n	8006bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b5c:	4b34      	ldr	r3, [pc, #208]	@ (8006c30 <HAL_RCC_OscConfig+0x244>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b62:	f7fb f8c3 	bl	8001cec <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6a:	f7fb f8bf 	bl	8001cec <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e1a8      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b88:	4b28      	ldr	r3, [pc, #160]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4925      	ldr	r1, [pc, #148]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	600b      	str	r3, [r1, #0]
 8006b9c:	e015      	b.n	8006bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b9e:	4b24      	ldr	r3, [pc, #144]	@ (8006c30 <HAL_RCC_OscConfig+0x244>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba4:	f7fb f8a2 	bl	8001cec <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bac:	f7fb f89e 	bl	8001cec <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e187      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1f0      	bne.n	8006bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d036      	beq.n	8006c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bde:	4b15      	ldr	r3, [pc, #84]	@ (8006c34 <HAL_RCC_OscConfig+0x248>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be4:	f7fb f882 	bl	8001cec <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bec:	f7fb f87e 	bl	8001cec <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e167      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <HAL_RCC_OscConfig+0x240>)
 8006c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f0      	beq.n	8006bec <HAL_RCC_OscConfig+0x200>
 8006c0a:	e01b      	b.n	8006c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c0c:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_OscConfig+0x248>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c12:	f7fb f86b 	bl	8001cec <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c18:	e00e      	b.n	8006c38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c1a:	f7fb f867 	bl	8001cec <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d907      	bls.n	8006c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e150      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
 8006c2c:	40023800 	.word	0x40023800
 8006c30:	42470000 	.word	0x42470000
 8006c34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c38:	4b88      	ldr	r3, [pc, #544]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1ea      	bne.n	8006c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8097 	beq.w	8006d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c56:	4b81      	ldr	r3, [pc, #516]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10f      	bne.n	8006c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
 8006c66:	4b7d      	ldr	r3, [pc, #500]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c72:	4b7a      	ldr	r3, [pc, #488]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7a:	60bb      	str	r3, [r7, #8]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c82:	4b77      	ldr	r3, [pc, #476]	@ (8006e60 <HAL_RCC_OscConfig+0x474>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d118      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c8e:	4b74      	ldr	r3, [pc, #464]	@ (8006e60 <HAL_RCC_OscConfig+0x474>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a73      	ldr	r2, [pc, #460]	@ (8006e60 <HAL_RCC_OscConfig+0x474>)
 8006c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c9a:	f7fb f827 	bl	8001cec <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca2:	f7fb f823 	bl	8001cec <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e10c      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8006e60 <HAL_RCC_OscConfig+0x474>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d106      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x2ea>
 8006cc8:	4b64      	ldr	r3, [pc, #400]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ccc:	4a63      	ldr	r2, [pc, #396]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd4:	e01c      	b.n	8006d10 <HAL_RCC_OscConfig+0x324>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x30c>
 8006cde:	4b5f      	ldr	r3, [pc, #380]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006ce4:	f043 0304 	orr.w	r3, r3, #4
 8006ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cea:	4b5c      	ldr	r3, [pc, #368]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cee:	4a5b      	ldr	r2, [pc, #364]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cf6:	e00b      	b.n	8006d10 <HAL_RCC_OscConfig+0x324>
 8006cf8:	4b58      	ldr	r3, [pc, #352]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfc:	4a57      	ldr	r2, [pc, #348]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d04:	4b55      	ldr	r3, [pc, #340]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d08:	4a54      	ldr	r2, [pc, #336]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d0a:	f023 0304 	bic.w	r3, r3, #4
 8006d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d015      	beq.n	8006d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d18:	f7fa ffe8 	bl	8001cec <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1e:	e00a      	b.n	8006d36 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d20:	f7fa ffe4 	bl	8001cec <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e0cb      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d36:	4b49      	ldr	r3, [pc, #292]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ee      	beq.n	8006d20 <HAL_RCC_OscConfig+0x334>
 8006d42:	e014      	b.n	8006d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d44:	f7fa ffd2 	bl	8001cec <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fa ffce 	bl	8001cec <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e0b5      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d62:	4b3e      	ldr	r3, [pc, #248]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1ee      	bne.n	8006d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d105      	bne.n	8006d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d74:	4b39      	ldr	r3, [pc, #228]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	4a38      	ldr	r2, [pc, #224]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80a1 	beq.w	8006ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d8a:	4b34      	ldr	r3, [pc, #208]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 030c 	and.w	r3, r3, #12
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d05c      	beq.n	8006e50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d141      	bne.n	8006e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9e:	4b31      	ldr	r3, [pc, #196]	@ (8006e64 <HAL_RCC_OscConfig+0x478>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da4:	f7fa ffa2 	bl	8001cec <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dac:	f7fa ff9e 	bl	8001cec <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e087      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dbe:	4b27      	ldr	r3, [pc, #156]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1f0      	bne.n	8006dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	69da      	ldr	r2, [r3, #28]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	019b      	lsls	r3, r3, #6
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	085b      	lsrs	r3, r3, #1
 8006de2:	3b01      	subs	r3, #1
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	061b      	lsls	r3, r3, #24
 8006dee:	491b      	ldr	r1, [pc, #108]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006df4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e64 <HAL_RCC_OscConfig+0x478>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfa:	f7fa ff77 	bl	8001cec <HAL_GetTick>
 8006dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e00:	e008      	b.n	8006e14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e02:	f7fa ff73 	bl	8001cec <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e05c      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e14:	4b11      	ldr	r3, [pc, #68]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d0f0      	beq.n	8006e02 <HAL_RCC_OscConfig+0x416>
 8006e20:	e054      	b.n	8006ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e22:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <HAL_RCC_OscConfig+0x478>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e28:	f7fa ff60 	bl	8001cec <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e30:	f7fa ff5c 	bl	8001cec <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e045      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <HAL_RCC_OscConfig+0x470>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x444>
 8006e4e:	e03d      	b.n	8006ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d107      	bne.n	8006e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e038      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	40007000 	.word	0x40007000
 8006e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <HAL_RCC_OscConfig+0x4ec>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d028      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d121      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d11a      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006e98:	4013      	ands	r3, r2
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d111      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40023800 	.word	0x40023800

08006edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e0cc      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b68      	ldr	r3, [pc, #416]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d90c      	bls.n	8006f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b65      	ldr	r3, [pc, #404]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	4b63      	ldr	r3, [pc, #396]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d001      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e0b8      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d020      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d005      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f30:	4b59      	ldr	r3, [pc, #356]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4a58      	ldr	r2, [pc, #352]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0308 	and.w	r3, r3, #8
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d005      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f48:	4b53      	ldr	r3, [pc, #332]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4a52      	ldr	r2, [pc, #328]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f54:	4b50      	ldr	r3, [pc, #320]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	494d      	ldr	r1, [pc, #308]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d044      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d107      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f7a:	4b47      	ldr	r3, [pc, #284]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d119      	bne.n	8006fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e07f      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d003      	beq.n	8006f9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f96:	2b03      	cmp	r3, #3
 8006f98:	d107      	bne.n	8006faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e06f      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006faa:	4b3b      	ldr	r3, [pc, #236]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e067      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fba:	4b37      	ldr	r3, [pc, #220]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f023 0203 	bic.w	r2, r3, #3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	4934      	ldr	r1, [pc, #208]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fcc:	f7fa fe8e 	bl	8001cec <HAL_GetTick>
 8006fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd2:	e00a      	b.n	8006fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd4:	f7fa fe8a 	bl	8001cec <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e04f      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fea:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 020c 	and.w	r2, r3, #12
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d1eb      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ffc:	4b25      	ldr	r3, [pc, #148]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0307 	and.w	r3, r3, #7
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	429a      	cmp	r2, r3
 8007008:	d20c      	bcs.n	8007024 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700a:	4b22      	ldr	r3, [pc, #136]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	b2d2      	uxtb	r2, r2
 8007010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007012:	4b20      	ldr	r3, [pc, #128]	@ (8007094 <HAL_RCC_ClockConfig+0x1b8>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d001      	beq.n	8007024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e032      	b.n	800708a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d008      	beq.n	8007042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007030:	4b19      	ldr	r3, [pc, #100]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4916      	ldr	r1, [pc, #88]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	4313      	orrs	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800704e:	4b12      	ldr	r3, [pc, #72]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	490e      	ldr	r1, [pc, #56]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 800705e:	4313      	orrs	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007062:	f000 f821 	bl	80070a8 <HAL_RCC_GetSysClockFreq>
 8007066:	4602      	mov	r2, r0
 8007068:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	490a      	ldr	r1, [pc, #40]	@ (800709c <HAL_RCC_ClockConfig+0x1c0>)
 8007074:	5ccb      	ldrb	r3, [r1, r3]
 8007076:	fa22 f303 	lsr.w	r3, r2, r3
 800707a:	4a09      	ldr	r2, [pc, #36]	@ (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800707e:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7fa fdee 	bl	8001c64 <HAL_InitTick>

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	40023c00 	.word	0x40023c00
 8007098:	40023800 	.word	0x40023800
 800709c:	0800c378 	.word	0x0800c378
 80070a0:	20000000 	.word	0x20000000
 80070a4:	20000004 	.word	0x20000004

080070a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070ac:	b094      	sub	sp, #80	@ 0x50
 80070ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070c0:	4b79      	ldr	r3, [pc, #484]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d00d      	beq.n	80070e8 <HAL_RCC_GetSysClockFreq+0x40>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	f200 80e1 	bhi.w	8007294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_RCC_GetSysClockFreq+0x34>
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d003      	beq.n	80070e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070da:	e0db      	b.n	8007294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070dc:	4b73      	ldr	r3, [pc, #460]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x204>)
 80070de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070e0:	e0db      	b.n	800729a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070e2:	4b72      	ldr	r3, [pc, #456]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x204>)
 80070e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070e6:	e0d8      	b.n	800729a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070e8:	4b6f      	ldr	r3, [pc, #444]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070f2:	4b6d      	ldr	r3, [pc, #436]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d063      	beq.n	80071c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070fe:	4b6a      	ldr	r3, [pc, #424]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	099b      	lsrs	r3, r3, #6
 8007104:	2200      	movs	r2, #0
 8007106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	633b      	str	r3, [r7, #48]	@ 0x30
 8007112:	2300      	movs	r3, #0
 8007114:	637b      	str	r3, [r7, #52]	@ 0x34
 8007116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800711a:	4622      	mov	r2, r4
 800711c:	462b      	mov	r3, r5
 800711e:	f04f 0000 	mov.w	r0, #0
 8007122:	f04f 0100 	mov.w	r1, #0
 8007126:	0159      	lsls	r1, r3, #5
 8007128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800712c:	0150      	lsls	r0, r2, #5
 800712e:	4602      	mov	r2, r0
 8007130:	460b      	mov	r3, r1
 8007132:	4621      	mov	r1, r4
 8007134:	1a51      	subs	r1, r2, r1
 8007136:	6139      	str	r1, [r7, #16]
 8007138:	4629      	mov	r1, r5
 800713a:	eb63 0301 	sbc.w	r3, r3, r1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800714c:	4659      	mov	r1, fp
 800714e:	018b      	lsls	r3, r1, #6
 8007150:	4651      	mov	r1, sl
 8007152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007156:	4651      	mov	r1, sl
 8007158:	018a      	lsls	r2, r1, #6
 800715a:	4651      	mov	r1, sl
 800715c:	ebb2 0801 	subs.w	r8, r2, r1
 8007160:	4659      	mov	r1, fp
 8007162:	eb63 0901 	sbc.w	r9, r3, r1
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800717a:	4690      	mov	r8, r2
 800717c:	4699      	mov	r9, r3
 800717e:	4623      	mov	r3, r4
 8007180:	eb18 0303 	adds.w	r3, r8, r3
 8007184:	60bb      	str	r3, [r7, #8]
 8007186:	462b      	mov	r3, r5
 8007188:	eb49 0303 	adc.w	r3, r9, r3
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800719a:	4629      	mov	r1, r5
 800719c:	028b      	lsls	r3, r1, #10
 800719e:	4621      	mov	r1, r4
 80071a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071a4:	4621      	mov	r1, r4
 80071a6:	028a      	lsls	r2, r1, #10
 80071a8:	4610      	mov	r0, r2
 80071aa:	4619      	mov	r1, r3
 80071ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ae:	2200      	movs	r2, #0
 80071b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071b8:	f7f9 fb3c 	bl	8000834 <__aeabi_uldivmod>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4613      	mov	r3, r2
 80071c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c4:	e058      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071c6:	4b38      	ldr	r3, [pc, #224]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	099b      	lsrs	r3, r3, #6
 80071cc:	2200      	movs	r2, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	4611      	mov	r1, r2
 80071d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071d6:	623b      	str	r3, [r7, #32]
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
 80071dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071e0:	4642      	mov	r2, r8
 80071e2:	464b      	mov	r3, r9
 80071e4:	f04f 0000 	mov.w	r0, #0
 80071e8:	f04f 0100 	mov.w	r1, #0
 80071ec:	0159      	lsls	r1, r3, #5
 80071ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071f2:	0150      	lsls	r0, r2, #5
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4641      	mov	r1, r8
 80071fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80071fe:	4649      	mov	r1, r9
 8007200:	eb63 0b01 	sbc.w	fp, r3, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007218:	ebb2 040a 	subs.w	r4, r2, sl
 800721c:	eb63 050b 	sbc.w	r5, r3, fp
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	f04f 0300 	mov.w	r3, #0
 8007228:	00eb      	lsls	r3, r5, #3
 800722a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800722e:	00e2      	lsls	r2, r4, #3
 8007230:	4614      	mov	r4, r2
 8007232:	461d      	mov	r5, r3
 8007234:	4643      	mov	r3, r8
 8007236:	18e3      	adds	r3, r4, r3
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	464b      	mov	r3, r9
 800723c:	eb45 0303 	adc.w	r3, r5, r3
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	f04f 0200 	mov.w	r2, #0
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800724e:	4629      	mov	r1, r5
 8007250:	028b      	lsls	r3, r1, #10
 8007252:	4621      	mov	r1, r4
 8007254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007258:	4621      	mov	r1, r4
 800725a:	028a      	lsls	r2, r1, #10
 800725c:	4610      	mov	r0, r2
 800725e:	4619      	mov	r1, r3
 8007260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007262:	2200      	movs	r2, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	61fa      	str	r2, [r7, #28]
 8007268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800726c:	f7f9 fae2 	bl	8000834 <__aeabi_uldivmod>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4613      	mov	r3, r2
 8007276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007278:	4b0b      	ldr	r3, [pc, #44]	@ (80072a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	0c1b      	lsrs	r3, r3, #16
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	3301      	adds	r3, #1
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800728a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007292:	e002      	b.n	800729a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007294:	4b05      	ldr	r3, [pc, #20]	@ (80072ac <HAL_RCC_GetSysClockFreq+0x204>)
 8007296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800729a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800729c:	4618      	mov	r0, r3
 800729e:	3750      	adds	r7, #80	@ 0x50
 80072a0:	46bd      	mov	sp, r7
 80072a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072a6:	bf00      	nop
 80072a8:	40023800 	.word	0x40023800
 80072ac:	00f42400 	.word	0x00f42400

080072b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b4:	4b03      	ldr	r3, [pc, #12]	@ (80072c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	20000000 	.word	0x20000000

080072c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072cc:	f7ff fff0 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b05      	ldr	r3, [pc, #20]	@ (80072e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	0a9b      	lsrs	r3, r3, #10
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	4903      	ldr	r1, [pc, #12]	@ (80072ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40023800 	.word	0x40023800
 80072ec:	0800c388 	.word	0x0800c388

080072f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072f4:	f7ff ffdc 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	0b5b      	lsrs	r3, r3, #13
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4903      	ldr	r1, [pc, #12]	@ (8007314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007306:	5ccb      	ldrb	r3, [r1, r3]
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40023800 	.word	0x40023800
 8007314:	0800c388 	.word	0x0800c388

08007318 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d105      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800733c:	2b00      	cmp	r3, #0
 800733e:	d035      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007340:	4b62      	ldr	r3, [pc, #392]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007342:	2200      	movs	r2, #0
 8007344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007346:	f7fa fcd1 	bl	8001cec <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800734c:	e008      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800734e:	f7fa fccd 	bl	8001cec <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d901      	bls.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800735c:	2303      	movs	r3, #3
 800735e:	e0b0      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007360:	4b5b      	ldr	r3, [pc, #364]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f0      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	019a      	lsls	r2, r3, #6
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	071b      	lsls	r3, r3, #28
 8007378:	4955      	ldr	r1, [pc, #340]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007380:	4b52      	ldr	r3, [pc, #328]	@ (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007382:	2201      	movs	r2, #1
 8007384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007386:	f7fa fcb1 	bl	8001cec <HAL_GetTick>
 800738a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800738c:	e008      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800738e:	f7fa fcad 	bl	8001cec <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d901      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e090      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073a0:	4b4b      	ldr	r3, [pc, #300]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0f0      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8083 	beq.w	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	4b44      	ldr	r3, [pc, #272]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	4a43      	ldr	r2, [pc, #268]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ca:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073d6:	4b3f      	ldr	r3, [pc, #252]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3e      	ldr	r2, [pc, #248]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073e2:	f7fa fc83 	bl	8001cec <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073e8:	e008      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ea:	f7fa fc7f 	bl	8001cec <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d901      	bls.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e062      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073fc:	4b35      	ldr	r3, [pc, #212]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007404:	2b00      	cmp	r3, #0
 8007406:	d0f0      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007408:	4b31      	ldr	r3, [pc, #196]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007410:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d02f      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	d028      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007426:	4b2a      	ldr	r3, [pc, #168]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800742e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007430:	4b29      	ldr	r3, [pc, #164]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007436:	4b28      	ldr	r3, [pc, #160]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800743c:	4a24      	ldr	r2, [pc, #144]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007442:	4b23      	ldr	r3, [pc, #140]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b01      	cmp	r3, #1
 800744c:	d114      	bne.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800744e:	f7fa fc4d 	bl	8001cec <HAL_GetTick>
 8007452:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007454:	e00a      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007456:	f7fa fc49 	bl	8001cec <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007464:	4293      	cmp	r3, r2
 8007466:	d901      	bls.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e02a      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800746c:	4b18      	ldr	r3, [pc, #96]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0ee      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007484:	d10d      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007486:	4b12      	ldr	r3, [pc, #72]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800749a:	490d      	ldr	r1, [pc, #52]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800749c:	4313      	orrs	r3, r2
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	e005      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074a2:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	4a0a      	ldr	r2, [pc, #40]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80074ac:	6093      	str	r3, [r2, #8]
 80074ae:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ba:	4905      	ldr	r1, [pc, #20]	@ (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074bc:	4313      	orrs	r3, r2
 80074be:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	42470068 	.word	0x42470068
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40007000 	.word	0x40007000
 80074d8:	42470e40 	.word	0x42470e40

080074dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d13f      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80074fa:	4b24      	ldr	r3, [pc, #144]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007502:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d006      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007510:	d12f      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007512:	4b1f      	ldr	r3, [pc, #124]	@ (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007514:	617b      	str	r3, [r7, #20]
          break;
 8007516:	e02f      	b.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007518:	4b1c      	ldr	r3, [pc, #112]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007520:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007524:	d108      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007526:	4b19      	ldr	r3, [pc, #100]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800752e:	4a19      	ldr	r2, [pc, #100]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	e007      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007538:	4b14      	ldr	r3, [pc, #80]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007540:	4a14      	ldr	r2, [pc, #80]	@ (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007542:	fbb2 f3f3 	udiv	r3, r2, r3
 8007546:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007548:	4b10      	ldr	r3, [pc, #64]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754e:	099b      	lsrs	r3, r3, #6
 8007550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	fb02 f303 	mul.w	r3, r2, r3
 800755a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007562:	0f1b      	lsrs	r3, r3, #28
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	fbb2 f3f3 	udiv	r3, r2, r3
 800756e:	617b      	str	r3, [r7, #20]
          break;
 8007570:	e002      	b.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
          break;
 8007576:	bf00      	nop
        }
      }
      break;
 8007578:	e000      	b.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800757a:	bf00      	nop
    }
  }
  return frequency;
 800757c:	697b      	ldr	r3, [r7, #20]
}
 800757e:	4618      	mov	r0, r3
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	40023800 	.word	0x40023800
 8007590:	00bb8000 	.word	0x00bb8000
 8007594:	00f42400 	.word	0x00f42400

08007598 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e07b      	b.n	80076a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d108      	bne.n	80075c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ba:	d009      	beq.n	80075d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	61da      	str	r2, [r3, #28]
 80075c2:	e005      	b.n	80075d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fa f858 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007606:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007618:	431a      	orrs	r2, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007654:	ea42 0103 	orr.w	r1, r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 0104 	and.w	r1, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007676:	f003 0210 	and.w	r2, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007690:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e042      	b.n	8007742 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fa f9d9 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2224      	movs	r2, #36	@ 0x24
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f82c 	bl	800774c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007702:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007712:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007722:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800774c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007750:	b0c0      	sub	sp, #256	@ 0x100
 8007752:	af00      	add	r7, sp, #0
 8007754:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007768:	68d9      	ldr	r1, [r3, #12]
 800776a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	ea40 0301 	orr.w	r3, r0, r1
 8007774:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	431a      	orrs	r2, r3
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	431a      	orrs	r2, r3
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077a4:	f021 010c 	bic.w	r1, r1, #12
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077b2:	430b      	orrs	r3, r1
 80077b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c6:	6999      	ldr	r1, [r3, #24]
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	ea40 0301 	orr.w	r3, r0, r1
 80077d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	4b8f      	ldr	r3, [pc, #572]	@ (8007a18 <UART_SetConfig+0x2cc>)
 80077dc:	429a      	cmp	r2, r3
 80077de:	d005      	beq.n	80077ec <UART_SetConfig+0xa0>
 80077e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007a1c <UART_SetConfig+0x2d0>)
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d104      	bne.n	80077f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7ff fd80 	bl	80072f0 <HAL_RCC_GetPCLK2Freq>
 80077f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077f4:	e003      	b.n	80077fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077f6:	f7ff fd67 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 80077fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007808:	f040 810c 	bne.w	8007a24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800780c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007810:	2200      	movs	r2, #0
 8007812:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007816:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800781a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800781e:	4622      	mov	r2, r4
 8007820:	462b      	mov	r3, r5
 8007822:	1891      	adds	r1, r2, r2
 8007824:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007826:	415b      	adcs	r3, r3
 8007828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800782a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800782e:	4621      	mov	r1, r4
 8007830:	eb12 0801 	adds.w	r8, r2, r1
 8007834:	4629      	mov	r1, r5
 8007836:	eb43 0901 	adc.w	r9, r3, r1
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007846:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800784a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800784e:	4690      	mov	r8, r2
 8007850:	4699      	mov	r9, r3
 8007852:	4623      	mov	r3, r4
 8007854:	eb18 0303 	adds.w	r3, r8, r3
 8007858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800785c:	462b      	mov	r3, r5
 800785e:	eb49 0303 	adc.w	r3, r9, r3
 8007862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007872:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007876:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800787a:	460b      	mov	r3, r1
 800787c:	18db      	adds	r3, r3, r3
 800787e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007880:	4613      	mov	r3, r2
 8007882:	eb42 0303 	adc.w	r3, r2, r3
 8007886:	657b      	str	r3, [r7, #84]	@ 0x54
 8007888:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800788c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007890:	f7f8 ffd0 	bl	8000834 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4b61      	ldr	r3, [pc, #388]	@ (8007a20 <UART_SetConfig+0x2d4>)
 800789a:	fba3 2302 	umull	r2, r3, r3, r2
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	011c      	lsls	r4, r3, #4
 80078a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078b4:	4642      	mov	r2, r8
 80078b6:	464b      	mov	r3, r9
 80078b8:	1891      	adds	r1, r2, r2
 80078ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078bc:	415b      	adcs	r3, r3
 80078be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078c4:	4641      	mov	r1, r8
 80078c6:	eb12 0a01 	adds.w	sl, r2, r1
 80078ca:	4649      	mov	r1, r9
 80078cc:	eb43 0b01 	adc.w	fp, r3, r1
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e4:	4692      	mov	sl, r2
 80078e6:	469b      	mov	fp, r3
 80078e8:	4643      	mov	r3, r8
 80078ea:	eb1a 0303 	adds.w	r3, sl, r3
 80078ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078f2:	464b      	mov	r3, r9
 80078f4:	eb4b 0303 	adc.w	r3, fp, r3
 80078f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007908:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800790c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007910:	460b      	mov	r3, r1
 8007912:	18db      	adds	r3, r3, r3
 8007914:	643b      	str	r3, [r7, #64]	@ 0x40
 8007916:	4613      	mov	r3, r2
 8007918:	eb42 0303 	adc.w	r3, r2, r3
 800791c:	647b      	str	r3, [r7, #68]	@ 0x44
 800791e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007922:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007926:	f7f8 ff85 	bl	8000834 <__aeabi_uldivmod>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4611      	mov	r1, r2
 8007930:	4b3b      	ldr	r3, [pc, #236]	@ (8007a20 <UART_SetConfig+0x2d4>)
 8007932:	fba3 2301 	umull	r2, r3, r3, r1
 8007936:	095b      	lsrs	r3, r3, #5
 8007938:	2264      	movs	r2, #100	@ 0x64
 800793a:	fb02 f303 	mul.w	r3, r2, r3
 800793e:	1acb      	subs	r3, r1, r3
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007946:	4b36      	ldr	r3, [pc, #216]	@ (8007a20 <UART_SetConfig+0x2d4>)
 8007948:	fba3 2302 	umull	r2, r3, r3, r2
 800794c:	095b      	lsrs	r3, r3, #5
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007954:	441c      	add	r4, r3
 8007956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800795a:	2200      	movs	r2, #0
 800795c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007960:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007964:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007968:	4642      	mov	r2, r8
 800796a:	464b      	mov	r3, r9
 800796c:	1891      	adds	r1, r2, r2
 800796e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007970:	415b      	adcs	r3, r3
 8007972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007974:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007978:	4641      	mov	r1, r8
 800797a:	1851      	adds	r1, r2, r1
 800797c:	6339      	str	r1, [r7, #48]	@ 0x30
 800797e:	4649      	mov	r1, r9
 8007980:	414b      	adcs	r3, r1
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007990:	4659      	mov	r1, fp
 8007992:	00cb      	lsls	r3, r1, #3
 8007994:	4651      	mov	r1, sl
 8007996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800799a:	4651      	mov	r1, sl
 800799c:	00ca      	lsls	r2, r1, #3
 800799e:	4610      	mov	r0, r2
 80079a0:	4619      	mov	r1, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	4642      	mov	r2, r8
 80079a6:	189b      	adds	r3, r3, r2
 80079a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079ac:	464b      	mov	r3, r9
 80079ae:	460a      	mov	r2, r1
 80079b0:	eb42 0303 	adc.w	r3, r2, r3
 80079b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079cc:	460b      	mov	r3, r1
 80079ce:	18db      	adds	r3, r3, r3
 80079d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d2:	4613      	mov	r3, r2
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079e2:	f7f8 ff27 	bl	8000834 <__aeabi_uldivmod>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007a20 <UART_SetConfig+0x2d4>)
 80079ec:	fba3 1302 	umull	r1, r3, r3, r2
 80079f0:	095b      	lsrs	r3, r3, #5
 80079f2:	2164      	movs	r1, #100	@ 0x64
 80079f4:	fb01 f303 	mul.w	r3, r1, r3
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	3332      	adds	r3, #50	@ 0x32
 80079fe:	4a08      	ldr	r2, [pc, #32]	@ (8007a20 <UART_SetConfig+0x2d4>)
 8007a00:	fba2 2303 	umull	r2, r3, r2, r3
 8007a04:	095b      	lsrs	r3, r3, #5
 8007a06:	f003 0207 	and.w	r2, r3, #7
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4422      	add	r2, r4
 8007a12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a14:	e106      	b.n	8007c24 <UART_SetConfig+0x4d8>
 8007a16:	bf00      	nop
 8007a18:	40011000 	.word	0x40011000
 8007a1c:	40011400 	.word	0x40011400
 8007a20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a36:	4642      	mov	r2, r8
 8007a38:	464b      	mov	r3, r9
 8007a3a:	1891      	adds	r1, r2, r2
 8007a3c:	6239      	str	r1, [r7, #32]
 8007a3e:	415b      	adcs	r3, r3
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a46:	4641      	mov	r1, r8
 8007a48:	1854      	adds	r4, r2, r1
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	eb43 0501 	adc.w	r5, r3, r1
 8007a50:	f04f 0200 	mov.w	r2, #0
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	00eb      	lsls	r3, r5, #3
 8007a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a5e:	00e2      	lsls	r2, r4, #3
 8007a60:	4614      	mov	r4, r2
 8007a62:	461d      	mov	r5, r3
 8007a64:	4643      	mov	r3, r8
 8007a66:	18e3      	adds	r3, r4, r3
 8007a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	eb45 0303 	adc.w	r3, r5, r3
 8007a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a92:	4629      	mov	r1, r5
 8007a94:	008b      	lsls	r3, r1, #2
 8007a96:	4621      	mov	r1, r4
 8007a98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	008a      	lsls	r2, r1, #2
 8007aa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007aa4:	f7f8 fec6 	bl	8000834 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4b60      	ldr	r3, [pc, #384]	@ (8007c30 <UART_SetConfig+0x4e4>)
 8007aae:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	011c      	lsls	r4, r3, #4
 8007ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ac0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ac4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	61b9      	str	r1, [r7, #24]
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ad8:	4641      	mov	r1, r8
 8007ada:	1851      	adds	r1, r2, r1
 8007adc:	6139      	str	r1, [r7, #16]
 8007ade:	4649      	mov	r1, r9
 8007ae0:	414b      	adcs	r3, r1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af0:	4659      	mov	r1, fp
 8007af2:	00cb      	lsls	r3, r1, #3
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007afa:	4651      	mov	r1, sl
 8007afc:	00ca      	lsls	r2, r1, #3
 8007afe:	4610      	mov	r0, r2
 8007b00:	4619      	mov	r1, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	4642      	mov	r2, r8
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	460a      	mov	r2, r1
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b30:	4649      	mov	r1, r9
 8007b32:	008b      	lsls	r3, r1, #2
 8007b34:	4641      	mov	r1, r8
 8007b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	008a      	lsls	r2, r1, #2
 8007b3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b42:	f7f8 fe77 	bl	8000834 <__aeabi_uldivmod>
 8007b46:	4602      	mov	r2, r0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4b38      	ldr	r3, [pc, #224]	@ (8007c30 <UART_SetConfig+0x4e4>)
 8007b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b52:	095b      	lsrs	r3, r3, #5
 8007b54:	2264      	movs	r2, #100	@ 0x64
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
 8007b5a:	1acb      	subs	r3, r1, r3
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	3332      	adds	r3, #50	@ 0x32
 8007b60:	4a33      	ldr	r2, [pc, #204]	@ (8007c30 <UART_SetConfig+0x4e4>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b6c:	441c      	add	r4, r3
 8007b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b72:	2200      	movs	r2, #0
 8007b74:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b76:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	415b      	adcs	r3, r3
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	1851      	adds	r1, r2, r1
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	4649      	mov	r1, r9
 8007b94:	414b      	adcs	r3, r1
 8007b96:	607b      	str	r3, [r7, #4]
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	00cb      	lsls	r3, r1, #3
 8007ba8:	4651      	mov	r1, sl
 8007baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bae:	4651      	mov	r1, sl
 8007bb0:	00ca      	lsls	r2, r1, #3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4642      	mov	r2, r8
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	460a      	mov	r2, r1
 8007bc2:	eb42 0303 	adc.w	r3, r2, r3
 8007bc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007be0:	4649      	mov	r1, r9
 8007be2:	008b      	lsls	r3, r1, #2
 8007be4:	4641      	mov	r1, r8
 8007be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bea:	4641      	mov	r1, r8
 8007bec:	008a      	lsls	r2, r1, #2
 8007bee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bf2:	f7f8 fe1f 	bl	8000834 <__aeabi_uldivmod>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007c30 <UART_SetConfig+0x4e4>)
 8007bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	2164      	movs	r1, #100	@ 0x64
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	3332      	adds	r3, #50	@ 0x32
 8007c0e:	4a08      	ldr	r2, [pc, #32]	@ (8007c30 <UART_SetConfig+0x4e4>)
 8007c10:	fba2 2303 	umull	r2, r3, r2, r3
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4422      	add	r2, r4
 8007c22:	609a      	str	r2, [r3, #8]
}
 8007c24:	bf00      	nop
 8007c26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c30:	51eb851f 	.word	0x51eb851f

08007c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c34:	b084      	sub	sp, #16
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	f107 001c 	add.w	r0, r7, #28
 8007c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d123      	bne.n	8007c96 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d105      	bne.n	8007c8a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f9dc 	bl	8008048 <USB_CoreReset>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
 8007c94:	e01b      	b.n	8007cce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9d0 	bl	8008048 <USB_CoreReset>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cc0:	e005      	b.n	8007cce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cce:	7fbb      	ldrb	r3, [r7, #30]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d10b      	bne.n	8007cec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f043 0206 	orr.w	r2, r3, #6
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cf8:	b004      	add	sp, #16
 8007cfa:	4770      	bx	lr

08007cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f023 0201 	bic.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d115      	bne.n	8007d8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d6e:	200a      	movs	r0, #10
 8007d70:	f7f9 ffc8 	bl	8001d04 <HAL_Delay>
      ms += 10U;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	330a      	adds	r3, #10
 8007d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f956 	bl	800802c <USB_GetMode>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d01e      	beq.n	8007dc4 <USB_SetCurrentMode+0x84>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d8a:	d9f0      	bls.n	8007d6e <USB_SetCurrentMode+0x2e>
 8007d8c:	e01a      	b.n	8007dc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d115      	bne.n	8007dc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007da0:	200a      	movs	r0, #10
 8007da2:	f7f9 ffaf 	bl	8001d04 <HAL_Delay>
      ms += 10U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	330a      	adds	r3, #10
 8007daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f93d 	bl	800802c <USB_GetMode>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <USB_SetCurrentMode+0x84>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dbc:	d9f0      	bls.n	8007da0 <USB_SetCurrentMode+0x60>
 8007dbe:	e001      	b.n	8007dc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e005      	b.n	8007dd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8007dc8:	d101      	bne.n	8007dce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007df2:	d901      	bls.n	8007df8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e01b      	b.n	8007e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	daf2      	bge.n	8007de6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	019b      	lsls	r3, r3, #6
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e1c:	d901      	bls.n	8007e22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e006      	b.n	8007e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0320 	and.w	r3, r3, #32
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	d0f0      	beq.n	8007e10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e54:	d901      	bls.n	8007e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e018      	b.n	8007e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	daf2      	bge.n	8007e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2210      	movs	r2, #16
 8007e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e78:	d901      	bls.n	8007e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e006      	b.n	8007e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d0f0      	beq.n	8007e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b089      	sub	sp, #36	@ 0x24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	71fb      	strb	r3, [r7, #7]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d123      	bne.n	8007f06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ebe:	88bb      	ldrh	r3, [r7, #4]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	e018      	b.n	8007efe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	031a      	lsls	r2, r3, #12
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed8:	461a      	mov	r2, r3
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	3301      	adds	r3, #1
 8007efc:	61bb      	str	r3, [r7, #24]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d3e2      	bcc.n	8007ecc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3724      	adds	r7, #36	@ 0x24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b08b      	sub	sp, #44	@ 0x2c
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	089b      	lsrs	r3, r3, #2
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f32:	88fb      	ldrh	r3, [r7, #6]
 8007f34:	f003 0303 	and.w	r3, r3, #3
 8007f38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	e014      	b.n	8007f6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	3301      	adds	r3, #1
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f54:	3301      	adds	r3, #1
 8007f56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	3301      	adds	r3, #1
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	3301      	adds	r3, #1
 8007f68:	623b      	str	r3, [r7, #32]
 8007f6a:	6a3a      	ldr	r2, [r7, #32]
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d3e6      	bcc.n	8007f40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f72:	8bfb      	ldrh	r3, [r7, #30]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01e      	beq.n	8007fb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f82:	461a      	mov	r2, r3
 8007f84:	f107 0310 	add.w	r3, r7, #16
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	6a3b      	ldr	r3, [r7, #32]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	fa22 f303 	lsr.w	r3, r2, r3
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007faa:	8bfb      	ldrh	r3, [r7, #30]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fb0:	8bfb      	ldrh	r3, [r7, #30]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1ea      	bne.n	8007f8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	372c      	adds	r7, #44	@ 0x2c
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800801e:	68bb      	ldr	r3, [r7, #8]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	f003 0301 	and.w	r3, r3, #1
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3301      	adds	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008060:	d901      	bls.n	8008066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e01b      	b.n	800809e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	2b00      	cmp	r3, #0
 800806c:	daf2      	bge.n	8008054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f043 0201 	orr.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3301      	adds	r3, #1
 8008082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800808a:	d901      	bls.n	8008090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e006      	b.n	800809e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b01      	cmp	r3, #1
 800809a:	d0f0      	beq.n	800807e <USB_CoreReset+0x36>

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
	...

080080ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080ac:	b084      	sub	sp, #16
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080cc:	461a      	mov	r2, r3
 80080ce:	2300      	movs	r3, #0
 80080d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d119      	bne.n	8008136 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10a      	bne.n	8008120 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008118:	f043 0304 	orr.w	r3, r3, #4
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e014      	b.n	800814a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800812e:	f023 0304 	bic.w	r3, r3, #4
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	e009      	b.n	800814a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008144:	f023 0304 	bic.w	r3, r3, #4
 8008148:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800814a:	2110      	movs	r1, #16
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff fe43 	bl	8007dd8 <USB_FlushTxFifo>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff fe6d 	bl	8007e3c <USB_FlushRxFifo>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800816c:	2300      	movs	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	e015      	b.n	800819e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817e:	461a      	mov	r2, r3
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
 8008184:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008192:	461a      	mov	r2, r3
 8008194:	2300      	movs	r3, #0
 8008196:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	3301      	adds	r3, #1
 800819c:	613b      	str	r3, [r7, #16]
 800819e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081a2:	461a      	mov	r2, r3
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d3e3      	bcc.n	8008172 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f04f 32ff 	mov.w	r2, #4294967295
 80081b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a18      	ldr	r2, [pc, #96]	@ (800821c <USB_HostInit+0x170>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10b      	bne.n	80081d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <USB_HostInit+0x174>)
 80081cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a14      	ldr	r2, [pc, #80]	@ (8008224 <USB_HostInit+0x178>)
 80081d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80081d6:	e009      	b.n	80081ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2280      	movs	r2, #128	@ 0x80
 80081dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a11      	ldr	r2, [pc, #68]	@ (8008228 <USB_HostInit+0x17c>)
 80081e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a11      	ldr	r2, [pc, #68]	@ (800822c <USB_HostInit+0x180>)
 80081e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f043 0210 	orr.w	r2, r3, #16
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	4b0a      	ldr	r3, [pc, #40]	@ (8008230 <USB_HostInit+0x184>)
 8008206:	4313      	orrs	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800820c:	7dfb      	ldrb	r3, [r7, #23]
}
 800820e:	4618      	mov	r0, r3
 8008210:	3718      	adds	r7, #24
 8008212:	46bd      	mov	sp, r7
 8008214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008218:	b004      	add	sp, #16
 800821a:	4770      	bx	lr
 800821c:	40040000 	.word	0x40040000
 8008220:	01000200 	.word	0x01000200
 8008224:	00e00300 	.word	0x00e00300
 8008228:	00600080 	.word	0x00600080
 800822c:	004000e0 	.word	0x004000e0
 8008230:	a3200008 	.word	0xa3200008

08008234 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	68f9      	ldr	r1, [r7, #12]
 8008268:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800826c:	4313      	orrs	r3, r2
 800826e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d107      	bne.n	8008286 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800827c:	461a      	mov	r2, r3
 800827e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008282:	6053      	str	r3, [r2, #4]
 8008284:	e00c      	b.n	80082a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	2b02      	cmp	r3, #2
 800828a:	d107      	bne.n	800829c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008292:	461a      	mov	r2, r3
 8008294:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008298:	6053      	str	r3, [r2, #4]
 800829a:	e001      	b.n	80082a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082de:	2064      	movs	r0, #100	@ 0x64
 80082e0:	f7f9 fd10 	bl	8001d04 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80082f2:	200a      	movs	r0, #10
 80082f4:	f7f9 fd06 	bl	8001d04 <HAL_Delay>

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008312:	2300      	movs	r3, #0
 8008314:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008326:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d109      	bne.n	8008346 <USB_DriveVbus+0x44>
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008344:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800834c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008350:	d109      	bne.n	8008366 <USB_DriveVbus+0x64>
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d106      	bne.n	8008366 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008364:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	0c5b      	lsrs	r3, r3, #17
 8008392:	f003 0303 	and.w	r3, r3, #3
}
 8008396:	4618      	mov	r0, r3
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	b29b      	uxth	r3, r3
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	461a      	mov	r2, r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	70fb      	strb	r3, [r7, #3]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70bb      	strb	r3, [r7, #2]
 80083da:	4613      	mov	r3, r2
 80083dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083f2:	461a      	mov	r2, r3
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295
 80083f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80083fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d87c      	bhi.n	80084fc <USB_HC_Init+0x138>
 8008402:	a201      	add	r2, pc, #4	@ (adr r2, 8008408 <USB_HC_Init+0x44>)
 8008404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008408:	08008419 	.word	0x08008419
 800840c:	080084bf 	.word	0x080084bf
 8008410:	08008419 	.word	0x08008419
 8008414:	08008481 	.word	0x08008481
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008424:	461a      	mov	r2, r3
 8008426:	f240 439d 	movw	r3, #1181	@ 0x49d
 800842a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800842c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da10      	bge.n	8008456 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008434:	78fb      	ldrb	r3, [r7, #3]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	4413      	add	r3, r2
 800843c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	0151      	lsls	r1, r2, #5
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	440a      	add	r2, r1
 800844a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800844e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008452:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008454:	e055      	b.n	8008502 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a6f      	ldr	r2, [pc, #444]	@ (8008618 <USB_HC_Init+0x254>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d151      	bne.n	8008502 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	015a      	lsls	r2, r3, #5
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4413      	add	r3, r2
 8008466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	0151      	lsls	r1, r2, #5
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	440a      	add	r2, r1
 8008474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008478:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800847c:	60d3      	str	r3, [r2, #12]
      break;
 800847e:	e040      	b.n	8008502 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	4413      	add	r3, r2
 8008488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848c:	461a      	mov	r2, r3
 800848e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008492:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008498:	2b00      	cmp	r3, #0
 800849a:	da34      	bge.n	8008506 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	78fa      	ldrb	r2, [r7, #3]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80084bc:	e023      	b.n	8008506 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ca:	461a      	mov	r2, r3
 80084cc:	f240 2325 	movw	r3, #549	@ 0x225
 80084d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da17      	bge.n	800850a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	015a      	lsls	r2, r3, #5
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	4413      	add	r3, r2
 80084e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	0151      	lsls	r1, r2, #5
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	440a      	add	r2, r1
 80084f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80084f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80084fa:	e006      	b.n	800850a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	77fb      	strb	r3, [r7, #31]
      break;
 8008500:	e004      	b.n	800850c <USB_HC_Init+0x148>
      break;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <USB_HC_Init+0x148>
      break;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <USB_HC_Init+0x148>
      break;
 800850a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008518:	461a      	mov	r2, r3
 800851a:	2300      	movs	r3, #0
 800851c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	015a      	lsls	r2, r3, #5
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	4413      	add	r3, r2
 8008526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	0151      	lsls	r1, r2, #5
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	440a      	add	r2, r1
 8008534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	78fb      	ldrb	r3, [r7, #3]
 8008548:	f003 030f 	and.w	r3, r3, #15
 800854c:	2101      	movs	r1, #1
 800854e:	fa01 f303 	lsl.w	r3, r1, r3
 8008552:	6939      	ldr	r1, [r7, #16]
 8008554:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008558:	4313      	orrs	r3, r2
 800855a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008568:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da03      	bge.n	8008578 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e001      	b.n	800857c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fef9 	bl	8008374 <USB_GetHostSpeed>
 8008582:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008584:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008588:	2b02      	cmp	r3, #2
 800858a:	d106      	bne.n	800859a <USB_HC_Init+0x1d6>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d003      	beq.n	800859a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e001      	b.n	800859e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800859e:	787b      	ldrb	r3, [r7, #1]
 80085a0:	059b      	lsls	r3, r3, #22
 80085a2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085a6:	78bb      	ldrb	r3, [r7, #2]
 80085a8:	02db      	lsls	r3, r3, #11
 80085aa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085b4:	049b      	lsls	r3, r3, #18
 80085b6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80085bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085c2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	431a      	orrs	r2, r3
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085cc:	78fa      	ldrb	r2, [r7, #3]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085dc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80085de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	d003      	beq.n	80085ee <USB_HC_Init+0x22a>
 80085e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d10f      	bne.n	800860e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	78fa      	ldrb	r2, [r7, #3]
 80085fe:	0151      	lsls	r1, r2, #5
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	440a      	add	r2, r1
 8008604:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008608:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800860c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800860e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40040000 	.word	0x40040000

0800861c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	@ 0x30
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008638:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a5d      	ldr	r2, [pc, #372]	@ (80087b4 <USB_HC_StartXfer+0x198>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d12f      	bne.n	80086a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d11c      	bne.n	8008682 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	7c9b      	ldrb	r3, [r3, #18]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <USB_HC_StartXfer+0x3c>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	7c9b      	ldrb	r3, [r3, #18]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d124      	bne.n	80086a2 <USB_HC_StartXfer+0x86>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	799b      	ldrb	r3, [r3, #6]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d120      	bne.n	80086a2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	4413      	add	r3, r2
 8008668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	6a3a      	ldr	r2, [r7, #32]
 8008674:	440a      	add	r2, r1
 8008676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60d3      	str	r3, [r2, #12]
 8008680:	e00f      	b.n	80086a2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	791b      	ldrb	r3, [r3, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10b      	bne.n	80086a2 <USB_HC_StartXfer+0x86>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	795b      	ldrb	r3, [r3, #5]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d107      	bne.n	80086a2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	4619      	mov	r1, r3
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fb6b 	bl	8008d74 <USB_DoPing>
        return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e232      	b.n	8008b08 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	799b      	ldrb	r3, [r3, #6]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d158      	bne.n	800875c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80086aa:	2301      	movs	r3, #1
 80086ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	78db      	ldrb	r3, [r3, #3]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	8a92      	ldrh	r2, [r2, #20]
 80086bc:	fb03 f202 	mul.w	r2, r3, r2
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	61da      	str	r2, [r3, #28]
 80086c4:	e07c      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	7c9b      	ldrb	r3, [r3, #18]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d130      	bne.n	8008730 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	2bbc      	cmp	r3, #188	@ 0xbc
 80086d4:	d918      	bls.n	8008708 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	8a9b      	ldrh	r3, [r3, #20]
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d003      	beq.n	80086f8 <USB_HC_StartXfer+0xdc>
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d103      	bne.n	8008700 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2202      	movs	r2, #2
 80086fc:	60da      	str	r2, [r3, #12]
 80086fe:	e05f      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2201      	movs	r2, #1
 8008704:	60da      	str	r2, [r3, #12]
 8008706:	e05b      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d007      	beq.n	8008728 <USB_HC_StartXfer+0x10c>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	2b02      	cmp	r3, #2
 800871e:	d003      	beq.n	8008728 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2204      	movs	r2, #4
 8008724:	60da      	str	r2, [r3, #12]
 8008726:	e04b      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2203      	movs	r2, #3
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	e047      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d10d      	bne.n	8008752 <USB_HC_StartXfer+0x136>
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	8a92      	ldrh	r2, [r2, #20]
 800873e:	4293      	cmp	r3, r2
 8008740:	d907      	bls.n	8008752 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	8a92      	ldrh	r2, [r2, #20]
 8008748:	fb03 f202 	mul.w	r2, r3, r2
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	61da      	str	r2, [r3, #28]
 8008750:	e036      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	61da      	str	r2, [r3, #28]
 800875a:	e031      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d018      	beq.n	8008796 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	8a92      	ldrh	r2, [r2, #20]
 800876c:	4413      	add	r3, r2
 800876e:	3b01      	subs	r3, #1
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	8a92      	ldrh	r2, [r2, #20]
 8008774:	fbb3 f3f2 	udiv	r3, r3, r2
 8008778:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800877a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800877c:	8b7b      	ldrh	r3, [r7, #26]
 800877e:	429a      	cmp	r2, r3
 8008780:	d90b      	bls.n	800879a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008782:	8b7b      	ldrh	r3, [r7, #26]
 8008784:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008786:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	8a92      	ldrh	r2, [r2, #20]
 800878c:	fb03 f202 	mul.w	r2, r3, r2
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	61da      	str	r2, [r3, #28]
 8008794:	e001      	b.n	800879a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008796:	2301      	movs	r3, #1
 8008798:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	8a92      	ldrh	r2, [r2, #20]
 80087a8:	fb03 f202 	mul.w	r2, r3, r2
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	61da      	str	r2, [r3, #28]
 80087b0:	e006      	b.n	80087c0 <USB_HC_StartXfer+0x1a4>
 80087b2:	bf00      	nop
 80087b4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	69db      	ldr	r3, [r3, #28]
 80087c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087ca:	04d9      	lsls	r1, r3, #19
 80087cc:	4ba3      	ldr	r3, [pc, #652]	@ (8008a5c <USB_HC_StartXfer+0x440>)
 80087ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7d9b      	ldrb	r3, [r3, #22]
 80087d6:	075b      	lsls	r3, r3, #29
 80087d8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087dc:	69f9      	ldr	r1, [r7, #28]
 80087de:	0148      	lsls	r0, r1, #5
 80087e0:	6a39      	ldr	r1, [r7, #32]
 80087e2:	4401      	add	r1, r0
 80087e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6999      	ldr	r1, [r3, #24]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	6a3b      	ldr	r3, [r7, #32]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008802:	460a      	mov	r2, r1
 8008804:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	bf0c      	ite	eq
 8008816:	2301      	moveq	r3, #1
 8008818:	2300      	movne	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	6a3a      	ldr	r2, [r7, #32]
 8008832:	440a      	add	r2, r1
 8008834:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008838:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800883c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	7e7b      	ldrb	r3, [r7, #25]
 800884e:	075b      	lsls	r3, r3, #29
 8008850:	69f9      	ldr	r1, [r7, #28]
 8008852:	0148      	lsls	r0, r1, #5
 8008854:	6a39      	ldr	r1, [r7, #32]
 8008856:	4401      	add	r1, r0
 8008858:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800885c:	4313      	orrs	r3, r2
 800885e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	799b      	ldrb	r3, [r3, #6]
 8008864:	2b01      	cmp	r3, #1
 8008866:	f040 80c3 	bne.w	80089f0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	7c5b      	ldrb	r3, [r3, #17]
 800886e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008874:	4313      	orrs	r3, r2
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	0151      	lsls	r1, r2, #5
 800887a:	6a3a      	ldr	r2, [r7, #32]
 800887c:	440a      	add	r2, r1
 800887e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008886:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	6a3b      	ldr	r3, [r7, #32]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	69fa      	ldr	r2, [r7, #28]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	6a3a      	ldr	r2, [r7, #32]
 800889c:	440a      	add	r2, r1
 800889e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	79db      	ldrb	r3, [r3, #7]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d123      	bne.n	80088f8 <USB_HC_StartXfer+0x2dc>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	78db      	ldrb	r3, [r3, #3]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d11f      	bne.n	80088f8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	69fa      	ldr	r2, [r7, #28]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	6a3a      	ldr	r2, [r7, #32]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	6a3a      	ldr	r2, [r7, #32]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7c9b      	ldrb	r3, [r3, #18]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d003      	beq.n	8008908 <USB_HC_StartXfer+0x2ec>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	7c9b      	ldrb	r3, [r3, #18]
 8008904:	2b03      	cmp	r3, #3
 8008906:	d117      	bne.n	8008938 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800890c:	2b01      	cmp	r3, #1
 800890e:	d113      	bne.n	8008938 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	78db      	ldrb	r3, [r3, #3]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d10f      	bne.n	8008938 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	4413      	add	r3, r2
 8008920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	6a3a      	ldr	r2, [r7, #32]
 800892c:	440a      	add	r2, r1
 800892e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008936:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	7c9b      	ldrb	r3, [r3, #18]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d162      	bne.n	8008a06 <USB_HC_StartXfer+0x3ea>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	78db      	ldrb	r3, [r3, #3]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d15e      	bne.n	8008a06 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	3b01      	subs	r3, #1
 800894e:	2b03      	cmp	r3, #3
 8008950:	d858      	bhi.n	8008a04 <USB_HC_StartXfer+0x3e8>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <USB_HC_StartXfer+0x33c>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008969 	.word	0x08008969
 800895c:	0800898b 	.word	0x0800898b
 8008960:	080089ad 	.word	0x080089ad
 8008964:	080089cf 	.word	0x080089cf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	69fa      	ldr	r2, [r7, #28]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	440a      	add	r2, r1
 800897e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008986:	6053      	str	r3, [r2, #4]
          break;
 8008988:	e03d      	b.n	8008a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	6a3a      	ldr	r2, [r7, #32]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089a4:	f043 030e 	orr.w	r3, r3, #14
 80089a8:	6053      	str	r3, [r2, #4]
          break;
 80089aa:	e02c      	b.n	8008a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	6a3a      	ldr	r2, [r7, #32]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089ca:	6053      	str	r3, [r2, #4]
          break;
 80089cc:	e01b      	b.n	8008a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	6a3b      	ldr	r3, [r7, #32]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	0151      	lsls	r1, r2, #5
 80089e0:	6a3a      	ldr	r2, [r7, #32]
 80089e2:	440a      	add	r2, r1
 80089e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ec:	6053      	str	r3, [r2, #4]
          break;
 80089ee:	e00a      	b.n	8008a06 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fc:	461a      	mov	r2, r3
 80089fe:	2300      	movs	r3, #0
 8008a00:	6053      	str	r3, [r2, #4]
 8008a02:	e000      	b.n	8008a06 <USB_HC_StartXfer+0x3ea>
          break;
 8008a04:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a1c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	78db      	ldrb	r3, [r3, #3]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a2c:	613b      	str	r3, [r7, #16]
 8008a2e:	e003      	b.n	8008a38 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a36:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a3e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	6a3b      	ldr	r3, [r7, #32]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e055      	b.n	8008b08 <USB_HC_StartXfer+0x4ec>
 8008a5c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	78db      	ldrb	r3, [r3, #3]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d14e      	bne.n	8008b06 <USB_HC_StartXfer+0x4ea>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d04a      	beq.n	8008b06 <USB_HC_StartXfer+0x4ea>
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	79db      	ldrb	r3, [r3, #7]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d146      	bne.n	8008b06 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	7c9b      	ldrb	r3, [r3, #18]
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d831      	bhi.n	8008ae4 <USB_HC_StartXfer+0x4c8>
 8008a80:	a201      	add	r2, pc, #4	@ (adr r2, 8008a88 <USB_HC_StartXfer+0x46c>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008a99 	.word	0x08008a99
 8008a8c:	08008abd 	.word	0x08008abd
 8008a90:	08008a99 	.word	0x08008a99
 8008a94:	08008abd 	.word	0x08008abd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	3303      	adds	r3, #3
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008aa2:	8afa      	ldrh	r2, [r7, #22]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d91c      	bls.n	8008ae8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f043 0220 	orr.w	r2, r3, #32
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008aba:	e015      	b.n	8008ae8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	3303      	adds	r3, #3
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ac6:	8afa      	ldrh	r2, [r7, #22]
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d90a      	bls.n	8008aec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ae2:	e003      	b.n	8008aec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008ae4:	bf00      	nop
 8008ae6:	e002      	b.n	8008aee <USB_HC_StartXfer+0x4d2>
        break;
 8008ae8:	bf00      	nop
 8008aea:	e000      	b.n	8008aee <USB_HC_StartXfer+0x4d2>
        break;
 8008aec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6999      	ldr	r1, [r3, #24]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	785a      	ldrb	r2, [r3, #1]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	2000      	movs	r0, #0
 8008afe:	9000      	str	r0, [sp, #0]
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff f9c9 	bl	8007e98 <USB_WritePacket>
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3728      	adds	r7, #40	@ 0x28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	b29b      	uxth	r3, r3
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b089      	sub	sp, #36	@ 0x24
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	0c9b      	lsrs	r3, r3, #18
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	0fdb      	lsrs	r3, r3, #31
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	0fdb      	lsrs	r3, r3, #31
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	d10d      	bne.n	8008bb4 <USB_HC_Halt+0x82>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d10a      	bne.n	8008bb4 <USB_HC_Halt+0x82>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d005      	beq.n	8008bb0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d002      	beq.n	8008bb0 <USB_HC_Halt+0x7e>
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b03      	cmp	r3, #3
 8008bae:	d101      	bne.n	8008bb4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e0d8      	b.n	8008d66 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <USB_HC_Halt+0x8e>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d173      	bne.n	8008ca8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	0151      	lsls	r1, r2, #5
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	440a      	add	r2, r1
 8008bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f003 0320 	and.w	r3, r3, #32
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d14a      	bne.n	8008c82 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d133      	bne.n	8008c60 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c16:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	015a      	lsls	r2, r3, #5
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	4413      	add	r3, r2
 8008c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c36:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c44:	d82e      	bhi.n	8008ca4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c5c:	d0ec      	beq.n	8008c38 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c5e:	e081      	b.n	8008d64 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	0151      	lsls	r1, r2, #5
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	440a      	add	r2, r1
 8008c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c7e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c80:	e070      	b.n	8008d64 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	015a      	lsls	r2, r3, #5
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	0151      	lsls	r1, r2, #5
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	440a      	add	r2, r1
 8008c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ca0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca2:	e05f      	b.n	8008d64 <USB_HC_Halt+0x232>
            break;
 8008ca4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ca6:	e05d      	b.n	8008d64 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	0151      	lsls	r1, r2, #5
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	440a      	add	r2, r1
 8008cbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d133      	bne.n	8008d40 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	015a      	lsls	r2, r3, #5
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	4413      	add	r3, r2
 8008ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	0151      	lsls	r1, r2, #5
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	440a      	add	r2, r1
 8008cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	0151      	lsls	r1, r2, #5
 8008d0a:	69fa      	ldr	r2, [r7, #28]
 8008d0c:	440a      	add	r2, r1
 8008d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d24:	d81d      	bhi.n	8008d62 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3c:	d0ec      	beq.n	8008d18 <USB_HC_Halt+0x1e6>
 8008d3e:	e011      	b.n	8008d64 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d5e:	6013      	str	r3, [r2, #0]
 8008d60:	e000      	b.n	8008d64 <USB_HC_Halt+0x232>
          break;
 8008d62:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3724      	adds	r7, #36	@ 0x24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	04da      	lsls	r2, r3, #19
 8008d90:	4b15      	ldr	r3, [pc, #84]	@ (8008de8 <USB_DoPing+0x74>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	0151      	lsls	r1, r2, #5
 8008d98:	697a      	ldr	r2, [r7, #20]
 8008d9a:	440a      	add	r2, r1
 8008d9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008da0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008da4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	1ff80000 	.word	0x1ff80000

08008dec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7fe ff8c 	bl	8007d1e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e06:	2110      	movs	r1, #16
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7fe ffe5 	bl	8007dd8 <USB_FlushTxFifo>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff f80f 	bl	8007e3c <USB_FlushRxFifo>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	e01f      	b.n	8008e6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e62:	461a      	mov	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d9dc      	bls.n	8008e2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e74:	2300      	movs	r3, #0
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	e034      	b.n	8008ee4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ea0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eae:	461a      	mov	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ec0:	d80c      	bhi.n	8008edc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ed8:	d0ec      	beq.n	8008eb4 <USB_StopHost+0xc8>
 8008eda:	e000      	b.n	8008ede <USB_StopHost+0xf2>
        break;
 8008edc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b0f      	cmp	r3, #15
 8008ee8:	d9c7      	bls.n	8008e7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7fe fefb 	bl	8007cfc <USB_EnableGlobalInt>

  return ret;
 8008f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f10:	b590      	push	{r4, r7, lr}
 8008f12:	b089      	sub	sp, #36	@ 0x24
 8008f14:	af04      	add	r7, sp, #16
 8008f16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008f18:	2301      	movs	r3, #1
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	2102      	movs	r1, #2
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fc85 	bl	800982e <USBH_FindInterface>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2bff      	cmp	r3, #255	@ 0xff
 8008f2c:	d002      	beq.n	8008f34 <USBH_CDC_InterfaceInit+0x24>
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d901      	bls.n	8008f38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	e13d      	b.n	80091b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fc5a 	bl	80097f6 <USBH_SelectInterface>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e131      	b.n	80091b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008f56:	2050      	movs	r0, #80	@ 0x50
 8008f58:	f002 fb84 	bl	800b664 <malloc>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f70:	2302      	movs	r3, #2
 8008f72:	e11f      	b.n	80091b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f74:	2250      	movs	r2, #80	@ 0x50
 8008f76:	2100      	movs	r1, #0
 8008f78:	68b8      	ldr	r0, [r7, #8]
 8008f7a:	f002 fc31 	bl	800b7e0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	211a      	movs	r1, #26
 8008f84:	fb01 f303 	mul.w	r3, r1, r3
 8008f88:	4413      	add	r3, r2
 8008f8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	b25b      	sxtb	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	da15      	bge.n	8008fc2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	211a      	movs	r1, #26
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	211a      	movs	r1, #26
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fbc:	881a      	ldrh	r2, [r3, #0]
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	785b      	ldrb	r3, [r3, #1]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 ffbe 	bl	800af4a <USBH_AllocPipe>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	7819      	ldrb	r1, [r3, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	7858      	ldrb	r0, [r3, #1]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	8952      	ldrh	r2, [r2, #10]
 8008fee:	9202      	str	r2, [sp, #8]
 8008ff0:	2203      	movs	r2, #3
 8008ff2:	9201      	str	r2, [sp, #4]
 8008ff4:	9300      	str	r3, [sp, #0]
 8008ff6:	4623      	mov	r3, r4
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 ff76 	bl	800aeec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2200      	movs	r2, #0
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f002 fa85 	bl	800b518 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800900e:	2300      	movs	r3, #0
 8009010:	2200      	movs	r2, #0
 8009012:	210a      	movs	r1, #10
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fc0a 	bl	800982e <USBH_FindInterface>
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2bff      	cmp	r3, #255	@ 0xff
 8009022:	d002      	beq.n	800902a <USBH_CDC_InterfaceInit+0x11a>
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d901      	bls.n	800902e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800902a:	2302      	movs	r3, #2
 800902c:	e0c2      	b.n	80091b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	211a      	movs	r1, #26
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	4413      	add	r3, r2
 800903a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	b25b      	sxtb	r3, r3
 8009042:	2b00      	cmp	r3, #0
 8009044:	da16      	bge.n	8009074 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	211a      	movs	r1, #26
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	4413      	add	r3, r2
 8009052:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	211a      	movs	r1, #26
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800906c:	881a      	ldrh	r2, [r3, #0]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	835a      	strh	r2, [r3, #26]
 8009072:	e015      	b.n	80090a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	211a      	movs	r1, #26
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	4413      	add	r3, r2
 8009080:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009084:	781a      	ldrb	r2, [r3, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	211a      	movs	r1, #26
 8009090:	fb01 f303 	mul.w	r3, r1, r3
 8009094:	4413      	add	r3, r2
 8009096:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800909a:	881a      	ldrh	r2, [r3, #0]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	211a      	movs	r1, #26
 80090a6:	fb01 f303 	mul.w	r3, r1, r3
 80090aa:	4413      	add	r3, r2
 80090ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	b25b      	sxtb	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	da16      	bge.n	80090e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	211a      	movs	r1, #26
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090c8:	781a      	ldrb	r2, [r3, #0]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	211a      	movs	r1, #26
 80090d4:	fb01 f303 	mul.w	r3, r1, r3
 80090d8:	4413      	add	r3, r2
 80090da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090de:	881a      	ldrh	r2, [r3, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	835a      	strh	r2, [r3, #26]
 80090e4:	e015      	b.n	8009112 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	211a      	movs	r1, #26
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	4413      	add	r3, r2
 80090f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	211a      	movs	r1, #26
 8009102:	fb01 f303 	mul.w	r3, r1, r3
 8009106:	4413      	add	r3, r2
 8009108:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800910c:	881a      	ldrh	r2, [r3, #0]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	7b9b      	ldrb	r3, [r3, #14]
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 ff16 	bl	800af4a <USBH_AllocPipe>
 800911e:	4603      	mov	r3, r0
 8009120:	461a      	mov	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	7bdb      	ldrb	r3, [r3, #15]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 ff0c 	bl	800af4a <USBH_AllocPipe>
 8009132:	4603      	mov	r3, r0
 8009134:	461a      	mov	r2, r3
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	7b59      	ldrb	r1, [r3, #13]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	7b98      	ldrb	r0, [r3, #14]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	8b12      	ldrh	r2, [r2, #24]
 8009152:	9202      	str	r2, [sp, #8]
 8009154:	2202      	movs	r2, #2
 8009156:	9201      	str	r2, [sp, #4]
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	4623      	mov	r3, r4
 800915c:	4602      	mov	r2, r0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fec4 	bl	800aeec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	7b19      	ldrb	r1, [r3, #12]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	7bd8      	ldrb	r0, [r3, #15]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	8b52      	ldrh	r2, [r2, #26]
 800917c:	9202      	str	r2, [sp, #8]
 800917e:	2202      	movs	r2, #2
 8009180:	9201      	str	r2, [sp, #4]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4623      	mov	r3, r4
 8009186:	4602      	mov	r2, r0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 feaf 	bl	800aeec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7b5b      	ldrb	r3, [r3, #13]
 800919a:	2200      	movs	r2, #0
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f002 f9ba 	bl	800b518 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	7b1b      	ldrb	r3, [r3, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f002 f9b3 	bl	800b518 <USBH_LL_SetToggle>

  return USBH_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd90      	pop	{r4, r7, pc}

080091bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00e      	beq.n	80091f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fea4 	bl	800af2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 fecf 	bl	800af8c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	7b1b      	ldrb	r3, [r3, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00e      	beq.n	800921a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	7b1b      	ldrb	r3, [r3, #12]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f001 fe91 	bl	800af2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	7b1b      	ldrb	r3, [r3, #12]
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 febc 	bl	800af8c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	7b5b      	ldrb	r3, [r3, #13]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00e      	beq.n	8009240 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	7b5b      	ldrb	r3, [r3, #13]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fe7e 	bl	800af2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	7b5b      	ldrb	r3, [r3, #13]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f001 fea9 	bl	800af8c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009246:	69db      	ldr	r3, [r3, #28]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	4618      	mov	r0, r3
 8009256:	f002 fa0d 	bl	800b674 <free>
    phost->pActiveClass->pData = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009260:	2200      	movs	r2, #0
 8009262:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}

0800926e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3340      	adds	r3, #64	@ 0x40
 8009284:	4619      	mov	r1, r3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f8b1 	bl	80093ee <GetLineCoding>
 800928c:	4603      	mov	r3, r0
 800928e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800929c:	2102      	movs	r1, #2
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80092a2:	7afb      	ldrb	r3, [r7, #11]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80092b4:	2301      	movs	r3, #1
 80092b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	d877      	bhi.n	80093c0 <USBH_CDC_Process+0x114>
 80092d0:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <USBH_CDC_Process+0x2c>)
 80092d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d6:	bf00      	nop
 80092d8:	080092ed 	.word	0x080092ed
 80092dc:	080092f3 	.word	0x080092f3
 80092e0:	08009323 	.word	0x08009323
 80092e4:	08009397 	.word	0x08009397
 80092e8:	080093a5 	.word	0x080093a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]
      break;
 80092f0:	e06d      	b.n	80093ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f897 	bl	800942c <SetLineCoding>
 80092fe:	4603      	mov	r3, r0
 8009300:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2202      	movs	r2, #2
 800930c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009310:	e058      	b.n	80093c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d055      	beq.n	80093c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2204      	movs	r2, #4
 800931c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009320:	e050      	b.n	80093c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3340      	adds	r3, #64	@ 0x40
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f860 	bl	80093ee <GetLineCoding>
 800932e:	4603      	mov	r3, r0
 8009330:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d126      	bne.n	8009386 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800934a:	791b      	ldrb	r3, [r3, #4]
 800934c:	429a      	cmp	r2, r3
 800934e:	d13b      	bne.n	80093c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800935a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800935c:	429a      	cmp	r2, r3
 800935e:	d133      	bne.n	80093c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800936a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800936c:	429a      	cmp	r2, r3
 800936e:	d12b      	bne.n	80093c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009378:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800937a:	429a      	cmp	r2, r3
 800937c:	d124      	bne.n	80093c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f958 	bl	8009634 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009384:	e020      	b.n	80093c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d01d      	beq.n	80093c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2204      	movs	r2, #4
 8009390:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009394:	e018      	b.n	80093c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f867 	bl	800946a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8da 	bl	8009556 <CDC_ProcessReception>
      break;
 80093a2:	e014      	b.n	80093ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 f81a 	bl	800a3e0 <USBH_ClrFeature>
 80093ac:	4603      	mov	r3, r0
 80093ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10a      	bne.n	80093cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80093be:	e005      	b.n	80093cc <USBH_CDC_Process+0x120>

    default:
      break;
 80093c0:	bf00      	nop
 80093c2:	e004      	b.n	80093ce <USBH_CDC_Process+0x122>
      break;
 80093c4:	bf00      	nop
 80093c6:	e002      	b.n	80093ce <USBH_CDC_Process+0x122>
      break;
 80093c8:	bf00      	nop
 80093ca:	e000      	b.n	80093ce <USBH_CDC_Process+0x122>
      break;
 80093cc:	bf00      	nop

  }

  return status;
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	22a1      	movs	r2, #161	@ 0xa1
 80093fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2221      	movs	r2, #33	@ 0x21
 8009402:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2207      	movs	r2, #7
 8009414:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	2207      	movs	r2, #7
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fb14 	bl	800aa4a <USBH_CtlReq>
 8009422:	4603      	mov	r3, r0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2221      	movs	r2, #33	@ 0x21
 800943a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2220      	movs	r2, #32
 8009440:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2207      	movs	r2, #7
 8009452:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2207      	movs	r2, #7
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 faf5 	bl	800aa4a <USBH_CtlReq>
 8009460:	4603      	mov	r3, r0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b086      	sub	sp, #24
 800946e:	af02      	add	r7, sp, #8
 8009470:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800947c:	2300      	movs	r3, #0
 800947e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009486:	2b01      	cmp	r3, #1
 8009488:	d002      	beq.n	8009490 <CDC_ProcessTransmission+0x26>
 800948a:	2b02      	cmp	r3, #2
 800948c:	d023      	beq.n	80094d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800948e:	e05e      	b.n	800954e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	8b12      	ldrh	r2, [r2, #24]
 8009498:	4293      	cmp	r3, r2
 800949a:	d90b      	bls.n	80094b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	69d9      	ldr	r1, [r3, #28]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8b1a      	ldrh	r2, [r3, #24]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	7b5b      	ldrb	r3, [r3, #13]
 80094a8:	2001      	movs	r0, #1
 80094aa:	9000      	str	r0, [sp, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 fcda 	bl	800ae66 <USBH_BulkSendData>
 80094b2:	e00b      	b.n	80094cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	7b5b      	ldrb	r3, [r3, #13]
 80094c2:	2001      	movs	r0, #1
 80094c4:	9000      	str	r0, [sp, #0]
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f001 fccd 	bl	800ae66 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094d4:	e03b      	b.n	800954e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7b5b      	ldrb	r3, [r3, #13]
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fff1 	bl	800b4c4 <USBH_LL_GetURBState>
 80094e2:	4603      	mov	r3, r0
 80094e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d128      	bne.n	800953e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	8b12      	ldrh	r2, [r2, #24]
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d90e      	bls.n	8009516 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	8b12      	ldrh	r2, [r2, #24]
 8009500:	1a9a      	subs	r2, r3, r2
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	69db      	ldr	r3, [r3, #28]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	8b12      	ldrh	r2, [r2, #24]
 800950e:	441a      	add	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	61da      	str	r2, [r3, #28]
 8009514:	e002      	b.n	800951c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800952c:	e00e      	b.n	800954c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f868 	bl	800960c <USBH_CDC_TransmitCallback>
      break;
 800953c:	e006      	b.n	800954c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d103      	bne.n	800954c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800954c:	bf00      	nop
  }
}
 800954e:	bf00      	nop
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009568:	2300      	movs	r3, #0
 800956a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009572:	2b03      	cmp	r3, #3
 8009574:	d002      	beq.n	800957c <CDC_ProcessReception+0x26>
 8009576:	2b04      	cmp	r3, #4
 8009578:	d00e      	beq.n	8009598 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800957a:	e043      	b.n	8009604 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6a19      	ldr	r1, [r3, #32]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	8b5a      	ldrh	r2, [r3, #26]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	7b1b      	ldrb	r3, [r3, #12]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 fc91 	bl	800aeb0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2204      	movs	r2, #4
 8009592:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009596:	e035      	b.n	8009604 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	7b1b      	ldrb	r3, [r3, #12]
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 ff90 	bl	800b4c4 <USBH_LL_GetURBState>
 80095a4:	4603      	mov	r3, r0
 80095a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80095a8:	7cfb      	ldrb	r3, [r7, #19]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d129      	bne.n	8009602 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	7b1b      	ldrb	r3, [r3, #12]
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fef3 	bl	800b3a0 <USBH_LL_GetLastXferSize>
 80095ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d016      	beq.n	80095f4 <CDC_ProcessReception+0x9e>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	8b5b      	ldrh	r3, [r3, #26]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d110      	bne.n	80095f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1ad2      	subs	r2, r2, r3
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	6a1a      	ldr	r2, [r3, #32]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	441a      	add	r2, r3
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2203      	movs	r2, #3
 80095ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095f2:	e006      	b.n	8009602 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 f80f 	bl	8009620 <USBH_CDC_ReceiveCallback>
      break;
 8009602:	bf00      	nop
  }
}
 8009604:	bf00      	nop
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	4613      	mov	r3, r2
 8009654:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d101      	bne.n	8009660 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800965c:	2302      	movs	r3, #2
 800965e:	e029      	b.n	80096b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	79fa      	ldrb	r2, [r7, #7]
 8009664:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f81f 	bl	80096bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d003      	beq.n	80096ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f001 fdc3 	bl	800b238 <USBH_LL_Init>

  return USBH_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096c8:	2300      	movs	r3, #0
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e009      	b.n	80096e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	33e0      	adds	r3, #224	@ 0xe0
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	2200      	movs	r2, #0
 80096da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b0f      	cmp	r3, #15
 80096e6:	d9f2      	bls.n	80096ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	e009      	b.n	8009702 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009708:	d3f1      	bcc.n	80096ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2240      	movs	r2, #64	@ 0x40
 800972e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2201      	movs	r2, #1
 8009742:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	331c      	adds	r3, #28
 800975a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800975e:	2100      	movs	r1, #0
 8009760:	4618      	mov	r0, r3
 8009762:	f002 f83d 	bl	800b7e0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800976c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f002 f834 	bl	800b7e0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800977e:	2212      	movs	r2, #18
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f002 f82c 	bl	800b7e0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800978e:	223e      	movs	r2, #62	@ 0x3e
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f002 f824 	bl	800b7e0 <memset>

  return USBH_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d016      	beq.n	80097e4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10e      	bne.n	80097de <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	33de      	adds	r3, #222	@ 0xde
 80097d2:	6839      	ldr	r1, [r7, #0]
 80097d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	73fb      	strb	r3, [r7, #15]
 80097dc:	e004      	b.n	80097e8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80097de:	2302      	movs	r3, #2
 80097e0:	73fb      	strb	r3, [r7, #15]
 80097e2:	e001      	b.n	80097e8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80097e4:	2302      	movs	r3, #2
 80097e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b085      	sub	sp, #20
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	429a      	cmp	r2, r3
 8009810:	d204      	bcs.n	800981c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	78fa      	ldrb	r2, [r7, #3]
 8009816:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800981a:	e001      	b.n	8009820 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800981c:	2302      	movs	r3, #2
 800981e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800982e:	b480      	push	{r7}
 8009830:	b087      	sub	sp, #28
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	4608      	mov	r0, r1
 8009838:	4611      	mov	r1, r2
 800983a:	461a      	mov	r2, r3
 800983c:	4603      	mov	r3, r0
 800983e:	70fb      	strb	r3, [r7, #3]
 8009840:	460b      	mov	r3, r1
 8009842:	70bb      	strb	r3, [r7, #2]
 8009844:	4613      	mov	r3, r2
 8009846:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009856:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009858:	e025      	b.n	80098a6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	221a      	movs	r2, #26
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	3308      	adds	r3, #8
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	3302      	adds	r3, #2
 800986a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	795b      	ldrb	r3, [r3, #5]
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	429a      	cmp	r2, r3
 8009874:	d002      	beq.n	800987c <USBH_FindInterface+0x4e>
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	2bff      	cmp	r3, #255	@ 0xff
 800987a:	d111      	bne.n	80098a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009880:	78ba      	ldrb	r2, [r7, #2]
 8009882:	429a      	cmp	r2, r3
 8009884:	d002      	beq.n	800988c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009886:	78bb      	ldrb	r3, [r7, #2]
 8009888:	2bff      	cmp	r3, #255	@ 0xff
 800988a:	d109      	bne.n	80098a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009890:	787a      	ldrb	r2, [r7, #1]
 8009892:	429a      	cmp	r2, r3
 8009894:	d002      	beq.n	800989c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009896:	787b      	ldrb	r3, [r7, #1]
 8009898:	2bff      	cmp	r3, #255	@ 0xff
 800989a:	d101      	bne.n	80098a0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	e006      	b.n	80098ae <USBH_FindInterface+0x80>
    }
    if_ix++;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	3301      	adds	r3, #1
 80098a4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d9d6      	bls.n	800985a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80098ac:	23ff      	movs	r3, #255	@ 0xff
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 fcf4 	bl	800b2b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80098c8:	2101      	movs	r1, #1
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fe0d 	bl	800b4ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af04      	add	r7, sp, #16
 80098e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80098e4:	2302      	movs	r3, #2
 80098e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d102      	bne.n	80098fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2203      	movs	r2, #3
 80098fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b0b      	cmp	r3, #11
 8009906:	f200 81bb 	bhi.w	8009c80 <USBH_Process+0x3a4>
 800990a:	a201      	add	r2, pc, #4	@ (adr r2, 8009910 <USBH_Process+0x34>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009941 	.word	0x08009941
 8009914:	08009973 	.word	0x08009973
 8009918:	080099db 	.word	0x080099db
 800991c:	08009c1b 	.word	0x08009c1b
 8009920:	08009c81 	.word	0x08009c81
 8009924:	08009a7b 	.word	0x08009a7b
 8009928:	08009bc1 	.word	0x08009bc1
 800992c:	08009ab1 	.word	0x08009ab1
 8009930:	08009ad1 	.word	0x08009ad1
 8009934:	08009aef 	.word	0x08009aef
 8009938:	08009b33 	.word	0x08009b33
 800993c:	08009c03 	.word	0x08009c03
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 819b 	beq.w	8009c84 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009954:	20c8      	movs	r0, #200	@ 0xc8
 8009956:	f001 fe12 	bl	800b57e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 fd05 	bl	800b36a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009970:	e188      	b.n	8009c84 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009978:	2b01      	cmp	r3, #1
 800997a:	d107      	bne.n	800998c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800998a:	e18a      	b.n	8009ca2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009992:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009996:	d914      	bls.n	80099c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800999e:	3301      	adds	r3, #1
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d903      	bls.n	80099ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	220d      	movs	r2, #13
 80099b6:	701a      	strb	r2, [r3, #0]
      break;
 80099b8:	e173      	b.n	8009ca2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
      break;
 80099c0:	e16f      	b.n	8009ca2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80099c8:	f103 020a 	add.w	r2, r3, #10
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80099d2:	200a      	movs	r0, #10
 80099d4:	f001 fdd3 	bl	800b57e <USBH_Delay>
      break;
 80099d8:	e163      	b.n	8009ca2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099ea:	2104      	movs	r1, #4
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80099f0:	2064      	movs	r0, #100	@ 0x64
 80099f2:	f001 fdc4 	bl	800b57e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fc90 	bl	800b31c <USBH_LL_GetSpeed>
 80099fc:	4603      	mov	r3, r0
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2205      	movs	r2, #5
 8009a0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fa9b 	bl	800af4a <USBH_AllocPipe>
 8009a14:	4603      	mov	r3, r0
 8009a16:	461a      	mov	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009a1c:	2180      	movs	r1, #128	@ 0x80
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fa93 	bl	800af4a <USBH_AllocPipe>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7919      	ldrb	r1, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a40:	9202      	str	r2, [sp, #8]
 8009a42:	2200      	movs	r2, #0
 8009a44:	9201      	str	r2, [sp, #4]
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	4603      	mov	r3, r0
 8009a4a:	2280      	movs	r2, #128	@ 0x80
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fa4d 	bl	800aeec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	7959      	ldrb	r1, [r3, #5]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a66:	9202      	str	r2, [sp, #8]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	9201      	str	r2, [sp, #4]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2200      	movs	r2, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fa3a 	bl	800aeec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a78:	e113      	b.n	8009ca2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f916 	bl	8009cac <USBH_HandleEnum>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f040 80fd 	bne.w	8009c88 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d103      	bne.n	8009aa8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009aa6:	e0ef      	b.n	8009c88 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2207      	movs	r2, #7
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	e0eb      	b.n	8009c88 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80e8 	beq.w	8009c8c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2208      	movs	r2, #8
 8009acc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009ace:	e0dd      	b.n	8009c8c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc3a 	bl	800a352 <USBH_SetCfg>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 80d5 	bne.w	8009c90 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2209      	movs	r2, #9
 8009aea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009aec:	e0d0      	b.n	8009c90 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d016      	beq.n	8009b2a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009afc:	2101      	movs	r1, #1
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fc4a 	bl	800a398 <USBH_SetFeature>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d103      	bne.n	8009b18 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	220a      	movs	r2, #10
 8009b14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b16:	e0bd      	b.n	8009c94 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	f040 80b9 	bne.w	8009c94 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	220a      	movs	r2, #10
 8009b26:	701a      	strb	r2, [r3, #0]
      break;
 8009b28:	e0b4      	b.n	8009c94 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	701a      	strb	r2, [r3, #0]
      break;
 8009b30:	e0b0      	b.n	8009c94 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80ad 	beq.w	8009c98 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
 8009b4a:	e016      	b.n	8009b7a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b4c:	7bfa      	ldrb	r2, [r7, #15]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	32de      	adds	r2, #222	@ 0xde
 8009b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b56:	791a      	ldrb	r2, [r3, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d108      	bne.n	8009b74 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b62:	7bfa      	ldrb	r2, [r7, #15]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	32de      	adds	r2, #222	@ 0xde
 8009b68:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b72:	e005      	b.n	8009b80 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	3301      	adds	r3, #1
 8009b78:	73fb      	strb	r3, [r7, #15]
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0e5      	beq.n	8009b4c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	4798      	blx	r3
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2206      	movs	r2, #6
 8009ba0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ba8:	2103      	movs	r1, #3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bae:	e073      	b.n	8009c98 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	220d      	movs	r2, #13
 8009bb4:	701a      	strb	r2, [r3, #0]
      break;
 8009bb6:	e06f      	b.n	8009c98 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	220d      	movs	r2, #13
 8009bbc:	701a      	strb	r2, [r3, #0]
      break;
 8009bbe:	e06b      	b.n	8009c98 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d017      	beq.n	8009bfa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	4798      	blx	r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d103      	bne.n	8009bea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	220b      	movs	r2, #11
 8009be6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009be8:	e058      	b.n	8009c9c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	d154      	bne.n	8009c9c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	220d      	movs	r2, #13
 8009bf6:	701a      	strb	r2, [r3, #0]
      break;
 8009bf8:	e050      	b.n	8009c9c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	220d      	movs	r2, #13
 8009bfe:	701a      	strb	r2, [r3, #0]
      break;
 8009c00:	e04c      	b.n	8009c9c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d049      	beq.n	8009ca0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	4798      	blx	r3
      }
      break;
 8009c18:	e042      	b.n	8009ca0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff fd4a 	bl	80096bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d009      	beq.n	8009c46 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c56:	2105      	movs	r1, #5
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d107      	bne.n	8009c78 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fe22 	bl	80098ba <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c76:	e014      	b.n	8009ca2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 fb19 	bl	800b2b0 <USBH_LL_Start>
      break;
 8009c7e:	e010      	b.n	8009ca2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c80:	bf00      	nop
 8009c82:	e00e      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c84:	bf00      	nop
 8009c86:	e00c      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c88:	bf00      	nop
 8009c8a:	e00a      	b.n	8009ca2 <USBH_Process+0x3c6>
    break;
 8009c8c:	bf00      	nop
 8009c8e:	e008      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c90:	bf00      	nop
 8009c92:	e006      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e004      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e002      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e000      	b.n	8009ca2 <USBH_Process+0x3c6>
      break;
 8009ca0:	bf00      	nop
  }
  return USBH_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b088      	sub	sp, #32
 8009cb0:	af04      	add	r7, sp, #16
 8009cb2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	785b      	ldrb	r3, [r3, #1]
 8009cc0:	2b07      	cmp	r3, #7
 8009cc2:	f200 81bd 	bhi.w	800a040 <USBH_HandleEnum+0x394>
 8009cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8009ccc <USBH_HandleEnum+0x20>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009ced 	.word	0x08009ced
 8009cd0:	08009da7 	.word	0x08009da7
 8009cd4:	08009e11 	.word	0x08009e11
 8009cd8:	08009e9b 	.word	0x08009e9b
 8009cdc:	08009f05 	.word	0x08009f05
 8009ce0:	08009f75 	.word	0x08009f75
 8009ce4:	08009fbb 	.word	0x08009fbb
 8009ce8:	0800a001 	.word	0x0800a001
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009cec:	2108      	movs	r1, #8
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa4c 	bl	800a18c <USBH_Get_DevDesc>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d12e      	bne.n	8009d5c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7919      	ldrb	r1, [r3, #4]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d22:	9202      	str	r2, [sp, #8]
 8009d24:	2200      	movs	r2, #0
 8009d26:	9201      	str	r2, [sp, #4]
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2280      	movs	r2, #128	@ 0x80
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 f8dc 	bl	800aeec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	7959      	ldrb	r1, [r3, #5]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d48:	9202      	str	r2, [sp, #8]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	9201      	str	r2, [sp, #4]
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	4603      	mov	r3, r0
 8009d52:	2200      	movs	r2, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 f8c9 	bl	800aeec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d5a:	e173      	b.n	800a044 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	f040 8170 	bne.w	800a044 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d903      	bls.n	8009d86 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	220d      	movs	r2, #13
 8009d82:	701a      	strb	r2, [r3, #0]
      break;
 8009d84:	e15e      	b.n	800a044 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	795b      	ldrb	r3, [r3, #5]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 f8fd 	bl	800af8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 f8f7 	bl	800af8c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
      break;
 8009da4:	e14e      	b.n	800a044 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009da6:	2112      	movs	r1, #18
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f9ef 	bl	800a18c <USBH_Get_DevDesc>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d103      	bne.n	8009dc0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009dbe:	e143      	b.n	800a048 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	f040 8140 	bne.w	800a048 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dce:	3301      	adds	r3, #1
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dde:	2b03      	cmp	r3, #3
 8009de0:	d903      	bls.n	8009dea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	220d      	movs	r2, #13
 8009de6:	701a      	strb	r2, [r3, #0]
      break;
 8009de8:	e12e      	b.n	800a048 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	795b      	ldrb	r3, [r3, #5]
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f001 f8cb 	bl	800af8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	791b      	ldrb	r3, [r3, #4]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f8c5 	bl	800af8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	701a      	strb	r2, [r3, #0]
      break;
 8009e0e:	e11b      	b.n	800a048 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e10:	2101      	movs	r1, #1
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa79 	bl	800a30a <USBH_SetAddress>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d130      	bne.n	8009e84 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009e22:	2002      	movs	r0, #2
 8009e24:	f001 fbab 	bl	800b57e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2203      	movs	r2, #3
 8009e34:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7919      	ldrb	r1, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e4a:	9202      	str	r2, [sp, #8]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	9201      	str	r2, [sp, #4]
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	4603      	mov	r3, r0
 8009e54:	2280      	movs	r2, #128	@ 0x80
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f848 	bl	800aeec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	7959      	ldrb	r1, [r3, #5]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e70:	9202      	str	r2, [sp, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	9201      	str	r2, [sp, #4]
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f835 	bl	800aeec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e82:	e0e3      	b.n	800a04c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	f040 80e0 	bne.w	800a04c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	220d      	movs	r2, #13
 8009e90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	705a      	strb	r2, [r3, #1]
      break;
 8009e98:	e0d8      	b.n	800a04c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e9a:	2109      	movs	r1, #9
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f9a1 	bl	800a1e4 <USBH_Get_CfgDesc>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2204      	movs	r2, #4
 8009eb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eb2:	e0cd      	b.n	800a050 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	f040 80ca 	bne.w	800a050 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d903      	bls.n	8009ede <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	220d      	movs	r2, #13
 8009eda:	701a      	strb	r2, [r3, #0]
      break;
 8009edc:	e0b8      	b.n	800a050 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	795b      	ldrb	r3, [r3, #5]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 f851 	bl	800af8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f84b 	bl	800af8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
      break;
 8009f02:	e0a5      	b.n	800a050 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f969 	bl	800a1e4 <USBH_Get_CfgDesc>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d103      	bne.n	8009f24 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2205      	movs	r2, #5
 8009f20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f22:	e097      	b.n	800a054 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	f040 8094 	bne.w	800a054 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f32:	3301      	adds	r3, #1
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d903      	bls.n	8009f4e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	220d      	movs	r2, #13
 8009f4a:	701a      	strb	r2, [r3, #0]
      break;
 8009f4c:	e082      	b.n	800a054 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	795b      	ldrb	r3, [r3, #5]
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f819 	bl	800af8c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	791b      	ldrb	r3, [r3, #4]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f813 	bl	800af8c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
      break;
 8009f72:	e06f      	b.n	800a054 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d019      	beq.n	8009fb2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f8a:	23ff      	movs	r3, #255	@ 0xff
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f953 	bl	800a238 <USBH_Get_StringDesc>
 8009f92:	4603      	mov	r3, r0
 8009f94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f96:	7bbb      	ldrb	r3, [r7, #14]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2206      	movs	r2, #6
 8009fa0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fa2:	e059      	b.n	800a058 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fa4:	7bbb      	ldrb	r3, [r7, #14]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d156      	bne.n	800a058 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2206      	movs	r2, #6
 8009fae:	705a      	strb	r2, [r3, #1]
      break;
 8009fb0:	e052      	b.n	800a058 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2206      	movs	r2, #6
 8009fb6:	705a      	strb	r2, [r3, #1]
      break;
 8009fb8:	e04e      	b.n	800a058 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d019      	beq.n	8009ff8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fd0:	23ff      	movs	r3, #255	@ 0xff
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 f930 	bl	800a238 <USBH_Get_StringDesc>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d103      	bne.n	8009fea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2207      	movs	r2, #7
 8009fe6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fe8:	e038      	b.n	800a05c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fea:	7bbb      	ldrb	r3, [r7, #14]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d135      	bne.n	800a05c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2207      	movs	r2, #7
 8009ff4:	705a      	strb	r2, [r3, #1]
      break;
 8009ff6:	e031      	b.n	800a05c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2207      	movs	r2, #7
 8009ffc:	705a      	strb	r2, [r3, #1]
      break;
 8009ffe:	e02d      	b.n	800a05c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a006:	2b00      	cmp	r3, #0
 800a008:	d017      	beq.n	800a03a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a016:	23ff      	movs	r3, #255	@ 0xff
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f90d 	bl	800a238 <USBH_Get_StringDesc>
 800a01e:	4603      	mov	r3, r0
 800a020:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d102      	bne.n	800a02e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a02c:	e018      	b.n	800a060 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d115      	bne.n	800a060 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
      break;
 800a038:	e012      	b.n	800a060 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73fb      	strb	r3, [r7, #15]
      break;
 800a03e:	e00f      	b.n	800a060 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a040:	bf00      	nop
 800a042:	e00e      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a044:	bf00      	nop
 800a046:	e00c      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a048:	bf00      	nop
 800a04a:	e00a      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a04c:	bf00      	nop
 800a04e:	e008      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a050:	bf00      	nop
 800a052:	e006      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a054:	bf00      	nop
 800a056:	e004      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a058:	bf00      	nop
 800a05a:	e002      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a05c:	bf00      	nop
 800a05e:	e000      	b.n	800a062 <USBH_HandleEnum+0x3b6>
      break;
 800a060:	bf00      	nop
  }
  return Status;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f804 	bl	800a0ae <USBH_HandleSof>
}
 800a0a6:	bf00      	nop
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b082      	sub	sp, #8
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b0b      	cmp	r3, #11
 800a0be:	d10a      	bne.n	800a0d6 <USBH_HandleSof+0x28>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d005      	beq.n	800a0d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	4798      	blx	r3
  }
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b083      	sub	sp, #12
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a0ee:	bf00      	nop
}
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a10a:	bf00      	nop
}
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 f8be 	bl	800b2e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	4619      	mov	r1, r3
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 ff0b 	bl	800af8c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	795b      	ldrb	r3, [r3, #5]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 ff05 	bl	800af8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af02      	add	r7, sp, #8
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a198:	887b      	ldrh	r3, [r7, #2]
 800a19a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19e:	d901      	bls.n	800a1a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e01b      	b.n	800a1dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1aa:	887b      	ldrh	r3, [r7, #2]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f872 	bl	800a2a0 <USBH_GetDescriptor>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a1c0:	7bfb      	ldrb	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d109      	bne.n	800a1da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1cc:	887a      	ldrh	r2, [r7, #2]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f929 	bl	800a428 <USBH_ParseDevDesc>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af02      	add	r7, sp, #8
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	331c      	adds	r3, #28
 800a1f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a1f6:	887b      	ldrh	r3, [r7, #2]
 800a1f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1fc:	d901      	bls.n	800a202 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e016      	b.n	800a230 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a202:	887b      	ldrh	r3, [r7, #2]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f846 	bl	800a2a0 <USBH_GetDescriptor>
 800a214:	4603      	mov	r3, r0
 800a216:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d107      	bne.n	800a22e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a21e:	887b      	ldrh	r3, [r7, #2]
 800a220:	461a      	mov	r2, r3
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f9af 	bl	800a588 <USBH_ParseCfgDesc>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	461a      	mov	r2, r3
 800a244:	460b      	mov	r3, r1
 800a246:	72fb      	strb	r3, [r7, #11]
 800a248:	4613      	mov	r3, r2
 800a24a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a24c:	893b      	ldrh	r3, [r7, #8]
 800a24e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a252:	d802      	bhi.n	800a25a <USBH_Get_StringDesc+0x22>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e01c      	b.n	800a298 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	b29b      	uxth	r3, r3
 800a262:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a266:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a26e:	893b      	ldrh	r3, [r7, #8]
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	460b      	mov	r3, r1
 800a274:	2100      	movs	r1, #0
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f812 	bl	800a2a0 <USBH_GetDescriptor>
 800a27c:	4603      	mov	r3, r0
 800a27e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a280:	7dfb      	ldrb	r3, [r7, #23]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d107      	bne.n	800a296 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a28c:	893a      	ldrh	r2, [r7, #8]
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fb8d 	bl	800a9b0 <USBH_ParseStringDesc>
  }

  return status;
 800a296:	7dfb      	ldrb	r3, [r7, #23]
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	72fb      	strb	r3, [r7, #11]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	789b      	ldrb	r3, [r3, #2]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d11c      	bne.n	800a2f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a2ba:	7afb      	ldrb	r3, [r7, #11]
 800a2bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2206      	movs	r2, #6
 800a2ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	893a      	ldrh	r2, [r7, #8]
 800a2d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a2d2:	893b      	ldrh	r3, [r7, #8]
 800a2d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2dc:	d104      	bne.n	800a2e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f240 4209 	movw	r2, #1033	@ 0x409
 800a2e4:	829a      	strh	r2, [r3, #20]
 800a2e6:	e002      	b.n	800a2ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8b3a      	ldrh	r2, [r7, #24]
 800a2f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a2f4:	8b3b      	ldrh	r3, [r7, #24]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 fba5 	bl	800aa4a <USBH_CtlReq>
 800a300:	4603      	mov	r3, r0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	789b      	ldrb	r3, [r3, #2]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d10f      	bne.n	800a33e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2205      	movs	r2, #5
 800a328:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a33e:	2200      	movs	r2, #0
 800a340:	2100      	movs	r1, #0
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fb81 	bl	800aa4a <USBH_CtlReq>
 800a348:	4603      	mov	r3, r0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	460b      	mov	r3, r1
 800a35c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	789b      	ldrb	r3, [r3, #2]
 800a362:	2b01      	cmp	r3, #1
 800a364:	d10e      	bne.n	800a384 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2209      	movs	r2, #9
 800a370:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	887a      	ldrh	r2, [r7, #2]
 800a376:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a384:	2200      	movs	r2, #0
 800a386:	2100      	movs	r1, #0
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fb5e 	bl	800aa4a <USBH_CtlReq>
 800a38e:	4603      	mov	r3, r0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	789b      	ldrb	r3, [r3, #2]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d10f      	bne.n	800a3cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2203      	movs	r2, #3
 800a3b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fb3a 	bl	800aa4a <USBH_CtlReq>
 800a3d6:	4603      	mov	r3, r0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d10f      	bne.n	800a414 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a406:	78fb      	ldrb	r3, [r7, #3]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fb16 	bl	800aa4a <USBH_CtlReq>
 800a41e:	4603      	mov	r3, r0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a43c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a448:	2302      	movs	r3, #2
 800a44a:	e094      	b.n	800a576 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	785a      	ldrb	r2, [r3, #1]
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	3302      	adds	r3, #2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	461a      	mov	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	3303      	adds	r3, #3
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	021b      	lsls	r3, r3, #8
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	b29a      	uxth	r2, r3
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	791a      	ldrb	r2, [r3, #4]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	795a      	ldrb	r2, [r3, #5]
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	799a      	ldrb	r2, [r3, #6]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	79da      	ldrb	r2, [r3, #7]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d004      	beq.n	800a4aa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d11b      	bne.n	800a4e2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	79db      	ldrb	r3, [r3, #7]
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	dc0f      	bgt.n	800a4d2 <USBH_ParseDevDesc+0xaa>
 800a4b2:	2b08      	cmp	r3, #8
 800a4b4:	db0f      	blt.n	800a4d6 <USBH_ParseDevDesc+0xae>
 800a4b6:	3b08      	subs	r3, #8
 800a4b8:	4a32      	ldr	r2, [pc, #200]	@ (800a584 <USBH_ParseDevDesc+0x15c>)
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	bf14      	ite	ne
 800a4c6:	2301      	movne	r3, #1
 800a4c8:	2300      	moveq	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d106      	bne.n	800a4de <USBH_ParseDevDesc+0xb6>
 800a4d0:	e001      	b.n	800a4d6 <USBH_ParseDevDesc+0xae>
 800a4d2:	2b40      	cmp	r3, #64	@ 0x40
 800a4d4:	d003      	beq.n	800a4de <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2208      	movs	r2, #8
 800a4da:	71da      	strb	r2, [r3, #7]
        break;
 800a4dc:	e000      	b.n	800a4e0 <USBH_ParseDevDesc+0xb8>
        break;
 800a4de:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4e0:	e00e      	b.n	800a500 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d107      	bne.n	800a4fc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	79db      	ldrb	r3, [r3, #7]
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d005      	beq.n	800a500 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	71da      	strb	r2, [r3, #7]
 800a4fa:	e001      	b.n	800a500 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	2b08      	cmp	r3, #8
 800a504:	d936      	bls.n	800a574 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	3308      	adds	r3, #8
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	461a      	mov	r2, r3
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	3309      	adds	r3, #9
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	b29b      	uxth	r3, r3
 800a518:	4313      	orrs	r3, r2
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	330a      	adds	r3, #10
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	330b      	adds	r3, #11
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	b29b      	uxth	r3, r3
 800a532:	4313      	orrs	r3, r2
 800a534:	b29a      	uxth	r2, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	330c      	adds	r3, #12
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	330d      	adds	r3, #13
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	021b      	lsls	r3, r3, #8
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	4313      	orrs	r3, r2
 800a54e:	b29a      	uxth	r2, r3
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	7b9a      	ldrb	r2, [r3, #14]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	7bda      	ldrb	r2, [r3, #15]
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	7c1a      	ldrb	r2, [r3, #16]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	7c5a      	ldrb	r2, [r3, #17]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a574:	7dfb      	ldrb	r3, [r7, #23]
}
 800a576:	4618      	mov	r0, r3
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	01000101 	.word	0x01000101

0800a588 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b08c      	sub	sp, #48	@ 0x30
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	4613      	mov	r3, r2
 800a594:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a59c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e0da      	b.n	800a770 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	2b09      	cmp	r3, #9
 800a5c4:	d002      	beq.n	800a5cc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	2209      	movs	r2, #9
 800a5ca:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	781a      	ldrb	r2, [r3, #0]
 800a5d0:	6a3b      	ldr	r3, [r7, #32]
 800a5d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	785a      	ldrb	r2, [r3, #1]
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	3302      	adds	r3, #2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	3303      	adds	r3, #3
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	021b      	lsls	r3, r3, #8
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5f6:	bf28      	it	cs
 800a5f8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	791a      	ldrb	r2, [r3, #4]
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	795a      	ldrb	r2, [r3, #5]
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	799a      	ldrb	r2, [r3, #6]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	79da      	ldrb	r2, [r3, #7]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	7a1a      	ldrb	r2, [r3, #8]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a62a:	88fb      	ldrh	r3, [r7, #6]
 800a62c:	2b09      	cmp	r3, #9
 800a62e:	f240 809d 	bls.w	800a76c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a632:	2309      	movs	r3, #9
 800a634:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a636:	2300      	movs	r3, #0
 800a638:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a63a:	e081      	b.n	800a740 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a63c:	f107 0316 	add.w	r3, r7, #22
 800a640:	4619      	mov	r1, r3
 800a642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a644:	f000 f9e7 	bl	800aa16 <USBH_GetNextDesc>
 800a648:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2b04      	cmp	r3, #4
 800a650:	d176      	bne.n	800a740 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b09      	cmp	r3, #9
 800a658:	d002      	beq.n	800a660 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	2209      	movs	r2, #9
 800a65e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a664:	221a      	movs	r2, #26
 800a666:	fb02 f303 	mul.w	r3, r2, r3
 800a66a:	3308      	adds	r3, #8
 800a66c:	6a3a      	ldr	r2, [r7, #32]
 800a66e:	4413      	add	r3, r2
 800a670:	3302      	adds	r3, #2
 800a672:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a676:	69f8      	ldr	r0, [r7, #28]
 800a678:	f000 f87e 	bl	800a778 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a67c:	2300      	movs	r3, #0
 800a67e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a686:	e043      	b.n	800a710 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a688:	f107 0316 	add.w	r3, r7, #22
 800a68c:	4619      	mov	r1, r3
 800a68e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a690:	f000 f9c1 	bl	800aa16 <USBH_GetNextDesc>
 800a694:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	d138      	bne.n	800a710 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	795b      	ldrb	r3, [r3, #5]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d113      	bne.n	800a6ce <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d003      	beq.n	800a6b6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	799b      	ldrb	r3, [r3, #6]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d10b      	bne.n	800a6ce <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	79db      	ldrb	r3, [r3, #7]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10b      	bne.n	800a6d6 <USBH_ParseCfgDesc+0x14e>
 800a6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b09      	cmp	r3, #9
 800a6c4:	d007      	beq.n	800a6d6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c8:	2209      	movs	r2, #9
 800a6ca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6cc:	e003      	b.n	800a6d6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	2207      	movs	r2, #7
 800a6d2:	701a      	strb	r2, [r3, #0]
 800a6d4:	e000      	b.n	800a6d8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6d6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6e0:	3201      	adds	r2, #1
 800a6e2:	00d2      	lsls	r2, r2, #3
 800a6e4:	211a      	movs	r1, #26
 800a6e6:	fb01 f303 	mul.w	r3, r1, r3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	6a3a      	ldr	r2, [r7, #32]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a6f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6f8:	69b9      	ldr	r1, [r7, #24]
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f870 	bl	800a7e0 <USBH_ParseEPDesc>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a706:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a70a:	3301      	adds	r3, #1
 800a70c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	791b      	ldrb	r3, [r3, #4]
 800a714:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a718:	429a      	cmp	r2, r3
 800a71a:	d204      	bcs.n	800a726 <USBH_ParseCfgDesc+0x19e>
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	885a      	ldrh	r2, [r3, #2]
 800a720:	8afb      	ldrh	r3, [r7, #22]
 800a722:	429a      	cmp	r2, r3
 800a724:	d8b0      	bhi.n	800a688 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	791b      	ldrb	r3, [r3, #4]
 800a72a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a72e:	429a      	cmp	r2, r3
 800a730:	d201      	bcs.n	800a736 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a732:	2303      	movs	r3, #3
 800a734:	e01c      	b.n	800a770 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a73a:	3301      	adds	r3, #1
 800a73c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a744:	2b01      	cmp	r3, #1
 800a746:	d805      	bhi.n	800a754 <USBH_ParseCfgDesc+0x1cc>
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	885a      	ldrh	r2, [r3, #2]
 800a74c:	8afb      	ldrh	r3, [r7, #22]
 800a74e:	429a      	cmp	r2, r3
 800a750:	f63f af74 	bhi.w	800a63c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	791b      	ldrb	r3, [r3, #4]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	bf28      	it	cs
 800a75c:	2302      	movcs	r3, #2
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a764:	429a      	cmp	r2, r3
 800a766:	d201      	bcs.n	800a76c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a768:	2303      	movs	r3, #3
 800a76a:	e001      	b.n	800a770 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a76c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a770:	4618      	mov	r0, r3
 800a772:	3730      	adds	r7, #48	@ 0x30
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781a      	ldrb	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	785a      	ldrb	r2, [r3, #1]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	789a      	ldrb	r2, [r3, #2]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	78da      	ldrb	r2, [r3, #3]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	bf28      	it	cs
 800a7ac:	2302      	movcs	r3, #2
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	795a      	ldrb	r2, [r3, #5]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	799a      	ldrb	r2, [r3, #6]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	79da      	ldrb	r2, [r3, #7]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	7a1a      	ldrb	r2, [r3, #8]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	721a      	strb	r2, [r3, #8]
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	781a      	ldrb	r2, [r3, #0]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	785a      	ldrb	r2, [r3, #1]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	789a      	ldrb	r2, [r3, #2]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	78da      	ldrb	r2, [r3, #3]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3304      	adds	r3, #4
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3305      	adds	r3, #5
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	021b      	lsls	r3, r3, #8
 800a820:	b29b      	uxth	r3, r3
 800a822:	4313      	orrs	r3, r2
 800a824:	b29a      	uxth	r2, r3
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	799a      	ldrb	r2, [r3, #6]
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	889b      	ldrh	r3, [r3, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d009      	beq.n	800a84e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a83e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a842:	d804      	bhi.n	800a84e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a84c:	d901      	bls.n	800a852 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a84e:	2303      	movs	r3, #3
 800a850:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d136      	bne.n	800a8ca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	78db      	ldrb	r3, [r3, #3]
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	2b02      	cmp	r3, #2
 800a866:	d108      	bne.n	800a87a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	889b      	ldrh	r3, [r3, #4]
 800a86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a870:	f240 8097 	bls.w	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a874:	2303      	movs	r3, #3
 800a876:	75fb      	strb	r3, [r7, #23]
 800a878:	e093      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	78db      	ldrb	r3, [r3, #3]
 800a87e:	f003 0303 	and.w	r3, r3, #3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d107      	bne.n	800a896 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	889b      	ldrh	r3, [r3, #4]
 800a88a:	2b40      	cmp	r3, #64	@ 0x40
 800a88c:	f240 8089 	bls.w	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a890:	2303      	movs	r3, #3
 800a892:	75fb      	strb	r3, [r7, #23]
 800a894:	e085      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	78db      	ldrb	r3, [r3, #3]
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d005      	beq.n	800a8ae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	78db      	ldrb	r3, [r3, #3]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d10a      	bne.n	800a8c4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	799b      	ldrb	r3, [r3, #6]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <USBH_ParseEPDesc+0xde>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	799b      	ldrb	r3, [r3, #6]
 800a8ba:	2b10      	cmp	r3, #16
 800a8bc:	d970      	bls.n	800a9a0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8c2:	e06d      	b.n	800a9a0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	75fb      	strb	r3, [r7, #23]
 800a8c8:	e06b      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d13c      	bne.n	800a94e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	78db      	ldrb	r3, [r3, #3]
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d005      	beq.n	800a8ec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	78db      	ldrb	r3, [r3, #3]
 800a8e4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	889b      	ldrh	r3, [r3, #4]
 800a8f0:	2b40      	cmp	r3, #64	@ 0x40
 800a8f2:	d956      	bls.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8f8:	e053      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	78db      	ldrb	r3, [r3, #3]
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	2b01      	cmp	r3, #1
 800a904:	d10e      	bne.n	800a924 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	799b      	ldrb	r3, [r3, #6]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d007      	beq.n	800a91e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a912:	2b10      	cmp	r3, #16
 800a914:	d803      	bhi.n	800a91e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a91a:	2b40      	cmp	r3, #64	@ 0x40
 800a91c:	d941      	bls.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a91e:	2303      	movs	r3, #3
 800a920:	75fb      	strb	r3, [r7, #23]
 800a922:	e03e      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	f003 0303 	and.w	r3, r3, #3
 800a92c:	2b03      	cmp	r3, #3
 800a92e:	d10b      	bne.n	800a948 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	799b      	ldrb	r3, [r3, #6]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d004      	beq.n	800a942 <USBH_ParseEPDesc+0x162>
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	889b      	ldrh	r3, [r3, #4]
 800a93c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a940:	d32f      	bcc.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a942:	2303      	movs	r3, #3
 800a944:	75fb      	strb	r3, [r7, #23]
 800a946:	e02c      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a948:	2303      	movs	r3, #3
 800a94a:	75fb      	strb	r3, [r7, #23]
 800a94c:	e029      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a954:	2b02      	cmp	r3, #2
 800a956:	d120      	bne.n	800a99a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	78db      	ldrb	r3, [r3, #3]
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d106      	bne.n	800a972 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	889b      	ldrh	r3, [r3, #4]
 800a968:	2b08      	cmp	r3, #8
 800a96a:	d01a      	beq.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a96c:	2303      	movs	r3, #3
 800a96e:	75fb      	strb	r3, [r7, #23]
 800a970:	e017      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	78db      	ldrb	r3, [r3, #3]
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d10a      	bne.n	800a994 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	799b      	ldrb	r3, [r3, #6]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <USBH_ParseEPDesc+0x1ae>
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	889b      	ldrh	r3, [r3, #4]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d909      	bls.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a98e:	2303      	movs	r3, #3
 800a990:	75fb      	strb	r3, [r7, #23]
 800a992:	e006      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a994:	2303      	movs	r3, #3
 800a996:	75fb      	strb	r3, [r7, #23]
 800a998:	e003      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a99a:	2303      	movs	r3, #3
 800a99c:	75fb      	strb	r3, [r7, #23]
 800a99e:	e000      	b.n	800a9a2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9a0:	bf00      	nop
  }

  return status;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d120      	bne.n	800aa0a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	1e9a      	subs	r2, r3, #2
 800a9ce:	88fb      	ldrh	r3, [r7, #6]
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	bf28      	it	cs
 800a9d4:	4613      	movcs	r3, r2
 800a9d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	3302      	adds	r3, #2
 800a9dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	82fb      	strh	r3, [r7, #22]
 800a9e2:	e00b      	b.n	800a9fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9e4:	8afb      	ldrh	r3, [r7, #22]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	781a      	ldrb	r2, [r3, #0]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9f6:	8afb      	ldrh	r3, [r7, #22]
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	82fb      	strh	r3, [r7, #22]
 800a9fc:	8afa      	ldrh	r2, [r7, #22]
 800a9fe:	8abb      	ldrh	r3, [r7, #20]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d3ef      	bcc.n	800a9e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]
  }
}
 800aa0a:	bf00      	nop
 800aa0c:	371c      	adds	r7, #28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b085      	sub	sp, #20
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
 800aa1e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	7812      	ldrb	r2, [r2, #0]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4413      	add	r3, r2
 800aa3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b086      	sub	sp, #24
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	4613      	mov	r3, r2
 800aa56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	789b      	ldrb	r3, [r3, #2]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d002      	beq.n	800aa6a <USBH_CtlReq+0x20>
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d00f      	beq.n	800aa88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa68:	e027      	b.n	800aaba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2202      	movs	r2, #2
 800aa80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa82:	2301      	movs	r3, #1
 800aa84:	75fb      	strb	r3, [r7, #23]
      break;
 800aa86:	e018      	b.n	800aaba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 f81b 	bl	800aac4 <USBH_HandleControl>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa92:	7dfb      	ldrb	r3, [r7, #23]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <USBH_CtlReq+0x54>
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d106      	bne.n	800aaac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	761a      	strb	r2, [r3, #24]
      break;
 800aaaa:	e005      	b.n	800aab8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d102      	bne.n	800aab8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	709a      	strb	r2, [r3, #2]
      break;
 800aab8:	bf00      	nop
  }
  return status;
 800aaba:	7dfb      	ldrb	r3, [r7, #23]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	7e1b      	ldrb	r3, [r3, #24]
 800aad8:	3b01      	subs	r3, #1
 800aada:	2b0a      	cmp	r3, #10
 800aadc:	f200 8156 	bhi.w	800ad8c <USBH_HandleControl+0x2c8>
 800aae0:	a201      	add	r2, pc, #4	@ (adr r2, 800aae8 <USBH_HandleControl+0x24>)
 800aae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae6:	bf00      	nop
 800aae8:	0800ab15 	.word	0x0800ab15
 800aaec:	0800ab2f 	.word	0x0800ab2f
 800aaf0:	0800ab99 	.word	0x0800ab99
 800aaf4:	0800abbf 	.word	0x0800abbf
 800aaf8:	0800abf7 	.word	0x0800abf7
 800aafc:	0800ac21 	.word	0x0800ac21
 800ab00:	0800ac73 	.word	0x0800ac73
 800ab04:	0800ac95 	.word	0x0800ac95
 800ab08:	0800acd1 	.word	0x0800acd1
 800ab0c:	0800acf7 	.word	0x0800acf7
 800ab10:	0800ad35 	.word	0x0800ad35
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f103 0110 	add.w	r1, r3, #16
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f943 	bl	800adac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2202      	movs	r2, #2
 800ab2a:	761a      	strb	r2, [r3, #24]
      break;
 800ab2c:	e139      	b.n	800ada2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	795b      	ldrb	r3, [r3, #5]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 fcc5 	bl	800b4c4 <USBH_LL_GetURBState>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d11e      	bne.n	800ab82 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7c1b      	ldrb	r3, [r3, #16]
 800ab48:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8adb      	ldrh	r3, [r3, #22]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00a      	beq.n	800ab6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab56:	7b7b      	ldrb	r3, [r7, #13]
 800ab58:	2b80      	cmp	r3, #128	@ 0x80
 800ab5a:	d103      	bne.n	800ab64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2203      	movs	r2, #3
 800ab60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab62:	e115      	b.n	800ad90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2205      	movs	r2, #5
 800ab68:	761a      	strb	r2, [r3, #24]
      break;
 800ab6a:	e111      	b.n	800ad90 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab6c:	7b7b      	ldrb	r3, [r7, #13]
 800ab6e:	2b80      	cmp	r3, #128	@ 0x80
 800ab70:	d103      	bne.n	800ab7a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2209      	movs	r2, #9
 800ab76:	761a      	strb	r2, [r3, #24]
      break;
 800ab78:	e10a      	b.n	800ad90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2207      	movs	r2, #7
 800ab7e:	761a      	strb	r2, [r3, #24]
      break;
 800ab80:	e106      	b.n	800ad90 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b04      	cmp	r3, #4
 800ab86:	d003      	beq.n	800ab90 <USBH_HandleControl+0xcc>
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	f040 8100 	bne.w	800ad90 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	220b      	movs	r2, #11
 800ab94:	761a      	strb	r2, [r3, #24]
      break;
 800ab96:	e0fb      	b.n	800ad90 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6899      	ldr	r1, [r3, #8]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	899a      	ldrh	r2, [r3, #12]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	791b      	ldrb	r3, [r3, #4]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f93a 	bl	800ae2a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2204      	movs	r2, #4
 800abba:	761a      	strb	r2, [r3, #24]
      break;
 800abbc:	e0f1      	b.n	800ada2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	791b      	ldrb	r3, [r3, #4]
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fc7d 	bl	800b4c4 <USBH_LL_GetURBState>
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d102      	bne.n	800abda <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2209      	movs	r2, #9
 800abd8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800abda:	7bbb      	ldrb	r3, [r7, #14]
 800abdc:	2b05      	cmp	r3, #5
 800abde:	d102      	bne.n	800abe6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800abe0:	2303      	movs	r3, #3
 800abe2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abe4:	e0d6      	b.n	800ad94 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	2b04      	cmp	r3, #4
 800abea:	f040 80d3 	bne.w	800ad94 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	220b      	movs	r2, #11
 800abf2:	761a      	strb	r2, [r3, #24]
      break;
 800abf4:	e0ce      	b.n	800ad94 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6899      	ldr	r1, [r3, #8]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	899a      	ldrh	r2, [r3, #12]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	795b      	ldrb	r3, [r3, #5]
 800ac02:	2001      	movs	r0, #1
 800ac04:	9000      	str	r0, [sp, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 f8ea 	bl	800ade0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2206      	movs	r2, #6
 800ac1c:	761a      	strb	r2, [r3, #24]
      break;
 800ac1e:	e0c0      	b.n	800ada2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	795b      	ldrb	r3, [r3, #5]
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fc4c 	bl	800b4c4 <USBH_LL_GetURBState>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d103      	bne.n	800ac3e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2207      	movs	r2, #7
 800ac3a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac3c:	e0ac      	b.n	800ad98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	2b05      	cmp	r3, #5
 800ac42:	d105      	bne.n	800ac50 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	220c      	movs	r2, #12
 800ac48:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac4e:	e0a3      	b.n	800ad98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d103      	bne.n	800ac5e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2205      	movs	r2, #5
 800ac5a:	761a      	strb	r2, [r3, #24]
      break;
 800ac5c:	e09c      	b.n	800ad98 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac5e:	7bbb      	ldrb	r3, [r7, #14]
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	f040 8099 	bne.w	800ad98 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	220b      	movs	r2, #11
 800ac6a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac70:	e092      	b.n	800ad98 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	791b      	ldrb	r3, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	2100      	movs	r1, #0
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f8d5 	bl	800ae2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2208      	movs	r2, #8
 800ac90:	761a      	strb	r2, [r3, #24]

      break;
 800ac92:	e086      	b.n	800ada2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	791b      	ldrb	r3, [r3, #4]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fc12 	bl	800b4c4 <USBH_LL_GetURBState>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d105      	bne.n	800acb6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	220d      	movs	r2, #13
 800acae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acb4:	e072      	b.n	800ad9c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d103      	bne.n	800acc4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	220b      	movs	r2, #11
 800acc0:	761a      	strb	r2, [r3, #24]
      break;
 800acc2:	e06b      	b.n	800ad9c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	d168      	bne.n	800ad9c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800acca:	2303      	movs	r3, #3
 800accc:	73fb      	strb	r3, [r7, #15]
      break;
 800acce:	e065      	b.n	800ad9c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	795b      	ldrb	r3, [r3, #5]
 800acd4:	2201      	movs	r2, #1
 800acd6:	9200      	str	r2, [sp, #0]
 800acd8:	2200      	movs	r2, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f87f 	bl	800ade0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ace8:	b29a      	uxth	r2, r3
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	220a      	movs	r2, #10
 800acf2:	761a      	strb	r2, [r3, #24]
      break;
 800acf4:	e055      	b.n	800ada2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	795b      	ldrb	r3, [r3, #5]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fbe1 	bl	800b4c4 <USBH_LL_GetURBState>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d105      	bne.n	800ad18 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	220d      	movs	r2, #13
 800ad14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad16:	e043      	b.n	800ada0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d103      	bne.n	800ad26 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2209      	movs	r2, #9
 800ad22:	761a      	strb	r2, [r3, #24]
      break;
 800ad24:	e03c      	b.n	800ada0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b04      	cmp	r3, #4
 800ad2a:	d139      	bne.n	800ada0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	220b      	movs	r2, #11
 800ad30:	761a      	strb	r2, [r3, #24]
      break;
 800ad32:	e035      	b.n	800ada0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	7e5b      	ldrb	r3, [r3, #25]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	765a      	strb	r2, [r3, #25]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7e5b      	ldrb	r3, [r3, #25]
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d806      	bhi.n	800ad56 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2201      	movs	r2, #1
 800ad52:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad54:	e025      	b.n	800ada2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad5c:	2106      	movs	r1, #6
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	795b      	ldrb	r3, [r3, #5]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f90c 	bl	800af8c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f906 	bl	800af8c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad86:	2302      	movs	r3, #2
 800ad88:	73fb      	strb	r3, [r7, #15]
      break;
 800ad8a:	e00a      	b.n	800ada2 <USBH_HandleControl+0x2de>

    default:
      break;
 800ad8c:	bf00      	nop
 800ad8e:	e008      	b.n	800ada2 <USBH_HandleControl+0x2de>
      break;
 800ad90:	bf00      	nop
 800ad92:	e006      	b.n	800ada2 <USBH_HandleControl+0x2de>
      break;
 800ad94:	bf00      	nop
 800ad96:	e004      	b.n	800ada2 <USBH_HandleControl+0x2de>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e002      	b.n	800ada2 <USBH_HandleControl+0x2de>
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e000      	b.n	800ada2 <USBH_HandleControl+0x2de>
      break;
 800ada0:	bf00      	nop
  }

  return status;
 800ada2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af04      	add	r7, sp, #16
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adba:	79f9      	ldrb	r1, [r7, #7]
 800adbc:	2300      	movs	r3, #0
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	2308      	movs	r3, #8
 800adc2:	9302      	str	r3, [sp, #8]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	2300      	movs	r3, #0
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	2300      	movs	r3, #0
 800adce:	2200      	movs	r2, #0
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 fb46 	bl	800b462 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af04      	add	r7, sp, #16
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4611      	mov	r1, r2
 800adec:	461a      	mov	r2, r3
 800adee:	460b      	mov	r3, r1
 800adf0:	80fb      	strh	r3, [r7, #6]
 800adf2:	4613      	mov	r3, r2
 800adf4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae04:	7979      	ldrb	r1, [r7, #5]
 800ae06:	7e3b      	ldrb	r3, [r7, #24]
 800ae08:	9303      	str	r3, [sp, #12]
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	9301      	str	r3, [sp, #4]
 800ae12:	2301      	movs	r3, #1
 800ae14:	9300      	str	r3, [sp, #0]
 800ae16:	2300      	movs	r3, #0
 800ae18:	2200      	movs	r2, #0
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f000 fb21 	bl	800b462 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3710      	adds	r7, #16
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b088      	sub	sp, #32
 800ae2e:	af04      	add	r7, sp, #16
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	4611      	mov	r1, r2
 800ae36:	461a      	mov	r2, r3
 800ae38:	460b      	mov	r3, r1
 800ae3a:	80fb      	strh	r3, [r7, #6]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae40:	7979      	ldrb	r1, [r7, #5]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9303      	str	r3, [sp, #12]
 800ae46:	88fb      	ldrh	r3, [r7, #6]
 800ae48:	9302      	str	r3, [sp, #8]
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	2300      	movs	r3, #0
 800ae54:	2201      	movs	r2, #1
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 fb03 	bl	800b462 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae5c:	2300      	movs	r3, #0

}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af04      	add	r7, sp, #16
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	4611      	mov	r1, r2
 800ae72:	461a      	mov	r2, r3
 800ae74:	460b      	mov	r3, r1
 800ae76:	80fb      	strh	r3, [r7, #6]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae8a:	7979      	ldrb	r1, [r7, #5]
 800ae8c:	7e3b      	ldrb	r3, [r7, #24]
 800ae8e:	9303      	str	r3, [sp, #12]
 800ae90:	88fb      	ldrh	r3, [r7, #6]
 800ae92:	9302      	str	r3, [sp, #8]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	9301      	str	r3, [sp, #4]
 800ae98:	2301      	movs	r3, #1
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 fade 	bl	800b462 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af04      	add	r7, sp, #16
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	4611      	mov	r1, r2
 800aebc:	461a      	mov	r2, r3
 800aebe:	460b      	mov	r3, r1
 800aec0:	80fb      	strh	r3, [r7, #6]
 800aec2:	4613      	mov	r3, r2
 800aec4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aec6:	7979      	ldrb	r1, [r7, #5]
 800aec8:	2300      	movs	r3, #0
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	9302      	str	r3, [sp, #8]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	2301      	movs	r3, #1
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2302      	movs	r3, #2
 800aeda:	2201      	movs	r2, #1
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 fac0 	bl	800b462 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	4608      	mov	r0, r1
 800aef6:	4611      	mov	r1, r2
 800aef8:	461a      	mov	r2, r3
 800aefa:	4603      	mov	r3, r0
 800aefc:	70fb      	strb	r3, [r7, #3]
 800aefe:	460b      	mov	r3, r1
 800af00:	70bb      	strb	r3, [r7, #2]
 800af02:	4613      	mov	r3, r2
 800af04:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af06:	7878      	ldrb	r0, [r7, #1]
 800af08:	78ba      	ldrb	r2, [r7, #2]
 800af0a:	78f9      	ldrb	r1, [r7, #3]
 800af0c:	8b3b      	ldrh	r3, [r7, #24]
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	7d3b      	ldrb	r3, [r7, #20]
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	7c3b      	ldrb	r3, [r7, #16]
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	4603      	mov	r3, r0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa53 	bl	800b3c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	3708      	adds	r7, #8
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}

0800af2a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af2a:	b580      	push	{r7, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
 800af32:	460b      	mov	r3, r1
 800af34:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa72 	bl	800b424 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	460b      	mov	r3, r1
 800af54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f836 	bl	800afc8 <USBH_GetFreePipe>
 800af5c:	4603      	mov	r3, r0
 800af5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af60:	89fb      	ldrh	r3, [r7, #14]
 800af62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af66:	4293      	cmp	r3, r2
 800af68:	d00a      	beq.n	800af80 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af6a:	78fa      	ldrb	r2, [r7, #3]
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	33e0      	adds	r3, #224	@ 0xe0
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	440b      	add	r3, r1
 800af7e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af80:	89fb      	ldrh	r3, [r7, #14]
 800af82:	b2db      	uxtb	r3, r3
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	460b      	mov	r3, r1
 800af96:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af98:	78fb      	ldrb	r3, [r7, #3]
 800af9a:	2b0f      	cmp	r3, #15
 800af9c:	d80d      	bhi.n	800afba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	33e0      	adds	r3, #224	@ 0xe0
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4413      	add	r3, r2
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	78fb      	ldrb	r3, [r7, #3]
 800afac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	33e0      	adds	r3, #224	@ 0xe0
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800afd4:	2300      	movs	r3, #0
 800afd6:	73fb      	strb	r3, [r7, #15]
 800afd8:	e00f      	b.n	800affa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	33e0      	adds	r3, #224	@ 0xe0
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d102      	bne.n	800aff4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	e007      	b.n	800b004 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	3301      	adds	r3, #1
 800aff8:	73fb      	strb	r3, [r7, #15]
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	2b0f      	cmp	r3, #15
 800affe:	d9ec      	bls.n	800afda <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b014:	2201      	movs	r2, #1
 800b016:	490e      	ldr	r1, [pc, #56]	@ (800b050 <MX_USB_HOST_Init+0x40>)
 800b018:	480e      	ldr	r0, [pc, #56]	@ (800b054 <MX_USB_HOST_Init+0x44>)
 800b01a:	f7fe fb15 	bl	8009648 <USBH_Init>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d001      	beq.n	800b028 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b024:	f7f6 fa7c 	bl	8001520 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b028:	490b      	ldr	r1, [pc, #44]	@ (800b058 <MX_USB_HOST_Init+0x48>)
 800b02a:	480a      	ldr	r0, [pc, #40]	@ (800b054 <MX_USB_HOST_Init+0x44>)
 800b02c:	f7fe fbb9 	bl	80097a2 <USBH_RegisterClass>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b036:	f7f6 fa73 	bl	8001520 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b03a:	4806      	ldr	r0, [pc, #24]	@ (800b054 <MX_USB_HOST_Init+0x44>)
 800b03c:	f7fe fc3d 	bl	80098ba <USBH_Start>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b046:	f7f6 fa6b 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b04a:	bf00      	nop
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	0800b071 	.word	0x0800b071
 800b054:	20002304 	.word	0x20002304
 800b058:	2000000c 	.word	0x2000000c

0800b05c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b060:	4802      	ldr	r0, [pc, #8]	@ (800b06c <MX_USB_HOST_Process+0x10>)
 800b062:	f7fe fc3b 	bl	80098dc <USBH_Process>
}
 800b066:	bf00      	nop
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20002304 	.word	0x20002304

0800b070 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	460b      	mov	r3, r1
 800b07a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	3b01      	subs	r3, #1
 800b080:	2b04      	cmp	r3, #4
 800b082:	d819      	bhi.n	800b0b8 <USBH_UserProcess+0x48>
 800b084:	a201      	add	r2, pc, #4	@ (adr r2, 800b08c <USBH_UserProcess+0x1c>)
 800b086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08a:	bf00      	nop
 800b08c:	0800b0b9 	.word	0x0800b0b9
 800b090:	0800b0a9 	.word	0x0800b0a9
 800b094:	0800b0b9 	.word	0x0800b0b9
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0a1 	.word	0x0800b0a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0a0:	4b09      	ldr	r3, [pc, #36]	@ (800b0c8 <USBH_UserProcess+0x58>)
 800b0a2:	2203      	movs	r2, #3
 800b0a4:	701a      	strb	r2, [r3, #0]
  break;
 800b0a6:	e008      	b.n	800b0ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0a8:	4b07      	ldr	r3, [pc, #28]	@ (800b0c8 <USBH_UserProcess+0x58>)
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	701a      	strb	r2, [r3, #0]
  break;
 800b0ae:	e004      	b.n	800b0ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0b0:	4b05      	ldr	r3, [pc, #20]	@ (800b0c8 <USBH_UserProcess+0x58>)
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	701a      	strb	r2, [r3, #0]
  break;
 800b0b6:	e000      	b.n	800b0ba <USBH_UserProcess+0x4a>

  default:
  break;
 800b0b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	200026dc 	.word	0x200026dc

0800b0cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08a      	sub	sp, #40	@ 0x28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d4:	f107 0314 	add.w	r3, r7, #20
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	609a      	str	r2, [r3, #8]
 800b0e0:	60da      	str	r2, [r3, #12]
 800b0e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0ec:	d147      	bne.n	800b17e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	613b      	str	r3, [r7, #16]
 800b0f2:	4b25      	ldr	r3, [pc, #148]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	4a24      	ldr	r2, [pc, #144]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b0f8:	f043 0301 	orr.w	r3, r3, #1
 800b0fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0fe:	4b22      	ldr	r3, [pc, #136]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b102:	f003 0301 	and.w	r3, r3, #1
 800b106:	613b      	str	r3, [r7, #16]
 800b108:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b10a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b10e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b110:	2300      	movs	r3, #0
 800b112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b114:	2300      	movs	r3, #0
 800b116:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b118:	f107 0314 	add.w	r3, r7, #20
 800b11c:	4619      	mov	r1, r3
 800b11e:	481b      	ldr	r0, [pc, #108]	@ (800b18c <HAL_HCD_MspInit+0xc0>)
 800b120:	f7f7 fa96 	bl	8002650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b124:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b12a:	2302      	movs	r3, #2
 800b12c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b132:	2300      	movs	r3, #0
 800b134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b136:	230a      	movs	r3, #10
 800b138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b13a:	f107 0314 	add.w	r3, r7, #20
 800b13e:	4619      	mov	r1, r3
 800b140:	4812      	ldr	r0, [pc, #72]	@ (800b18c <HAL_HCD_MspInit+0xc0>)
 800b142:	f7f7 fa85 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b146:	4b10      	ldr	r3, [pc, #64]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b14a:	4a0f      	ldr	r2, [pc, #60]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b150:	6353      	str	r3, [r2, #52]	@ 0x34
 800b152:	2300      	movs	r3, #0
 800b154:	60fb      	str	r3, [r7, #12]
 800b156:	4b0c      	ldr	r3, [pc, #48]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b15a:	4a0b      	ldr	r2, [pc, #44]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b15c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b160:	6453      	str	r3, [r2, #68]	@ 0x44
 800b162:	4b09      	ldr	r3, [pc, #36]	@ (800b188 <HAL_HCD_MspInit+0xbc>)
 800b164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b16e:	2200      	movs	r2, #0
 800b170:	2100      	movs	r1, #0
 800b172:	2043      	movs	r0, #67	@ 0x43
 800b174:	f7f6 fec5 	bl	8001f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b178:	2043      	movs	r0, #67	@ 0x43
 800b17a:	f7f6 fede 	bl	8001f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b17e:	bf00      	nop
 800b180:	3728      	adds	r7, #40	@ 0x28
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40023800 	.word	0x40023800
 800b18c:	40020000 	.word	0x40020000

0800b190 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff73 	bl	800a08a <USBH_LL_IncTimer>
}
 800b1a4:	bf00      	nop
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe ffab 	bl	800a116 <USBH_LL_Connect>
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe ffb4 	bl	800a144 <USBH_LL_Disconnect>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b083      	sub	sp, #12
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fe ff65 	bl	800a0de <USBH_LL_PortEnabled>
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ff65 	bl	800a0fa <USBH_LL_PortDisabled>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b246:	2b01      	cmp	r3, #1
 800b248:	d12a      	bne.n	800b2a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b24a:	4a18      	ldr	r2, [pc, #96]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	4a15      	ldr	r2, [pc, #84]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b256:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b25a:	4b14      	ldr	r3, [pc, #80]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b25c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b260:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b262:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b264:	2208      	movs	r2, #8
 800b266:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b268:	4b10      	ldr	r3, [pc, #64]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b26a:	2201      	movs	r2, #1
 800b26c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b26e:	4b0f      	ldr	r3, [pc, #60]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b270:	2200      	movs	r2, #0
 800b272:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b274:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b276:	2202      	movs	r2, #2
 800b278:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b27a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b27c:	2200      	movs	r2, #0
 800b27e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b280:	480a      	ldr	r0, [pc, #40]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b282:	f7f7 fbb4 	bl	80029ee <HAL_HCD_Init>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b28c:	f7f6 f948 	bl	8001520 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b290:	4806      	ldr	r0, [pc, #24]	@ (800b2ac <USBH_LL_Init+0x74>)
 800b292:	f7f8 f815 	bl	80032c0 <HAL_HCD_GetCurrentFrame>
 800b296:	4603      	mov	r3, r0
 800b298:	4619      	mov	r1, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7fe fee6 	bl	800a06c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3708      	adds	r7, #8
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	200026e0 	.word	0x200026e0

0800b2b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7f7 ff82 	bl	80031d0 <HAL_HCD_Start>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2d0:	7bfb      	ldrb	r3, [r7, #15]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f000 f95e 	bl	800b594 <USBH_Get_USB_Status>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7f7 ff8a 	bl	8003216 <HAL_HCD_Stop>
 800b302:	4603      	mov	r3, r0
 800b304:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	4618      	mov	r0, r3
 800b30a:	f000 f943 	bl	800b594 <USBH_Get_USB_Status>
 800b30e:	4603      	mov	r3, r0
 800b310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b312:	7bbb      	ldrb	r3, [r7, #14]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b324:	2301      	movs	r3, #1
 800b326:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b32e:	4618      	mov	r0, r3
 800b330:	f7f7 ffd4 	bl	80032dc <HAL_HCD_GetCurrentSpeed>
 800b334:	4603      	mov	r3, r0
 800b336:	2b02      	cmp	r3, #2
 800b338:	d00c      	beq.n	800b354 <USBH_LL_GetSpeed+0x38>
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d80d      	bhi.n	800b35a <USBH_LL_GetSpeed+0x3e>
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d002      	beq.n	800b348 <USBH_LL_GetSpeed+0x2c>
 800b342:	2b01      	cmp	r3, #1
 800b344:	d003      	beq.n	800b34e <USBH_LL_GetSpeed+0x32>
 800b346:	e008      	b.n	800b35a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]
    break;
 800b34c:	e008      	b.n	800b360 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b34e:	2301      	movs	r3, #1
 800b350:	73fb      	strb	r3, [r7, #15]
    break;
 800b352:	e005      	b.n	800b360 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b354:	2302      	movs	r3, #2
 800b356:	73fb      	strb	r3, [r7, #15]
    break;
 800b358:	e002      	b.n	800b360 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b35a:	2301      	movs	r3, #1
 800b35c:	73fb      	strb	r3, [r7, #15]
    break;
 800b35e:	bf00      	nop
  }
  return  speed;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b380:	4618      	mov	r0, r3
 800b382:	f7f7 ff65 	bl	8003250 <HAL_HCD_ResetPort>
 800b386:	4603      	mov	r3, r0
 800b388:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b38a:	7bfb      	ldrb	r3, [r7, #15]
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 f901 	bl	800b594 <USBH_Get_USB_Status>
 800b392:	4603      	mov	r3, r0
 800b394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b396:	7bbb      	ldrb	r3, [r7, #14]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3b2:	78fa      	ldrb	r2, [r7, #3]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7f7 ff6d 	bl	8003296 <HAL_HCD_HC_GetXferCount>
 800b3bc:	4603      	mov	r3, r0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}

0800b3c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3c6:	b590      	push	{r4, r7, lr}
 800b3c8:	b089      	sub	sp, #36	@ 0x24
 800b3ca:	af04      	add	r7, sp, #16
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	4608      	mov	r0, r1
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	70fb      	strb	r3, [r7, #3]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70bb      	strb	r3, [r7, #2]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3ee:	787c      	ldrb	r4, [r7, #1]
 800b3f0:	78ba      	ldrb	r2, [r7, #2]
 800b3f2:	78f9      	ldrb	r1, [r7, #3]
 800b3f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	4623      	mov	r3, r4
 800b406:	f7f7 fb59 	bl	8002abc <HAL_HCD_HC_Init>
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
 800b410:	4618      	mov	r0, r3
 800b412:	f000 f8bf 	bl	800b594 <USBH_Get_USB_Status>
 800b416:	4603      	mov	r3, r0
 800b418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b41a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3714      	adds	r7, #20
 800b420:	46bd      	mov	sp, r7
 800b422:	bd90      	pop	{r4, r7, pc}

0800b424 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b43e:	78fa      	ldrb	r2, [r7, #3]
 800b440:	4611      	mov	r1, r2
 800b442:	4618      	mov	r0, r3
 800b444:	f7f7 fbf2 	bl	8002c2c <HAL_HCD_HC_Halt>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	4618      	mov	r0, r3
 800b450:	f000 f8a0 	bl	800b594 <USBH_Get_USB_Status>
 800b454:	4603      	mov	r3, r0
 800b456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b458:	7bbb      	ldrb	r3, [r7, #14]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b462:	b590      	push	{r4, r7, lr}
 800b464:	b089      	sub	sp, #36	@ 0x24
 800b466:	af04      	add	r7, sp, #16
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	4608      	mov	r0, r1
 800b46c:	4611      	mov	r1, r2
 800b46e:	461a      	mov	r2, r3
 800b470:	4603      	mov	r3, r0
 800b472:	70fb      	strb	r3, [r7, #3]
 800b474:	460b      	mov	r3, r1
 800b476:	70bb      	strb	r3, [r7, #2]
 800b478:	4613      	mov	r3, r2
 800b47a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b47c:	2300      	movs	r3, #0
 800b47e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b48a:	787c      	ldrb	r4, [r7, #1]
 800b48c:	78ba      	ldrb	r2, [r7, #2]
 800b48e:	78f9      	ldrb	r1, [r7, #3]
 800b490:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b494:	9303      	str	r3, [sp, #12]
 800b496:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b498:	9302      	str	r3, [sp, #8]
 800b49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4a2:	9300      	str	r3, [sp, #0]
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	f7f7 fbe5 	bl	8002c74 <HAL_HCD_HC_SubmitRequest>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 f86f 	bl	800b594 <USBH_Get_USB_Status>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd90      	pop	{r4, r7, pc}

0800b4c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4d6:	78fa      	ldrb	r2, [r7, #3]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f7 fec6 	bl	800326c <HAL_HCD_HC_GetURBState>
 800b4e0:	4603      	mov	r3, r0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b082      	sub	sp, #8
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d103      	bne.n	800b508 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f872 	bl	800b5ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b508:	20c8      	movs	r0, #200	@ 0xc8
 800b50a:	f7f6 fbfb 	bl	8001d04 <HAL_Delay>
  return USBH_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
 800b524:	4613      	mov	r3, r2
 800b526:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b52e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b530:	78fa      	ldrb	r2, [r7, #3]
 800b532:	68f9      	ldr	r1, [r7, #12]
 800b534:	4613      	mov	r3, r2
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	3317      	adds	r3, #23
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b546:	78fa      	ldrb	r2, [r7, #3]
 800b548:	68f9      	ldr	r1, [r7, #12]
 800b54a:	4613      	mov	r3, r2
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	1a9b      	subs	r3, r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	440b      	add	r3, r1
 800b554:	333c      	adds	r3, #60	@ 0x3c
 800b556:	78ba      	ldrb	r2, [r7, #2]
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	e009      	b.n	800b570 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	68f9      	ldr	r1, [r7, #12]
 800b560:	4613      	mov	r3, r2
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	440b      	add	r3, r1
 800b56a:	333d      	adds	r3, #61	@ 0x3d
 800b56c:	78ba      	ldrb	r2, [r7, #2]
 800b56e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b57e:	b580      	push	{r7, lr}
 800b580:	b082      	sub	sp, #8
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7f6 fbbc 	bl	8001d04 <HAL_Delay>
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	2b03      	cmp	r3, #3
 800b5a6:	d817      	bhi.n	800b5d8 <USBH_Get_USB_Status+0x44>
 800b5a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b0 <USBH_Get_USB_Status+0x1c>)
 800b5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ae:	bf00      	nop
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5c7 	.word	0x0800b5c7
 800b5b8:	0800b5cd 	.word	0x0800b5cd
 800b5bc:	0800b5d3 	.word	0x0800b5d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c4:	e00b      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ca:	e008      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	e005      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5d2:	2302      	movs	r3, #2
 800b5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d6:	e002      	b.n	800b5de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	73fb      	strb	r3, [r7, #15]
    break;
 800b5dc:	bf00      	nop
  }
  return usb_status;
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af04      	add	r7, sp, #16
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800b5fe:	2300      	movs	r3, #0
 800b600:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800b60a:	7b7b      	ldrb	r3, [r7, #13]
 800b60c:	b299      	uxth	r1, r3
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	b29a      	uxth	r2, r3
 800b612:	2364      	movs	r3, #100	@ 0x64
 800b614:	9302      	str	r3, [sp, #8]
 800b616:	2301      	movs	r3, #1
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	f107 030b 	add.w	r3, r7, #11
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	2301      	movs	r3, #1
 800b622:	480f      	ldr	r0, [pc, #60]	@ (800b660 <MX_DriverVbusFS+0x74>)
 800b624:	f7f9 fd56 	bl	80050d4 <HAL_I2C_Mem_Read>
 800b628:	4603      	mov	r3, r0
 800b62a:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800b62c:	7b3a      	ldrb	r2, [r7, #12]
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	4313      	orrs	r3, r2
 800b632:	b2db      	uxtb	r3, r3
 800b634:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800b636:	7b7b      	ldrb	r3, [r7, #13]
 800b638:	b299      	uxth	r1, r3
 800b63a:	7bfb      	ldrb	r3, [r7, #15]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	2364      	movs	r3, #100	@ 0x64
 800b640:	9302      	str	r3, [sp, #8]
 800b642:	2301      	movs	r3, #1
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	f107 030c 	add.w	r3, r7, #12
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2301      	movs	r3, #1
 800b64e:	4804      	ldr	r0, [pc, #16]	@ (800b660 <MX_DriverVbusFS+0x74>)
 800b650:	f7f9 fc46 	bl	8004ee0 <HAL_I2C_Mem_Write>
 800b654:	4603      	mov	r3, r0
 800b656:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}
 800b660:	20000098 	.word	0x20000098

0800b664 <malloc>:
 800b664:	4b02      	ldr	r3, [pc, #8]	@ (800b670 <malloc+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f000 b82d 	b.w	800b6c8 <_malloc_r>
 800b66e:	bf00      	nop
 800b670:	2000002c 	.word	0x2000002c

0800b674 <free>:
 800b674:	4b02      	ldr	r3, [pc, #8]	@ (800b680 <free+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f000 b8f5 	b.w	800b868 <_free_r>
 800b67e:	bf00      	nop
 800b680:	2000002c 	.word	0x2000002c

0800b684 <sbrk_aligned>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	4e0f      	ldr	r6, [pc, #60]	@ (800b6c4 <sbrk_aligned+0x40>)
 800b688:	460c      	mov	r4, r1
 800b68a:	6831      	ldr	r1, [r6, #0]
 800b68c:	4605      	mov	r5, r0
 800b68e:	b911      	cbnz	r1, 800b696 <sbrk_aligned+0x12>
 800b690:	f000 f8ae 	bl	800b7f0 <_sbrk_r>
 800b694:	6030      	str	r0, [r6, #0]
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 f8a9 	bl	800b7f0 <_sbrk_r>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d103      	bne.n	800b6aa <sbrk_aligned+0x26>
 800b6a2:	f04f 34ff 	mov.w	r4, #4294967295
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	1cc4      	adds	r4, r0, #3
 800b6ac:	f024 0403 	bic.w	r4, r4, #3
 800b6b0:	42a0      	cmp	r0, r4
 800b6b2:	d0f8      	beq.n	800b6a6 <sbrk_aligned+0x22>
 800b6b4:	1a21      	subs	r1, r4, r0
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f000 f89a 	bl	800b7f0 <_sbrk_r>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	d1f2      	bne.n	800b6a6 <sbrk_aligned+0x22>
 800b6c0:	e7ef      	b.n	800b6a2 <sbrk_aligned+0x1e>
 800b6c2:	bf00      	nop
 800b6c4:	20002ac0 	.word	0x20002ac0

0800b6c8 <_malloc_r>:
 800b6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6cc:	1ccd      	adds	r5, r1, #3
 800b6ce:	f025 0503 	bic.w	r5, r5, #3
 800b6d2:	3508      	adds	r5, #8
 800b6d4:	2d0c      	cmp	r5, #12
 800b6d6:	bf38      	it	cc
 800b6d8:	250c      	movcc	r5, #12
 800b6da:	2d00      	cmp	r5, #0
 800b6dc:	4606      	mov	r6, r0
 800b6de:	db01      	blt.n	800b6e4 <_malloc_r+0x1c>
 800b6e0:	42a9      	cmp	r1, r5
 800b6e2:	d904      	bls.n	800b6ee <_malloc_r+0x26>
 800b6e4:	230c      	movs	r3, #12
 800b6e6:	6033      	str	r3, [r6, #0]
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7c4 <_malloc_r+0xfc>
 800b6f2:	f000 f869 	bl	800b7c8 <__malloc_lock>
 800b6f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6fa:	461c      	mov	r4, r3
 800b6fc:	bb44      	cbnz	r4, 800b750 <_malloc_r+0x88>
 800b6fe:	4629      	mov	r1, r5
 800b700:	4630      	mov	r0, r6
 800b702:	f7ff ffbf 	bl	800b684 <sbrk_aligned>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	4604      	mov	r4, r0
 800b70a:	d158      	bne.n	800b7be <_malloc_r+0xf6>
 800b70c:	f8d8 4000 	ldr.w	r4, [r8]
 800b710:	4627      	mov	r7, r4
 800b712:	2f00      	cmp	r7, #0
 800b714:	d143      	bne.n	800b79e <_malloc_r+0xd6>
 800b716:	2c00      	cmp	r4, #0
 800b718:	d04b      	beq.n	800b7b2 <_malloc_r+0xea>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	4639      	mov	r1, r7
 800b71e:	4630      	mov	r0, r6
 800b720:	eb04 0903 	add.w	r9, r4, r3
 800b724:	f000 f864 	bl	800b7f0 <_sbrk_r>
 800b728:	4581      	cmp	r9, r0
 800b72a:	d142      	bne.n	800b7b2 <_malloc_r+0xea>
 800b72c:	6821      	ldr	r1, [r4, #0]
 800b72e:	1a6d      	subs	r5, r5, r1
 800b730:	4629      	mov	r1, r5
 800b732:	4630      	mov	r0, r6
 800b734:	f7ff ffa6 	bl	800b684 <sbrk_aligned>
 800b738:	3001      	adds	r0, #1
 800b73a:	d03a      	beq.n	800b7b2 <_malloc_r+0xea>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	442b      	add	r3, r5
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	f8d8 3000 	ldr.w	r3, [r8]
 800b746:	685a      	ldr	r2, [r3, #4]
 800b748:	bb62      	cbnz	r2, 800b7a4 <_malloc_r+0xdc>
 800b74a:	f8c8 7000 	str.w	r7, [r8]
 800b74e:	e00f      	b.n	800b770 <_malloc_r+0xa8>
 800b750:	6822      	ldr	r2, [r4, #0]
 800b752:	1b52      	subs	r2, r2, r5
 800b754:	d420      	bmi.n	800b798 <_malloc_r+0xd0>
 800b756:	2a0b      	cmp	r2, #11
 800b758:	d917      	bls.n	800b78a <_malloc_r+0xc2>
 800b75a:	1961      	adds	r1, r4, r5
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	6025      	str	r5, [r4, #0]
 800b760:	bf18      	it	ne
 800b762:	6059      	strne	r1, [r3, #4]
 800b764:	6863      	ldr	r3, [r4, #4]
 800b766:	bf08      	it	eq
 800b768:	f8c8 1000 	streq.w	r1, [r8]
 800b76c:	5162      	str	r2, [r4, r5]
 800b76e:	604b      	str	r3, [r1, #4]
 800b770:	4630      	mov	r0, r6
 800b772:	f000 f82f 	bl	800b7d4 <__malloc_unlock>
 800b776:	f104 000b 	add.w	r0, r4, #11
 800b77a:	1d23      	adds	r3, r4, #4
 800b77c:	f020 0007 	bic.w	r0, r0, #7
 800b780:	1ac2      	subs	r2, r0, r3
 800b782:	bf1c      	itt	ne
 800b784:	1a1b      	subne	r3, r3, r0
 800b786:	50a3      	strne	r3, [r4, r2]
 800b788:	e7af      	b.n	800b6ea <_malloc_r+0x22>
 800b78a:	6862      	ldr	r2, [r4, #4]
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	bf0c      	ite	eq
 800b790:	f8c8 2000 	streq.w	r2, [r8]
 800b794:	605a      	strne	r2, [r3, #4]
 800b796:	e7eb      	b.n	800b770 <_malloc_r+0xa8>
 800b798:	4623      	mov	r3, r4
 800b79a:	6864      	ldr	r4, [r4, #4]
 800b79c:	e7ae      	b.n	800b6fc <_malloc_r+0x34>
 800b79e:	463c      	mov	r4, r7
 800b7a0:	687f      	ldr	r7, [r7, #4]
 800b7a2:	e7b6      	b.n	800b712 <_malloc_r+0x4a>
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	d1fb      	bne.n	800b7a4 <_malloc_r+0xdc>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6053      	str	r3, [r2, #4]
 800b7b0:	e7de      	b.n	800b770 <_malloc_r+0xa8>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f000 f80c 	bl	800b7d4 <__malloc_unlock>
 800b7bc:	e794      	b.n	800b6e8 <_malloc_r+0x20>
 800b7be:	6005      	str	r5, [r0, #0]
 800b7c0:	e7d6      	b.n	800b770 <_malloc_r+0xa8>
 800b7c2:	bf00      	nop
 800b7c4:	20002ac4 	.word	0x20002ac4

0800b7c8 <__malloc_lock>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	@ (800b7d0 <__malloc_lock+0x8>)
 800b7ca:	f000 b84b 	b.w	800b864 <__retarget_lock_acquire_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	20002c04 	.word	0x20002c04

0800b7d4 <__malloc_unlock>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	@ (800b7dc <__malloc_unlock+0x8>)
 800b7d6:	f000 b846 	b.w	800b866 <__retarget_lock_release_recursive>
 800b7da:	bf00      	nop
 800b7dc:	20002c04 	.word	0x20002c04

0800b7e0 <memset>:
 800b7e0:	4402      	add	r2, r0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d100      	bne.n	800b7ea <memset+0xa>
 800b7e8:	4770      	bx	lr
 800b7ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ee:	e7f9      	b.n	800b7e4 <memset+0x4>

0800b7f0 <_sbrk_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d06      	ldr	r5, [pc, #24]	@ (800b80c <_sbrk_r+0x1c>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	f7f6 f818 	bl	8001830 <_sbrk>
 800b800:	1c43      	adds	r3, r0, #1
 800b802:	d102      	bne.n	800b80a <_sbrk_r+0x1a>
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	b103      	cbz	r3, 800b80a <_sbrk_r+0x1a>
 800b808:	6023      	str	r3, [r4, #0]
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	20002c00 	.word	0x20002c00

0800b810 <__errno>:
 800b810:	4b01      	ldr	r3, [pc, #4]	@ (800b818 <__errno+0x8>)
 800b812:	6818      	ldr	r0, [r3, #0]
 800b814:	4770      	bx	lr
 800b816:	bf00      	nop
 800b818:	2000002c 	.word	0x2000002c

0800b81c <__libc_init_array>:
 800b81c:	b570      	push	{r4, r5, r6, lr}
 800b81e:	4d0d      	ldr	r5, [pc, #52]	@ (800b854 <__libc_init_array+0x38>)
 800b820:	4c0d      	ldr	r4, [pc, #52]	@ (800b858 <__libc_init_array+0x3c>)
 800b822:	1b64      	subs	r4, r4, r5
 800b824:	10a4      	asrs	r4, r4, #2
 800b826:	2600      	movs	r6, #0
 800b828:	42a6      	cmp	r6, r4
 800b82a:	d109      	bne.n	800b840 <__libc_init_array+0x24>
 800b82c:	4d0b      	ldr	r5, [pc, #44]	@ (800b85c <__libc_init_array+0x40>)
 800b82e:	4c0c      	ldr	r4, [pc, #48]	@ (800b860 <__libc_init_array+0x44>)
 800b830:	f000 fd94 	bl	800c35c <_init>
 800b834:	1b64      	subs	r4, r4, r5
 800b836:	10a4      	asrs	r4, r4, #2
 800b838:	2600      	movs	r6, #0
 800b83a:	42a6      	cmp	r6, r4
 800b83c:	d105      	bne.n	800b84a <__libc_init_array+0x2e>
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	f855 3b04 	ldr.w	r3, [r5], #4
 800b844:	4798      	blx	r3
 800b846:	3601      	adds	r6, #1
 800b848:	e7ee      	b.n	800b828 <__libc_init_array+0xc>
 800b84a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b84e:	4798      	blx	r3
 800b850:	3601      	adds	r6, #1
 800b852:	e7f2      	b.n	800b83a <__libc_init_array+0x1e>
 800b854:	0800c770 	.word	0x0800c770
 800b858:	0800c770 	.word	0x0800c770
 800b85c:	0800c770 	.word	0x0800c770
 800b860:	0800c774 	.word	0x0800c774

0800b864 <__retarget_lock_acquire_recursive>:
 800b864:	4770      	bx	lr

0800b866 <__retarget_lock_release_recursive>:
 800b866:	4770      	bx	lr

0800b868 <_free_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4605      	mov	r5, r0
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d041      	beq.n	800b8f4 <_free_r+0x8c>
 800b870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b874:	1f0c      	subs	r4, r1, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	bfb8      	it	lt
 800b87a:	18e4      	addlt	r4, r4, r3
 800b87c:	f7ff ffa4 	bl	800b7c8 <__malloc_lock>
 800b880:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f8 <_free_r+0x90>)
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	b933      	cbnz	r3, 800b894 <_free_r+0x2c>
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6014      	str	r4, [r2, #0]
 800b88a:	4628      	mov	r0, r5
 800b88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b890:	f7ff bfa0 	b.w	800b7d4 <__malloc_unlock>
 800b894:	42a3      	cmp	r3, r4
 800b896:	d908      	bls.n	800b8aa <_free_r+0x42>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	1821      	adds	r1, r4, r0
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf01      	itttt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	1809      	addeq	r1, r1, r0
 800b8a6:	6021      	streq	r1, [r4, #0]
 800b8a8:	e7ed      	b.n	800b886 <_free_r+0x1e>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x4c>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x42>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1850      	adds	r0, r2, r1
 800b8b8:	42a0      	cmp	r0, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x6c>
 800b8bc:	6820      	ldr	r0, [r4, #0]
 800b8be:	4401      	add	r1, r0
 800b8c0:	1850      	adds	r0, r2, r1
 800b8c2:	4283      	cmp	r3, r0
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1e0      	bne.n	800b88a <_free_r+0x22>
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4408      	add	r0, r1
 800b8d0:	6010      	str	r0, [r2, #0]
 800b8d2:	e7da      	b.n	800b88a <_free_r+0x22>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x74>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	e7d6      	b.n	800b88a <_free_r+0x22>
 800b8dc:	6820      	ldr	r0, [r4, #0]
 800b8de:	1821      	adds	r1, r4, r0
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1809      	addeq	r1, r1, r0
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7ca      	b.n	800b88a <_free_r+0x22>
 800b8f4:	bd38      	pop	{r3, r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20002ac4 	.word	0x20002ac4

0800b8fc <sinf>:
 800b8fc:	ee10 3a10 	vmov	r3, s0
 800b900:	b507      	push	{r0, r1, r2, lr}
 800b902:	4a1f      	ldr	r2, [pc, #124]	@ (800b980 <sinf+0x84>)
 800b904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b908:	4293      	cmp	r3, r2
 800b90a:	d807      	bhi.n	800b91c <sinf+0x20>
 800b90c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b984 <sinf+0x88>
 800b910:	2000      	movs	r0, #0
 800b912:	b003      	add	sp, #12
 800b914:	f85d eb04 	ldr.w	lr, [sp], #4
 800b918:	f000 b88e 	b.w	800ba38 <__kernel_sinf>
 800b91c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b920:	d304      	bcc.n	800b92c <sinf+0x30>
 800b922:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b926:	b003      	add	sp, #12
 800b928:	f85d fb04 	ldr.w	pc, [sp], #4
 800b92c:	4668      	mov	r0, sp
 800b92e:	f000 f8cb 	bl	800bac8 <__ieee754_rem_pio2f>
 800b932:	f000 0003 	and.w	r0, r0, #3
 800b936:	2801      	cmp	r0, #1
 800b938:	d00a      	beq.n	800b950 <sinf+0x54>
 800b93a:	2802      	cmp	r0, #2
 800b93c:	d00f      	beq.n	800b95e <sinf+0x62>
 800b93e:	b9c0      	cbnz	r0, 800b972 <sinf+0x76>
 800b940:	eddd 0a01 	vldr	s1, [sp, #4]
 800b944:	ed9d 0a00 	vldr	s0, [sp]
 800b948:	2001      	movs	r0, #1
 800b94a:	f000 f875 	bl	800ba38 <__kernel_sinf>
 800b94e:	e7ea      	b.n	800b926 <sinf+0x2a>
 800b950:	eddd 0a01 	vldr	s1, [sp, #4]
 800b954:	ed9d 0a00 	vldr	s0, [sp]
 800b958:	f000 f816 	bl	800b988 <__kernel_cosf>
 800b95c:	e7e3      	b.n	800b926 <sinf+0x2a>
 800b95e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b962:	ed9d 0a00 	vldr	s0, [sp]
 800b966:	2001      	movs	r0, #1
 800b968:	f000 f866 	bl	800ba38 <__kernel_sinf>
 800b96c:	eeb1 0a40 	vneg.f32	s0, s0
 800b970:	e7d9      	b.n	800b926 <sinf+0x2a>
 800b972:	eddd 0a01 	vldr	s1, [sp, #4]
 800b976:	ed9d 0a00 	vldr	s0, [sp]
 800b97a:	f000 f805 	bl	800b988 <__kernel_cosf>
 800b97e:	e7f5      	b.n	800b96c <sinf+0x70>
 800b980:	3f490fd8 	.word	0x3f490fd8
 800b984:	00000000 	.word	0x00000000

0800b988 <__kernel_cosf>:
 800b988:	ee10 3a10 	vmov	r3, s0
 800b98c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b990:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b994:	eef0 6a40 	vmov.f32	s13, s0
 800b998:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b99c:	d204      	bcs.n	800b9a8 <__kernel_cosf+0x20>
 800b99e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b9a2:	ee17 2a90 	vmov	r2, s15
 800b9a6:	b342      	cbz	r2, 800b9fa <__kernel_cosf+0x72>
 800b9a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b9ac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ba18 <__kernel_cosf+0x90>
 800b9b0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ba1c <__kernel_cosf+0x94>
 800b9b4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba20 <__kernel_cosf+0x98>)
 800b9b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ba24 <__kernel_cosf+0x9c>
 800b9c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9c4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ba28 <__kernel_cosf+0xa0>
 800b9c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b9cc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ba2c <__kernel_cosf+0xa4>
 800b9d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9d4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ba30 <__kernel_cosf+0xa8>
 800b9d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b9dc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b9e0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b9e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b9e8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b9ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9f0:	d804      	bhi.n	800b9fc <__kernel_cosf+0x74>
 800b9f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b9f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9fa:	4770      	bx	lr
 800b9fc:	4a0d      	ldr	r2, [pc, #52]	@ (800ba34 <__kernel_cosf+0xac>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	bf9a      	itte	ls
 800ba02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ba06:	ee07 3a10 	vmovls	s14, r3
 800ba0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ba0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba16:	e7ec      	b.n	800b9f2 <__kernel_cosf+0x6a>
 800ba18:	ad47d74e 	.word	0xad47d74e
 800ba1c:	310f74f6 	.word	0x310f74f6
 800ba20:	3e999999 	.word	0x3e999999
 800ba24:	b493f27c 	.word	0xb493f27c
 800ba28:	37d00d01 	.word	0x37d00d01
 800ba2c:	bab60b61 	.word	0xbab60b61
 800ba30:	3d2aaaab 	.word	0x3d2aaaab
 800ba34:	3f480000 	.word	0x3f480000

0800ba38 <__kernel_sinf>:
 800ba38:	ee10 3a10 	vmov	r3, s0
 800ba3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ba44:	d204      	bcs.n	800ba50 <__kernel_sinf+0x18>
 800ba46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ba4a:	ee17 3a90 	vmov	r3, s15
 800ba4e:	b35b      	cbz	r3, 800baa8 <__kernel_sinf+0x70>
 800ba50:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ba54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800baac <__kernel_sinf+0x74>
 800ba58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bab0 <__kernel_sinf+0x78>
 800ba5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bab4 <__kernel_sinf+0x7c>
 800ba64:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bab8 <__kernel_sinf+0x80>
 800ba6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ba70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800babc <__kernel_sinf+0x84>
 800ba74:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ba78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba7c:	b930      	cbnz	r0, 800ba8c <__kernel_sinf+0x54>
 800ba7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bac0 <__kernel_sinf+0x88>
 800ba82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba86:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ba8a:	4770      	bx	lr
 800ba8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ba90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ba94:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ba98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ba9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bac4 <__kernel_sinf+0x8c>
 800baa0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800baa4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	2f2ec9d3 	.word	0x2f2ec9d3
 800bab0:	b2d72f34 	.word	0xb2d72f34
 800bab4:	3638ef1b 	.word	0x3638ef1b
 800bab8:	b9500d01 	.word	0xb9500d01
 800babc:	3c088889 	.word	0x3c088889
 800bac0:	be2aaaab 	.word	0xbe2aaaab
 800bac4:	3e2aaaab 	.word	0x3e2aaaab

0800bac8 <__ieee754_rem_pio2f>:
 800bac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baca:	ee10 6a10 	vmov	r6, s0
 800bace:	4b88      	ldr	r3, [pc, #544]	@ (800bcf0 <__ieee754_rem_pio2f+0x228>)
 800bad0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bad4:	429d      	cmp	r5, r3
 800bad6:	b087      	sub	sp, #28
 800bad8:	4604      	mov	r4, r0
 800bada:	d805      	bhi.n	800bae8 <__ieee754_rem_pio2f+0x20>
 800badc:	2300      	movs	r3, #0
 800bade:	ed80 0a00 	vstr	s0, [r0]
 800bae2:	6043      	str	r3, [r0, #4]
 800bae4:	2000      	movs	r0, #0
 800bae6:	e022      	b.n	800bb2e <__ieee754_rem_pio2f+0x66>
 800bae8:	4b82      	ldr	r3, [pc, #520]	@ (800bcf4 <__ieee754_rem_pio2f+0x22c>)
 800baea:	429d      	cmp	r5, r3
 800baec:	d83a      	bhi.n	800bb64 <__ieee754_rem_pio2f+0x9c>
 800baee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800baf2:	2e00      	cmp	r6, #0
 800baf4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bcf8 <__ieee754_rem_pio2f+0x230>
 800baf8:	4a80      	ldr	r2, [pc, #512]	@ (800bcfc <__ieee754_rem_pio2f+0x234>)
 800bafa:	f023 030f 	bic.w	r3, r3, #15
 800bafe:	dd18      	ble.n	800bb32 <__ieee754_rem_pio2f+0x6a>
 800bb00:	4293      	cmp	r3, r2
 800bb02:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bb06:	bf09      	itett	eq
 800bb08:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bd00 <__ieee754_rem_pio2f+0x238>
 800bb0c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bd04 <__ieee754_rem_pio2f+0x23c>
 800bb10:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bd08 <__ieee754_rem_pio2f+0x240>
 800bb14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bb18:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bb1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb20:	ed80 7a00 	vstr	s14, [r0]
 800bb24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb28:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	b007      	add	sp, #28
 800bb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb32:	4293      	cmp	r3, r2
 800bb34:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bb38:	bf09      	itett	eq
 800bb3a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bd00 <__ieee754_rem_pio2f+0x238>
 800bb3e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bd04 <__ieee754_rem_pio2f+0x23c>
 800bb42:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bd08 <__ieee754_rem_pio2f+0x240>
 800bb46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bb4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb52:	ed80 7a00 	vstr	s14, [r0]
 800bb56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5a:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb62:	e7e4      	b.n	800bb2e <__ieee754_rem_pio2f+0x66>
 800bb64:	4b69      	ldr	r3, [pc, #420]	@ (800bd0c <__ieee754_rem_pio2f+0x244>)
 800bb66:	429d      	cmp	r5, r3
 800bb68:	d873      	bhi.n	800bc52 <__ieee754_rem_pio2f+0x18a>
 800bb6a:	f000 f8dd 	bl	800bd28 <fabsf>
 800bb6e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bd10 <__ieee754_rem_pio2f+0x248>
 800bb72:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb76:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb82:	ee17 0a90 	vmov	r0, s15
 800bb86:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bcf8 <__ieee754_rem_pio2f+0x230>
 800bb8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb8e:	281f      	cmp	r0, #31
 800bb90:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bd04 <__ieee754_rem_pio2f+0x23c>
 800bb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb98:	eeb1 6a47 	vneg.f32	s12, s14
 800bb9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bba0:	ee16 1a90 	vmov	r1, s13
 800bba4:	dc09      	bgt.n	800bbba <__ieee754_rem_pio2f+0xf2>
 800bba6:	4a5b      	ldr	r2, [pc, #364]	@ (800bd14 <__ieee754_rem_pio2f+0x24c>)
 800bba8:	1e47      	subs	r7, r0, #1
 800bbaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bbae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bbb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d107      	bne.n	800bbca <__ieee754_rem_pio2f+0x102>
 800bbba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bbbe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bbc2:	2a08      	cmp	r2, #8
 800bbc4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bbc8:	dc14      	bgt.n	800bbf4 <__ieee754_rem_pio2f+0x12c>
 800bbca:	6021      	str	r1, [r4, #0]
 800bbcc:	ed94 7a00 	vldr	s14, [r4]
 800bbd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bbd4:	2e00      	cmp	r6, #0
 800bbd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbda:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbde:	daa6      	bge.n	800bb2e <__ieee754_rem_pio2f+0x66>
 800bbe0:	eeb1 7a47 	vneg.f32	s14, s14
 800bbe4:	eeb1 0a40 	vneg.f32	s0, s0
 800bbe8:	ed84 7a00 	vstr	s14, [r4]
 800bbec:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbf0:	4240      	negs	r0, r0
 800bbf2:	e79c      	b.n	800bb2e <__ieee754_rem_pio2f+0x66>
 800bbf4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bd00 <__ieee754_rem_pio2f+0x238>
 800bbf8:	eef0 6a40 	vmov.f32	s13, s0
 800bbfc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bc00:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bc04:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc08:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bd08 <__ieee754_rem_pio2f+0x240>
 800bc0c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bc10:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bc14:	ee15 2a90 	vmov	r2, s11
 800bc18:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bc1c:	1a5b      	subs	r3, r3, r1
 800bc1e:	2b19      	cmp	r3, #25
 800bc20:	dc04      	bgt.n	800bc2c <__ieee754_rem_pio2f+0x164>
 800bc22:	edc4 5a00 	vstr	s11, [r4]
 800bc26:	eeb0 0a66 	vmov.f32	s0, s13
 800bc2a:	e7cf      	b.n	800bbcc <__ieee754_rem_pio2f+0x104>
 800bc2c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bd18 <__ieee754_rem_pio2f+0x250>
 800bc30:	eeb0 0a66 	vmov.f32	s0, s13
 800bc34:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bc38:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bc3c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bd1c <__ieee754_rem_pio2f+0x254>
 800bc40:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc44:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bc48:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bc4c:	ed84 7a00 	vstr	s14, [r4]
 800bc50:	e7bc      	b.n	800bbcc <__ieee754_rem_pio2f+0x104>
 800bc52:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bc56:	d306      	bcc.n	800bc66 <__ieee754_rem_pio2f+0x19e>
 800bc58:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc5c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bc60:	edc0 7a00 	vstr	s15, [r0]
 800bc64:	e73e      	b.n	800bae4 <__ieee754_rem_pio2f+0x1c>
 800bc66:	15ea      	asrs	r2, r5, #23
 800bc68:	3a86      	subs	r2, #134	@ 0x86
 800bc6a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bc6e:	ee07 3a90 	vmov	s15, r3
 800bc72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc76:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bd20 <__ieee754_rem_pio2f+0x258>
 800bc7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc82:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc96:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bc9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca6:	edcd 7a05 	vstr	s15, [sp, #20]
 800bcaa:	d11e      	bne.n	800bcea <__ieee754_rem_pio2f+0x222>
 800bcac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb4:	bf0c      	ite	eq
 800bcb6:	2301      	moveq	r3, #1
 800bcb8:	2302      	movne	r3, #2
 800bcba:	491a      	ldr	r1, [pc, #104]	@ (800bd24 <__ieee754_rem_pio2f+0x25c>)
 800bcbc:	9101      	str	r1, [sp, #4]
 800bcbe:	2102      	movs	r1, #2
 800bcc0:	9100      	str	r1, [sp, #0]
 800bcc2:	a803      	add	r0, sp, #12
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	f000 f837 	bl	800bd38 <__kernel_rem_pio2f>
 800bcca:	2e00      	cmp	r6, #0
 800bccc:	f6bf af2f 	bge.w	800bb2e <__ieee754_rem_pio2f+0x66>
 800bcd0:	edd4 7a00 	vldr	s15, [r4]
 800bcd4:	eef1 7a67 	vneg.f32	s15, s15
 800bcd8:	edc4 7a00 	vstr	s15, [r4]
 800bcdc:	edd4 7a01 	vldr	s15, [r4, #4]
 800bce0:	eef1 7a67 	vneg.f32	s15, s15
 800bce4:	edc4 7a01 	vstr	s15, [r4, #4]
 800bce8:	e782      	b.n	800bbf0 <__ieee754_rem_pio2f+0x128>
 800bcea:	2303      	movs	r3, #3
 800bcec:	e7e5      	b.n	800bcba <__ieee754_rem_pio2f+0x1f2>
 800bcee:	bf00      	nop
 800bcf0:	3f490fd8 	.word	0x3f490fd8
 800bcf4:	4016cbe3 	.word	0x4016cbe3
 800bcf8:	3fc90f80 	.word	0x3fc90f80
 800bcfc:	3fc90fd0 	.word	0x3fc90fd0
 800bd00:	37354400 	.word	0x37354400
 800bd04:	37354443 	.word	0x37354443
 800bd08:	2e85a308 	.word	0x2e85a308
 800bd0c:	43490f80 	.word	0x43490f80
 800bd10:	3f22f984 	.word	0x3f22f984
 800bd14:	0800c398 	.word	0x0800c398
 800bd18:	2e85a300 	.word	0x2e85a300
 800bd1c:	248d3132 	.word	0x248d3132
 800bd20:	43800000 	.word	0x43800000
 800bd24:	0800c418 	.word	0x0800c418

0800bd28 <fabsf>:
 800bd28:	ee10 3a10 	vmov	r3, s0
 800bd2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd30:	ee00 3a10 	vmov	s0, r3
 800bd34:	4770      	bx	lr
	...

0800bd38 <__kernel_rem_pio2f>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	ed2d 8b04 	vpush	{d8-d9}
 800bd40:	b0d9      	sub	sp, #356	@ 0x164
 800bd42:	4690      	mov	r8, r2
 800bd44:	9001      	str	r0, [sp, #4]
 800bd46:	4ab6      	ldr	r2, [pc, #728]	@ (800c020 <__kernel_rem_pio2f+0x2e8>)
 800bd48:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bd4a:	f118 0f04 	cmn.w	r8, #4
 800bd4e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bd52:	460f      	mov	r7, r1
 800bd54:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd58:	db26      	blt.n	800bda8 <__kernel_rem_pio2f+0x70>
 800bd5a:	f1b8 0203 	subs.w	r2, r8, #3
 800bd5e:	bf48      	it	mi
 800bd60:	f108 0204 	addmi.w	r2, r8, #4
 800bd64:	10d2      	asrs	r2, r2, #3
 800bd66:	1c55      	adds	r5, r2, #1
 800bd68:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd6a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800bd6e:	00e8      	lsls	r0, r5, #3
 800bd70:	eba2 060b 	sub.w	r6, r2, fp
 800bd74:	9002      	str	r0, [sp, #8]
 800bd76:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bd7a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bd7e:	ac1c      	add	r4, sp, #112	@ 0x70
 800bd80:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bd84:	2000      	movs	r0, #0
 800bd86:	4560      	cmp	r0, ip
 800bd88:	dd10      	ble.n	800bdac <__kernel_rem_pio2f+0x74>
 800bd8a:	a91c      	add	r1, sp, #112	@ 0x70
 800bd8c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bd90:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bd94:	2600      	movs	r6, #0
 800bd96:	4556      	cmp	r6, sl
 800bd98:	dc24      	bgt.n	800bde4 <__kernel_rem_pio2f+0xac>
 800bd9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd9e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800bda2:	4684      	mov	ip, r0
 800bda4:	2400      	movs	r4, #0
 800bda6:	e016      	b.n	800bdd6 <__kernel_rem_pio2f+0x9e>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	e7dc      	b.n	800bd66 <__kernel_rem_pio2f+0x2e>
 800bdac:	42c6      	cmn	r6, r0
 800bdae:	bf5d      	ittte	pl
 800bdb0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bdb4:	ee07 1a90 	vmovpl	s15, r1
 800bdb8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bdbc:	eef0 7a47 	vmovmi.f32	s15, s14
 800bdc0:	ece4 7a01 	vstmia	r4!, {s15}
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	e7de      	b.n	800bd86 <__kernel_rem_pio2f+0x4e>
 800bdc8:	ecfe 6a01 	vldmia	lr!, {s13}
 800bdcc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bdd0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	455c      	cmp	r4, fp
 800bdd8:	ddf6      	ble.n	800bdc8 <__kernel_rem_pio2f+0x90>
 800bdda:	ece9 7a01 	vstmia	r9!, {s15}
 800bdde:	3601      	adds	r6, #1
 800bde0:	3004      	adds	r0, #4
 800bde2:	e7d8      	b.n	800bd96 <__kernel_rem_pio2f+0x5e>
 800bde4:	a908      	add	r1, sp, #32
 800bde6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdea:	9104      	str	r1, [sp, #16]
 800bdec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bdee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c02c <__kernel_rem_pio2f+0x2f4>
 800bdf2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c028 <__kernel_rem_pio2f+0x2f0>
 800bdf6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bdfa:	9203      	str	r2, [sp, #12]
 800bdfc:	4654      	mov	r4, sl
 800bdfe:	00a2      	lsls	r2, r4, #2
 800be00:	9205      	str	r2, [sp, #20]
 800be02:	aa58      	add	r2, sp, #352	@ 0x160
 800be04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800be08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800be0c:	a944      	add	r1, sp, #272	@ 0x110
 800be0e:	aa08      	add	r2, sp, #32
 800be10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800be14:	4694      	mov	ip, r2
 800be16:	4626      	mov	r6, r4
 800be18:	2e00      	cmp	r6, #0
 800be1a:	dc4c      	bgt.n	800beb6 <__kernel_rem_pio2f+0x17e>
 800be1c:	4628      	mov	r0, r5
 800be1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be22:	f000 f9f1 	bl	800c208 <scalbnf>
 800be26:	eeb0 8a40 	vmov.f32	s16, s0
 800be2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800be2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800be32:	f000 fa4f 	bl	800c2d4 <floorf>
 800be36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800be3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800be3e:	2d00      	cmp	r5, #0
 800be40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800be48:	ee17 9a90 	vmov	r9, s15
 800be4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be50:	ee38 8a67 	vsub.f32	s16, s16, s15
 800be54:	dd41      	ble.n	800beda <__kernel_rem_pio2f+0x1a2>
 800be56:	f104 3cff 	add.w	ip, r4, #4294967295
 800be5a:	a908      	add	r1, sp, #32
 800be5c:	f1c5 0e08 	rsb	lr, r5, #8
 800be60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800be64:	fa46 f00e 	asr.w	r0, r6, lr
 800be68:	4481      	add	r9, r0
 800be6a:	fa00 f00e 	lsl.w	r0, r0, lr
 800be6e:	1a36      	subs	r6, r6, r0
 800be70:	f1c5 0007 	rsb	r0, r5, #7
 800be74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800be78:	4106      	asrs	r6, r0
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	dd3c      	ble.n	800bef8 <__kernel_rem_pio2f+0x1c0>
 800be7e:	f04f 0e00 	mov.w	lr, #0
 800be82:	f109 0901 	add.w	r9, r9, #1
 800be86:	4670      	mov	r0, lr
 800be88:	4574      	cmp	r4, lr
 800be8a:	dc68      	bgt.n	800bf5e <__kernel_rem_pio2f+0x226>
 800be8c:	2d00      	cmp	r5, #0
 800be8e:	dd03      	ble.n	800be98 <__kernel_rem_pio2f+0x160>
 800be90:	2d01      	cmp	r5, #1
 800be92:	d074      	beq.n	800bf7e <__kernel_rem_pio2f+0x246>
 800be94:	2d02      	cmp	r5, #2
 800be96:	d07d      	beq.n	800bf94 <__kernel_rem_pio2f+0x25c>
 800be98:	2e02      	cmp	r6, #2
 800be9a:	d12d      	bne.n	800bef8 <__kernel_rem_pio2f+0x1c0>
 800be9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bea0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bea4:	b340      	cbz	r0, 800bef8 <__kernel_rem_pio2f+0x1c0>
 800bea6:	4628      	mov	r0, r5
 800bea8:	9306      	str	r3, [sp, #24]
 800beaa:	f000 f9ad 	bl	800c208 <scalbnf>
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800beb4:	e020      	b.n	800bef8 <__kernel_rem_pio2f+0x1c0>
 800beb6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800beba:	3e01      	subs	r6, #1
 800bebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bec4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bec8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800becc:	ecac 0a01 	vstmia	ip!, {s0}
 800bed0:	ed30 0a01 	vldmdb	r0!, {s0}
 800bed4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bed8:	e79e      	b.n	800be18 <__kernel_rem_pio2f+0xe0>
 800beda:	d105      	bne.n	800bee8 <__kernel_rem_pio2f+0x1b0>
 800bedc:	1e60      	subs	r0, r4, #1
 800bede:	a908      	add	r1, sp, #32
 800bee0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bee4:	11f6      	asrs	r6, r6, #7
 800bee6:	e7c8      	b.n	800be7a <__kernel_rem_pio2f+0x142>
 800bee8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800beec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef4:	da31      	bge.n	800bf5a <__kernel_rem_pio2f+0x222>
 800bef6:	2600      	movs	r6, #0
 800bef8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf00:	f040 8098 	bne.w	800c034 <__kernel_rem_pio2f+0x2fc>
 800bf04:	1e60      	subs	r0, r4, #1
 800bf06:	2200      	movs	r2, #0
 800bf08:	4550      	cmp	r0, sl
 800bf0a:	da4b      	bge.n	800bfa4 <__kernel_rem_pio2f+0x26c>
 800bf0c:	2a00      	cmp	r2, #0
 800bf0e:	d065      	beq.n	800bfdc <__kernel_rem_pio2f+0x2a4>
 800bf10:	3c01      	subs	r4, #1
 800bf12:	ab08      	add	r3, sp, #32
 800bf14:	3d08      	subs	r5, #8
 800bf16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d0f8      	beq.n	800bf10 <__kernel_rem_pio2f+0x1d8>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf24:	f000 f970 	bl	800c208 <scalbnf>
 800bf28:	1c63      	adds	r3, r4, #1
 800bf2a:	aa44      	add	r2, sp, #272	@ 0x110
 800bf2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c02c <__kernel_rem_pio2f+0x2f4>
 800bf30:	0099      	lsls	r1, r3, #2
 800bf32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf36:	4623      	mov	r3, r4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f280 80a9 	bge.w	800c090 <__kernel_rem_pio2f+0x358>
 800bf3e:	4623      	mov	r3, r4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f2c0 80c7 	blt.w	800c0d4 <__kernel_rem_pio2f+0x39c>
 800bf46:	aa44      	add	r2, sp, #272	@ 0x110
 800bf48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bf4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c024 <__kernel_rem_pio2f+0x2ec>
 800bf50:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800bf54:	2000      	movs	r0, #0
 800bf56:	1ae2      	subs	r2, r4, r3
 800bf58:	e0b1      	b.n	800c0be <__kernel_rem_pio2f+0x386>
 800bf5a:	2602      	movs	r6, #2
 800bf5c:	e78f      	b.n	800be7e <__kernel_rem_pio2f+0x146>
 800bf5e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf62:	b948      	cbnz	r0, 800bf78 <__kernel_rem_pio2f+0x240>
 800bf64:	b121      	cbz	r1, 800bf70 <__kernel_rem_pio2f+0x238>
 800bf66:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bf6a:	f842 1c04 	str.w	r1, [r2, #-4]
 800bf6e:	2101      	movs	r1, #1
 800bf70:	f10e 0e01 	add.w	lr, lr, #1
 800bf74:	4608      	mov	r0, r1
 800bf76:	e787      	b.n	800be88 <__kernel_rem_pio2f+0x150>
 800bf78:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bf7c:	e7f5      	b.n	800bf6a <__kernel_rem_pio2f+0x232>
 800bf7e:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf82:	aa08      	add	r2, sp, #32
 800bf84:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf8c:	a908      	add	r1, sp, #32
 800bf8e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bf92:	e781      	b.n	800be98 <__kernel_rem_pio2f+0x160>
 800bf94:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf98:	aa08      	add	r2, sp, #32
 800bf9a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bfa2:	e7f3      	b.n	800bf8c <__kernel_rem_pio2f+0x254>
 800bfa4:	a908      	add	r1, sp, #32
 800bfa6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bfaa:	3801      	subs	r0, #1
 800bfac:	430a      	orrs	r2, r1
 800bfae:	e7ab      	b.n	800bf08 <__kernel_rem_pio2f+0x1d0>
 800bfb0:	3201      	adds	r2, #1
 800bfb2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bfb6:	2e00      	cmp	r6, #0
 800bfb8:	d0fa      	beq.n	800bfb0 <__kernel_rem_pio2f+0x278>
 800bfba:	9905      	ldr	r1, [sp, #20]
 800bfbc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bfc0:	eb0d 0001 	add.w	r0, sp, r1
 800bfc4:	18e6      	adds	r6, r4, r3
 800bfc6:	a91c      	add	r1, sp, #112	@ 0x70
 800bfc8:	f104 0c01 	add.w	ip, r4, #1
 800bfcc:	384c      	subs	r0, #76	@ 0x4c
 800bfce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bfd2:	4422      	add	r2, r4
 800bfd4:	4562      	cmp	r2, ip
 800bfd6:	da04      	bge.n	800bfe2 <__kernel_rem_pio2f+0x2aa>
 800bfd8:	4614      	mov	r4, r2
 800bfda:	e710      	b.n	800bdfe <__kernel_rem_pio2f+0xc6>
 800bfdc:	9804      	ldr	r0, [sp, #16]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	e7e7      	b.n	800bfb2 <__kernel_rem_pio2f+0x27a>
 800bfe2:	9903      	ldr	r1, [sp, #12]
 800bfe4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bfe8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bfec:	9105      	str	r1, [sp, #20]
 800bfee:	ee07 1a90 	vmov	s15, r1
 800bff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bff6:	2400      	movs	r4, #0
 800bff8:	ece6 7a01 	vstmia	r6!, {s15}
 800bffc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800c000:	46b1      	mov	r9, r6
 800c002:	455c      	cmp	r4, fp
 800c004:	dd04      	ble.n	800c010 <__kernel_rem_pio2f+0x2d8>
 800c006:	ece0 7a01 	vstmia	r0!, {s15}
 800c00a:	f10c 0c01 	add.w	ip, ip, #1
 800c00e:	e7e1      	b.n	800bfd4 <__kernel_rem_pio2f+0x29c>
 800c010:	ecfe 6a01 	vldmia	lr!, {s13}
 800c014:	ed39 7a01 	vldmdb	r9!, {s14}
 800c018:	3401      	adds	r4, #1
 800c01a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c01e:	e7f0      	b.n	800c002 <__kernel_rem_pio2f+0x2ca>
 800c020:	0800c75c 	.word	0x0800c75c
 800c024:	0800c730 	.word	0x0800c730
 800c028:	43800000 	.word	0x43800000
 800c02c:	3b800000 	.word	0x3b800000
 800c030:	00000000 	.word	0x00000000
 800c034:	9b02      	ldr	r3, [sp, #8]
 800c036:	eeb0 0a48 	vmov.f32	s0, s16
 800c03a:	eba3 0008 	sub.w	r0, r3, r8
 800c03e:	f000 f8e3 	bl	800c208 <scalbnf>
 800c042:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c028 <__kernel_rem_pio2f+0x2f0>
 800c046:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04e:	db19      	blt.n	800c084 <__kernel_rem_pio2f+0x34c>
 800c050:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c02c <__kernel_rem_pio2f+0x2f4>
 800c054:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c058:	aa08      	add	r2, sp, #32
 800c05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c05e:	3508      	adds	r5, #8
 800c060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c064:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c06c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c070:	ee10 3a10 	vmov	r3, s0
 800c074:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c078:	ee17 3a90 	vmov	r3, s15
 800c07c:	3401      	adds	r4, #1
 800c07e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c082:	e74c      	b.n	800bf1e <__kernel_rem_pio2f+0x1e6>
 800c084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c088:	aa08      	add	r2, sp, #32
 800c08a:	ee10 3a10 	vmov	r3, s0
 800c08e:	e7f6      	b.n	800c07e <__kernel_rem_pio2f+0x346>
 800c090:	a808      	add	r0, sp, #32
 800c092:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c096:	9001      	str	r0, [sp, #4]
 800c098:	ee07 0a90 	vmov	s15, r0
 800c09c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c0a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c0aa:	ed62 7a01 	vstmdb	r2!, {s15}
 800c0ae:	e743      	b.n	800bf38 <__kernel_rem_pio2f+0x200>
 800c0b0:	ecfc 6a01 	vldmia	ip!, {s13}
 800c0b4:	ecb5 7a01 	vldmia	r5!, {s14}
 800c0b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c0bc:	3001      	adds	r0, #1
 800c0be:	4550      	cmp	r0, sl
 800c0c0:	dc01      	bgt.n	800c0c6 <__kernel_rem_pio2f+0x38e>
 800c0c2:	4290      	cmp	r0, r2
 800c0c4:	ddf4      	ble.n	800c0b0 <__kernel_rem_pio2f+0x378>
 800c0c6:	a858      	add	r0, sp, #352	@ 0x160
 800c0c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c0cc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	e735      	b.n	800bf40 <__kernel_rem_pio2f+0x208>
 800c0d4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	dc09      	bgt.n	800c0ee <__kernel_rem_pio2f+0x3b6>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dc27      	bgt.n	800c12e <__kernel_rem_pio2f+0x3f6>
 800c0de:	d040      	beq.n	800c162 <__kernel_rem_pio2f+0x42a>
 800c0e0:	f009 0007 	and.w	r0, r9, #7
 800c0e4:	b059      	add	sp, #356	@ 0x164
 800c0e6:	ecbd 8b04 	vpop	{d8-d9}
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d1f5      	bne.n	800c0e0 <__kernel_rem_pio2f+0x3a8>
 800c0f4:	aa30      	add	r2, sp, #192	@ 0xc0
 800c0f6:	1f0b      	subs	r3, r1, #4
 800c0f8:	4413      	add	r3, r2
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	2800      	cmp	r0, #0
 800c100:	dc50      	bgt.n	800c1a4 <__kernel_rem_pio2f+0x46c>
 800c102:	4622      	mov	r2, r4
 800c104:	2a01      	cmp	r2, #1
 800c106:	dc5d      	bgt.n	800c1c4 <__kernel_rem_pio2f+0x48c>
 800c108:	ab30      	add	r3, sp, #192	@ 0xc0
 800c10a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800c10e:	440b      	add	r3, r1
 800c110:	2c01      	cmp	r4, #1
 800c112:	dc67      	bgt.n	800c1e4 <__kernel_rem_pio2f+0x4ac>
 800c114:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c118:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c11c:	2e00      	cmp	r6, #0
 800c11e:	d167      	bne.n	800c1f0 <__kernel_rem_pio2f+0x4b8>
 800c120:	edc7 6a00 	vstr	s13, [r7]
 800c124:	ed87 7a01 	vstr	s14, [r7, #4]
 800c128:	edc7 7a02 	vstr	s15, [r7, #8]
 800c12c:	e7d8      	b.n	800c0e0 <__kernel_rem_pio2f+0x3a8>
 800c12e:	ab30      	add	r3, sp, #192	@ 0xc0
 800c130:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800c134:	440b      	add	r3, r1
 800c136:	4622      	mov	r2, r4
 800c138:	2a00      	cmp	r2, #0
 800c13a:	da24      	bge.n	800c186 <__kernel_rem_pio2f+0x44e>
 800c13c:	b34e      	cbz	r6, 800c192 <__kernel_rem_pio2f+0x45a>
 800c13e:	eef1 7a47 	vneg.f32	s15, s14
 800c142:	edc7 7a00 	vstr	s15, [r7]
 800c146:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c14a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c14e:	aa31      	add	r2, sp, #196	@ 0xc4
 800c150:	2301      	movs	r3, #1
 800c152:	429c      	cmp	r4, r3
 800c154:	da20      	bge.n	800c198 <__kernel_rem_pio2f+0x460>
 800c156:	b10e      	cbz	r6, 800c15c <__kernel_rem_pio2f+0x424>
 800c158:	eef1 7a67 	vneg.f32	s15, s15
 800c15c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c160:	e7be      	b.n	800c0e0 <__kernel_rem_pio2f+0x3a8>
 800c162:	ab30      	add	r3, sp, #192	@ 0xc0
 800c164:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c030 <__kernel_rem_pio2f+0x2f8>
 800c168:	440b      	add	r3, r1
 800c16a:	2c00      	cmp	r4, #0
 800c16c:	da05      	bge.n	800c17a <__kernel_rem_pio2f+0x442>
 800c16e:	b10e      	cbz	r6, 800c174 <__kernel_rem_pio2f+0x43c>
 800c170:	eef1 7a67 	vneg.f32	s15, s15
 800c174:	edc7 7a00 	vstr	s15, [r7]
 800c178:	e7b2      	b.n	800c0e0 <__kernel_rem_pio2f+0x3a8>
 800c17a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c17e:	3c01      	subs	r4, #1
 800c180:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c184:	e7f1      	b.n	800c16a <__kernel_rem_pio2f+0x432>
 800c186:	ed73 7a01 	vldmdb	r3!, {s15}
 800c18a:	3a01      	subs	r2, #1
 800c18c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c190:	e7d2      	b.n	800c138 <__kernel_rem_pio2f+0x400>
 800c192:	eef0 7a47 	vmov.f32	s15, s14
 800c196:	e7d4      	b.n	800c142 <__kernel_rem_pio2f+0x40a>
 800c198:	ecb2 7a01 	vldmia	r2!, {s14}
 800c19c:	3301      	adds	r3, #1
 800c19e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1a2:	e7d6      	b.n	800c152 <__kernel_rem_pio2f+0x41a>
 800c1a4:	ed72 7a01 	vldmdb	r2!, {s15}
 800c1a8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c1ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c1b0:	3801      	subs	r0, #1
 800c1b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1b6:	ed82 7a00 	vstr	s14, [r2]
 800c1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1be:	edc2 7a01 	vstr	s15, [r2, #4]
 800c1c2:	e79c      	b.n	800c0fe <__kernel_rem_pio2f+0x3c6>
 800c1c4:	ed73 7a01 	vldmdb	r3!, {s15}
 800c1c8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c1cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c1d0:	3a01      	subs	r2, #1
 800c1d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1d6:	ed83 7a00 	vstr	s14, [r3]
 800c1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1de:	edc3 7a01 	vstr	s15, [r3, #4]
 800c1e2:	e78f      	b.n	800c104 <__kernel_rem_pio2f+0x3cc>
 800c1e4:	ed33 7a01 	vldmdb	r3!, {s14}
 800c1e8:	3c01      	subs	r4, #1
 800c1ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1ee:	e78f      	b.n	800c110 <__kernel_rem_pio2f+0x3d8>
 800c1f0:	eef1 6a66 	vneg.f32	s13, s13
 800c1f4:	eeb1 7a47 	vneg.f32	s14, s14
 800c1f8:	edc7 6a00 	vstr	s13, [r7]
 800c1fc:	ed87 7a01 	vstr	s14, [r7, #4]
 800c200:	eef1 7a67 	vneg.f32	s15, s15
 800c204:	e790      	b.n	800c128 <__kernel_rem_pio2f+0x3f0>
 800c206:	bf00      	nop

0800c208 <scalbnf>:
 800c208:	ee10 3a10 	vmov	r3, s0
 800c20c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c210:	d02b      	beq.n	800c26a <scalbnf+0x62>
 800c212:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c216:	d302      	bcc.n	800c21e <scalbnf+0x16>
 800c218:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c21c:	4770      	bx	lr
 800c21e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c222:	d123      	bne.n	800c26c <scalbnf+0x64>
 800c224:	4b24      	ldr	r3, [pc, #144]	@ (800c2b8 <scalbnf+0xb0>)
 800c226:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c2bc <scalbnf+0xb4>
 800c22a:	4298      	cmp	r0, r3
 800c22c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c230:	db17      	blt.n	800c262 <scalbnf+0x5a>
 800c232:	ee10 3a10 	vmov	r3, s0
 800c236:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c23a:	3a19      	subs	r2, #25
 800c23c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c240:	4288      	cmp	r0, r1
 800c242:	dd15      	ble.n	800c270 <scalbnf+0x68>
 800c244:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c2c0 <scalbnf+0xb8>
 800c248:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c2c4 <scalbnf+0xbc>
 800c24c:	ee10 3a10 	vmov	r3, s0
 800c250:	eeb0 7a67 	vmov.f32	s14, s15
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfb8      	it	lt
 800c258:	eef0 7a66 	vmovlt.f32	s15, s13
 800c25c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c260:	4770      	bx	lr
 800c262:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2c8 <scalbnf+0xc0>
 800c266:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c26a:	4770      	bx	lr
 800c26c:	0dd2      	lsrs	r2, r2, #23
 800c26e:	e7e5      	b.n	800c23c <scalbnf+0x34>
 800c270:	4410      	add	r0, r2
 800c272:	28fe      	cmp	r0, #254	@ 0xfe
 800c274:	dce6      	bgt.n	800c244 <scalbnf+0x3c>
 800c276:	2800      	cmp	r0, #0
 800c278:	dd06      	ble.n	800c288 <scalbnf+0x80>
 800c27a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c27e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c282:	ee00 3a10 	vmov	s0, r3
 800c286:	4770      	bx	lr
 800c288:	f110 0f16 	cmn.w	r0, #22
 800c28c:	da09      	bge.n	800c2a2 <scalbnf+0x9a>
 800c28e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c2c8 <scalbnf+0xc0>
 800c292:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c2cc <scalbnf+0xc4>
 800c296:	ee10 3a10 	vmov	r3, s0
 800c29a:	eeb0 7a67 	vmov.f32	s14, s15
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	e7d9      	b.n	800c256 <scalbnf+0x4e>
 800c2a2:	3019      	adds	r0, #25
 800c2a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c2a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c2ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c2d0 <scalbnf+0xc8>
 800c2b0:	ee07 3a90 	vmov	s15, r3
 800c2b4:	e7d7      	b.n	800c266 <scalbnf+0x5e>
 800c2b6:	bf00      	nop
 800c2b8:	ffff3cb0 	.word	0xffff3cb0
 800c2bc:	4c000000 	.word	0x4c000000
 800c2c0:	7149f2ca 	.word	0x7149f2ca
 800c2c4:	f149f2ca 	.word	0xf149f2ca
 800c2c8:	0da24260 	.word	0x0da24260
 800c2cc:	8da24260 	.word	0x8da24260
 800c2d0:	33000000 	.word	0x33000000

0800c2d4 <floorf>:
 800c2d4:	ee10 3a10 	vmov	r3, s0
 800c2d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c2dc:	3a7f      	subs	r2, #127	@ 0x7f
 800c2de:	2a16      	cmp	r2, #22
 800c2e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2e4:	dc2b      	bgt.n	800c33e <floorf+0x6a>
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	da12      	bge.n	800c310 <floorf+0x3c>
 800c2ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c350 <floorf+0x7c>
 800c2ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2fa:	dd06      	ble.n	800c30a <floorf+0x36>
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	da24      	bge.n	800c34a <floorf+0x76>
 800c300:	2900      	cmp	r1, #0
 800c302:	4b14      	ldr	r3, [pc, #80]	@ (800c354 <floorf+0x80>)
 800c304:	bf08      	it	eq
 800c306:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c30a:	ee00 3a10 	vmov	s0, r3
 800c30e:	4770      	bx	lr
 800c310:	4911      	ldr	r1, [pc, #68]	@ (800c358 <floorf+0x84>)
 800c312:	4111      	asrs	r1, r2
 800c314:	420b      	tst	r3, r1
 800c316:	d0fa      	beq.n	800c30e <floorf+0x3a>
 800c318:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c350 <floorf+0x7c>
 800c31c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c328:	ddef      	ble.n	800c30a <floorf+0x36>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bfbe      	ittt	lt
 800c32e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c332:	fa40 f202 	asrlt.w	r2, r0, r2
 800c336:	189b      	addlt	r3, r3, r2
 800c338:	ea23 0301 	bic.w	r3, r3, r1
 800c33c:	e7e5      	b.n	800c30a <floorf+0x36>
 800c33e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c342:	d3e4      	bcc.n	800c30e <floorf+0x3a>
 800c344:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c348:	4770      	bx	lr
 800c34a:	2300      	movs	r3, #0
 800c34c:	e7dd      	b.n	800c30a <floorf+0x36>
 800c34e:	bf00      	nop
 800c350:	7149f2ca 	.word	0x7149f2ca
 800c354:	bf800000 	.word	0xbf800000
 800c358:	007fffff 	.word	0x007fffff

0800c35c <_init>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr

0800c368 <_fini>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr
