
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800816c  0800816c  0000916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  0000a0bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008188  08008188  00009188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008190  08008190  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08008198  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0bc  2**0
                  CONTENTS
 10 .bss          000009e8  200000bc  200000bc  0000a0bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aa4  20000aa4  0000a0bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134b1  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033e8  00000000  00000000  0001d59d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001028  00000000  00000000  00020988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c45  00000000  00000000  000219b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f6c  00000000  00000000  000225f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b45  00000000  00000000  00045561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb33c  00000000  00000000  0005b0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001263e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004674  00000000  00000000  00126428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0012aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008154 	.word	0x08008154

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08008154 	.word	0x08008154

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fbf1 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f83b 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f931 	bl	8000768 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f8cb 	bl	80006a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800050a:	f000 f8f7 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800050e:	f007 f9cb 	bl	80078a8 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000512:	f000 f89b 	bl	800064c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000516:	2100      	movs	r1, #0
 8000518:	4814      	ldr	r0, [pc, #80]	@ (800056c <main+0x78>)
 800051a:	f000 fdaa 	bl	8001072 <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800051e:	f007 f9e9 	bl	80078f4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000522:	2101      	movs	r1, #1
 8000524:	4812      	ldr	r0, [pc, #72]	@ (8000570 <main+0x7c>)
 8000526:	f001 f81b 	bl	8001560 <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d015      	beq.n	800055c <main+0x68>
    {
    	for (int i = 0; i < SINE_RESOLUTION; i++) {
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	e00e      	b.n	8000554 <main+0x60>
    		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sine_wave[i]);
 8000536:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <main+0x80>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	480a      	ldr	r0, [pc, #40]	@ (800056c <main+0x78>)
 8000544:	f000 fdec 	bl	8001120 <HAL_DAC_SetValue>
    		HAL_Delay(1);  // change this to adjust tone frequency
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fc3b 	bl	8000dc4 <HAL_Delay>
    	for (int i = 0; i < SINE_RESOLUTION; i++) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b1f      	cmp	r3, #31
 8000558:	dded      	ble.n	8000536 <main+0x42>
 800055a:	e7e0      	b.n	800051e <main+0x2a>
    	}
    } else {
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 800055c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	4801      	ldr	r0, [pc, #4]	@ (800056c <main+0x78>)
 8000566:	f000 fddb 	bl	8001120 <HAL_DAC_SetValue>
    MX_USB_HOST_Process();
 800056a:	e7d8      	b.n	800051e <main+0x2a>
 800056c:	200000d8 	.word	0x200000d8
 8000570:	40020000 	.word	0x40020000
 8000574:	20000000 	.word	0x20000000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f007 fd56 	bl	8008038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d4:	2301      	movs	r3, #1
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fa58 	bl	8003ab4 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800060a:	f000 f9bb 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2105      	movs	r1, #5
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fcb9 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000638:	f000 f9a4 	bl	8000984 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	@ 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_DAC_Init+0x4c>)
 800065c:	4a0f      	ldr	r2, [pc, #60]	@ (800069c <MX_DAC_Init+0x50>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <MX_DAC_Init+0x4c>)
 8000662:	f000 fce4 	bl	800102e <HAL_DAC_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800066c:	f000 f98a 	bl	8000984 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_DAC_Init+0x4c>)
 8000680:	f000 fd78 	bl	8001174 <HAL_DAC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800068a:	f000 f97b 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000d8 	.word	0x200000d8
 800069c:	40007400 	.word	0x40007400

080006a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	@ (80006f4 <MX_I2C1_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_I2C1_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_I2C1_Init+0x50>)
 80006de:	f003 f8a5 	bl	800382c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f94c 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000ec 	.word	0x200000ec
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f003 fe35 	bl	80043bc <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f914 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000140 	.word	0x20000140
 8000764:	40013000 	.word	0x40013000

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	@ 0x30
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	4b7a      	ldr	r3, [pc, #488]	@ (800096c <MX_GPIO_Init+0x204>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a79      	ldr	r2, [pc, #484]	@ (800096c <MX_GPIO_Init+0x204>)
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b77      	ldr	r3, [pc, #476]	@ (800096c <MX_GPIO_Init+0x204>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	4b73      	ldr	r3, [pc, #460]	@ (800096c <MX_GPIO_Init+0x204>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a72      	ldr	r2, [pc, #456]	@ (800096c <MX_GPIO_Init+0x204>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b70      	ldr	r3, [pc, #448]	@ (800096c <MX_GPIO_Init+0x204>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	4b6c      	ldr	r3, [pc, #432]	@ (800096c <MX_GPIO_Init+0x204>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a6b      	ldr	r2, [pc, #428]	@ (800096c <MX_GPIO_Init+0x204>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b69      	ldr	r3, [pc, #420]	@ (800096c <MX_GPIO_Init+0x204>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	4b65      	ldr	r3, [pc, #404]	@ (800096c <MX_GPIO_Init+0x204>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a64      	ldr	r2, [pc, #400]	@ (800096c <MX_GPIO_Init+0x204>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b62      	ldr	r3, [pc, #392]	@ (800096c <MX_GPIO_Init+0x204>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	4b5e      	ldr	r3, [pc, #376]	@ (800096c <MX_GPIO_Init+0x204>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a5d      	ldr	r2, [pc, #372]	@ (800096c <MX_GPIO_Init+0x204>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b5b      	ldr	r3, [pc, #364]	@ (800096c <MX_GPIO_Init+0x204>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b57      	ldr	r3, [pc, #348]	@ (800096c <MX_GPIO_Init+0x204>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a56      	ldr	r2, [pc, #344]	@ (800096c <MX_GPIO_Init+0x204>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b54      	ldr	r3, [pc, #336]	@ (800096c <MX_GPIO_Init+0x204>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4851      	ldr	r0, [pc, #324]	@ (8000970 <MX_GPIO_Init+0x208>)
 800082c:	f000 feb0 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2101      	movs	r1, #1
 8000834:	484f      	ldr	r0, [pc, #316]	@ (8000974 <MX_GPIO_Init+0x20c>)
 8000836:	f000 feab 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800083a:	2200      	movs	r2, #0
 800083c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000840:	484d      	ldr	r0, [pc, #308]	@ (8000978 <MX_GPIO_Init+0x210>)
 8000842:	f000 fea5 	bl	8001590 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000846:	2308      	movs	r3, #8
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4844      	ldr	r0, [pc, #272]	@ (8000970 <MX_GPIO_Init+0x208>)
 800085e:	f000 fce3 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	483e      	ldr	r0, [pc, #248]	@ (8000974 <MX_GPIO_Init+0x20c>)
 800087a:	f000 fcd5 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800087e:	2308      	movs	r3, #8
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800088e:	2305      	movs	r3, #5
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x20c>)
 800089a:	f000 fcc5 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	4832      	ldr	r0, [pc, #200]	@ (800097c <MX_GPIO_Init+0x214>)
 80008b4:	f000 fcb8 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b8:	2304      	movs	r3, #4
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	482d      	ldr	r0, [pc, #180]	@ (8000980 <MX_GPIO_Init+0x218>)
 80008cc:	f000 fcac 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4824      	ldr	r0, [pc, #144]	@ (8000980 <MX_GPIO_Init+0x218>)
 80008ee:	f000 fc9b 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	@ (8000978 <MX_GPIO_Init+0x210>)
 800090c:	f000 fc8c 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000910:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000922:	2306      	movs	r3, #6
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <MX_GPIO_Init+0x20c>)
 800092e:	f000 fc7b 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <MX_GPIO_Init+0x210>)
 8000946:	f000 fc6f 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800094a:	2302      	movs	r3, #2
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0x208>)
 8000960:	f000 fc62 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	@ 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 faec 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_DAC_MspInit+0x7c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d127      	bne.n	8000a52 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_DAC_MspInit+0x80>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_DAC_MspInit+0x84>)
 8000a4e:	f000 fbeb 	bl	8001228 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40007400 	.word	0x40007400
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12c      	bne.n	8000ae4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac4:	f000 fbb0 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	4a07      	ldr	r2, [pc, #28]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	@ 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_SPI_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12b      	bne.n	8000b72 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b22:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b52:	23e0      	movs	r3, #224	@ 0xe0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b62:	2305      	movs	r3, #5
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_SPI_MspInit+0x8c>)
 8000b6e:	f000 fb5b 	bl	8001228 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40013000 	.word	0x40013000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f8d1 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f000 ffc9 	bl	8001b84 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000057c 	.word	0x2000057c

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f007 fa1c 	bl	8008068 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20020000 	.word	0x20020000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	20000198 	.word	0x20000198
 8000c64:	20000aa8 	.word	0x20000aa8

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c90:	f7ff ffea 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c94:	480c      	ldr	r0, [pc, #48]	@ (8000cc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c96:	490d      	ldr	r1, [pc, #52]	@ (8000ccc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c98:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c9c:	e002      	b.n	8000ca4 <LoopCopyDataInit>

08000c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca2:	3304      	adds	r3, #4

08000ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca8:	d3f9      	bcc.n	8000c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cac:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb0:	e001      	b.n	8000cb6 <LoopFillZerobss>

08000cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb4:	3204      	adds	r2, #4

08000cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb8:	d3fb      	bcc.n	8000cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cba:	f007 f9db 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc19 	bl	80004f4 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8000cd0:	08008198 	.word	0x08008198
  ldr r2, =_sbss
 8000cd4:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8000cd8:	20000aa4 	.word	0x20000aa4

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f94f 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f000 f808 	bl	8000d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe3c 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_InitTick+0x54>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4619      	mov	r1, r3
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f967 	bl	8001016 <HAL_SYSTICK_Config>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00e      	b.n	8000d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b0f      	cmp	r3, #15
 8000d56:	d80a      	bhi.n	8000d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f000 f92f 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d64:	4a06      	ldr	r2, [pc, #24]	@ (8000d80 <HAL_InitTick+0x5c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e000      	b.n	8000d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000040 	.word	0x20000040
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	20000044 	.word	0x20000044

08000d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <HAL_IncTick+0x20>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4413      	add	r3, r2
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_IncTick+0x24>)
 8000d96:	6013      	str	r3, [r2, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000048 	.word	0x20000048
 8000da8:	2000019c 	.word	0x2000019c

08000dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return uwTick;
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <HAL_GetTick+0x14>)
 8000db2:	681b      	ldr	r3, [r3, #0]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000019c 	.word	0x2000019c

08000dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff ffee 	bl	8000dac <HAL_GetTick>
 8000dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ddc:	d005      	beq.n	8000dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	@ (8000e08 <HAL_Delay+0x44>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4413      	add	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dea:	bf00      	nop
 8000dec:	f7ff ffde 	bl	8000dac <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d8f7      	bhi.n	8000dec <HAL_Delay+0x28>
  {
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000048 	.word	0x20000048

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4907      	ldr	r1, [pc, #28]	@ (8000ea8 <__NVIC_EnableIRQ+0x38>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff29 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff3e 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff31 	bl	8000e70 <__NVIC_EnableIRQ>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffa2 	bl	8000f68 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e014      	b.n	800106a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff fcc5 	bl	80009e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2201      	movs	r2, #1
 8001066:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e046      	b.n	8001114 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	795b      	ldrb	r3, [r3, #5]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_DAC_Start+0x20>
 800108e:	2302      	movs	r3, #2
 8001090:	e040      	b.n	8001114 <HAL_DAC_Start+0xa2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2202      	movs	r2, #2
 800109c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6819      	ldr	r1, [r3, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2201      	movs	r2, #1
 80010ac:	409a      	lsls	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10f      	bne.n	80010dc <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80010c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80010c8:	d11d      	bne.n	8001106 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	e014      	b.n	8001106 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	213c      	movs	r1, #60	@ 0x3c
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d107      	bne.n	8001106 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0202 	orr.w	r2, r2, #2
 8001104:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e015      	b.n	8001168 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d105      	bne.n	8001154 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	3308      	adds	r3, #8
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e004      	b.n	800115e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	3314      	adds	r3, #20
 800115c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	461a      	mov	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	@ 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_DAC_ConfigChannel+0x1c>
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e042      	b.n	800121a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	795b      	ldrb	r3, [r3, #5]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d101      	bne.n	80011a0 <HAL_DAC_ConfigChannel+0x2c>
 800119c:	2302      	movs	r3, #2
 800119e:	e03c      	b.n	800121a <HAL_DAC_ConfigChannel+0xa6>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2201      	movs	r2, #1
 80011a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2202      	movs	r2, #2
 80011aa:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6819      	ldr	r1, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	22c0      	movs	r2, #192	@ 0xc0
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001218:	7ffb      	ldrb	r3, [r7, #31]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	@ 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	@ 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e16b      	b.n	800151c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 815a 	bne.w	8001516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b4 	beq.w	8001516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b60      	ldr	r3, [pc, #384]	@ (8001534 <HAL_GPIO_Init+0x30c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001534 <HAL_GPIO_Init+0x30c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b5d      	ldr	r3, [pc, #372]	@ (8001534 <HAL_GPIO_Init+0x30c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001538 <HAL_GPIO_Init+0x310>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	@ (800153c <HAL_GPIO_Init+0x314>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02b      	beq.n	800144e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	@ (8001540 <HAL_GPIO_Init+0x318>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	@ (8001544 <HAL_GPIO_Init+0x31c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	@ (8001548 <HAL_GPIO_Init+0x320>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	@ (800154c <HAL_GPIO_Init+0x324>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x216>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	@ (8001550 <HAL_GPIO_Init+0x328>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x212>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	@ (8001554 <HAL_GPIO_Init+0x32c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	@ (8001558 <HAL_GPIO_Init+0x330>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x20a>
 800142e:	2307      	movs	r3, #7
 8001430:	e00e      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001432:	2308      	movs	r3, #8
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001436:	2306      	movs	r3, #6
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	@ (8001538 <HAL_GPIO_Init+0x310>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_GPIO_Init+0x334>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	@ (800155c <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <HAL_GPIO_Init+0x334>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	@ (800155c <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_GPIO_Init+0x334>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_GPIO_Init+0x334>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae90 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	@ 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af02      	add	r7, sp, #8
 80015c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e059      	b.n	8001688 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f006 f9b8 	bl	8007964 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2203      	movs	r2, #3
 80015f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001602:	d102      	bne.n	800160a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f002 ffd2 	bl	80045b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7c1a      	ldrb	r2, [r3, #16]
 800161c:	f88d 2000 	strb.w	r2, [sp]
 8001620:	3304      	adds	r3, #4
 8001622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001624:	f002 ff53 	bl	80044ce <USB_CoreInit>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e026      	b.n	8001688 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	4618      	mov	r0, r3
 8001642:	f002 ffca 	bl	80045da <USB_SetCurrentMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e017      	b.n	8001688 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7c1a      	ldrb	r2, [r3, #16]
 8001660:	f88d 2000 	strb.w	r2, [sp]
 8001664:	3304      	adds	r3, #4
 8001666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001668:	f003 f96c 	bl	8004944 <USB_HostInit>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2202      	movs	r2, #2
 8001676:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e004      	b.n	8001688 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	@ 0x2c
 8001694:	af04      	add	r7, sp, #16
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	70fb      	strb	r3, [r7, #3]
 80016a2:	460b      	mov	r3, r1
 80016a4:	70bb      	strb	r3, [r7, #2]
 80016a6:	4613      	mov	r3, r2
 80016a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80016aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_HCD_HC_Init+0x2c>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e09d      	b.n	80017f8 <HAL_HCD_HC_Init+0x168>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	011b      	lsls	r3, r3, #4
 80016cc:	1a9b      	subs	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	3319      	adds	r3, #25
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3314      	adds	r3, #20
 80016e8:	787a      	ldrb	r2, [r7, #1]
 80016ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	1a9b      	subs	r3, r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3315      	adds	r3, #21
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3326      	adds	r3, #38	@ 0x26
 8001710:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001714:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	78bb      	ldrb	r3, [r7, #2]
 800171a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800171e:	b2d8      	uxtb	r0, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3316      	adds	r3, #22
 800172e:	4602      	mov	r2, r0
 8001730:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	4619      	mov	r1, r3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fbc8 	bl	8001ecc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800173c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001740:	2b00      	cmp	r3, #0
 8001742:	da0a      	bge.n	800175a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	1a9b      	subs	r3, r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3317      	adds	r3, #23
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
 8001758:	e009      	b.n	800176e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800175a:	78fa      	ldrb	r2, [r7, #3]
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	1a9b      	subs	r3, r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	440b      	add	r3, r1
 8001768:	3317      	adds	r3, #23
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f003 fa4a 	bl	8004c0c <USB_GetHostSpeed>
 8001778:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800177a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10b      	bne.n	800179a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001782:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001786:	2b01      	cmp	r3, #1
 8001788:	d107      	bne.n	800179a <HAL_HCD_HC_Init+0x10a>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d104      	bne.n	800179a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2bbc      	cmp	r3, #188	@ 0xbc
 8001794:	d901      	bls.n	800179a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001796:	23bc      	movs	r3, #188	@ 0xbc
 8001798:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	1a9b      	subs	r3, r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3318      	adds	r3, #24
 80017aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	b298      	uxth	r0, r3
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	011b      	lsls	r3, r3, #4
 80017bc:	1a9b      	subs	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3328      	adds	r3, #40	@ 0x28
 80017c4:	4602      	mov	r2, r0
 80017c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	787c      	ldrb	r4, [r7, #1]
 80017d2:	78ba      	ldrb	r2, [r7, #2]
 80017d4:	78f9      	ldrb	r1, [r7, #3]
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	4623      	mov	r3, r4
 80017e6:	f003 fa39 	bl	8004c5c <USB_HC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_HCD_HC_Halt+0x1e>
 800181a:	2302      	movs	r3, #2
 800181c:	e00f      	b.n	800183e <HAL_HCD_HC_Halt+0x3e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fdcb 	bl	80053ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	70fb      	strb	r3, [r7, #3]
 800185a:	460b      	mov	r3, r1
 800185c:	70bb      	strb	r3, [r7, #2]
 800185e:	4613      	mov	r3, r2
 8001860:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	011b      	lsls	r3, r3, #4
 800186a:	1a9b      	subs	r3, r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3317      	adds	r3, #23
 8001872:	78ba      	ldrb	r2, [r7, #2]
 8001874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	3326      	adds	r3, #38	@ 0x26
 8001886:	787a      	ldrb	r2, [r7, #1]
 8001888:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800188a:	7c3b      	ldrb	r3, [r7, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d114      	bne.n	80018ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	332a      	adds	r3, #42	@ 0x2a
 80018a0:	2203      	movs	r2, #3
 80018a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	3319      	adds	r3, #25
 80018b4:	7f3a      	ldrb	r2, [r7, #28]
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e009      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	332a      	adds	r3, #42	@ 0x2a
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018ce:	787b      	ldrb	r3, [r7, #1]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	f200 8102 	bhi.w	8001ada <HAL_HCD_HC_SubmitRequest+0x292>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	08001ac5 	.word	0x08001ac5
 80018e4:	080019b1 	.word	0x080019b1
 80018e8:	08001a3b 	.word	0x08001a3b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80018ec:	7c3b      	ldrb	r3, [r7, #16]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f040 80f5 	bne.w	8001ade <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80018f4:	78bb      	ldrb	r3, [r7, #2]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d12d      	bne.n	8001956 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80018fa:	8b3b      	ldrh	r3, [r7, #24]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001900:	78fa      	ldrb	r2, [r7, #3]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	011b      	lsls	r3, r3, #4
 8001908:	1a9b      	subs	r3, r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	333d      	adds	r3, #61	@ 0x3d
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	333d      	adds	r3, #61	@ 0x3d
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10a      	bne.n	8001940 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332a      	adds	r3, #42	@ 0x2a
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800193e:	e0ce      	b.n	8001ade <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	332a      	adds	r3, #42	@ 0x2a
 8001950:	2202      	movs	r2, #2
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e0c3      	b.n	8001ade <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	331a      	adds	r3, #26
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 80b8 	bne.w	8001ade <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	333c      	adds	r3, #60	@ 0x3c
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	332a      	adds	r3, #42	@ 0x2a
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
      break;
 8001998:	e0a1      	b.n	8001ade <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	332a      	adds	r3, #42	@ 0x2a
 80019aa:	2202      	movs	r2, #2
 80019ac:	701a      	strb	r2, [r3, #0]
      break;
 80019ae:	e096      	b.n	8001ade <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d120      	bne.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	333d      	adds	r3, #61	@ 0x3d
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10a      	bne.n	80019e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	332a      	adds	r3, #42	@ 0x2a
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019e0:	e07e      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	332a      	adds	r3, #42	@ 0x2a
 80019f2:	2202      	movs	r2, #2
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e073      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	333c      	adds	r3, #60	@ 0x3c
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	332a      	adds	r3, #42	@ 0x2a
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
      break;
 8001a22:	e05d      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	332a      	adds	r3, #42	@ 0x2a
 8001a34:	2202      	movs	r2, #2
 8001a36:	701a      	strb	r2, [r3, #0]
      break;
 8001a38:	e052      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d120      	bne.n	8001a82 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	333d      	adds	r3, #61	@ 0x3d
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10a      	bne.n	8001a6c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	332a      	adds	r3, #42	@ 0x2a
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a6a:	e039      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	332a      	adds	r3, #42	@ 0x2a
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	701a      	strb	r2, [r3, #0]
      break;
 8001a80:	e02e      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	333c      	adds	r3, #60	@ 0x3c
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10a      	bne.n	8001aae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	332a      	adds	r3, #42	@ 0x2a
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e018      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	332a      	adds	r3, #42	@ 0x2a
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
      break;
 8001ac2:	e00d      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	332a      	adds	r3, #42	@ 0x2a
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e002      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001ada:	bf00      	nop
 8001adc:	e000      	b.n	8001ae0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001ade:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	332c      	adds	r3, #44	@ 0x2c
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	8b39      	ldrh	r1, [r7, #24]
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4403      	add	r3, r0
 8001b04:	3334      	adds	r3, #52	@ 0x34
 8001b06:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	334c      	adds	r3, #76	@ 0x4c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3338      	adds	r3, #56	@ 0x38
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3315      	adds	r3, #21
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	334d      	adds	r3, #77	@ 0x4d
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	011b      	lsls	r3, r3, #4
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	3310      	adds	r3, #16
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	1d19      	adds	r1, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	799b      	ldrb	r3, [r3, #6]
 8001b72:	461a      	mov	r2, r3
 8001b74:	f003 f99e 	bl	8004eb4 <USB_HC_StartXfer>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop

08001b84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fe93 	bl	80048c6 <USB_GetMode>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	f040 80fb 	bne.w	8001d9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fe56 	bl	800485e <USB_ReadInterrupts>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80f1 	beq.w	8001d9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fe4d 	bl	800485e <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bce:	d104      	bne.n	8001bda <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fe3d 	bl	800485e <USB_ReadInterrupts>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bee:	d104      	bne.n	8001bfa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fe2d 	bl	800485e <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c0e:	d104      	bne.n	8001c1a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 fe1d 	bl	800485e <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d103      	bne.n	8001c36 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2202      	movs	r2, #2
 8001c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fe0f 	bl	800485e <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c4a:	d120      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c54:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d113      	bne.n	8001c8e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c66:	2110      	movs	r1, #16
 8001c68:	6938      	ldr	r0, [r7, #16]
 8001c6a:	f002 fd02 	bl	8004672 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c6e:	6938      	ldr	r0, [r7, #16]
 8001c70:	f002 fd31 	bl	80046d6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7a5b      	ldrb	r3, [r3, #9]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d105      	bne.n	8001c88 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2101      	movs	r1, #1
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 ff22 	bl	8004acc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f005 fee9 	bl	8007a60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fde3 	bl	800485e <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca2:	d102      	bne.n	8001caa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f001 fd4d 	bl	8003744 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fdd5 	bl	800485e <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d106      	bne.n	8001ccc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f005 feb2 	bl	8007a28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 fdc4 	bl	800485e <USB_ReadInterrupts>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ce0:	d139      	bne.n	8001d56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fb5e 	bl	80053a8 <USB_HC_ReadInterrupt>
 8001cec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e025      	b.n	8001d40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d018      	beq.n	8001d3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	015a      	lsls	r2, r3, #5
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d1e:	d106      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f905 	bl	8001f36 <HCD_HC_IN_IRQHandler>
 8001d2c:	e005      	b.n	8001d3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 ff67 	bl	8002c08 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	795b      	ldrb	r3, [r3, #5]
 8001d44:	461a      	mov	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d3d3      	bcc.n	8001cf4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fd7f 	bl	800485e <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	2b10      	cmp	r3, #16
 8001d68:	d101      	bne.n	8001d6e <HAL_HCD_IRQHandler+0x1ea>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_HCD_IRQHandler+0x1ec>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d014      	beq.n	8001d9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0210 	bic.w	r2, r2, #16
 8001d82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f001 fbfe 	bl	8003586 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699a      	ldr	r2, [r3, #24]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0210 	orr.w	r2, r2, #16
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	e000      	b.n	8001d9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d9c:	bf00      	nop
    }
  }
}
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d101      	bne.n	8001dba <HAL_HCD_Start+0x16>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e013      	b.n	8001de2 <HAL_HCD_Start+0x3e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fee6 	bl	8004b9a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f002 fbdf 	bl	8004596 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_HCD_Stop+0x16>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e00d      	b.n	8001e1c <HAL_HCD_Stop+0x32>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fc39 	bl	8005684 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 fe88 	bl	8004b46 <USB_ResetPort>
 8001e36:	4603      	mov	r3, r0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	334c      	adds	r3, #76	@ 0x4c
 8001e5c:	781b      	ldrb	r3, [r3, #0]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	460b      	mov	r3, r1
 8001e74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3338      	adds	r3, #56	@ 0x38
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 feca 	bl	8004c3a <USB_GetCurrentFrame>
 8001ea6:	4603      	mov	r3, r0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 fea5 	bl	8004c0c <USB_GetHostSpeed>
 8001ec2:	4603      	mov	r3, r0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	331a      	adds	r3, #26
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	331b      	adds	r3, #27
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3325      	adds	r3, #37	@ 0x25
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3324      	adds	r3, #36	@ 0x24
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 fc95 	bl	8004884 <USB_ReadChInterrupts>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11a      	bne.n	8001f9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2304      	movs	r3, #4
 8001f74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	334d      	adds	r3, #77	@ 0x4d
 8001f86:	2207      	movs	r2, #7
 8001f88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fa19 	bl	80053ca <USB_HC_Halt>
 8001f98:	e09e      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fc6e 	bl	8004884 <USB_ReadChInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fb2:	d11b      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	334d      	adds	r3, #77	@ 0x4d
 8001fd8:	2208      	movs	r2, #8
 8001fda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 f9f0 	bl	80053ca <USB_HC_Halt>
 8001fea:	e075      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fc45 	bl	8004884 <USB_ReadChInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11a      	bne.n	800203a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002010:	461a      	mov	r2, r3
 8002012:	2308      	movs	r3, #8
 8002014:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	334d      	adds	r3, #77	@ 0x4d
 8002026:	2206      	movs	r2, #6
 8002028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f003 f9c9 	bl	80053ca <USB_HC_Halt>
 8002038:	e04e      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fc1e 	bl	8004884 <USB_ReadChInterrupts>
 8002048:	4603      	mov	r3, r0
 800204a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002052:	d11b      	bne.n	800208c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002054:	78fb      	ldrb	r3, [r7, #3]
 8002056:	015a      	lsls	r2, r3, #5
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4413      	add	r3, r2
 800205c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002060:	461a      	mov	r2, r3
 8002062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002066:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	334d      	adds	r3, #77	@ 0x4d
 8002078:	2209      	movs	r2, #9
 800207a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f003 f9a0 	bl	80053ca <USB_HC_Halt>
 800208a:	e025      	b.n	80020d8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fbf5 	bl	8004884 <USB_ReadChInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a0:	2b80      	cmp	r3, #128	@ 0x80
 80020a2:	d119      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	334d      	adds	r3, #77	@ 0x4d
 80020c6:	2207      	movs	r2, #7
 80020c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 f979 	bl	80053ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 fbcf 	bl	8004884 <USB_ReadChInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d112      	bne.n	8002118 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f965 	bl	80053ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002112:	6093      	str	r3, [r2, #8]
 8002114:	f000 bd75 	b.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fbaf 	bl	8004884 <USB_ReadChInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	f040 8128 	bne.w	8002382 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2320      	movs	r3, #32
 8002142:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	331b      	adds	r3, #27
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d119      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800215a:	78fa      	ldrb	r2, [r7, #3]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	331b      	adds	r3, #27
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	0151      	lsls	r1, r2, #5
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	440a      	add	r2, r1
 8002184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800218c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	799b      	ldrb	r3, [r3, #6]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01b      	beq.n	80021ce <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3330      	adds	r3, #48	@ 0x30
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	1ac9      	subs	r1, r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4403      	add	r3, r0
 80021ca:	3338      	adds	r3, #56	@ 0x38
 80021cc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334d      	adds	r3, #77	@ 0x4d
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3344      	adds	r3, #68	@ 0x44
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	2301      	movs	r3, #1
 8002206:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3326      	adds	r3, #38	@ 0x26
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3326      	adds	r3, #38	@ 0x26
 800222e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002230:	2b02      	cmp	r3, #2
 8002232:	d110      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	78fa      	ldrb	r2, [r7, #3]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f003 f8c4 	bl	80053ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2310      	movs	r3, #16
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	e03d      	b.n	80022d2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3326      	adds	r3, #38	@ 0x26
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d00a      	beq.n	8002282 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3326      	adds	r3, #38	@ 0x26
 800227c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800227e:	2b01      	cmp	r3, #1
 8002280:	d127      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	0151      	lsls	r1, r2, #5
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	440a      	add	r2, r1
 8002298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800229c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022a0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	334c      	adds	r3, #76	@ 0x4c
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	334c      	adds	r3, #76	@ 0x4c
 80022c6:	781a      	ldrb	r2, [r3, #0]
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 fbd5 	bl	8007a7c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d13b      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3338      	adds	r3, #56	@ 0x38
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4403      	add	r3, r0
 80022fa:	3328      	adds	r3, #40	@ 0x28
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	440b      	add	r3, r1
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4403      	add	r3, r0
 8002310:	3328      	adds	r3, #40	@ 0x28
 8002312:	881b      	ldrh	r3, [r3, #0]
 8002314:	fbb1 f3f3 	udiv	r3, r1, r3
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8470 	beq.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	333c      	adds	r3, #60	@ 0x3c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2d8      	uxtb	r0, r3
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	440b      	add	r3, r1
 8002348:	333c      	adds	r3, #60	@ 0x3c
 800234a:	4602      	mov	r2, r0
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	f000 bc58 	b.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	333c      	adds	r3, #60	@ 0x3c
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	333c      	adds	r3, #60	@ 0x3c
 800237a:	4602      	mov	r2, r0
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	f000 bc40 	b.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fa7a 	bl	8004884 <USB_ReadChInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b20      	cmp	r3, #32
 8002398:	d131      	bne.n	80023fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	2320      	movs	r3, #32
 80023aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	331a      	adds	r3, #26
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	f040 841f 	bne.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	331b      	adds	r3, #27
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	@ 0x4d
 80023e8:	2203      	movs	r2, #3
 80023ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 ffe8 	bl	80053ca <USB_HC_Halt>
 80023fa:	f000 bc02 	b.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fa3c 	bl	8004884 <USB_ReadChInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	f040 8305 	bne.w	8002a22 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002424:	461a      	mov	r2, r3
 8002426:	2302      	movs	r3, #2
 8002428:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800242a:	78fa      	ldrb	r2, [r7, #3]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	334d      	adds	r3, #77	@ 0x4d
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d114      	bne.n	800246a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	334d      	adds	r3, #77	@ 0x4d
 8002450:	2202      	movs	r2, #2
 8002452:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334c      	adds	r3, #76	@ 0x4c
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e2cc      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	334d      	adds	r3, #77	@ 0x4d
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b06      	cmp	r3, #6
 800247e:	d114      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	334d      	adds	r3, #77	@ 0x4d
 8002490:	2202      	movs	r2, #2
 8002492:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334c      	adds	r3, #76	@ 0x4c
 80024a4:	2205      	movs	r2, #5
 80024a6:	701a      	strb	r2, [r3, #0]
 80024a8:	e2ac      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	334d      	adds	r3, #77	@ 0x4d
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b07      	cmp	r3, #7
 80024be:	d00b      	beq.n	80024d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	334d      	adds	r3, #77	@ 0x4d
 80024d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024d2:	2b09      	cmp	r3, #9
 80024d4:	f040 80a6 	bne.w	8002624 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	334d      	adds	r3, #77	@ 0x4d
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3344      	adds	r3, #68	@ 0x44
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3344      	adds	r3, #68	@ 0x44
 800250e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3344      	adds	r3, #68	@ 0x44
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b02      	cmp	r3, #2
 8002524:	d943      	bls.n	80025ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3344      	adds	r3, #68	@ 0x44
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	331a      	adds	r3, #26
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d123      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	331b      	adds	r3, #27
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	331c      	adds	r3, #28
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	0151      	lsls	r1, r2, #5
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	440a      	add	r2, r1
 800258e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334c      	adds	r3, #76	@ 0x4c
 80025a8:	2204      	movs	r2, #4
 80025aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025ac:	e229      	b.n	8002a02 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	334c      	adds	r3, #76	@ 0x4c
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	3326      	adds	r3, #38	@ 0x26
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3326      	adds	r3, #38	@ 0x26
 80025e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f040 8209 	bne.w	8002a02 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002606:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800260e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002622:	e1ee      	b.n	8002a02 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	334d      	adds	r3, #77	@ 0x4d
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b05      	cmp	r3, #5
 8002638:	f040 80c8 	bne.w	80027cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	334d      	adds	r3, #77	@ 0x4d
 800264c:	2202      	movs	r2, #2
 800264e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	331b      	adds	r3, #27
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	f040 81ce 	bne.w	8002a04 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3326      	adds	r3, #38	@ 0x26
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b03      	cmp	r3, #3
 800267c:	d16b      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3348      	adds	r3, #72	@ 0x48
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1c59      	adds	r1, r3, #1
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4403      	add	r3, r0
 800269e:	3348      	adds	r3, #72	@ 0x48
 80026a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3348      	adds	r3, #72	@ 0x48
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d943      	bls.n	8002740 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3348      	adds	r3, #72	@ 0x48
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	331b      	adds	r3, #27
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	3344      	adds	r3, #68	@ 0x44
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d809      	bhi.n	800270a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80026f6:	78fa      	ldrb	r2, [r7, #3]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	331c      	adds	r3, #28
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	78fa      	ldrb	r2, [r7, #3]
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002728:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334c      	adds	r3, #76	@ 0x4c
 800273a:	2204      	movs	r2, #4
 800273c:	701a      	strb	r2, [r3, #0]
 800273e:	e014      	b.n	800276a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	334c      	adds	r3, #76	@ 0x4c
 8002750:	2202      	movs	r2, #2
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e009      	b.n	800276a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	334c      	adds	r3, #76	@ 0x4c
 8002766:	2202      	movs	r2, #2
 8002768:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3326      	adds	r3, #38	@ 0x26
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00b      	beq.n	8002798 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002780:	78fa      	ldrb	r2, [r7, #3]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3326      	adds	r3, #38	@ 0x26
 8002790:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002792:	2b02      	cmp	r3, #2
 8002794:	f040 8136 	bne.w	8002a04 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e11b      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334d      	adds	r3, #77	@ 0x4d
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f040 8081 	bne.w	80028e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	334d      	adds	r3, #77	@ 0x4d
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	331b      	adds	r3, #27
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	f040 80fa 	bne.w	8002a04 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334c      	adds	r3, #76	@ 0x4c
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800283e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002842:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	0151      	lsls	r1, r2, #5
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	440a      	add	r2, r1
 800285a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800285e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002862:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	78fa      	ldrb	r2, [r7, #3]
 8002874:	0151      	lsls	r1, r2, #5
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	440a      	add	r2, r1
 800287a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800287e:	f023 0320 	bic.w	r3, r3, #32
 8002882:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3326      	adds	r3, #38	@ 0x26
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	1a9b      	subs	r3, r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3326      	adds	r3, #38	@ 0x26
 80028aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 80a9 	bne.w	8002a04 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	e08e      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	334d      	adds	r3, #77	@ 0x4d
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d143      	bne.n	8002984 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334d      	adds	r3, #77	@ 0x4d
 800290c:	2202      	movs	r2, #2
 800290e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002910:	78fa      	ldrb	r2, [r7, #3]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	334c      	adds	r3, #76	@ 0x4c
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3326      	adds	r3, #38	@ 0x26
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	3326      	adds	r3, #38	@ 0x26
 800294a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800294c:	2b02      	cmp	r3, #2
 800294e:	d159      	bne.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002966:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800296e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002970:	78fb      	ldrb	r3, [r7, #3]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e03f      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	334d      	adds	r3, #77	@ 0x4d
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b08      	cmp	r3, #8
 8002998:	d126      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334d      	adds	r3, #77	@ 0x4d
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3344      	adds	r3, #68	@ 0x44
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c59      	adds	r1, r3, #1
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4403      	add	r3, r0
 80029ce:	3344      	adds	r3, #68	@ 0x44
 80029d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	334c      	adds	r3, #76	@ 0x4c
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	e00d      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	f000 8100 	beq.w	8002c00 <HCD_HC_IN_IRQHandler+0xcca>
 8002a00:	e000      	b.n	8002a04 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a02:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334c      	adds	r3, #76	@ 0x4c
 8002a14:	781a      	ldrb	r2, [r3, #0]
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f005 f82e 	bl	8007a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a20:	e0ef      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f001 ff2a 	bl	8004884 <USB_ReadChInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d12f      	bne.n	8002a9a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2340      	movs	r3, #64	@ 0x40
 8002a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	334d      	adds	r3, #77	@ 0x4d
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	331a      	adds	r3, #26
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	@ 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fc99 	bl	80053ca <USB_HC_Halt>
 8002a98:	e0b3      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 feee 	bl	8004884 <USB_ReadChInterrupts>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	f040 80a7 	bne.w	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3326      	adds	r3, #38	@ 0x26
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d11b      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3344      	adds	r3, #68	@ 0x44
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	334d      	adds	r3, #77	@ 0x4d
 8002aee:	2204      	movs	r2, #4
 8002af0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	78fa      	ldrb	r2, [r7, #3]
 8002af8:	4611      	mov	r1, r2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 fc65 	bl	80053ca <USB_HC_Halt>
 8002b00:	e03f      	b.n	8002b82 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3326      	adds	r3, #38	@ 0x26
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3326      	adds	r3, #38	@ 0x26
 8002b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d129      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3344      	adds	r3, #68	@ 0x44
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	799b      	ldrb	r3, [r3, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	331b      	adds	r3, #27
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2204      	movs	r2, #4
 8002b72:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 fc24 	bl	80053ca <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	331b      	adds	r3, #27
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d129      	bne.n	8002bec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	331b      	adds	r3, #27
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	0151      	lsls	r1, r2, #5
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	440a      	add	r2, r1
 8002be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002be6:	f043 0320 	orr.w	r3, r3, #32
 8002bea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	6093      	str	r3, [r2, #8]
 8002bfe:	e000      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c00:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fe2c 	bl	8004884 <USB_ReadChInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d11b      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c42:	461a      	mov	r2, r3
 8002c44:	2304      	movs	r3, #4
 8002c46:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	334d      	adds	r3, #77	@ 0x4d
 8002c58:	2207      	movs	r2, #7
 8002c5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fbb0 	bl	80053ca <USB_HC_Halt>
 8002c6a:	f000 bc89 	b.w	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fe04 	bl	8004884 <USB_ReadChInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 8082 	bne.w	8002d8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2320      	movs	r3, #32
 8002c98:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3319      	adds	r3, #25
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d124      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3319      	adds	r3, #25
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334c      	adds	r3, #76	@ 0x4c
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2203      	movs	r2, #3
 8002cea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 fb68 	bl	80053ca <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	331a      	adds	r3, #26
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 8437 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x978>
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	331b      	adds	r3, #27
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 842b 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d2a:	78fa      	ldrb	r2, [r7, #3]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	3326      	adds	r3, #38	@ 0x26
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d009      	beq.n	8002d54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	331b      	adds	r3, #27
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	334d      	adds	r3, #77	@ 0x4d
 8002d64:	2203      	movs	r2, #3
 8002d66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 fb2a 	bl	80053ca <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	3344      	adds	r3, #68	@ 0x44
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	e3f9      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 fd75 	bl	8004884 <USB_ReadChInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002da4:	d111      	bne.n	8002dca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002db8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f002 fb01 	bl	80053ca <USB_HC_Halt>
 8002dc8:	e3da      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fd56 	bl	8004884 <USB_ReadChInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d168      	bne.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3344      	adds	r3, #68	@ 0x44
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 fd40 	bl	8004884 <USB_ReadChInterrupts>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b40      	cmp	r3, #64	@ 0x40
 8002e0c:	d112      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3319      	adds	r3, #25
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	015a      	lsls	r2, r3, #5
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2e:	461a      	mov	r2, r3
 8002e30:	2340      	movs	r3, #64	@ 0x40
 8002e32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	331b      	adds	r3, #27
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d019      	beq.n	8002e7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	331b      	adds	r3, #27
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	0151      	lsls	r1, r2, #5
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	440a      	add	r2, r1
 8002e74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334d      	adds	r3, #77	@ 0x4d
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fa8c 	bl	80053ca <USB_HC_Halt>
 8002eb2:	e365      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 fce1 	bl	8004884 <USB_ReadChInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d139      	bne.n	8002f40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334d      	adds	r3, #77	@ 0x4d
 8002edc:	2205      	movs	r2, #5
 8002ede:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ee0:	78fa      	ldrb	r2, [r7, #3]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	331a      	adds	r3, #26
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	3319      	adds	r3, #25
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3344      	adds	r3, #68	@ 0x44
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f002 fa4f 	bl	80053ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2340      	movs	r3, #64	@ 0x40
 8002f3c:	6093      	str	r3, [r2, #8]
 8002f3e:	e31f      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fc9b 	bl	8004884 <USB_ReadChInterrupts>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d11a      	bne.n	8002f8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f58:	78fb      	ldrb	r3, [r7, #3]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	2308      	movs	r3, #8
 8002f68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334d      	adds	r3, #77	@ 0x4d
 8002f7a:	2206      	movs	r2, #6
 8002f7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 fa1f 	bl	80053ca <USB_HC_Halt>
 8002f8c:	e2f8      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 fc74 	bl	8004884 <USB_ReadChInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d144      	bne.n	8003030 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3344      	adds	r3, #68	@ 0x44
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334d      	adds	r3, #77	@ 0x4d
 8002fca:	2204      	movs	r2, #4
 8002fcc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3319      	adds	r3, #25
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d114      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	3318      	adds	r3, #24
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	3319      	adds	r3, #25
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f002 f9d7 	bl	80053ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	2310      	movs	r3, #16
 800302c:	6093      	str	r3, [r2, #8]
 800302e:	e2a7      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	78fa      	ldrb	r2, [r7, #3]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f001 fc23 	bl	8004884 <USB_ReadChInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003044:	2b80      	cmp	r3, #128	@ 0x80
 8003046:	f040 8083 	bne.w	8003150 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	799b      	ldrb	r3, [r3, #6]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d111      	bne.n	8003076 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334d      	adds	r3, #77	@ 0x4d
 8003062:	2207      	movs	r2, #7
 8003064:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f002 f9ab 	bl	80053ca <USB_HC_Halt>
 8003074:	e062      	b.n	800313c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3344      	adds	r3, #68	@ 0x44
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1c59      	adds	r1, r3, #1
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4403      	add	r3, r0
 8003096:	3344      	adds	r3, #68	@ 0x44
 8003098:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3344      	adds	r3, #68	@ 0x44
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d922      	bls.n	80030f6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3344      	adds	r3, #68	@ 0x44
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334c      	adds	r3, #76	@ 0x4c
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	@ 0x4c
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	4619      	mov	r1, r3
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f004 fcc4 	bl	8007a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f4:	e022      	b.n	800313c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334c      	adds	r3, #76	@ 0x4c
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003120:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003128:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	6093      	str	r3, [r2, #8]
 800314e:	e217      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fb93 	bl	8004884 <USB_ReadChInterrupts>
 800315e:	4603      	mov	r3, r0
 8003160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003168:	d11b      	bne.n	80031a2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	334d      	adds	r3, #77	@ 0x4d
 800317a:	2209      	movs	r2, #9
 800317c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f002 f91f 	bl	80053ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800319e:	6093      	str	r3, [r2, #8]
 80031a0:	e1ee      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f001 fb6a 	bl	8004884 <USB_ReadChInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	f040 81df 	bne.w	800357a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2302      	movs	r3, #2
 80031cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334d      	adds	r3, #77	@ 0x4d
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	f040 8093 	bne.w	800330c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	334d      	adds	r3, #77	@ 0x4d
 80031f6:	2202      	movs	r2, #2
 80031f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	334c      	adds	r3, #76	@ 0x4c
 800320a:	2201      	movs	r2, #1
 800320c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3326      	adds	r3, #38	@ 0x26
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d00b      	beq.n	800323c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3326      	adds	r3, #38	@ 0x26
 8003234:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	f040 8190 	bne.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	799b      	ldrb	r3, [r3, #6]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d115      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	333d      	adds	r3, #61	@ 0x3d
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2d8      	uxtb	r0, r3
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	333d      	adds	r3, #61	@ 0x3d
 800326c:	4602      	mov	r2, r0
 800326e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8171 	bne.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3334      	adds	r3, #52	@ 0x34
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8165 	beq.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3334      	adds	r3, #52	@ 0x34
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4403      	add	r3, r0
 80032b2:	3328      	adds	r3, #40	@ 0x28
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	440b      	add	r3, r1
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4403      	add	r3, r0
 80032c8:	3328      	adds	r3, #40	@ 0x28
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032d0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 813f 	beq.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	333d      	adds	r3, #61	@ 0x3d
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	f083 0301 	eor.w	r3, r3, #1
 80032f6:	b2d8      	uxtb	r0, r3
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	333d      	adds	r3, #61	@ 0x3d
 8003306:	4602      	mov	r2, r0
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e127      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334d      	adds	r3, #77	@ 0x4d
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d120      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334d      	adds	r3, #77	@ 0x4d
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	331b      	adds	r3, #27
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	f040 8107 	bne.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	@ 0x4c
 800335e:	2202      	movs	r2, #2
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e0fb      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d13a      	bne.n	80033f0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334d      	adds	r3, #77	@ 0x4d
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	334c      	adds	r3, #76	@ 0x4c
 800339e:	2202      	movs	r2, #2
 80033a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	331b      	adds	r3, #27
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	f040 80d1 	bne.w	800355c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	331b      	adds	r3, #27
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	0151      	lsls	r1, r2, #5
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	440a      	add	r2, r1
 80033e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ec:	6053      	str	r3, [r2, #4]
 80033ee:	e0b5      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	334d      	adds	r3, #77	@ 0x4d
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b05      	cmp	r3, #5
 8003404:	d114      	bne.n	8003430 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	334d      	adds	r3, #77	@ 0x4d
 8003416:	2202      	movs	r2, #2
 8003418:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334c      	adds	r3, #76	@ 0x4c
 800342a:	2202      	movs	r2, #2
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e095      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d114      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	334d      	adds	r3, #77	@ 0x4d
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334c      	adds	r3, #76	@ 0x4c
 800346a:	2205      	movs	r2, #5
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e075      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b07      	cmp	r3, #7
 8003484:	d00a      	beq.n	800349c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334d      	adds	r3, #77	@ 0x4d
 8003496:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003498:	2b09      	cmp	r3, #9
 800349a:	d170      	bne.n	800357e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	334d      	adds	r3, #77	@ 0x4d
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3344      	adds	r3, #68	@ 0x44
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	1c59      	adds	r1, r3, #1
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4403      	add	r3, r0
 80034d0:	3344      	adds	r3, #68	@ 0x44
 80034d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3344      	adds	r3, #68	@ 0x44
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d914      	bls.n	8003514 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	3344      	adds	r3, #68	@ 0x44
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334c      	adds	r3, #76	@ 0x4c
 800350e:	2204      	movs	r2, #4
 8003510:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003512:	e022      	b.n	800355a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334c      	adds	r3, #76	@ 0x4c
 8003524:	2202      	movs	r2, #2
 8003526:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800353e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003546:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	334c      	adds	r3, #76	@ 0x4c
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f004 fa82 	bl	8007a7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003578:	e002      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800357e:	bf00      	nop
  }
}
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b08a      	sub	sp, #40	@ 0x28
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	0c5b      	lsrs	r3, r3, #17
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d004      	beq.n	80035cc <HCD_RXQLVL_IRQHandler+0x46>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	f000 80b6 	beq.w	8003736 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ca:	e0b7      	b.n	800373c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 80b3 	beq.w	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	332c      	adds	r3, #44	@ 0x2c
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80a7 	beq.w	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3338      	adds	r3, #56	@ 0x38
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	18d1      	adds	r1, r2, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4403      	add	r3, r0
 8003610:	3334      	adds	r3, #52	@ 0x34
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4299      	cmp	r1, r3
 8003616:	f200 8083 	bhi.w	8003720 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	332c      	adds	r3, #44	@ 0x2c
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	b292      	uxth	r2, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f001 f8ba 	bl	80047ae <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	332c      	adds	r3, #44	@ 0x2c
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	18d1      	adds	r1, r2, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	332c      	adds	r3, #44	@ 0x2c
 8003660:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	3338      	adds	r3, #56	@ 0x38
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	18d1      	adds	r1, r2, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4403      	add	r3, r0
 8003686:	3338      	adds	r3, #56	@ 0x38
 8003688:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	0cdb      	lsrs	r3, r3, #19
 800369a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800369e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3328      	adds	r3, #40	@ 0x28
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d13f      	bne.n	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03c      	beq.n	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036de:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	333c      	adds	r3, #60	@ 0x3c
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f083 0301 	eor.w	r3, r3, #1
 8003708:	b2d8      	uxtb	r0, r3
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	333c      	adds	r3, #60	@ 0x3c
 800371a:	4602      	mov	r2, r0
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	e00c      	b.n	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334c      	adds	r3, #76	@ 0x4c
 8003730:	2204      	movs	r2, #4
 8003732:	701a      	strb	r2, [r3, #0]
      break;
 8003734:	e001      	b.n	800373a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003736:	bf00      	nop
 8003738:	e000      	b.n	800373c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800373a:	bf00      	nop
  }
}
 800373c:	bf00      	nop
 800373e:	3728      	adds	r7, #40	@ 0x28
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003770:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d10b      	bne.n	8003794 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f004 f95c 	bl	8007a44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f043 0302 	orr.w	r3, r3, #2
 8003792:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b08      	cmp	r3, #8
 800379c:	d132      	bne.n	8003804 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d126      	bne.n	80037fe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	7a5b      	ldrb	r3, [r3, #9]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d113      	bne.n	80037e0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037c2:	d106      	bne.n	80037d2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2102      	movs	r1, #2
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 f97e 	bl	8004acc <USB_InitFSLSPClkSel>
 80037d0:	e011      	b.n	80037f6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f977 	bl	8004acc <USB_InitFSLSPClkSel>
 80037de:	e00a      	b.n	80037f6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	79db      	ldrb	r3, [r3, #7]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037ee:	461a      	mov	r2, r3
 80037f0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80037f4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f004 f94e 	bl	8007a98 <HAL_HCD_PortEnabled_Callback>
 80037fc:	e002      	b.n	8003804 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f004 f958 	bl	8007ab4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b20      	cmp	r3, #32
 800380c:	d103      	bne.n	8003816 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6013      	str	r3, [r2, #0]
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e12b      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fd f908 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2224      	movs	r2, #36	@ 0x24
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0201 	bic.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800387e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800388e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003890:	f000 fd80 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
 8003894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4a81      	ldr	r2, [pc, #516]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d807      	bhi.n	80038b0 <HAL_I2C_Init+0x84>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a80      	ldr	r2, [pc, #512]	@ (8003aa4 <HAL_I2C_Init+0x278>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	bf94      	ite	ls
 80038a8:	2301      	movls	r3, #1
 80038aa:	2300      	movhi	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e006      	b.n	80038be <HAL_I2C_Init+0x92>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a7d      	ldr	r2, [pc, #500]	@ (8003aa8 <HAL_I2C_Init+0x27c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	bf94      	ite	ls
 80038b8:	2301      	movls	r3, #1
 80038ba:	2300      	movhi	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0e7      	b.n	8003a96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a78      	ldr	r2, [pc, #480]	@ (8003aac <HAL_I2C_Init+0x280>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d802      	bhi.n	8003900 <HAL_I2C_Init+0xd4>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	e009      	b.n	8003914 <HAL_I2C_Init+0xe8>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	4a69      	ldr	r2, [pc, #420]	@ (8003ab0 <HAL_I2C_Init+0x284>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	099b      	lsrs	r3, r3, #6
 8003912:	3301      	adds	r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	430b      	orrs	r3, r1
 800391a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003926:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	495c      	ldr	r1, [pc, #368]	@ (8003aa0 <HAL_I2C_Init+0x274>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d819      	bhi.n	8003968 <HAL_I2C_Init+0x13c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e59      	subs	r1, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003942:	1c59      	adds	r1, r3, #1
 8003944:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003948:	400b      	ands	r3, r1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <HAL_I2C_Init+0x138>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e59      	subs	r1, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	fbb1 f3f3 	udiv	r3, r1, r3
 800395c:	3301      	adds	r3, #1
 800395e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003962:	e051      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003964:	2304      	movs	r3, #4
 8003966:	e04f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d111      	bne.n	8003994 <HAL_I2C_Init+0x168>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1e58      	subs	r0, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e012      	b.n	80039ba <HAL_I2C_Init+0x18e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	0099      	lsls	r1, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039aa:	3301      	adds	r3, #1
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <HAL_I2C_Init+0x196>
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10e      	bne.n	80039e8 <HAL_I2C_Init+0x1bc>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1e58      	subs	r0, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	440b      	add	r3, r1
 80039d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039dc:	3301      	adds	r3, #1
 80039de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e6:	e00f      	b.n	8003a08 <HAL_I2C_Init+0x1dc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e58      	subs	r0, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	0099      	lsls	r1, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fe:	3301      	adds	r3, #1
 8003a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	6809      	ldr	r1, [r1, #0]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6911      	ldr	r1, [r2, #16]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68d2      	ldr	r2, [r2, #12]
 8003a42:	4311      	orrs	r1, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	000186a0 	.word	0x000186a0
 8003aa4:	001e847f 	.word	0x001e847f
 8003aa8:	003d08ff 	.word	0x003d08ff
 8003aac:	431bde83 	.word	0x431bde83
 8003ab0:	10624dd3 	.word	0x10624dd3

08003ab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e267      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d075      	beq.n	8003bbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ad2:	4b88      	ldr	r3, [pc, #544]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d00c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ade:	4b85      	ldr	r3, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d112      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aea:	4b82      	ldr	r3, [pc, #520]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05b      	beq.n	8003bbc <HAL_RCC_OscConfig+0x108>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d157      	bne.n	8003bbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e242      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCC_OscConfig+0x74>
 8003b1a:	4b76      	ldr	r3, [pc, #472]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a75      	ldr	r2, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	e01d      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x98>
 8003b32:	4b70      	ldr	r3, [pc, #448]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6f      	ldr	r2, [pc, #444]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a6c      	ldr	r2, [pc, #432]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	4b69      	ldr	r3, [pc, #420]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a68      	ldr	r2, [pc, #416]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b66      	ldr	r3, [pc, #408]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a65      	ldr	r2, [pc, #404]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d013      	beq.n	8003b94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6c:	f7fd f91e 	bl	8000dac <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd f91a 	bl	8000dac <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e207      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b86:	4b5b      	ldr	r3, [pc, #364]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0xc0>
 8003b92:	e014      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd f90a 	bl	8000dac <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9c:	f7fd f906 	bl	8000dac <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b64      	cmp	r3, #100	@ 0x64
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e1f3      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	4b51      	ldr	r3, [pc, #324]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f0      	bne.n	8003b9c <HAL_RCC_OscConfig+0xe8>
 8003bba:	e000      	b.n	8003bbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d063      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bca:	4b4a      	ldr	r3, [pc, #296]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d11c      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be2:	4b44      	ldr	r3, [pc, #272]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d116      	bne.n	8003c1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bee:	4b41      	ldr	r3, [pc, #260]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d005      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e1c7      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c06:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4937      	ldr	r1, [pc, #220]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1a:	e03a      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd f8bf 	bl	8000dac <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fd f8bb 	bl	8000dac <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1a8      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4925      	ldr	r1, [pc, #148]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	600b      	str	r3, [r1, #0]
 8003c64:	e015      	b.n	8003c92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c66:	4b24      	ldr	r3, [pc, #144]	@ (8003cf8 <HAL_RCC_OscConfig+0x244>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fd f89e 	bl	8000dac <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c74:	f7fd f89a 	bl	8000dac <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e187      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c86:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d036      	beq.n	8003d0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d016      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca6:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fd f87e 	bl	8000dac <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cb4:	f7fd f87a 	bl	8000dac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e167      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x200>
 8003cd2:	e01b      	b.n	8003d0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x248>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cda:	f7fd f867 	bl	8000dac <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce0:	e00e      	b.n	8003d00 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fd f863 	bl	8000dac <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d907      	bls.n	8003d00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e150      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d00:	4b88      	ldr	r3, [pc, #544]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ea      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 8097 	beq.w	8003e48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d1e:	4b81      	ldr	r3, [pc, #516]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	4a7c      	ldr	r2, [pc, #496]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d46:	2301      	movs	r3, #1
 8003d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4a:	4b77      	ldr	r3, [pc, #476]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d56:	4b74      	ldr	r3, [pc, #464]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a73      	ldr	r2, [pc, #460]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d62:	f7fd f823 	bl	8000dac <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6a:	f7fd f81f 	bl	8000dac <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e10c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8003f28 <HAL_RCC_OscConfig+0x474>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x2ea>
 8003d90:	4b64      	ldr	r3, [pc, #400]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d94:	4a63      	ldr	r2, [pc, #396]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x30c>
 8003da6:	4b5f      	ldr	r3, [pc, #380]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	4a5e      	ldr	r2, [pc, #376]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dac:	f043 0304 	orr.w	r3, r3, #4
 8003db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 0301 	orr.w	r3, r3, #1
 8003dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0x324>
 8003dc0:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc4:	4a57      	ldr	r2, [pc, #348]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dcc:	4b55      	ldr	r3, [pc, #340]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	4a54      	ldr	r2, [pc, #336]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f023 0304 	bic.w	r3, r3, #4
 8003dd6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d015      	beq.n	8003e0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fc ffe4 	bl	8000dac <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fc ffe0 	bl	8000dac <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e0cb      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b49      	ldr	r3, [pc, #292]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCC_OscConfig+0x334>
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0c:	f7fc ffce 	bl	8000dac <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fc ffca 	bl	8000dac <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0b5      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ee      	bne.n	8003e14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3c:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e40:	4a38      	ldr	r2, [pc, #224]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80a1 	beq.w	8003f94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e52:	4b34      	ldr	r3, [pc, #208]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d05c      	beq.n	8003f18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d141      	bne.n	8003eea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fc ff9e 	bl	8000dac <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e74:	f7fc ff9a 	bl	8000dac <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e087      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e86:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	019b      	lsls	r3, r3, #6
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	491b      	ldr	r1, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fc ff73 	bl	8000dac <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fc ff6f 	bl	8000dac <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e05c      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x416>
 8003ee8:	e054      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b10      	ldr	r3, [pc, #64]	@ (8003f2c <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fc ff5c 	bl	8000dac <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fc ff58 	bl	8000dac <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e045      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	@ (8003f24 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x444>
 8003f16:	e03d      	b.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e038      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f30:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa0 <HAL_RCC_OscConfig+0x4ec>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d028      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d121      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11a      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d111      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d107      	bne.n	8003f90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0cc      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d90c      	bls.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b65      	ldr	r3, [pc, #404]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b63      	ldr	r3, [pc, #396]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0b8      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d020      	beq.n	800402e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ff8:	4b59      	ldr	r3, [pc, #356]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004010:	4b53      	ldr	r3, [pc, #332]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a52      	ldr	r2, [pc, #328]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800401a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800401c:	4b50      	ldr	r3, [pc, #320]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	494d      	ldr	r1, [pc, #308]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d044      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d119      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d003      	beq.n	8004062 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800405e:	2b03      	cmp	r3, #3
 8004060:	d107      	bne.n	8004072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004062:	4b3f      	ldr	r3, [pc, #252]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004072:	4b3b      	ldr	r3, [pc, #236]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e067      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004082:	4b37      	ldr	r3, [pc, #220]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4934      	ldr	r1, [pc, #208]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	4313      	orrs	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004094:	f7fc fe8a 	bl	8000dac <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fc fe86 	bl	8000dac <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e04f      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 020c 	and.w	r2, r3, #12
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1eb      	bne.n	800409c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040c4:	4b25      	ldr	r3, [pc, #148]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20c      	bcs.n	80040ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d2:	4b22      	ldr	r3, [pc, #136]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	4b20      	ldr	r3, [pc, #128]	@ (800415c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0307 	and.w	r3, r3, #7
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e032      	b.n	8004152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	4916      	ldr	r1, [pc, #88]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004116:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	490e      	ldr	r1, [pc, #56]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800412a:	f000 f821 	bl	8004170 <HAL_RCC_GetSysClockFreq>
 800412e:	4602      	mov	r2, r0
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	490a      	ldr	r1, [pc, #40]	@ (8004164 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	5ccb      	ldrb	r3, [r1, r3]
 800413e:	fa22 f303 	lsr.w	r3, r2, r3
 8004142:	4a09      	ldr	r2, [pc, #36]	@ (8004168 <HAL_RCC_ClockConfig+0x1c4>)
 8004144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004146:	4b09      	ldr	r3, [pc, #36]	@ (800416c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc fdea 	bl	8000d24 <HAL_InitTick>

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023c00 	.word	0x40023c00
 8004160:	40023800 	.word	0x40023800
 8004164:	08008170 	.word	0x08008170
 8004168:	20000040 	.word	0x20000040
 800416c:	20000044 	.word	0x20000044

08004170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004174:	b094      	sub	sp, #80	@ 0x50
 8004176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004188:	4b79      	ldr	r3, [pc, #484]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d00d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004194:	2b08      	cmp	r3, #8
 8004196:	f200 80e1 	bhi.w	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_RCC_GetSysClockFreq+0x34>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d003      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x3a>
 80041a2:	e0db      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041a8:	e0db      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041aa:	4b73      	ldr	r3, [pc, #460]	@ (8004378 <HAL_RCC_GetSysClockFreq+0x208>)
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041ae:	e0d8      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d063      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b6a      	ldr	r3, [pc, #424]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041da:	2300      	movs	r3, #0
 80041dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80041de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041e2:	4622      	mov	r2, r4
 80041e4:	462b      	mov	r3, r5
 80041e6:	f04f 0000 	mov.w	r0, #0
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	0159      	lsls	r1, r3, #5
 80041f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f4:	0150      	lsls	r0, r2, #5
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4621      	mov	r1, r4
 80041fc:	1a51      	subs	r1, r2, r1
 80041fe:	6139      	str	r1, [r7, #16]
 8004200:	4629      	mov	r1, r5
 8004202:	eb63 0301 	sbc.w	r3, r3, r1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004214:	4659      	mov	r1, fp
 8004216:	018b      	lsls	r3, r1, #6
 8004218:	4651      	mov	r1, sl
 800421a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800421e:	4651      	mov	r1, sl
 8004220:	018a      	lsls	r2, r1, #6
 8004222:	4651      	mov	r1, sl
 8004224:	ebb2 0801 	subs.w	r8, r2, r1
 8004228:	4659      	mov	r1, fp
 800422a:	eb63 0901 	sbc.w	r9, r3, r1
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800423e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004242:	4690      	mov	r8, r2
 8004244:	4699      	mov	r9, r3
 8004246:	4623      	mov	r3, r4
 8004248:	eb18 0303 	adds.w	r3, r8, r3
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	462b      	mov	r3, r5
 8004250:	eb49 0303 	adc.w	r3, r9, r3
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004262:	4629      	mov	r1, r5
 8004264:	024b      	lsls	r3, r1, #9
 8004266:	4621      	mov	r1, r4
 8004268:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800426c:	4621      	mov	r1, r4
 800426e:	024a      	lsls	r2, r1, #9
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	2200      	movs	r2, #0
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800427a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800427c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004280:	f7fb ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	e058      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b38      	ldr	r3, [pc, #224]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	4618      	mov	r0, r3
 8004298:	4611      	mov	r1, r2
 800429a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800429e:	623b      	str	r3, [r7, #32]
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	f04f 0000 	mov.w	r0, #0
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	0159      	lsls	r1, r3, #5
 80042b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ba:	0150      	lsls	r0, r2, #5
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4641      	mov	r1, r8
 80042c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042c6:	4649      	mov	r1, r9
 80042c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042e0:	ebb2 040a 	subs.w	r4, r2, sl
 80042e4:	eb63 050b 	sbc.w	r5, r3, fp
 80042e8:	f04f 0200 	mov.w	r2, #0
 80042ec:	f04f 0300 	mov.w	r3, #0
 80042f0:	00eb      	lsls	r3, r5, #3
 80042f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	4614      	mov	r4, r2
 80042fa:	461d      	mov	r5, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	18e3      	adds	r3, r4, r3
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	464b      	mov	r3, r9
 8004304:	eb45 0303 	adc.w	r3, r5, r3
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004316:	4629      	mov	r1, r5
 8004318:	028b      	lsls	r3, r1, #10
 800431a:	4621      	mov	r1, r4
 800431c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004320:	4621      	mov	r1, r4
 8004322:	028a      	lsls	r2, r1, #10
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432a:	2200      	movs	r2, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	61fa      	str	r2, [r7, #28]
 8004330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004334:	f7fb ff48 	bl	80001c8 <__aeabi_uldivmod>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4613      	mov	r3, r2
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x200>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004350:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b05      	ldr	r3, [pc, #20]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x204>)
 800435e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004364:	4618      	mov	r0, r3
 8004366:	3750      	adds	r7, #80	@ 0x50
 8004368:	46bd      	mov	sp, r7
 800436a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	00f42400 	.word	0x00f42400
 8004378:	007a1200 	.word	0x007a1200

0800437c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004380:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCC_GetHCLKFreq+0x14>)
 8004382:	681b      	ldr	r3, [r3, #0]
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000040 	.word	0x20000040

08004394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004398:	f7ff fff0 	bl	800437c <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0a9b      	lsrs	r3, r3, #10
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4903      	ldr	r1, [pc, #12]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	40023800 	.word	0x40023800
 80043b8:	08008180 	.word	0x08008180

080043bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e07b      	b.n	80044c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d108      	bne.n	80043e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043de:	d009      	beq.n	80043f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	61da      	str	r2, [r3, #28]
 80043e6:	e005      	b.n	80043f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d106      	bne.n	8004414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc fb72 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800442a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004478:	ea42 0103 	orr.w	r1, r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004480:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0104 	and.w	r1, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	f003 0210 	and.w	r2, r3, #16
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044ce:	b084      	sub	sp, #16
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	f107 001c 	add.w	r0, r7, #28
 80044dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044e0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d123      	bne.n	8004530 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80044fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004510:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f9dc 	bl	80048e2 <USB_CoreReset>
 800452a:	4603      	mov	r3, r0
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	e01b      	b.n	8004568 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f9d0 	bl	80048e2 <USB_CoreReset>
 8004542:	4603      	mov	r3, r0
 8004544:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004546:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	@ 0x38
 800455a:	e005      	b.n	8004568 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004568:	7fbb      	ldrb	r3, [r7, #30]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10b      	bne.n	8004586 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f043 0206 	orr.w	r2, r3, #6
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004592:	b004      	add	sp, #16
 8004594:	4770      	bx	lr

08004596 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f043 0201 	orr.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 0201 	bic.w	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	460b      	mov	r3, r1
 80045e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d115      	bne.n	8004628 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004608:	200a      	movs	r0, #10
 800460a:	f7fc fbdb 	bl	8000dc4 <HAL_Delay>
      ms += 10U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	330a      	adds	r3, #10
 8004612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f956 	bl	80048c6 <USB_GetMode>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d01e      	beq.n	800465e <USB_SetCurrentMode+0x84>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2bc7      	cmp	r3, #199	@ 0xc7
 8004624:	d9f0      	bls.n	8004608 <USB_SetCurrentMode+0x2e>
 8004626:	e01a      	b.n	800465e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d115      	bne.n	800465a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800463a:	200a      	movs	r0, #10
 800463c:	f7fc fbc2 	bl	8000dc4 <HAL_Delay>
      ms += 10U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	330a      	adds	r3, #10
 8004644:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f93d 	bl	80048c6 <USB_GetMode>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <USB_SetCurrentMode+0x84>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2bc7      	cmp	r3, #199	@ 0xc7
 8004656:	d9f0      	bls.n	800463a <USB_SetCurrentMode+0x60>
 8004658:	e001      	b.n	800465e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e005      	b.n	800466a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2bc8      	cmp	r3, #200	@ 0xc8
 8004662:	d101      	bne.n	8004668 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004672:	b480      	push	{r7}
 8004674:	b085      	sub	sp, #20
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800468c:	d901      	bls.n	8004692 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e01b      	b.n	80046ca <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	daf2      	bge.n	8004680 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	f043 0220 	orr.w	r2, r3, #32
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046b6:	d901      	bls.n	80046bc <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d0f0      	beq.n	80046aa <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046ee:	d901      	bls.n	80046f4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e018      	b.n	8004726 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	daf2      	bge.n	80046e2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2210      	movs	r2, #16
 8004704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004712:	d901      	bls.n	8004718 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0310 	and.w	r3, r3, #16
 8004720:	2b10      	cmp	r3, #16
 8004722:	d0f0      	beq.n	8004706 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004732:	b480      	push	{r7}
 8004734:	b089      	sub	sp, #36	@ 0x24
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	4611      	mov	r1, r2
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	71fb      	strb	r3, [r7, #7]
 8004744:	4613      	mov	r3, r2
 8004746:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004750:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	d123      	bne.n	80047a0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004758:	88bb      	ldrh	r3, [r7, #4]
 800475a:	3303      	adds	r3, #3
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	e018      	b.n	8004798 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	031a      	lsls	r2, r3, #12
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4413      	add	r3, r2
 800476e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004772:	461a      	mov	r2, r3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6013      	str	r3, [r2, #0]
      pSrc++;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3301      	adds	r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3e2      	bcc.n	8004766 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	@ 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b08b      	sub	sp, #44	@ 0x2c
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	e014      	b.n	8004804 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	601a      	str	r2, [r3, #0]
    pDest++;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	3301      	adds	r3, #1
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	3301      	adds	r3, #1
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a3a      	ldr	r2, [r7, #32]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	429a      	cmp	r2, r3
 800480a:	d3e6      	bcc.n	80047da <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800480c:	8bfb      	ldrh	r3, [r7, #30]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01e      	beq.n	8004850 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800481c:	461a      	mov	r2, r3
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	b2da      	uxtb	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	701a      	strb	r2, [r3, #0]
      i++;
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	3301      	adds	r3, #1
 800483c:	623b      	str	r3, [r7, #32]
      pDest++;
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	3301      	adds	r3, #1
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004844:	8bfb      	ldrh	r3, [r7, #30]
 8004846:	3b01      	subs	r3, #1
 8004848:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800484a:	8bfb      	ldrh	r3, [r7, #30]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004852:	4618      	mov	r0, r3
 8004854:	372c      	adds	r7, #44	@ 0x2c
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4013      	ands	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004876:	68fb      	ldr	r3, [r7, #12]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	68ba      	ldr	r2, [r7, #8]
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80048b8:	68bb      	ldr	r3, [r7, #8]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f003 0301 	and.w	r3, r3, #1
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b085      	sub	sp, #20
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048fa:	d901      	bls.n	8004900 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e01b      	b.n	8004938 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	daf2      	bge.n	80048ee <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f043 0201 	orr.w	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	3301      	adds	r3, #1
 800491c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004924:	d901      	bls.n	800492a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e006      	b.n	8004938 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d0f0      	beq.n	8004918 <USB_CoreReset+0x36>

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004944:	b084      	sub	sp, #16
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004964:	461a      	mov	r2, r3
 8004966:	2300      	movs	r3, #0
 8004968:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d119      	bne.n	80049ce <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800499a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d10a      	bne.n	80049b8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049b0:	f043 0304 	orr.w	r3, r3, #4
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e014      	b.n	80049e2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049c6:	f023 0304 	bic.w	r3, r3, #4
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	e009      	b.n	80049e2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80049dc:	f023 0304 	bic.w	r3, r3, #4
 80049e0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049e2:	2110      	movs	r1, #16
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fe44 	bl	8004672 <USB_FlushTxFifo>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fe6e 	bl	80046d6 <USB_FlushRxFifo>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e015      	b.n	8004a36 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a16:	461a      	mov	r2, r3
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	3301      	adds	r3, #1
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d3e3      	bcc.n	8004a0a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a18      	ldr	r2, [pc, #96]	@ (8004ab4 <USB_HostInit+0x170>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d10b      	bne.n	8004a70 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a15      	ldr	r2, [pc, #84]	@ (8004ab8 <USB_HostInit+0x174>)
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <USB_HostInit+0x178>)
 8004a6a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8004a6e:	e009      	b.n	8004a84 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2280      	movs	r2, #128	@ 0x80
 8004a74:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a11      	ldr	r2, [pc, #68]	@ (8004ac0 <USB_HostInit+0x17c>)
 8004a7a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <USB_HostInit+0x180>)
 8004a80:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	f043 0210 	orr.w	r2, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699a      	ldr	r2, [r3, #24]
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac8 <USB_HostInit+0x184>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ab0:	b004      	add	sp, #16
 8004ab2:	4770      	bx	lr
 8004ab4:	40040000 	.word	0x40040000
 8004ab8:	01000200 	.word	0x01000200
 8004abc:	00e00300 	.word	0x00e00300
 8004ac0:	00600080 	.word	0x00600080
 8004ac4:	004000e0 	.word	0x004000e0
 8004ac8:	a3200008 	.word	0xa3200008

08004acc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b14:	461a      	mov	r2, r3
 8004b16:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004b1a:	6053      	str	r3, [r2, #4]
 8004b1c:	e00c      	b.n	8004b38 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d107      	bne.n	8004b34 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004b30:	6053      	str	r3, [r2, #4]
 8004b32:	e001      	b.n	8004b38 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004b66:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b74:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b76:	2064      	movs	r0, #100	@ 0x64
 8004b78:	f7fc f924 	bl	8000dc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b88:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b8a:	200a      	movs	r0, #10
 8004b8c:	f7fc f91a 	bl	8000dc4 <HAL_Delay>

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004bbe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <USB_DriveVbus+0x44>
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d106      	bne.n	8004bde <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004bd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bdc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be8:	d109      	bne.n	8004bfe <USB_DriveVbus+0x64>
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bfc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	0c5b      	lsrs	r3, r3, #17
 8004c2a:	f003 0303 	and.w	r3, r3, #3
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	b29b      	uxth	r3, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	70fb      	strb	r3, [r7, #3]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	70bb      	strb	r3, [r7, #2]
 8004c72:	4613      	mov	r3, r2
 8004c74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004c7e:	78fb      	ldrb	r3, [r7, #3]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d87c      	bhi.n	8004d94 <USB_HC_Init+0x138>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <USB_HC_Init+0x44>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004d57 	.word	0x08004d57
 8004ca8:	08004cb1 	.word	0x08004cb1
 8004cac:	08004d19 	.word	0x08004d19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cb0:	78fb      	ldrb	r3, [r7, #3]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004cc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da10      	bge.n	8004cee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	0151      	lsls	r1, r2, #5
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ce6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cea:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004cec:	e055      	b.n	8004d9a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8004eb0 <USB_HC_Init+0x254>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d151      	bne.n	8004d9a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d10:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004d14:	60d3      	str	r3, [r2, #12]
      break;
 8004d16:	e040      	b.n	8004d9a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d24:	461a      	mov	r2, r3
 8004d26:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004d2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	da34      	bge.n	8004d9e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d54:	e023      	b.n	8004d9e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d62:	461a      	mov	r2, r3
 8004d64:	f240 2325 	movw	r3, #549	@ 0x225
 8004d68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da17      	bge.n	8004da2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d8c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004d90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d92:	e006      	b.n	8004da2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	77fb      	strb	r3, [r7, #31]
      break;
 8004d98:	e004      	b.n	8004da4 <USB_HC_Init+0x148>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <USB_HC_Init+0x148>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <USB_HC_Init+0x148>
      break;
 8004da2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	2300      	movs	r3, #0
 8004db4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 030f 	and.w	r3, r3, #15
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dea:	6939      	ldr	r1, [r7, #16]
 8004dec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004df0:	4313      	orrs	r3, r2
 8004df2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da03      	bge.n	8004e10 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e001      	b.n	8004e14 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fef9 	bl	8004c0c <USB_GetHostSpeed>
 8004e1a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d106      	bne.n	8004e32 <USB_HC_Init+0x1d6>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d003      	beq.n	8004e32 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e001      	b.n	8004e36 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e36:	787b      	ldrb	r3, [r7, #1]
 8004e38:	059b      	lsls	r3, r3, #22
 8004e3a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e3e:	78bb      	ldrb	r3, [r7, #2]
 8004e40:	02db      	lsls	r3, r3, #11
 8004e42:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e46:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e48:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e4c:	049b      	lsls	r3, r3, #18
 8004e4e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004e54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e5a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004e70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e74:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e76:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d003      	beq.n	8004e86 <USB_HC_Init+0x22a>
 8004e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10f      	bne.n	8004ea6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ea0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ea4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40040000 	.word	0x40040000

08004eb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	@ 0x30
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	785b      	ldrb	r3, [r3, #1]
 8004eca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ed0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800504c <USB_HC_StartXfer+0x198>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d12f      	bne.n	8004f3a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d11c      	bne.n	8004f1a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	7c9b      	ldrb	r3, [r3, #18]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <USB_HC_StartXfer+0x3c>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	7c9b      	ldrb	r3, [r3, #18]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d124      	bne.n	8004f3a <USB_HC_StartXfer+0x86>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	799b      	ldrb	r3, [r3, #6]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d120      	bne.n	8004f3a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60d3      	str	r3, [r2, #12]
 8004f18:	e00f      	b.n	8004f3a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	791b      	ldrb	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10b      	bne.n	8004f3a <USB_HC_StartXfer+0x86>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	795b      	ldrb	r3, [r3, #5]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d107      	bne.n	8004f3a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	785b      	ldrb	r3, [r3, #1]
 8004f2e:	4619      	mov	r1, r3
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fb6b 	bl	800560c <USB_DoPing>
        return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e232      	b.n	80053a0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	799b      	ldrb	r3, [r3, #6]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d158      	bne.n	8004ff4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004f42:	2301      	movs	r3, #1
 8004f44:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	8a92      	ldrh	r2, [r2, #20]
 8004f54:	fb03 f202 	mul.w	r2, r3, r2
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	61da      	str	r2, [r3, #28]
 8004f5c:	e07c      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	7c9b      	ldrb	r3, [r3, #18]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d130      	bne.n	8004fc8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	2bbc      	cmp	r3, #188	@ 0xbc
 8004f6c:	d918      	bls.n	8004fa0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	8a9b      	ldrh	r3, [r3, #20]
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d003      	beq.n	8004f90 <USB_HC_StartXfer+0xdc>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d103      	bne.n	8004f98 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2202      	movs	r2, #2
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	e05f      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	e05b      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d007      	beq.n	8004fc0 <USB_HC_StartXfer+0x10c>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d003      	beq.n	8004fc0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2204      	movs	r2, #4
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e04b      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e047      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10d      	bne.n	8004fea <USB_HC_StartXfer+0x136>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	8a92      	ldrh	r2, [r2, #20]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d907      	bls.n	8004fea <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	8a92      	ldrh	r2, [r2, #20]
 8004fe0:	fb03 f202 	mul.w	r2, r3, r2
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61da      	str	r2, [r3, #28]
 8004fe8:	e036      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	61da      	str	r2, [r3, #28]
 8004ff2:	e031      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d018      	beq.n	800502e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	8a92      	ldrh	r2, [r2, #20]
 8005004:	4413      	add	r3, r2
 8005006:	3b01      	subs	r3, #1
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	8a92      	ldrh	r2, [r2, #20]
 800500c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005010:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005012:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	429a      	cmp	r2, r3
 8005018:	d90b      	bls.n	8005032 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800501a:	8b7b      	ldrh	r3, [r7, #26]
 800501c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800501e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	8a92      	ldrh	r2, [r2, #20]
 8005024:	fb03 f202 	mul.w	r2, r3, r2
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	61da      	str	r2, [r3, #28]
 800502c:	e001      	b.n	8005032 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800502e:	2301      	movs	r3, #1
 8005030:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800503a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	8a92      	ldrh	r2, [r2, #20]
 8005040:	fb03 f202 	mul.w	r2, r3, r2
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	61da      	str	r2, [r3, #28]
 8005048:	e006      	b.n	8005058 <USB_HC_StartXfer+0x1a4>
 800504a:	bf00      	nop
 800504c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005060:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005062:	04d9      	lsls	r1, r3, #19
 8005064:	4ba3      	ldr	r3, [pc, #652]	@ (80052f4 <USB_HC_StartXfer+0x440>)
 8005066:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005068:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	7d9b      	ldrb	r3, [r3, #22]
 800506e:	075b      	lsls	r3, r3, #29
 8005070:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005074:	69f9      	ldr	r1, [r7, #28]
 8005076:	0148      	lsls	r0, r1, #5
 8005078:	6a39      	ldr	r1, [r7, #32]
 800507a:	4401      	add	r1, r0
 800507c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005080:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005082:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d009      	beq.n	800509e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6999      	ldr	r1, [r3, #24]
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800509a:	460a      	mov	r2, r1
 800509c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	bf0c      	ite	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	2300      	movne	r3, #0
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	0151      	lsls	r1, r2, #5
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	440a      	add	r2, r1
 80050cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80050d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80050d4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	7e7b      	ldrb	r3, [r7, #25]
 80050e6:	075b      	lsls	r3, r3, #29
 80050e8:	69f9      	ldr	r1, [r7, #28]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	6a39      	ldr	r1, [r7, #32]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80050f4:	4313      	orrs	r3, r2
 80050f6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	799b      	ldrb	r3, [r3, #6]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f040 80c3 	bne.w	8005288 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	7c5b      	ldrb	r3, [r3, #17]
 8005106:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800510c:	4313      	orrs	r3, r2
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	6a3a      	ldr	r2, [r7, #32]
 8005114:	440a      	add	r2, r1
 8005116:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800511a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800511e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	440a      	add	r2, r1
 8005136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800513a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800513e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	79db      	ldrb	r3, [r3, #7]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d123      	bne.n	8005190 <USB_HC_StartXfer+0x2dc>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	78db      	ldrb	r3, [r3, #3]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11f      	bne.n	8005190 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	6a3a      	ldr	r2, [r7, #32]
 8005164:	440a      	add	r2, r1
 8005166:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800516a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800516e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	440a      	add	r2, r1
 8005186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800518a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800518e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	7c9b      	ldrb	r3, [r3, #18]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d003      	beq.n	80051a0 <USB_HC_StartXfer+0x2ec>
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	7c9b      	ldrb	r3, [r3, #18]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d117      	bne.n	80051d0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d113      	bne.n	80051d0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	78db      	ldrb	r3, [r3, #3]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10f      	bne.n	80051d0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ce:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	7c9b      	ldrb	r3, [r3, #18]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d162      	bne.n	800529e <USB_HC_StartXfer+0x3ea>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	78db      	ldrb	r3, [r3, #3]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d15e      	bne.n	800529e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d858      	bhi.n	800529c <USB_HC_StartXfer+0x3e8>
 80051ea:	a201      	add	r2, pc, #4	@ (adr r2, 80051f0 <USB_HC_StartXfer+0x33c>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005201 	.word	0x08005201
 80051f4:	08005223 	.word	0x08005223
 80051f8:	08005245 	.word	0x08005245
 80051fc:	08005267 	.word	0x08005267
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	6a3a      	ldr	r2, [r7, #32]
 8005214:	440a      	add	r2, r1
 8005216:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800521a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800521e:	6053      	str	r3, [r2, #4]
          break;
 8005220:	e03d      	b.n	800529e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	440a      	add	r2, r1
 8005238:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800523c:	f043 030e 	orr.w	r3, r3, #14
 8005240:	6053      	str	r3, [r2, #4]
          break;
 8005242:	e02c      	b.n	800529e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	6a3a      	ldr	r2, [r7, #32]
 8005258:	440a      	add	r2, r1
 800525a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005262:	6053      	str	r3, [r2, #4]
          break;
 8005264:	e01b      	b.n	800529e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	4413      	add	r3, r2
 800526e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	6a3a      	ldr	r2, [r7, #32]
 800527a:	440a      	add	r2, r1
 800527c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005284:	6053      	str	r3, [r2, #4]
          break;
 8005286:	e00a      	b.n	800529e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	4413      	add	r3, r2
 8005290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005294:	461a      	mov	r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	6053      	str	r3, [r2, #4]
 800529a:	e000      	b.n	800529e <USB_HC_StartXfer+0x3ea>
          break;
 800529c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052b4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e003      	b.n	80052d0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80052ce:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052d6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	e055      	b.n	80053a0 <USB_HC_StartXfer+0x4ec>
 80052f4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	78db      	ldrb	r3, [r3, #3]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d14e      	bne.n	800539e <USB_HC_StartXfer+0x4ea>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d04a      	beq.n	800539e <USB_HC_StartXfer+0x4ea>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	79db      	ldrb	r3, [r3, #7]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d146      	bne.n	800539e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	7c9b      	ldrb	r3, [r3, #18]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d831      	bhi.n	800537c <USB_HC_StartXfer+0x4c8>
 8005318:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <USB_HC_StartXfer+0x46c>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	08005331 	.word	0x08005331
 8005324:	08005355 	.word	0x08005355
 8005328:	08005331 	.word	0x08005331
 800532c:	08005355 	.word	0x08005355
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	3303      	adds	r3, #3
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800533a:	8afa      	ldrh	r2, [r7, #22]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	b29b      	uxth	r3, r3
 8005342:	429a      	cmp	r2, r3
 8005344:	d91c      	bls.n	8005380 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f043 0220 	orr.w	r2, r3, #32
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	619a      	str	r2, [r3, #24]
        }
        break;
 8005352:	e015      	b.n	8005380 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	3303      	adds	r3, #3
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800535e:	8afa      	ldrh	r2, [r7, #22]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	b29b      	uxth	r3, r3
 800536a:	429a      	cmp	r2, r3
 800536c:	d90a      	bls.n	8005384 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	619a      	str	r2, [r3, #24]
        }
        break;
 800537a:	e003      	b.n	8005384 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <USB_HC_StartXfer+0x4d2>
        break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <USB_HC_StartXfer+0x4d2>
        break;
 8005384:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6999      	ldr	r1, [r3, #24]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	785a      	ldrb	r2, [r3, #1]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	b29b      	uxth	r3, r3
 8005394:	2000      	movs	r0, #0
 8005396:	9000      	str	r0, [sp, #0]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7ff f9ca 	bl	8004732 <USB_WritePacket>
  }

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	b29b      	uxth	r3, r3
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b089      	sub	sp, #36	@ 0x24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	0c9b      	lsrs	r3, r3, #18
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	0fdb      	lsrs	r3, r3, #31
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	0fdb      	lsrs	r3, r3, #31
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b20      	cmp	r3, #32
 800542e:	d10d      	bne.n	800544c <USB_HC_Halt+0x82>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <USB_HC_Halt+0x82>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d002      	beq.n	8005448 <USB_HC_Halt+0x7e>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b03      	cmp	r3, #3
 8005446:	d101      	bne.n	800544c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e0d8      	b.n	80055fe <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <USB_HC_Halt+0x8e>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d173      	bne.n	8005540 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005472:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005476:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d14a      	bne.n	800551a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d133      	bne.n	80054f8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054ae:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ce:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	3301      	adds	r3, #1
 80054d4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054dc:	d82e      	bhi.n	800553c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054f4:	d0ec      	beq.n	80054d0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054f6:	e081      	b.n	80055fc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	0151      	lsls	r1, r2, #5
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	440a      	add	r2, r1
 800550e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005516:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005518:	e070      	b.n	80055fc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005534:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005538:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800553a:	e05f      	b.n	80055fc <USB_HC_Halt+0x232>
            break;
 800553c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800553e:	e05d      	b.n	80055fc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800555a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800555e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d133      	bne.n	80055d8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800558a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800558e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	69fa      	ldr	r2, [r7, #28]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055ae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	3301      	adds	r3, #1
 80055b4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055bc:	d81d      	bhi.n	80055fa <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055d4:	d0ec      	beq.n	80055b0 <USB_HC_Halt+0x1e6>
 80055d6:	e011      	b.n	80055fc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e000      	b.n	80055fc <USB_HC_Halt+0x232>
          break;
 80055fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3724      	adds	r7, #36	@ 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
	...

0800560c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005620:	2301      	movs	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	04da      	lsls	r2, r3, #19
 8005628:	4b15      	ldr	r3, [pc, #84]	@ (8005680 <USB_DoPing+0x74>)
 800562a:	4013      	ands	r3, r2
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	0151      	lsls	r1, r2, #5
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	440a      	add	r2, r1
 8005634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005638:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800563c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005654:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800565c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566a:	461a      	mov	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	1ff80000 	.word	0x1ff80000

08005684 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fe ff8d 	bl	80045b8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800569e:	2110      	movs	r1, #16
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fe ffe6 	bl	8004672 <USB_FlushTxFifo>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff f810 	bl	80046d6 <USB_FlushRxFifo>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
 80056c4:	e01f      	b.n	8005706 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056fa:	461a      	mov	r2, r3
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	3301      	adds	r3, #1
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b0f      	cmp	r3, #15
 800570a:	d9dc      	bls.n	80056c6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800570c:	2300      	movs	r3, #0
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e034      	b.n	800577c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005728:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005730:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005738:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005758:	d80c      	bhi.n	8005774 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800576c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005770:	d0ec      	beq.n	800574c <USB_StopHost+0xc8>
 8005772:	e000      	b.n	8005776 <USB_StopHost+0xf2>
        break;
 8005774:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	3301      	adds	r3, #1
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d9c7      	bls.n	8005712 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005788:	461a      	mov	r2, r3
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f04f 32ff 	mov.w	r2, #4294967295
 8005796:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fe fefc 	bl	8004596 <USB_EnableGlobalInt>

  return ret;
 800579e:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3720      	adds	r7, #32
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b089      	sub	sp, #36	@ 0x24
 80057ac:	af04      	add	r7, sp, #16
 80057ae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80057b0:	2301      	movs	r3, #1
 80057b2:	2202      	movs	r2, #2
 80057b4:	2102      	movs	r1, #2
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fc85 	bl	80060c6 <USBH_FindInterface>
 80057bc:	4603      	mov	r3, r0
 80057be:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2bff      	cmp	r3, #255	@ 0xff
 80057c4:	d002      	beq.n	80057cc <USBH_CDC_InterfaceInit+0x24>
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d901      	bls.n	80057d0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057cc:	2302      	movs	r3, #2
 80057ce:	e13d      	b.n	8005a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fc5a 	bl	800608e <USBH_SelectInterface>
 80057da:	4603      	mov	r3, r0
 80057dc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e131      	b.n	8005a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80057ee:	2050      	movs	r0, #80	@ 0x50
 80057f0:	f002 fb64 	bl	8007ebc <malloc>
 80057f4:	4603      	mov	r3, r0
 80057f6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005808:	2302      	movs	r3, #2
 800580a:	e11f      	b.n	8005a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800580c:	2250      	movs	r2, #80	@ 0x50
 800580e:	2100      	movs	r1, #0
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	f002 fc11 	bl	8008038 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	211a      	movs	r1, #26
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b25b      	sxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	da15      	bge.n	800585a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	211a      	movs	r1, #26
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	4413      	add	r3, r2
 800583a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	211a      	movs	r1, #26
 800584a:	fb01 f303 	mul.w	r3, r1, r3
 800584e:	4413      	add	r3, r2
 8005850:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 ffbe 	bl	80077e2 <USBH_AllocPipe>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	7819      	ldrb	r1, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7858      	ldrb	r0, [r3, #1]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	8952      	ldrh	r2, [r2, #10]
 8005886:	9202      	str	r2, [sp, #8]
 8005888:	2203      	movs	r2, #3
 800588a:	9201      	str	r2, [sp, #4]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	4623      	mov	r3, r4
 8005890:	4602      	mov	r2, r0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 ff76 	bl	8007784 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2200      	movs	r2, #0
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fa85 	bl	8007db0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80058a6:	2300      	movs	r3, #0
 80058a8:	2200      	movs	r2, #0
 80058aa:	210a      	movs	r1, #10
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fc0a 	bl	80060c6 <USBH_FindInterface>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2bff      	cmp	r3, #255	@ 0xff
 80058ba:	d002      	beq.n	80058c2 <USBH_CDC_InterfaceInit+0x11a>
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d901      	bls.n	80058c6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80058c2:	2302      	movs	r3, #2
 80058c4:	e0c2      	b.n	8005a4c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	211a      	movs	r1, #26
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	b25b      	sxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da16      	bge.n	800590c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	211a      	movs	r1, #26
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	4413      	add	r3, r2
 80058ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	211a      	movs	r1, #26
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005904:	881a      	ldrh	r2, [r3, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	835a      	strh	r2, [r3, #26]
 800590a:	e015      	b.n	8005938 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	211a      	movs	r1, #26
 8005912:	fb01 f303 	mul.w	r3, r1, r3
 8005916:	4413      	add	r3, r2
 8005918:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	211a      	movs	r1, #26
 8005928:	fb01 f303 	mul.w	r3, r1, r3
 800592c:	4413      	add	r3, r2
 800592e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005932:	881a      	ldrh	r2, [r3, #0]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	211a      	movs	r1, #26
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	b25b      	sxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	da16      	bge.n	800597e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	211a      	movs	r1, #26
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	211a      	movs	r1, #26
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005976:	881a      	ldrh	r2, [r3, #0]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	835a      	strh	r2, [r3, #26]
 800597c:	e015      	b.n	80059aa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	211a      	movs	r1, #26
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	4413      	add	r3, r2
 800598a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800598e:	781a      	ldrb	r2, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	211a      	movs	r1, #26
 800599a:	fb01 f303 	mul.w	r3, r1, r3
 800599e:	4413      	add	r3, r2
 80059a0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	7b9b      	ldrb	r3, [r3, #14]
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 ff16 	bl	80077e2 <USBH_AllocPipe>
 80059b6:	4603      	mov	r3, r0
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	7bdb      	ldrb	r3, [r3, #15]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f001 ff0c 	bl	80077e2 <USBH_AllocPipe>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	7b59      	ldrb	r1, [r3, #13]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	7b98      	ldrb	r0, [r3, #14]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	8b12      	ldrh	r2, [r2, #24]
 80059ea:	9202      	str	r2, [sp, #8]
 80059ec:	2202      	movs	r2, #2
 80059ee:	9201      	str	r2, [sp, #4]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4623      	mov	r3, r4
 80059f4:	4602      	mov	r2, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fec4 	bl	8007784 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	7b19      	ldrb	r1, [r3, #12]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	7bd8      	ldrb	r0, [r3, #15]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	8b52      	ldrh	r2, [r2, #26]
 8005a14:	9202      	str	r2, [sp, #8]
 8005a16:	2202      	movs	r2, #2
 8005a18:	9201      	str	r2, [sp, #4]
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 feaf 	bl	8007784 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	7b5b      	ldrb	r3, [r3, #13]
 8005a32:	2200      	movs	r2, #0
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 f9ba 	bl	8007db0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	7b1b      	ldrb	r3, [r3, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f002 f9b3 	bl	8007db0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd90      	pop	{r4, r7, pc}

08005a54 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fea4 	bl	80077c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fecf 	bl	8007824 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	7b1b      	ldrb	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00e      	beq.n	8005ab2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	7b1b      	ldrb	r3, [r3, #12]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fe91 	bl	80077c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	7b1b      	ldrb	r3, [r3, #12]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 febc 	bl	8007824 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	7b5b      	ldrb	r3, [r3, #13]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	7b5b      	ldrb	r3, [r3, #13]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fe7e 	bl	80077c2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	7b5b      	ldrb	r3, [r3, #13]
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fea9 	bl	8007824 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f002 f9ed 	bl	8007ecc <free>
    phost->pActiveClass->pData = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005af8:	2200      	movs	r2, #0
 8005afa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b084      	sub	sp, #16
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3340      	adds	r3, #64	@ 0x40
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8b1 	bl	8005c86 <GetLineCoding>
 8005b24:	4603      	mov	r3, r0
 8005b26:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d105      	bne.n	8005b3a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8005b34:	2102      	movs	r1, #2
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d877      	bhi.n	8005c58 <USBH_CDC_Process+0x114>
 8005b68:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <USBH_CDC_Process+0x2c>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b85 	.word	0x08005b85
 8005b74:	08005b8b 	.word	0x08005b8b
 8005b78:	08005bbb 	.word	0x08005bbb
 8005b7c:	08005c2f 	.word	0x08005c2f
 8005b80:	08005c3d 	.word	0x08005c3d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	73fb      	strb	r3, [r7, #15]
      break;
 8005b88:	e06d      	b.n	8005c66 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f897 	bl	8005cc4 <SetLineCoding>
 8005b96:	4603      	mov	r3, r0
 8005b98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005ba8:	e058      	b.n	8005c5c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d055      	beq.n	8005c5c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005bb8:	e050      	b.n	8005c5c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	3340      	adds	r3, #64	@ 0x40
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f860 	bl	8005c86 <GetLineCoding>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d126      	bne.n	8005c1e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	791b      	ldrb	r3, [r3, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d13b      	bne.n	8005c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d133      	bne.n	8005c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d12b      	bne.n	8005c60 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c10:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d124      	bne.n	8005c60 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f958 	bl	8005ecc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005c1c:	e020      	b.n	8005c60 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d01d      	beq.n	8005c60 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2204      	movs	r2, #4
 8005c28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8005c2c:	e018      	b.n	8005c60 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f867 	bl	8005d02 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f8da 	bl	8005dee <CDC_ProcessReception>
      break;
 8005c3a:	e014      	b.n	8005c66 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 f81a 	bl	8006c78 <USBH_ClrFeature>
 8005c44:	4603      	mov	r3, r0
 8005c46:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8005c56:	e005      	b.n	8005c64 <USBH_CDC_Process+0x120>

    default:
      break;
 8005c58:	bf00      	nop
 8005c5a:	e004      	b.n	8005c66 <USBH_CDC_Process+0x122>
      break;
 8005c5c:	bf00      	nop
 8005c5e:	e002      	b.n	8005c66 <USBH_CDC_Process+0x122>
      break;
 8005c60:	bf00      	nop
 8005c62:	e000      	b.n	8005c66 <USBH_CDC_Process+0x122>
      break;
 8005c64:	bf00      	nop

  }

  return status;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	22a1      	movs	r2, #161	@ 0xa1
 8005c94:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2221      	movs	r2, #33	@ 0x21
 8005c9a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2207      	movs	r2, #7
 8005cac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fb14 	bl	80072e2 <USBH_CtlReq>
 8005cba:	4603      	mov	r3, r0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2221      	movs	r2, #33	@ 0x21
 8005cd2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2207      	movs	r2, #7
 8005cea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2207      	movs	r2, #7
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 faf5 	bl	80072e2 <USBH_CtlReq>
 8005cf8:	4603      	mov	r3, r0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af02      	add	r7, sp, #8
 8005d08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d14:	2300      	movs	r3, #0
 8005d16:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d002      	beq.n	8005d28 <CDC_ProcessTransmission+0x26>
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d023      	beq.n	8005d6e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005d26:	e05e      	b.n	8005de6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	8b12      	ldrh	r2, [r2, #24]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d90b      	bls.n	8005d4c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	69d9      	ldr	r1, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8b1a      	ldrh	r2, [r3, #24]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	7b5b      	ldrb	r3, [r3, #13]
 8005d40:	2001      	movs	r0, #1
 8005d42:	9000      	str	r0, [sp, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f001 fcda 	bl	80076fe <USBH_BulkSendData>
 8005d4a:	e00b      	b.n	8005d64 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	7b5b      	ldrb	r3, [r3, #13]
 8005d5a:	2001      	movs	r0, #1
 8005d5c:	9000      	str	r0, [sp, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fccd 	bl	80076fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005d6c:	e03b      	b.n	8005de6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	7b5b      	ldrb	r3, [r3, #13]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 fff1 	bl	8007d5c <USBH_LL_GetURBState>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005d7e:	7afb      	ldrb	r3, [r7, #11]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d128      	bne.n	8005dd6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	8b12      	ldrh	r2, [r2, #24]
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d90e      	bls.n	8005dae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	8b12      	ldrh	r2, [r2, #24]
 8005d98:	1a9a      	subs	r2, r3, r2
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	8b12      	ldrh	r2, [r2, #24]
 8005da6:	441a      	add	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	61da      	str	r2, [r3, #28]
 8005dac:	e002      	b.n	8005db4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d004      	beq.n	8005dc6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005dc4:	e00e      	b.n	8005de4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f868 	bl	8005ea4 <USBH_CDC_TransmitCallback>
      break;
 8005dd4:	e006      	b.n	8005de4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d103      	bne.n	8005de4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8005de4:	bf00      	nop
  }
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d002      	beq.n	8005e14 <CDC_ProcessReception+0x26>
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d00e      	beq.n	8005e30 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005e12:	e043      	b.n	8005e9c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	6a19      	ldr	r1, [r3, #32]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	8b5a      	ldrh	r2, [r3, #26]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	7b1b      	ldrb	r3, [r3, #12]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fc91 	bl	8007748 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2204      	movs	r2, #4
 8005e2a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8005e2e:	e035      	b.n	8005e9c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	7b1b      	ldrb	r3, [r3, #12]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f001 ff90 	bl	8007d5c <USBH_LL_GetURBState>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d129      	bne.n	8005e9a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	7b1b      	ldrb	r3, [r3, #12]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f001 fef3 	bl	8007c38 <USBH_LL_GetLastXferSize>
 8005e52:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d016      	beq.n	8005e8c <CDC_ProcessReception+0x9e>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	8b5b      	ldrh	r3, [r3, #26]
 8005e62:	461a      	mov	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d110      	bne.n	8005e8c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	6a1a      	ldr	r2, [r3, #32]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	441a      	add	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8005e8a:	e006      	b.n	8005e9a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f80f 	bl	8005eb8 <USBH_CDC_ReceiveCallback>
      break;
 8005e9a:	bf00      	nop
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e029      	b.n	8005f4c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	79fa      	ldrb	r2, [r7, #7]
 8005efc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 f81f 	bl	8005f54 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f001 fdc3 	bl	8007ad0 <USBH_LL_Init>

  return USBH_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e009      	b.n	8005f7a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	33e0      	adds	r3, #224	@ 0xe0
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b0f      	cmp	r3, #15
 8005f7e:	d9f2      	bls.n	8005f66 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e009      	b.n	8005f9a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa0:	d3f1      	bcc.n	8005f86 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2240      	movs	r2, #64	@ 0x40
 8005fc6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	331c      	adds	r3, #28
 8005ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f002 f81d 	bl	8008038 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006004:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f002 f814 	bl	8008038 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006016:	2212      	movs	r2, #18
 8006018:	2100      	movs	r1, #0
 800601a:	4618      	mov	r0, r3
 800601c:	f002 f80c 	bl	8008038 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006026:	223e      	movs	r2, #62	@ 0x3e
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f002 f804 	bl	8008038 <memset>

  return USBH_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
 8006042:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10e      	bne.n	8006076 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	33de      	adds	r3, #222	@ 0xde
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	73fb      	strb	r3, [r7, #15]
 8006074:	e004      	b.n	8006080 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006076:	2302      	movs	r3, #2
 8006078:	73fb      	strb	r3, [r7, #15]
 800607a:	e001      	b.n	8006080 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800607c:	2302      	movs	r3, #2
 800607e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d204      	bcs.n	80060b4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	78fa      	ldrb	r2, [r7, #3]
 80060ae:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80060b2:	e001      	b.n	80060b8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80060b4:	2302      	movs	r3, #2
 80060b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	4608      	mov	r0, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	461a      	mov	r2, r3
 80060d4:	4603      	mov	r3, r0
 80060d6:	70fb      	strb	r3, [r7, #3]
 80060d8:	460b      	mov	r3, r1
 80060da:	70bb      	strb	r3, [r7, #2]
 80060dc:	4613      	mov	r3, r2
 80060de:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80060ee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80060f0:	e025      	b.n	800613e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
 80060f4:	221a      	movs	r2, #26
 80060f6:	fb02 f303 	mul.w	r3, r2, r3
 80060fa:	3308      	adds	r3, #8
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	3302      	adds	r3, #2
 8006102:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	795b      	ldrb	r3, [r3, #5]
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	429a      	cmp	r2, r3
 800610c:	d002      	beq.n	8006114 <USBH_FindInterface+0x4e>
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	2bff      	cmp	r3, #255	@ 0xff
 8006112:	d111      	bne.n	8006138 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006118:	78ba      	ldrb	r2, [r7, #2]
 800611a:	429a      	cmp	r2, r3
 800611c:	d002      	beq.n	8006124 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800611e:	78bb      	ldrb	r3, [r7, #2]
 8006120:	2bff      	cmp	r3, #255	@ 0xff
 8006122:	d109      	bne.n	8006138 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006128:	787a      	ldrb	r2, [r7, #1]
 800612a:	429a      	cmp	r2, r3
 800612c:	d002      	beq.n	8006134 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800612e:	787b      	ldrb	r3, [r7, #1]
 8006130:	2bff      	cmp	r3, #255	@ 0xff
 8006132:	d101      	bne.n	8006138 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	e006      	b.n	8006146 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
 800613a:	3301      	adds	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800613e:	7dfb      	ldrb	r3, [r7, #23]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d9d6      	bls.n	80060f2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006144:	23ff      	movs	r3, #255	@ 0xff
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 fcf4 	bl	8007b48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006160:	2101      	movs	r1, #1
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fe0d 	bl	8007d82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b088      	sub	sp, #32
 8006178:	af04      	add	r7, sp, #16
 800617a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800617c:	2302      	movs	r3, #2
 800617e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d102      	bne.n	8006196 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2203      	movs	r2, #3
 8006194:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b0b      	cmp	r3, #11
 800619e:	f200 81bb 	bhi.w	8006518 <USBH_Process+0x3a4>
 80061a2:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <USBH_Process+0x34>)
 80061a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a8:	080061d9 	.word	0x080061d9
 80061ac:	0800620b 	.word	0x0800620b
 80061b0:	08006273 	.word	0x08006273
 80061b4:	080064b3 	.word	0x080064b3
 80061b8:	08006519 	.word	0x08006519
 80061bc:	08006313 	.word	0x08006313
 80061c0:	08006459 	.word	0x08006459
 80061c4:	08006349 	.word	0x08006349
 80061c8:	08006369 	.word	0x08006369
 80061cc:	08006387 	.word	0x08006387
 80061d0:	080063cb 	.word	0x080063cb
 80061d4:	0800649b 	.word	0x0800649b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 819b 	beq.w	800651c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80061ec:	20c8      	movs	r0, #200	@ 0xc8
 80061ee:	f001 fe12 	bl	8007e16 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fd05 	bl	8007c02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006208:	e188      	b.n	800651c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006210:	2b01      	cmp	r3, #1
 8006212:	d107      	bne.n	8006224 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006222:	e18a      	b.n	800653a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800622a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800622e:	d914      	bls.n	800625a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006236:	3301      	adds	r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006246:	2b03      	cmp	r3, #3
 8006248:	d903      	bls.n	8006252 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	220d      	movs	r2, #13
 800624e:	701a      	strb	r2, [r3, #0]
      break;
 8006250:	e173      	b.n	800653a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
      break;
 8006258:	e16f      	b.n	800653a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006260:	f103 020a 	add.w	r2, r3, #10
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800626a:	200a      	movs	r0, #10
 800626c:	f001 fdd3 	bl	8007e16 <USBH_Delay>
      break;
 8006270:	e163      	b.n	800653a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006282:	2104      	movs	r1, #4
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006288:	2064      	movs	r0, #100	@ 0x64
 800628a:	f001 fdc4 	bl	8007e16 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f001 fc90 	bl	8007bb4 <USBH_LL_GetSpeed>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2205      	movs	r2, #5
 80062a2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fa9b 	bl	80077e2 <USBH_AllocPipe>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80062b4:	2180      	movs	r1, #128	@ 0x80
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fa93 	bl	80077e2 <USBH_AllocPipe>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7919      	ldrb	r1, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80062d8:	9202      	str	r2, [sp, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	2280      	movs	r2, #128	@ 0x80
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 fa4d 	bl	8007784 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	7959      	ldrb	r1, [r3, #5]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80062fe:	9202      	str	r2, [sp, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	9201      	str	r2, [sp, #4]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4603      	mov	r3, r0
 8006308:	2200      	movs	r2, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 fa3a 	bl	8007784 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006310:	e113      	b.n	800653a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f916 	bl	8006544 <USBH_HandleEnum>
 8006318:	4603      	mov	r3, r0
 800631a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 80fd 	bne.w	8006520 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006334:	2b01      	cmp	r3, #1
 8006336:	d103      	bne.n	8006340 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2208      	movs	r2, #8
 800633c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800633e:	e0ef      	b.n	8006520 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2207      	movs	r2, #7
 8006344:	701a      	strb	r2, [r3, #0]
      break;
 8006346:	e0eb      	b.n	8006520 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 80e8 	beq.w	8006524 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800635a:	2101      	movs	r1, #1
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2208      	movs	r2, #8
 8006364:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006366:	e0dd      	b.n	8006524 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fc3a 	bl	8006bea <USBH_SetCfg>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 80d5 	bne.w	8006528 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2209      	movs	r2, #9
 8006382:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006384:	e0d0      	b.n	8006528 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d016      	beq.n	80063c2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006394:	2101      	movs	r1, #1
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fc4a 	bl	8006c30 <USBH_SetFeature>
 800639c:	4603      	mov	r3, r0
 800639e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d103      	bne.n	80063b0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	220a      	movs	r2, #10
 80063ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063ae:	e0bd      	b.n	800652c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	f040 80b9 	bne.w	800652c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	220a      	movs	r2, #10
 80063be:	701a      	strb	r2, [r3, #0]
      break;
 80063c0:	e0b4      	b.n	800652c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	220a      	movs	r2, #10
 80063c6:	701a      	strb	r2, [r3, #0]
      break;
 80063c8:	e0b0      	b.n	800652c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80ad 	beq.w	8006530 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
 80063e2:	e016      	b.n	8006412 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32de      	adds	r2, #222	@ 0xde
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	791a      	ldrb	r2, [r3, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d108      	bne.n	800640c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	32de      	adds	r2, #222	@ 0xde
 8006400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800640a:	e005      	b.n	8006418 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	3301      	adds	r3, #1
 8006410:	73fb      	strb	r3, [r7, #15]
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0e5      	beq.n	80063e4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	4798      	blx	r3
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2206      	movs	r2, #6
 8006438:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006440:	2103      	movs	r1, #3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006446:	e073      	b.n	8006530 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	220d      	movs	r2, #13
 800644c:	701a      	strb	r2, [r3, #0]
      break;
 800644e:	e06f      	b.n	8006530 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	220d      	movs	r2, #13
 8006454:	701a      	strb	r2, [r3, #0]
      break;
 8006456:	e06b      	b.n	8006530 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d017      	beq.n	8006492 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	4798      	blx	r3
 800646e:	4603      	mov	r3, r0
 8006470:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006472:	7bbb      	ldrb	r3, [r7, #14]
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d103      	bne.n	8006482 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	220b      	movs	r2, #11
 800647e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006480:	e058      	b.n	8006534 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d154      	bne.n	8006534 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	220d      	movs	r2, #13
 800648e:	701a      	strb	r2, [r3, #0]
      break;
 8006490:	e050      	b.n	8006534 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220d      	movs	r2, #13
 8006496:	701a      	strb	r2, [r3, #0]
      break;
 8006498:	e04c      	b.n	8006534 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d049      	beq.n	8006538 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	4798      	blx	r3
      }
      break;
 80064b0:	e042      	b.n	8006538 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fd4a 	bl	8005f54 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80064ee:	2105      	movs	r1, #5
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d107      	bne.n	8006510 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fe22 	bl	8006152 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800650e:	e014      	b.n	800653a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 fb19 	bl	8007b48 <USBH_LL_Start>
      break;
 8006516:	e010      	b.n	800653a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006518:	bf00      	nop
 800651a:	e00e      	b.n	800653a <USBH_Process+0x3c6>
      break;
 800651c:	bf00      	nop
 800651e:	e00c      	b.n	800653a <USBH_Process+0x3c6>
      break;
 8006520:	bf00      	nop
 8006522:	e00a      	b.n	800653a <USBH_Process+0x3c6>
    break;
 8006524:	bf00      	nop
 8006526:	e008      	b.n	800653a <USBH_Process+0x3c6>
      break;
 8006528:	bf00      	nop
 800652a:	e006      	b.n	800653a <USBH_Process+0x3c6>
      break;
 800652c:	bf00      	nop
 800652e:	e004      	b.n	800653a <USBH_Process+0x3c6>
      break;
 8006530:	bf00      	nop
 8006532:	e002      	b.n	800653a <USBH_Process+0x3c6>
      break;
 8006534:	bf00      	nop
 8006536:	e000      	b.n	800653a <USBH_Process+0x3c6>
      break;
 8006538:	bf00      	nop
  }
  return USBH_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af04      	add	r7, sp, #16
 800654a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800654c:	2301      	movs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006550:	2301      	movs	r3, #1
 8006552:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b07      	cmp	r3, #7
 800655a:	f200 81bd 	bhi.w	80068d8 <USBH_HandleEnum+0x394>
 800655e:	a201      	add	r2, pc, #4	@ (adr r2, 8006564 <USBH_HandleEnum+0x20>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006585 	.word	0x08006585
 8006568:	0800663f 	.word	0x0800663f
 800656c:	080066a9 	.word	0x080066a9
 8006570:	08006733 	.word	0x08006733
 8006574:	0800679d 	.word	0x0800679d
 8006578:	0800680d 	.word	0x0800680d
 800657c:	08006853 	.word	0x08006853
 8006580:	08006899 	.word	0x08006899
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006584:	2108      	movs	r1, #8
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa4c 	bl	8006a24 <USBH_Get_DevDesc>
 800658c:	4603      	mov	r3, r0
 800658e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12e      	bne.n	80065f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	7919      	ldrb	r1, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80065ba:	9202      	str	r2, [sp, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4603      	mov	r3, r0
 80065c4:	2280      	movs	r2, #128	@ 0x80
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 f8dc 	bl	8007784 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	7959      	ldrb	r1, [r3, #5]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80065e0:	9202      	str	r2, [sp, #8]
 80065e2:	2200      	movs	r2, #0
 80065e4:	9201      	str	r2, [sp, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	4603      	mov	r3, r0
 80065ea:	2200      	movs	r2, #0
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f001 f8c9 	bl	8007784 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80065f2:	e173      	b.n	80068dc <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065f4:	7bbb      	ldrb	r3, [r7, #14]
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	f040 8170 	bne.w	80068dc <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006602:	3301      	adds	r3, #1
 8006604:	b2da      	uxtb	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006612:	2b03      	cmp	r3, #3
 8006614:	d903      	bls.n	800661e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	220d      	movs	r2, #13
 800661a:	701a      	strb	r2, [r3, #0]
      break;
 800661c:	e15e      	b.n	80068dc <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	795b      	ldrb	r3, [r3, #5]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f8fd 	bl	8007824 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f8f7 	bl	8007824 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]
      break;
 800663c:	e14e      	b.n	80068dc <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800663e:	2112      	movs	r1, #18
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9ef 	bl	8006a24 <USBH_Get_DevDesc>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006656:	e143      	b.n	80068e0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b03      	cmp	r3, #3
 800665c:	f040 8140 	bne.w	80068e0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006666:	3301      	adds	r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8006676:	2b03      	cmp	r3, #3
 8006678:	d903      	bls.n	8006682 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	220d      	movs	r2, #13
 800667e:	701a      	strb	r2, [r3, #0]
      break;
 8006680:	e12e      	b.n	80068e0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	795b      	ldrb	r3, [r3, #5]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f8cb 	bl	8007824 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	791b      	ldrb	r3, [r3, #4]
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f8c5 	bl	8007824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
      break;
 80066a6:	e11b      	b.n	80068e0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80066a8:	2101      	movs	r1, #1
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fa79 	bl	8006ba2 <USBH_SetAddress>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d130      	bne.n	800671c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80066ba:	2002      	movs	r0, #2
 80066bc:	f001 fbab 	bl	8007e16 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2203      	movs	r2, #3
 80066cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	7919      	ldrb	r1, [r3, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80066e2:	9202      	str	r2, [sp, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4603      	mov	r3, r0
 80066ec:	2280      	movs	r2, #128	@ 0x80
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f848 	bl	8007784 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7959      	ldrb	r1, [r3, #5]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006708:	9202      	str	r2, [sp, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	9201      	str	r2, [sp, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	4603      	mov	r3, r0
 8006712:	2200      	movs	r2, #0
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f835 	bl	8007784 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800671a:	e0e3      	b.n	80068e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	2b03      	cmp	r3, #3
 8006720:	f040 80e0 	bne.w	80068e4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	220d      	movs	r2, #13
 8006728:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	705a      	strb	r2, [r3, #1]
      break;
 8006730:	e0d8      	b.n	80068e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006732:	2109      	movs	r1, #9
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f9a1 	bl	8006a7c <USBH_Get_CfgDesc>
 800673a:	4603      	mov	r3, r0
 800673c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d103      	bne.n	800674c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2204      	movs	r2, #4
 8006748:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800674a:	e0cd      	b.n	80068e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b03      	cmp	r3, #3
 8006750:	f040 80ca 	bne.w	80068e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800675a:	3301      	adds	r3, #1
 800675c:	b2da      	uxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800676a:	2b03      	cmp	r3, #3
 800676c:	d903      	bls.n	8006776 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	220d      	movs	r2, #13
 8006772:	701a      	strb	r2, [r3, #0]
      break;
 8006774:	e0b8      	b.n	80068e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	795b      	ldrb	r3, [r3, #5]
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 f851 	bl	8007824 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 f84b 	bl	8007824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e0a5      	b.n	80068e8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f969 	bl	8006a7c <USBH_Get_CfgDesc>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2205      	movs	r2, #5
 80067b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067ba:	e097      	b.n	80068ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067bc:	7bbb      	ldrb	r3, [r7, #14]
 80067be:	2b03      	cmp	r3, #3
 80067c0:	f040 8094 	bne.w	80068ec <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80067ca:	3301      	adds	r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d903      	bls.n	80067e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	220d      	movs	r2, #13
 80067e2:	701a      	strb	r2, [r3, #0]
      break;
 80067e4:	e082      	b.n	80068ec <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	795b      	ldrb	r3, [r3, #5]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 f819 	bl	8007824 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	791b      	ldrb	r3, [r3, #4]
 80067f6:	4619      	mov	r1, r3
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f813 	bl	8007824 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
      break;
 800680a:	e06f      	b.n	80068ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006822:	23ff      	movs	r3, #255	@ 0xff
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f953 	bl	8006ad0 <USBH_Get_StringDesc>
 800682a:	4603      	mov	r3, r0
 800682c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800682e:	7bbb      	ldrb	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2206      	movs	r2, #6
 8006838:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800683a:	e059      	b.n	80068f0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b03      	cmp	r3, #3
 8006840:	d156      	bne.n	80068f0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2206      	movs	r2, #6
 8006846:	705a      	strb	r2, [r3, #1]
      break;
 8006848:	e052      	b.n	80068f0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2206      	movs	r2, #6
 800684e:	705a      	strb	r2, [r3, #1]
      break;
 8006850:	e04e      	b.n	80068f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8006858:	2b00      	cmp	r3, #0
 800685a:	d019      	beq.n	8006890 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006868:	23ff      	movs	r3, #255	@ 0xff
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f930 	bl	8006ad0 <USBH_Get_StringDesc>
 8006870:	4603      	mov	r3, r0
 8006872:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2207      	movs	r2, #7
 800687e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006880:	e038      	b.n	80068f4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006882:	7bbb      	ldrb	r3, [r7, #14]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d135      	bne.n	80068f4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2207      	movs	r2, #7
 800688c:	705a      	strb	r2, [r3, #1]
      break;
 800688e:	e031      	b.n	80068f4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2207      	movs	r2, #7
 8006894:	705a      	strb	r2, [r3, #1]
      break;
 8006896:	e02d      	b.n	80068f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d017      	beq.n	80068d2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80068ae:	23ff      	movs	r3, #255	@ 0xff
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f90d 	bl	8006ad0 <USBH_Get_StringDesc>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80068c4:	e018      	b.n	80068f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068c6:	7bbb      	ldrb	r3, [r7, #14]
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	d115      	bne.n	80068f8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]
      break;
 80068d0:	e012      	b.n	80068f8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
      break;
 80068d6:	e00f      	b.n	80068f8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80068d8:	bf00      	nop
 80068da:	e00e      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068dc:	bf00      	nop
 80068de:	e00c      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068e0:	bf00      	nop
 80068e2:	e00a      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068e4:	bf00      	nop
 80068e6:	e008      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068e8:	bf00      	nop
 80068ea:	e006      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068ec:	bf00      	nop
 80068ee:	e004      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068f0:	bf00      	nop
 80068f2:	e002      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <USBH_HandleEnum+0x3b6>
      break;
 80068f8:	bf00      	nop
  }
  return Status;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 f804 	bl	8006946 <USBH_HandleSof>
}
 800693e:	bf00      	nop
 8006940:	3708      	adds	r7, #8
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b0b      	cmp	r3, #11
 8006956:	d10a      	bne.n	800696e <USBH_HandleSof+0x28>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
  }
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006986:	bf00      	nop
}
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80069a2:	bf00      	nop
}
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f8be 	bl	8007b7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	791b      	ldrb	r3, [r3, #4]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 ff0b 	bl	8007824 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	795b      	ldrb	r3, [r3, #5]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 ff05 	bl	8007824 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a36:	d901      	bls.n	8006a3c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e01b      	b.n	8006a74 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006a42:	887b      	ldrh	r3, [r7, #2]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f872 	bl	8006b38 <USBH_GetDescriptor>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a64:	887a      	ldrh	r2, [r7, #2]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f929 	bl	8006cc0 <USBH_ParseDevDesc>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	331c      	adds	r3, #28
 8006a8c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8006a8e:	887b      	ldrh	r3, [r7, #2]
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a94:	d901      	bls.n	8006a9a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e016      	b.n	8006ac8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f846 	bl	8006b38 <USBH_GetDescriptor>
 8006aac:	4603      	mov	r3, r0
 8006aae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006ab0:	7bfb      	ldrb	r3, [r7, #15]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d107      	bne.n	8006ac6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006ab6:	887b      	ldrh	r3, [r7, #2]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f9af 	bl	8006e20 <USBH_ParseCfgDesc>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af02      	add	r7, sp, #8
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	461a      	mov	r2, r3
 8006adc:	460b      	mov	r3, r1
 8006ade:	72fb      	strb	r3, [r7, #11]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006aea:	d802      	bhi.n	8006af2 <USBH_Get_StringDesc+0x22>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e01c      	b.n	8006b30 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006afe:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8006b06:	893b      	ldrh	r3, [r7, #8]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f812 	bl	8006b38 <USBH_GetDescriptor>
 8006b14:	4603      	mov	r3, r0
 8006b16:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d107      	bne.n	8006b2e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b24:	893a      	ldrh	r2, [r7, #8]
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fb8d 	bl	8007248 <USBH_ParseStringDesc>
  }

  return status;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607b      	str	r3, [r7, #4]
 8006b42:	460b      	mov	r3, r1
 8006b44:	72fb      	strb	r3, [r7, #11]
 8006b46:	4613      	mov	r3, r2
 8006b48:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	789b      	ldrb	r3, [r3, #2]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d11c      	bne.n	8006b8c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006b52:	7afb      	ldrb	r3, [r7, #11]
 8006b54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2206      	movs	r2, #6
 8006b62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	893a      	ldrh	r2, [r7, #8]
 8006b68:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b6a:	893b      	ldrh	r3, [r7, #8]
 8006b6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006b70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b74:	d104      	bne.n	8006b80 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f240 4209 	movw	r2, #1033	@ 0x409
 8006b7c:	829a      	strh	r2, [r3, #20]
 8006b7e:	e002      	b.n	8006b86 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8b3a      	ldrh	r2, [r7, #24]
 8006b8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006b8c:	8b3b      	ldrh	r3, [r7, #24]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fba5 	bl	80072e2 <USBH_CtlReq>
 8006b98:	4603      	mov	r3, r0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	789b      	ldrb	r3, [r3, #2]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d10f      	bne.n	8006bd6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006bc2:	78fb      	ldrb	r3, [r7, #3]
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fb81 	bl	80072e2 <USBH_CtlReq>
 8006be0:	4603      	mov	r3, r0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	789b      	ldrb	r3, [r3, #2]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d10e      	bne.n	8006c1c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2209      	movs	r2, #9
 8006c08:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	887a      	ldrh	r2, [r7, #2]
 8006c0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2100      	movs	r1, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fb5e 	bl	80072e2 <USBH_CtlReq>
 8006c26:	4603      	mov	r3, r0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	789b      	ldrb	r3, [r3, #2]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10f      	bne.n	8006c64 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2203      	movs	r2, #3
 8006c4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006c64:	2200      	movs	r2, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fb3a 	bl	80072e2 <USBH_CtlReq>
 8006c6e:	4603      	mov	r3, r0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	789b      	ldrb	r3, [r3, #2]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d10f      	bne.n	8006cac <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fb16 	bl	80072e2 <USBH_CtlReq>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006cd4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e094      	b.n	8006e0e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	785a      	ldrb	r2, [r3, #1]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3303      	adds	r3, #3
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	791a      	ldrb	r2, [r3, #4]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	795a      	ldrb	r2, [r3, #5]
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	799a      	ldrb	r2, [r3, #6]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	79da      	ldrb	r2, [r3, #7]
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d11b      	bne.n	8006d7a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	79db      	ldrb	r3, [r3, #7]
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	dc0f      	bgt.n	8006d6a <USBH_ParseDevDesc+0xaa>
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	db0f      	blt.n	8006d6e <USBH_ParseDevDesc+0xae>
 8006d4e:	3b08      	subs	r3, #8
 8006d50:	4a32      	ldr	r2, [pc, #200]	@ (8006e1c <USBH_ParseDevDesc+0x15c>)
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf14      	ite	ne
 8006d5e:	2301      	movne	r3, #1
 8006d60:	2300      	moveq	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d106      	bne.n	8006d76 <USBH_ParseDevDesc+0xb6>
 8006d68:	e001      	b.n	8006d6e <USBH_ParseDevDesc+0xae>
 8006d6a:	2b40      	cmp	r3, #64	@ 0x40
 8006d6c:	d003      	beq.n	8006d76 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2208      	movs	r2, #8
 8006d72:	71da      	strb	r2, [r3, #7]
        break;
 8006d74:	e000      	b.n	8006d78 <USBH_ParseDevDesc+0xb8>
        break;
 8006d76:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8006d78:	e00e      	b.n	8006d98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d107      	bne.n	8006d94 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	79db      	ldrb	r3, [r3, #7]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d005      	beq.n	8006d98 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2208      	movs	r2, #8
 8006d90:	71da      	strb	r2, [r3, #7]
 8006d92:	e001      	b.n	8006d98 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8006d94:	2303      	movs	r3, #3
 8006d96:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d936      	bls.n	8006e0c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3308      	adds	r3, #8
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	3309      	adds	r3, #9
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	330a      	adds	r3, #10
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	330b      	adds	r3, #11
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	021b      	lsls	r3, r3, #8
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	330d      	adds	r3, #13
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	7b9a      	ldrb	r2, [r3, #14]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	7bda      	ldrb	r2, [r3, #15]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	7c1a      	ldrb	r2, [r3, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	7c5a      	ldrb	r2, [r3, #17]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	01000101 	.word	0x01000101

08006e20 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b08c      	sub	sp, #48	@ 0x30
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006e34:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e0da      	b.n	8007008 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b09      	cmp	r3, #9
 8006e5c:	d002      	beq.n	8006e64 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	2209      	movs	r2, #9
 8006e62:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	785a      	ldrb	r2, [r3, #1]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3302      	adds	r3, #2
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3303      	adds	r3, #3
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	021b      	lsls	r3, r3, #8
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8e:	bf28      	it	cs
 8006e90:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	6a3b      	ldr	r3, [r7, #32]
 8006e98:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	791a      	ldrb	r2, [r3, #4]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	795a      	ldrb	r2, [r3, #5]
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	799a      	ldrb	r2, [r3, #6]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	79da      	ldrb	r2, [r3, #7]
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	7a1a      	ldrb	r2, [r3, #8]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	2b09      	cmp	r3, #9
 8006ec6:	f240 809d 	bls.w	8007004 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006eca:	2309      	movs	r3, #9
 8006ecc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ed2:	e081      	b.n	8006fd8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ed4:	f107 0316 	add.w	r3, r7, #22
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006edc:	f000 f9e7 	bl	80072ae <USBH_GetNextDesc>
 8006ee0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d176      	bne.n	8006fd8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d002      	beq.n	8006ef8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	2209      	movs	r2, #9
 8006ef6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006efc:	221a      	movs	r2, #26
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
 8006f02:	3308      	adds	r3, #8
 8006f04:	6a3a      	ldr	r2, [r7, #32]
 8006f06:	4413      	add	r3, r2
 8006f08:	3302      	adds	r3, #2
 8006f0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006f0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f0e:	69f8      	ldr	r0, [r7, #28]
 8006f10:	f000 f87e 	bl	8007010 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006f1e:	e043      	b.n	8006fa8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f20:	f107 0316 	add.w	r3, r7, #22
 8006f24:	4619      	mov	r1, r3
 8006f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f28:	f000 f9c1 	bl	80072ae <USBH_GetNextDesc>
 8006f2c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d138      	bne.n	8006fa8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d113      	bne.n	8006f66 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d003      	beq.n	8006f4e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	799b      	ldrb	r3, [r3, #6]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d10b      	bne.n	8006f66 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	79db      	ldrb	r3, [r3, #7]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <USBH_ParseCfgDesc+0x14e>
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d007      	beq.n	8006f6e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8006f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f60:	2209      	movs	r2, #9
 8006f62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f64:	e003      	b.n	8006f6e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	2207      	movs	r2, #7
 8006f6a:	701a      	strb	r2, [r3, #0]
 8006f6c:	e000      	b.n	8006f70 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006f6e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f74:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006f78:	3201      	adds	r2, #1
 8006f7a:	00d2      	lsls	r2, r2, #3
 8006f7c:	211a      	movs	r1, #26
 8006f7e:	fb01 f303 	mul.w	r3, r1, r3
 8006f82:	4413      	add	r3, r2
 8006f84:	3308      	adds	r3, #8
 8006f86:	6a3a      	ldr	r2, [r7, #32]
 8006f88:	4413      	add	r3, r2
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f90:	69b9      	ldr	r1, [r7, #24]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f870 	bl	8007078 <USBH_ParseEPDesc>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8006f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	791b      	ldrb	r3, [r3, #4]
 8006fac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d204      	bcs.n	8006fbe <USBH_ParseCfgDesc+0x19e>
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	885a      	ldrh	r2, [r3, #2]
 8006fb8:	8afb      	ldrh	r3, [r7, #22]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d8b0      	bhi.n	8006f20 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	791b      	ldrb	r3, [r3, #4]
 8006fc2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d201      	bcs.n	8006fce <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e01c      	b.n	8007008 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8006fce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d805      	bhi.n	8006fec <USBH_ParseCfgDesc+0x1cc>
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	885a      	ldrh	r2, [r3, #2]
 8006fe4:	8afb      	ldrh	r3, [r7, #22]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	f63f af74 	bhi.w	8006ed4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	bf28      	it	cs
 8006ff4:	2302      	movcs	r3, #2
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d201      	bcs.n	8007004 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007000:	2303      	movs	r3, #3
 8007002:	e001      	b.n	8007008 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007004:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007008:	4618      	mov	r0, r3
 800700a:	3730      	adds	r7, #48	@ 0x30
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781a      	ldrb	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	785a      	ldrb	r2, [r3, #1]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	789a      	ldrb	r2, [r3, #2]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	78da      	ldrb	r2, [r3, #3]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	3304      	adds	r3, #4
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2b02      	cmp	r3, #2
 8007042:	bf28      	it	cs
 8007044:	2302      	movcs	r3, #2
 8007046:	b2da      	uxtb	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	795a      	ldrb	r2, [r3, #5]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	799a      	ldrb	r2, [r3, #6]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	79da      	ldrb	r2, [r3, #7]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	7a1a      	ldrb	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	721a      	strb	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	785a      	ldrb	r2, [r3, #1]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	789a      	ldrb	r2, [r3, #2]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	78da      	ldrb	r2, [r3, #3]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3304      	adds	r3, #4
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3305      	adds	r3, #5
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	799a      	ldrb	r2, [r3, #6]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	889b      	ldrh	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80070d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070da:	d804      	bhi.n	80070e6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80070e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070e4:	d901      	bls.n	80070ea <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80070e6:	2303      	movs	r3, #3
 80070e8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d136      	bne.n	8007162 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	78db      	ldrb	r3, [r3, #3]
 80070f8:	f003 0303 	and.w	r3, r3, #3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d108      	bne.n	8007112 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	889b      	ldrh	r3, [r3, #4]
 8007104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007108:	f240 8097 	bls.w	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800710c:	2303      	movs	r3, #3
 800710e:	75fb      	strb	r3, [r7, #23]
 8007110:	e093      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	78db      	ldrb	r3, [r3, #3]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d107      	bne.n	800712e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	889b      	ldrh	r3, [r3, #4]
 8007122:	2b40      	cmp	r3, #64	@ 0x40
 8007124:	f240 8089 	bls.w	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007128:	2303      	movs	r3, #3
 800712a:	75fb      	strb	r3, [r7, #23]
 800712c:	e085      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	78db      	ldrb	r3, [r3, #3]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d005      	beq.n	8007146 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	78db      	ldrb	r3, [r3, #3]
 800713e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007142:	2b03      	cmp	r3, #3
 8007144:	d10a      	bne.n	800715c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	799b      	ldrb	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <USBH_ParseEPDesc+0xde>
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	799b      	ldrb	r3, [r3, #6]
 8007152:	2b10      	cmp	r3, #16
 8007154:	d970      	bls.n	8007238 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007156:	2303      	movs	r3, #3
 8007158:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800715a:	e06d      	b.n	8007238 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800715c:	2303      	movs	r3, #3
 800715e:	75fb      	strb	r3, [r7, #23]
 8007160:	e06b      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007168:	2b01      	cmp	r3, #1
 800716a:	d13c      	bne.n	80071e6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	78db      	ldrb	r3, [r3, #3]
 8007170:	f003 0303 	and.w	r3, r3, #3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d005      	beq.n	8007184 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	78db      	ldrb	r3, [r3, #3]
 800717c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	889b      	ldrh	r3, [r3, #4]
 8007188:	2b40      	cmp	r3, #64	@ 0x40
 800718a:	d956      	bls.n	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800718c:	2303      	movs	r3, #3
 800718e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007190:	e053      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	78db      	ldrb	r3, [r3, #3]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10e      	bne.n	80071bc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	799b      	ldrb	r3, [r3, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d803      	bhi.n	80071b6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80071b2:	2b40      	cmp	r3, #64	@ 0x40
 80071b4:	d941      	bls.n	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80071b6:	2303      	movs	r3, #3
 80071b8:	75fb      	strb	r3, [r7, #23]
 80071ba:	e03e      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	78db      	ldrb	r3, [r3, #3]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b03      	cmp	r3, #3
 80071c6:	d10b      	bne.n	80071e0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	799b      	ldrb	r3, [r3, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <USBH_ParseEPDesc+0x162>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	889b      	ldrh	r3, [r3, #4]
 80071d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d8:	d32f      	bcc.n	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80071da:	2303      	movs	r3, #3
 80071dc:	75fb      	strb	r3, [r7, #23]
 80071de:	e02c      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80071e0:	2303      	movs	r3, #3
 80071e2:	75fb      	strb	r3, [r7, #23]
 80071e4:	e029      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d120      	bne.n	8007232 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	78db      	ldrb	r3, [r3, #3]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	889b      	ldrh	r3, [r3, #4]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d01a      	beq.n	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007204:	2303      	movs	r3, #3
 8007206:	75fb      	strb	r3, [r7, #23]
 8007208:	e017      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	78db      	ldrb	r3, [r3, #3]
 800720e:	f003 0303 	and.w	r3, r3, #3
 8007212:	2b03      	cmp	r3, #3
 8007214:	d10a      	bne.n	800722c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	799b      	ldrb	r3, [r3, #6]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <USBH_ParseEPDesc+0x1ae>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	889b      	ldrh	r3, [r3, #4]
 8007222:	2b08      	cmp	r3, #8
 8007224:	d909      	bls.n	800723a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007226:	2303      	movs	r3, #3
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	e006      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800722c:	2303      	movs	r3, #3
 800722e:	75fb      	strb	r3, [r7, #23]
 8007230:	e003      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007232:	2303      	movs	r3, #3
 8007234:	75fb      	strb	r3, [r7, #23]
 8007236:	e000      	b.n	800723a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007238:	bf00      	nop
  }

  return status;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
}
 800723c:	4618      	mov	r0, r3
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3301      	adds	r3, #1
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b03      	cmp	r3, #3
 800725e:	d120      	bne.n	80072a2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	1e9a      	subs	r2, r3, #2
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	4293      	cmp	r3, r2
 800726a:	bf28      	it	cs
 800726c:	4613      	movcs	r3, r2
 800726e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3302      	adds	r3, #2
 8007274:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007276:	2300      	movs	r3, #0
 8007278:	82fb      	strh	r3, [r7, #22]
 800727a:	e00b      	b.n	8007294 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800727c:	8afb      	ldrh	r3, [r7, #22]
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	4413      	add	r3, r2
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3301      	adds	r3, #1
 800728c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800728e:	8afb      	ldrh	r3, [r7, #22]
 8007290:	3302      	adds	r3, #2
 8007292:	82fb      	strh	r3, [r7, #22]
 8007294:	8afa      	ldrh	r2, [r7, #22]
 8007296:	8abb      	ldrh	r3, [r7, #20]
 8007298:	429a      	cmp	r2, r3
 800729a:	d3ef      	bcc.n	800727c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
  }
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	4413      	add	r3, r2
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4413      	add	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	4613      	mov	r3, r2
 80072ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80072f0:	2301      	movs	r3, #1
 80072f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	789b      	ldrb	r3, [r3, #2]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d002      	beq.n	8007302 <USBH_CtlReq+0x20>
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d00f      	beq.n	8007320 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007300:	e027      	b.n	8007352 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	88fa      	ldrh	r2, [r7, #6]
 800730c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2202      	movs	r2, #2
 8007318:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800731a:	2301      	movs	r3, #1
 800731c:	75fb      	strb	r3, [r7, #23]
      break;
 800731e:	e018      	b.n	8007352 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f81b 	bl	800735c <USBH_HandleControl>
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <USBH_CtlReq+0x54>
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	2b03      	cmp	r3, #3
 8007334:	d106      	bne.n	8007344 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	761a      	strb	r2, [r3, #24]
      break;
 8007342:	e005      	b.n	8007350 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d102      	bne.n	8007350 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	709a      	strb	r2, [r3, #2]
      break;
 8007350:	bf00      	nop
  }
  return status;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3718      	adds	r7, #24
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af02      	add	r7, sp, #8
 8007362:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007368:	2300      	movs	r3, #0
 800736a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7e1b      	ldrb	r3, [r3, #24]
 8007370:	3b01      	subs	r3, #1
 8007372:	2b0a      	cmp	r3, #10
 8007374:	f200 8156 	bhi.w	8007624 <USBH_HandleControl+0x2c8>
 8007378:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <USBH_HandleControl+0x24>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073ad 	.word	0x080073ad
 8007384:	080073c7 	.word	0x080073c7
 8007388:	08007431 	.word	0x08007431
 800738c:	08007457 	.word	0x08007457
 8007390:	0800748f 	.word	0x0800748f
 8007394:	080074b9 	.word	0x080074b9
 8007398:	0800750b 	.word	0x0800750b
 800739c:	0800752d 	.word	0x0800752d
 80073a0:	08007569 	.word	0x08007569
 80073a4:	0800758f 	.word	0x0800758f
 80073a8:	080075cd 	.word	0x080075cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f103 0110 	add.w	r1, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	795b      	ldrb	r3, [r3, #5]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f943 	bl	8007644 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	761a      	strb	r2, [r3, #24]
      break;
 80073c4:	e139      	b.n	800763a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	795b      	ldrb	r3, [r3, #5]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fcc5 	bl	8007d5c <USBH_LL_GetURBState>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80073d6:	7bbb      	ldrb	r3, [r7, #14]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d11e      	bne.n	800741a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7c1b      	ldrb	r3, [r3, #16]
 80073e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8adb      	ldrh	r3, [r3, #22]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00a      	beq.n	8007404 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80073ee:	7b7b      	ldrb	r3, [r7, #13]
 80073f0:	2b80      	cmp	r3, #128	@ 0x80
 80073f2:	d103      	bne.n	80073fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80073fa:	e115      	b.n	8007628 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2205      	movs	r2, #5
 8007400:	761a      	strb	r2, [r3, #24]
      break;
 8007402:	e111      	b.n	8007628 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007404:	7b7b      	ldrb	r3, [r7, #13]
 8007406:	2b80      	cmp	r3, #128	@ 0x80
 8007408:	d103      	bne.n	8007412 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2209      	movs	r2, #9
 800740e:	761a      	strb	r2, [r3, #24]
      break;
 8007410:	e10a      	b.n	8007628 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2207      	movs	r2, #7
 8007416:	761a      	strb	r2, [r3, #24]
      break;
 8007418:	e106      	b.n	8007628 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b04      	cmp	r3, #4
 800741e:	d003      	beq.n	8007428 <USBH_HandleControl+0xcc>
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b02      	cmp	r3, #2
 8007424:	f040 8100 	bne.w	8007628 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	220b      	movs	r2, #11
 800742c:	761a      	strb	r2, [r3, #24]
      break;
 800742e:	e0fb      	b.n	8007628 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6899      	ldr	r1, [r3, #8]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	899a      	ldrh	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f93a 	bl	80076c2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2204      	movs	r2, #4
 8007452:	761a      	strb	r2, [r3, #24]
      break;
 8007454:	e0f1      	b.n	800763a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc7d 	bl	8007d5c <USBH_LL_GetURBState>
 8007462:	4603      	mov	r3, r0
 8007464:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d102      	bne.n	8007472 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2209      	movs	r2, #9
 8007470:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b05      	cmp	r3, #5
 8007476:	d102      	bne.n	800747e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007478:	2303      	movs	r3, #3
 800747a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800747c:	e0d6      	b.n	800762c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b04      	cmp	r3, #4
 8007482:	f040 80d3 	bne.w	800762c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	220b      	movs	r2, #11
 800748a:	761a      	strb	r2, [r3, #24]
      break;
 800748c:	e0ce      	b.n	800762c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6899      	ldr	r1, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	899a      	ldrh	r2, [r3, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	795b      	ldrb	r3, [r3, #5]
 800749a:	2001      	movs	r0, #1
 800749c:	9000      	str	r0, [sp, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f8ea 	bl	8007678 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2206      	movs	r2, #6
 80074b4:	761a      	strb	r2, [r3, #24]
      break;
 80074b6:	e0c0      	b.n	800763a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	795b      	ldrb	r3, [r3, #5]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fc4c 	bl	8007d5c <USBH_LL_GetURBState>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d103      	bne.n	80074d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2207      	movs	r2, #7
 80074d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80074d4:	e0ac      	b.n	8007630 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b05      	cmp	r3, #5
 80074da:	d105      	bne.n	80074e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220c      	movs	r2, #12
 80074e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80074e2:	2303      	movs	r3, #3
 80074e4:	73fb      	strb	r3, [r7, #15]
      break;
 80074e6:	e0a3      	b.n	8007630 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074e8:	7bbb      	ldrb	r3, [r7, #14]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d103      	bne.n	80074f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2205      	movs	r2, #5
 80074f2:	761a      	strb	r2, [r3, #24]
      break;
 80074f4:	e09c      	b.n	8007630 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	f040 8099 	bne.w	8007630 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	220b      	movs	r2, #11
 8007502:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007504:	2302      	movs	r3, #2
 8007506:	73fb      	strb	r3, [r7, #15]
      break;
 8007508:	e092      	b.n	8007630 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	791b      	ldrb	r3, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	2100      	movs	r1, #0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f8d5 	bl	80076c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800751e:	b29a      	uxth	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2208      	movs	r2, #8
 8007528:	761a      	strb	r2, [r3, #24]

      break;
 800752a:	e086      	b.n	800763a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	791b      	ldrb	r3, [r3, #4]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fc12 	bl	8007d5c <USBH_LL_GetURBState>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d105      	bne.n	800754e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220d      	movs	r2, #13
 8007546:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800754c:	e072      	b.n	8007634 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d103      	bne.n	800755c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	220b      	movs	r2, #11
 8007558:	761a      	strb	r2, [r3, #24]
      break;
 800755a:	e06b      	b.n	8007634 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800755c:	7bbb      	ldrb	r3, [r7, #14]
 800755e:	2b05      	cmp	r3, #5
 8007560:	d168      	bne.n	8007634 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007562:	2303      	movs	r3, #3
 8007564:	73fb      	strb	r3, [r7, #15]
      break;
 8007566:	e065      	b.n	8007634 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	795b      	ldrb	r3, [r3, #5]
 800756c:	2201      	movs	r2, #1
 800756e:	9200      	str	r2, [sp, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f87f 	bl	8007678 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007580:	b29a      	uxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	220a      	movs	r2, #10
 800758a:	761a      	strb	r2, [r3, #24]
      break;
 800758c:	e055      	b.n	800763a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	795b      	ldrb	r3, [r3, #5]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fbe1 	bl	8007d5c <USBH_LL_GetURBState>
 800759a:	4603      	mov	r3, r0
 800759c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d105      	bne.n	80075b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	220d      	movs	r2, #13
 80075ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80075ae:	e043      	b.n	8007638 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d103      	bne.n	80075be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2209      	movs	r2, #9
 80075ba:	761a      	strb	r2, [r3, #24]
      break;
 80075bc:	e03c      	b.n	8007638 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d139      	bne.n	8007638 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	220b      	movs	r2, #11
 80075c8:	761a      	strb	r2, [r3, #24]
      break;
 80075ca:	e035      	b.n	8007638 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	7e5b      	ldrb	r3, [r3, #25]
 80075d0:	3301      	adds	r3, #1
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	765a      	strb	r2, [r3, #25]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7e5b      	ldrb	r3, [r3, #25]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d806      	bhi.n	80075ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80075ec:	e025      	b.n	800763a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80075f4:	2106      	movs	r1, #6
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	795b      	ldrb	r3, [r3, #5]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f90c 	bl	8007824 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	791b      	ldrb	r3, [r3, #4]
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f906 	bl	8007824 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800761e:	2302      	movs	r3, #2
 8007620:	73fb      	strb	r3, [r7, #15]
      break;
 8007622:	e00a      	b.n	800763a <USBH_HandleControl+0x2de>

    default:
      break;
 8007624:	bf00      	nop
 8007626:	e008      	b.n	800763a <USBH_HandleControl+0x2de>
      break;
 8007628:	bf00      	nop
 800762a:	e006      	b.n	800763a <USBH_HandleControl+0x2de>
      break;
 800762c:	bf00      	nop
 800762e:	e004      	b.n	800763a <USBH_HandleControl+0x2de>
      break;
 8007630:	bf00      	nop
 8007632:	e002      	b.n	800763a <USBH_HandleControl+0x2de>
      break;
 8007634:	bf00      	nop
 8007636:	e000      	b.n	800763a <USBH_HandleControl+0x2de>
      break;
 8007638:	bf00      	nop
  }

  return status;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af04      	add	r7, sp, #16
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	4613      	mov	r3, r2
 8007650:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007652:	79f9      	ldrb	r1, [r7, #7]
 8007654:	2300      	movs	r3, #0
 8007656:	9303      	str	r3, [sp, #12]
 8007658:	2308      	movs	r3, #8
 800765a:	9302      	str	r3, [sp, #8]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	2300      	movs	r3, #0
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	2200      	movs	r2, #0
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fb46 	bl	8007cfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af04      	add	r7, sp, #16
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4611      	mov	r1, r2
 8007684:	461a      	mov	r2, r3
 8007686:	460b      	mov	r3, r1
 8007688:	80fb      	strh	r3, [r7, #6]
 800768a:	4613      	mov	r3, r2
 800768c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800769c:	7979      	ldrb	r1, [r7, #5]
 800769e:	7e3b      	ldrb	r3, [r7, #24]
 80076a0:	9303      	str	r3, [sp, #12]
 80076a2:	88fb      	ldrh	r3, [r7, #6]
 80076a4:	9302      	str	r3, [sp, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	2301      	movs	r3, #1
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	2200      	movs	r2, #0
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fb21 	bl	8007cfa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af04      	add	r7, sp, #16
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4611      	mov	r1, r2
 80076ce:	461a      	mov	r2, r3
 80076d0:	460b      	mov	r3, r1
 80076d2:	80fb      	strh	r3, [r7, #6]
 80076d4:	4613      	mov	r3, r2
 80076d6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80076d8:	7979      	ldrb	r1, [r7, #5]
 80076da:	2300      	movs	r3, #0
 80076dc:	9303      	str	r3, [sp, #12]
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	9302      	str	r3, [sp, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2301      	movs	r3, #1
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	2201      	movs	r2, #1
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fb03 	bl	8007cfa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80076f4:	2300      	movs	r3, #0

}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af04      	add	r7, sp, #16
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	4611      	mov	r1, r2
 800770a:	461a      	mov	r2, r3
 800770c:	460b      	mov	r3, r1
 800770e:	80fb      	strh	r3, [r7, #6]
 8007710:	4613      	mov	r3, r2
 8007712:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007722:	7979      	ldrb	r1, [r7, #5]
 8007724:	7e3b      	ldrb	r3, [r7, #24]
 8007726:	9303      	str	r3, [sp, #12]
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	2301      	movs	r3, #1
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2302      	movs	r3, #2
 8007736:	2200      	movs	r2, #0
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fade 	bl	8007cfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af04      	add	r7, sp, #16
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	4611      	mov	r1, r2
 8007754:	461a      	mov	r2, r3
 8007756:	460b      	mov	r3, r1
 8007758:	80fb      	strh	r3, [r7, #6]
 800775a:	4613      	mov	r3, r2
 800775c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800775e:	7979      	ldrb	r1, [r7, #5]
 8007760:	2300      	movs	r3, #0
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	9301      	str	r3, [sp, #4]
 800776c:	2301      	movs	r3, #1
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	2302      	movs	r3, #2
 8007772:	2201      	movs	r2, #1
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 fac0 	bl	8007cfa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af04      	add	r7, sp, #16
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	4608      	mov	r0, r1
 800778e:	4611      	mov	r1, r2
 8007790:	461a      	mov	r2, r3
 8007792:	4603      	mov	r3, r0
 8007794:	70fb      	strb	r3, [r7, #3]
 8007796:	460b      	mov	r3, r1
 8007798:	70bb      	strb	r3, [r7, #2]
 800779a:	4613      	mov	r3, r2
 800779c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800779e:	7878      	ldrb	r0, [r7, #1]
 80077a0:	78ba      	ldrb	r2, [r7, #2]
 80077a2:	78f9      	ldrb	r1, [r7, #3]
 80077a4:	8b3b      	ldrh	r3, [r7, #24]
 80077a6:	9302      	str	r3, [sp, #8]
 80077a8:	7d3b      	ldrb	r3, [r7, #20]
 80077aa:	9301      	str	r3, [sp, #4]
 80077ac:	7c3b      	ldrb	r3, [r7, #16]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4603      	mov	r3, r0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fa53 	bl	8007c5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80077ce:	78fb      	ldrb	r3, [r7, #3]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa72 	bl	8007cbc <USBH_LL_ClosePipe>

  return USBH_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
 80077ea:	460b      	mov	r3, r1
 80077ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f836 	bl	8007860 <USBH_GetFreePipe>
 80077f4:	4603      	mov	r3, r0
 80077f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80077f8:	89fb      	ldrh	r3, [r7, #14]
 80077fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00a      	beq.n	8007818 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	89fb      	ldrh	r3, [r7, #14]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	33e0      	adds	r3, #224	@ 0xe0
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007818:	89fb      	ldrh	r3, [r7, #14]
 800781a:	b2db      	uxtb	r3, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	2b0f      	cmp	r3, #15
 8007834:	d80d      	bhi.n	8007852 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007836:	78fb      	ldrb	r3, [r7, #3]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	33e0      	adds	r3, #224	@ 0xe0
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	33e0      	adds	r3, #224	@ 0xe0
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	440b      	add	r3, r1
 8007850:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e00f      	b.n	8007892 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	33e0      	adds	r3, #224	@ 0xe0
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	b29b      	uxth	r3, r3
 800788a:	e007      	b.n	800789c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	3301      	adds	r3, #1
 8007890:	73fb      	strb	r3, [r7, #15]
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b0f      	cmp	r3, #15
 8007896:	d9ec      	bls.n	8007872 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007898:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80078ac:	2201      	movs	r2, #1
 80078ae:	490e      	ldr	r1, [pc, #56]	@ (80078e8 <MX_USB_HOST_Init+0x40>)
 80078b0:	480e      	ldr	r0, [pc, #56]	@ (80078ec <MX_USB_HOST_Init+0x44>)
 80078b2:	f7fe fb15 	bl	8005ee0 <USBH_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80078bc:	f7f9 f862 	bl	8000984 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80078c0:	490b      	ldr	r1, [pc, #44]	@ (80078f0 <MX_USB_HOST_Init+0x48>)
 80078c2:	480a      	ldr	r0, [pc, #40]	@ (80078ec <MX_USB_HOST_Init+0x44>)
 80078c4:	f7fe fbb9 	bl	800603a <USBH_RegisterClass>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80078ce:	f7f9 f859 	bl	8000984 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80078d2:	4806      	ldr	r0, [pc, #24]	@ (80078ec <MX_USB_HOST_Init+0x44>)
 80078d4:	f7fe fc3d 	bl	8006152 <USBH_Start>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80078de:	f7f9 f851 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80078e2:	bf00      	nop
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	08007909 	.word	0x08007909
 80078ec:	200001a0 	.word	0x200001a0
 80078f0:	2000004c 	.word	0x2000004c

080078f4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80078f8:	4802      	ldr	r0, [pc, #8]	@ (8007904 <MX_USB_HOST_Process+0x10>)
 80078fa:	f7fe fc3b 	bl	8006174 <USBH_Process>
}
 80078fe:	bf00      	nop
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200001a0 	.word	0x200001a0

08007908 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	3b01      	subs	r3, #1
 8007918:	2b04      	cmp	r3, #4
 800791a:	d819      	bhi.n	8007950 <USBH_UserProcess+0x48>
 800791c:	a201      	add	r2, pc, #4	@ (adr r2, 8007924 <USBH_UserProcess+0x1c>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007951 	.word	0x08007951
 8007928:	08007941 	.word	0x08007941
 800792c:	08007951 	.word	0x08007951
 8007930:	08007949 	.word	0x08007949
 8007934:	08007939 	.word	0x08007939
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007938:	4b09      	ldr	r3, [pc, #36]	@ (8007960 <USBH_UserProcess+0x58>)
 800793a:	2203      	movs	r2, #3
 800793c:	701a      	strb	r2, [r3, #0]
  break;
 800793e:	e008      	b.n	8007952 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007940:	4b07      	ldr	r3, [pc, #28]	@ (8007960 <USBH_UserProcess+0x58>)
 8007942:	2202      	movs	r2, #2
 8007944:	701a      	strb	r2, [r3, #0]
  break;
 8007946:	e004      	b.n	8007952 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007948:	4b05      	ldr	r3, [pc, #20]	@ (8007960 <USBH_UserProcess+0x58>)
 800794a:	2201      	movs	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
  break;
 800794e:	e000      	b.n	8007952 <USBH_UserProcess+0x4a>

  default:
  break;
 8007950:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000578 	.word	0x20000578

08007964 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	@ 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	605a      	str	r2, [r3, #4]
 8007976:	609a      	str	r2, [r3, #8]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007984:	d147      	bne.n	8007a16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	4b25      	ldr	r3, [pc, #148]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798e:	4a24      	ldr	r2, [pc, #144]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6313      	str	r3, [r2, #48]	@ 0x30
 8007996:	4b22      	ldr	r3, [pc, #136]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80079a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4619      	mov	r1, r3
 80079b6:	481b      	ldr	r0, [pc, #108]	@ (8007a24 <HAL_HCD_MspInit+0xc0>)
 80079b8:	f7f9 fc36 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80079bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80079c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079c2:	2302      	movs	r3, #2
 80079c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ca:	2300      	movs	r3, #0
 80079cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80079ce:	230a      	movs	r3, #10
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079d2:	f107 0314 	add.w	r3, r7, #20
 80079d6:	4619      	mov	r1, r3
 80079d8:	4812      	ldr	r0, [pc, #72]	@ (8007a24 <HAL_HCD_MspInit+0xc0>)
 80079da:	f7f9 fc25 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80079de:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 80079e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 80079e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079e8:	6353      	str	r3, [r2, #52]	@ 0x34
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 80079f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f2:	4a0b      	ldr	r2, [pc, #44]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 80079f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80079fa:	4b09      	ldr	r3, [pc, #36]	@ (8007a20 <HAL_HCD_MspInit+0xbc>)
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	2043      	movs	r0, #67	@ 0x43
 8007a0c:	f7f9 fad9 	bl	8000fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a10:	2043      	movs	r0, #67	@ 0x43
 8007a12:	f7f9 faf2 	bl	8000ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a16:	bf00      	nop
 8007a18:	3728      	adds	r7, #40	@ 0x28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40023800 	.word	0x40023800
 8007a24:	40020000 	.word	0x40020000

08007a28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe ff73 	bl	8006922 <USBH_LL_IncTimer>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe ffab 	bl	80069ae <USBH_LL_Connect>
}
 8007a58:	bf00      	nop
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fe ffb4 	bl	80069dc <USBH_LL_Disconnect>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe ff65 	bl	8006976 <USBH_LL_PortEnabled>
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe ff65 	bl	8006992 <USBH_LL_PortDisabled>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d12a      	bne.n	8007b38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007ae2:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a15      	ldr	r2, [pc, #84]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007aee:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007af2:	4b14      	ldr	r3, [pc, #80]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007af4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007af8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007afa:	4b12      	ldr	r3, [pc, #72]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007afc:	2208      	movs	r2, #8
 8007afe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007b00:	4b10      	ldr	r3, [pc, #64]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b02:	2201      	movs	r2, #1
 8007b04:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b06:	4b0f      	ldr	r3, [pc, #60]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b0e:	2202      	movs	r2, #2
 8007b10:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b12:	4b0c      	ldr	r3, [pc, #48]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007b18:	480a      	ldr	r0, [pc, #40]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b1a:	f7f9 fd52 	bl	80015c2 <HAL_HCD_Init>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007b24:	f7f8 ff2e 	bl	8000984 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007b28:	4806      	ldr	r0, [pc, #24]	@ (8007b44 <USBH_LL_Init+0x74>)
 8007b2a:	f7fa f9b3 	bl	8001e94 <HAL_HCD_GetCurrentFrame>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fe fee6 	bl	8006904 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	2000057c 	.word	0x2000057c

08007b48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fa f920 	bl	8001da4 <HAL_HCD_Start>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f95e 	bl	8007e2c <USBH_Get_USB_Status>
 8007b70:	4603      	mov	r3, r0
 8007b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fa f928 	bl	8001dea <HAL_HCD_Stop>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f943 	bl	8007e2c <USBH_Get_USB_Status>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fa f972 	bl	8001eb0 <HAL_HCD_GetCurrentSpeed>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d00c      	beq.n	8007bec <USBH_LL_GetSpeed+0x38>
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d80d      	bhi.n	8007bf2 <USBH_LL_GetSpeed+0x3e>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <USBH_LL_GetSpeed+0x2c>
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d003      	beq.n	8007be6 <USBH_LL_GetSpeed+0x32>
 8007bde:	e008      	b.n	8007bf2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
    break;
 8007be4:	e008      	b.n	8007bf8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007be6:	2301      	movs	r3, #1
 8007be8:	73fb      	strb	r3, [r7, #15]
    break;
 8007bea:	e005      	b.n	8007bf8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007bec:	2302      	movs	r3, #2
 8007bee:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf0:	e002      	b.n	8007bf8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bf6:	bf00      	nop
  }
  return  speed;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fa f903 	bl	8001e24 <HAL_HCD_ResetPort>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f000 f901 	bl	8007e2c <USBH_Get_USB_Status>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fa f90b 	bl	8001e6a <HAL_HCD_HC_GetXferCount>
 8007c54:	4603      	mov	r3, r0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c5e:	b590      	push	{r4, r7, lr}
 8007c60:	b089      	sub	sp, #36	@ 0x24
 8007c62:	af04      	add	r7, sp, #16
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	4608      	mov	r0, r1
 8007c68:	4611      	mov	r1, r2
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	70fb      	strb	r3, [r7, #3]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70bb      	strb	r3, [r7, #2]
 8007c74:	4613      	mov	r3, r2
 8007c76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007c86:	787c      	ldrb	r4, [r7, #1]
 8007c88:	78ba      	ldrb	r2, [r7, #2]
 8007c8a:	78f9      	ldrb	r1, [r7, #3]
 8007c8c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c94:	9301      	str	r3, [sp, #4]
 8007c96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4623      	mov	r3, r4
 8007c9e:	f7f9 fcf7 	bl	8001690 <HAL_HCD_HC_Init>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f8bf 	bl	8007e2c <USBH_Get_USB_Status>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd90      	pop	{r4, r7, pc}

08007cbc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7f9 fd90 	bl	8001800 <HAL_HCD_HC_Halt>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f8a0 	bl	8007e2c <USBH_Get_USB_Status>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007cfa:	b590      	push	{r4, r7, lr}
 8007cfc:	b089      	sub	sp, #36	@ 0x24
 8007cfe:	af04      	add	r7, sp, #16
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	4608      	mov	r0, r1
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	4603      	mov	r3, r0
 8007d0a:	70fb      	strb	r3, [r7, #3]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70bb      	strb	r3, [r7, #2]
 8007d10:	4613      	mov	r3, r2
 8007d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8007d22:	787c      	ldrb	r4, [r7, #1]
 8007d24:	78ba      	ldrb	r2, [r7, #2]
 8007d26:	78f9      	ldrb	r1, [r7, #3]
 8007d28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d2c:	9303      	str	r3, [sp, #12]
 8007d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d30:	9302      	str	r3, [sp, #8]
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	f7f9 fd83 	bl	8001848 <HAL_HCD_HC_SubmitRequest>
 8007d42:	4603      	mov	r3, r0
 8007d44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 f86f 	bl	8007e2c <USBH_Get_USB_Status>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd90      	pop	{r4, r7, pc}

08007d5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007d6e:	78fa      	ldrb	r2, [r7, #3]
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fa f864 	bl	8001e40 <HAL_HCD_HC_GetURBState>
 8007d78:	4603      	mov	r3, r0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d103      	bne.n	8007da0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 f872 	bl	8007e84 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007da0:	20c8      	movs	r0, #200	@ 0xc8
 8007da2:	f7f9 f80f 	bl	8000dc4 <HAL_Delay>
  return USBH_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007dc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	68f9      	ldr	r1, [r7, #12]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	1a9b      	subs	r3, r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	440b      	add	r3, r1
 8007dd6:	3317      	adds	r3, #23
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	68f9      	ldr	r1, [r7, #12]
 8007de2:	4613      	mov	r3, r2
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	1a9b      	subs	r3, r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	440b      	add	r3, r1
 8007dec:	333c      	adds	r3, #60	@ 0x3c
 8007dee:	78ba      	ldrb	r2, [r7, #2]
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	e009      	b.n	8007e08 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007df4:	78fa      	ldrb	r2, [r7, #3]
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	440b      	add	r3, r1
 8007e02:	333d      	adds	r3, #61	@ 0x3d
 8007e04:	78ba      	ldrb	r2, [r7, #2]
 8007e06:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7f8 ffd0 	bl	8000dc4 <HAL_Delay>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e3a:	79fb      	ldrb	r3, [r7, #7]
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d817      	bhi.n	8007e70 <USBH_Get_USB_Status+0x44>
 8007e40:	a201      	add	r2, pc, #4	@ (adr r2, 8007e48 <USBH_Get_USB_Status+0x1c>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e5f 	.word	0x08007e5f
 8007e50:	08007e65 	.word	0x08007e65
 8007e54:	08007e6b 	.word	0x08007e6b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e5c:	e00b      	b.n	8007e76 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	73fb      	strb	r3, [r7, #15]
    break;
 8007e62:	e008      	b.n	8007e76 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
    break;
 8007e68:	e005      	b.n	8007e76 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e6e:	e002      	b.n	8007e76 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007e70:	2302      	movs	r3, #2
 8007e72:	73fb      	strb	r3, [r7, #15]
    break;
 8007e74:	bf00      	nop
  }
  return usb_status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	e001      	b.n	8007ea2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	4803      	ldr	r0, [pc, #12]	@ (8007eb8 <MX_DriverVbusFS+0x34>)
 8007eaa:	f7f9 fb71 	bl	8001590 <HAL_GPIO_WritePin>
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40020800 	.word	0x40020800

08007ebc <malloc>:
 8007ebc:	4b02      	ldr	r3, [pc, #8]	@ (8007ec8 <malloc+0xc>)
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	f000 b82d 	b.w	8007f20 <_malloc_r>
 8007ec6:	bf00      	nop
 8007ec8:	2000006c 	.word	0x2000006c

08007ecc <free>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	@ (8007ed8 <free+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f000 b8f5 	b.w	80080c0 <_free_r>
 8007ed6:	bf00      	nop
 8007ed8:	2000006c 	.word	0x2000006c

08007edc <sbrk_aligned>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4e0f      	ldr	r6, [pc, #60]	@ (8007f1c <sbrk_aligned+0x40>)
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	6831      	ldr	r1, [r6, #0]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	b911      	cbnz	r1, 8007eee <sbrk_aligned+0x12>
 8007ee8:	f000 f8ae 	bl	8008048 <_sbrk_r>
 8007eec:	6030      	str	r0, [r6, #0]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 f8a9 	bl	8008048 <_sbrk_r>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	d103      	bne.n	8007f02 <sbrk_aligned+0x26>
 8007efa:	f04f 34ff 	mov.w	r4, #4294967295
 8007efe:	4620      	mov	r0, r4
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	1cc4      	adds	r4, r0, #3
 8007f04:	f024 0403 	bic.w	r4, r4, #3
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d0f8      	beq.n	8007efe <sbrk_aligned+0x22>
 8007f0c:	1a21      	subs	r1, r4, r0
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 f89a 	bl	8008048 <_sbrk_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d1f2      	bne.n	8007efe <sbrk_aligned+0x22>
 8007f18:	e7ef      	b.n	8007efa <sbrk_aligned+0x1e>
 8007f1a:	bf00      	nop
 8007f1c:	2000095c 	.word	0x2000095c

08007f20 <_malloc_r>:
 8007f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	1ccd      	adds	r5, r1, #3
 8007f26:	f025 0503 	bic.w	r5, r5, #3
 8007f2a:	3508      	adds	r5, #8
 8007f2c:	2d0c      	cmp	r5, #12
 8007f2e:	bf38      	it	cc
 8007f30:	250c      	movcc	r5, #12
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	4606      	mov	r6, r0
 8007f36:	db01      	blt.n	8007f3c <_malloc_r+0x1c>
 8007f38:	42a9      	cmp	r1, r5
 8007f3a:	d904      	bls.n	8007f46 <_malloc_r+0x26>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	6033      	str	r3, [r6, #0]
 8007f40:	2000      	movs	r0, #0
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800801c <_malloc_r+0xfc>
 8007f4a:	f000 f869 	bl	8008020 <__malloc_lock>
 8007f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f52:	461c      	mov	r4, r3
 8007f54:	bb44      	cbnz	r4, 8007fa8 <_malloc_r+0x88>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff ffbf 	bl	8007edc <sbrk_aligned>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	4604      	mov	r4, r0
 8007f62:	d158      	bne.n	8008016 <_malloc_r+0xf6>
 8007f64:	f8d8 4000 	ldr.w	r4, [r8]
 8007f68:	4627      	mov	r7, r4
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	d143      	bne.n	8007ff6 <_malloc_r+0xd6>
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d04b      	beq.n	800800a <_malloc_r+0xea>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	4639      	mov	r1, r7
 8007f76:	4630      	mov	r0, r6
 8007f78:	eb04 0903 	add.w	r9, r4, r3
 8007f7c:	f000 f864 	bl	8008048 <_sbrk_r>
 8007f80:	4581      	cmp	r9, r0
 8007f82:	d142      	bne.n	800800a <_malloc_r+0xea>
 8007f84:	6821      	ldr	r1, [r4, #0]
 8007f86:	1a6d      	subs	r5, r5, r1
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ffa6 	bl	8007edc <sbrk_aligned>
 8007f90:	3001      	adds	r0, #1
 8007f92:	d03a      	beq.n	800800a <_malloc_r+0xea>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	442b      	add	r3, r5
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	bb62      	cbnz	r2, 8007ffc <_malloc_r+0xdc>
 8007fa2:	f8c8 7000 	str.w	r7, [r8]
 8007fa6:	e00f      	b.n	8007fc8 <_malloc_r+0xa8>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	1b52      	subs	r2, r2, r5
 8007fac:	d420      	bmi.n	8007ff0 <_malloc_r+0xd0>
 8007fae:	2a0b      	cmp	r2, #11
 8007fb0:	d917      	bls.n	8007fe2 <_malloc_r+0xc2>
 8007fb2:	1961      	adds	r1, r4, r5
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	6025      	str	r5, [r4, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	6059      	strne	r1, [r3, #4]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	bf08      	it	eq
 8007fc0:	f8c8 1000 	streq.w	r1, [r8]
 8007fc4:	5162      	str	r2, [r4, r5]
 8007fc6:	604b      	str	r3, [r1, #4]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 f82f 	bl	800802c <__malloc_unlock>
 8007fce:	f104 000b 	add.w	r0, r4, #11
 8007fd2:	1d23      	adds	r3, r4, #4
 8007fd4:	f020 0007 	bic.w	r0, r0, #7
 8007fd8:	1ac2      	subs	r2, r0, r3
 8007fda:	bf1c      	itt	ne
 8007fdc:	1a1b      	subne	r3, r3, r0
 8007fde:	50a3      	strne	r3, [r4, r2]
 8007fe0:	e7af      	b.n	8007f42 <_malloc_r+0x22>
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	bf0c      	ite	eq
 8007fe8:	f8c8 2000 	streq.w	r2, [r8]
 8007fec:	605a      	strne	r2, [r3, #4]
 8007fee:	e7eb      	b.n	8007fc8 <_malloc_r+0xa8>
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	6864      	ldr	r4, [r4, #4]
 8007ff4:	e7ae      	b.n	8007f54 <_malloc_r+0x34>
 8007ff6:	463c      	mov	r4, r7
 8007ff8:	687f      	ldr	r7, [r7, #4]
 8007ffa:	e7b6      	b.n	8007f6a <_malloc_r+0x4a>
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	42a3      	cmp	r3, r4
 8008002:	d1fb      	bne.n	8007ffc <_malloc_r+0xdc>
 8008004:	2300      	movs	r3, #0
 8008006:	6053      	str	r3, [r2, #4]
 8008008:	e7de      	b.n	8007fc8 <_malloc_r+0xa8>
 800800a:	230c      	movs	r3, #12
 800800c:	6033      	str	r3, [r6, #0]
 800800e:	4630      	mov	r0, r6
 8008010:	f000 f80c 	bl	800802c <__malloc_unlock>
 8008014:	e794      	b.n	8007f40 <_malloc_r+0x20>
 8008016:	6005      	str	r5, [r0, #0]
 8008018:	e7d6      	b.n	8007fc8 <_malloc_r+0xa8>
 800801a:	bf00      	nop
 800801c:	20000960 	.word	0x20000960

08008020 <__malloc_lock>:
 8008020:	4801      	ldr	r0, [pc, #4]	@ (8008028 <__malloc_lock+0x8>)
 8008022:	f000 b84b 	b.w	80080bc <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	20000aa0 	.word	0x20000aa0

0800802c <__malloc_unlock>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__malloc_unlock+0x8>)
 800802e:	f000 b846 	b.w	80080be <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	20000aa0 	.word	0x20000aa0

08008038 <memset>:
 8008038:	4402      	add	r2, r0
 800803a:	4603      	mov	r3, r0
 800803c:	4293      	cmp	r3, r2
 800803e:	d100      	bne.n	8008042 <memset+0xa>
 8008040:	4770      	bx	lr
 8008042:	f803 1b01 	strb.w	r1, [r3], #1
 8008046:	e7f9      	b.n	800803c <memset+0x4>

08008048 <_sbrk_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d06      	ldr	r5, [pc, #24]	@ (8008064 <_sbrk_r+0x1c>)
 800804c:	2300      	movs	r3, #0
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7f8 fdd2 	bl	8000bfc <_sbrk>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_sbrk_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_sbrk_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20000a9c 	.word	0x20000a9c

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	@ (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000006c 	.word	0x2000006c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	@ (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	@ (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	@ (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	@ (80080b8 <__libc_init_array+0x44>)
 8008088:	f000 f864 	bl	8008154 <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	08008190 	.word	0x08008190
 80080b0:	08008190 	.word	0x08008190
 80080b4:	08008190 	.word	0x08008190
 80080b8:	08008194 	.word	0x08008194

080080bc <__retarget_lock_acquire_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_release_recursive>:
 80080be:	4770      	bx	lr

080080c0 <_free_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4605      	mov	r5, r0
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d041      	beq.n	800814c <_free_r+0x8c>
 80080c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080cc:	1f0c      	subs	r4, r1, #4
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfb8      	it	lt
 80080d2:	18e4      	addlt	r4, r4, r3
 80080d4:	f7ff ffa4 	bl	8008020 <__malloc_lock>
 80080d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008150 <_free_r+0x90>)
 80080da:	6813      	ldr	r3, [r2, #0]
 80080dc:	b933      	cbnz	r3, 80080ec <_free_r+0x2c>
 80080de:	6063      	str	r3, [r4, #4]
 80080e0:	6014      	str	r4, [r2, #0]
 80080e2:	4628      	mov	r0, r5
 80080e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080e8:	f7ff bfa0 	b.w	800802c <__malloc_unlock>
 80080ec:	42a3      	cmp	r3, r4
 80080ee:	d908      	bls.n	8008102 <_free_r+0x42>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	1821      	adds	r1, r4, r0
 80080f4:	428b      	cmp	r3, r1
 80080f6:	bf01      	itttt	eq
 80080f8:	6819      	ldreq	r1, [r3, #0]
 80080fa:	685b      	ldreq	r3, [r3, #4]
 80080fc:	1809      	addeq	r1, r1, r0
 80080fe:	6021      	streq	r1, [r4, #0]
 8008100:	e7ed      	b.n	80080de <_free_r+0x1e>
 8008102:	461a      	mov	r2, r3
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	b10b      	cbz	r3, 800810c <_free_r+0x4c>
 8008108:	42a3      	cmp	r3, r4
 800810a:	d9fa      	bls.n	8008102 <_free_r+0x42>
 800810c:	6811      	ldr	r1, [r2, #0]
 800810e:	1850      	adds	r0, r2, r1
 8008110:	42a0      	cmp	r0, r4
 8008112:	d10b      	bne.n	800812c <_free_r+0x6c>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	4401      	add	r1, r0
 8008118:	1850      	adds	r0, r2, r1
 800811a:	4283      	cmp	r3, r0
 800811c:	6011      	str	r1, [r2, #0]
 800811e:	d1e0      	bne.n	80080e2 <_free_r+0x22>
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	6053      	str	r3, [r2, #4]
 8008126:	4408      	add	r0, r1
 8008128:	6010      	str	r0, [r2, #0]
 800812a:	e7da      	b.n	80080e2 <_free_r+0x22>
 800812c:	d902      	bls.n	8008134 <_free_r+0x74>
 800812e:	230c      	movs	r3, #12
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	e7d6      	b.n	80080e2 <_free_r+0x22>
 8008134:	6820      	ldr	r0, [r4, #0]
 8008136:	1821      	adds	r1, r4, r0
 8008138:	428b      	cmp	r3, r1
 800813a:	bf04      	itt	eq
 800813c:	6819      	ldreq	r1, [r3, #0]
 800813e:	685b      	ldreq	r3, [r3, #4]
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	bf04      	itt	eq
 8008144:	1809      	addeq	r1, r1, r0
 8008146:	6021      	streq	r1, [r4, #0]
 8008148:	6054      	str	r4, [r2, #4]
 800814a:	e7ca      	b.n	80080e2 <_free_r+0x22>
 800814c:	bd38      	pop	{r3, r4, r5, pc}
 800814e:	bf00      	nop
 8008150:	20000960 	.word	0x20000960

08008154 <_init>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	bf00      	nop
 8008158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815a:	bc08      	pop	{r3}
 800815c:	469e      	mov	lr, r3
 800815e:	4770      	bx	lr

08008160 <_fini>:
 8008160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008162:	bf00      	nop
 8008164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008166:	bc08      	pop	{r3}
 8008168:	469e      	mov	lr, r3
 800816a:	4770      	bx	lr
