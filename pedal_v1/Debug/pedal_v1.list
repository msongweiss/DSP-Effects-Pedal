
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adb4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800af3c  0800af3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af60  0800af60  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800af60  0800af60  0000bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af68  0800af68  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af68  0800af68  0000bf68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af6c  0800af6c  0000bf6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800af70  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00008b28  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008ba4  20008ba4  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c53c  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b7e  00000000  00000000  000285e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0002d168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c3  00000000  00000000  0002e758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b67  00000000  00000000  0002f81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eeca  00000000  00000000  00055382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1143  00000000  00000000  0007424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014538f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d14  00000000  00000000  001453d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0014b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800af24 	.word	0x0800af24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800af24 	.word	0x0800af24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <MX_DMA_Init+0x4c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <MX_DMA_Init+0x4c>)
 8000504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b0d      	ldr	r3, [pc, #52]	@ (8000540 <MX_DMA_Init+0x4c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	200e      	movs	r0, #14
 800051c:	f001 f81f 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000520:	200e      	movs	r0, #14
 8000522:	f001 f838 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	200f      	movs	r0, #15
 800052c:	f001 f817 	bl	800155e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000530:	200f      	movs	r0, #15
 8000532:	f001 f830 	bl	8001596 <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
 800055e:	4b78      	ldr	r3, [pc, #480]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a77      	ldr	r2, [pc, #476]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b75      	ldr	r3, [pc, #468]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0310 	and.w	r3, r3, #16
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]
 800057a:	4b71      	ldr	r3, [pc, #452]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a70      	ldr	r2, [pc, #448]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b6e      	ldr	r3, [pc, #440]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	617b      	str	r3, [r7, #20]
 8000590:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b6a      	ldr	r3, [pc, #424]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	4a69      	ldr	r2, [pc, #420]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a2:	4b67      	ldr	r3, [pc, #412]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b63      	ldr	r3, [pc, #396]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a62      	ldr	r2, [pc, #392]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b60      	ldr	r3, [pc, #384]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a5b      	ldr	r2, [pc, #364]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b59      	ldr	r3, [pc, #356]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b55      	ldr	r3, [pc, #340]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a54      	ldr	r2, [pc, #336]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b52      	ldr	r3, [pc, #328]	@ (8000740 <MX_GPIO_Init+0x1fc>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0308 	and.w	r3, r3, #8
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2108      	movs	r1, #8
 8000606:	484f      	ldr	r0, [pc, #316]	@ (8000744 <MX_GPIO_Init+0x200>)
 8000608:	f001 fcec 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	484d      	ldr	r0, [pc, #308]	@ (8000748 <MX_GPIO_Init+0x204>)
 8000612:	f001 fce7 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000616:	2200      	movs	r2, #0
 8000618:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800061c:	484b      	ldr	r0, [pc, #300]	@ (800074c <MX_GPIO_Init+0x208>)
 800061e:	f001 fce1 	bl	8001fe4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000622:	2308      	movs	r3, #8
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	4842      	ldr	r0, [pc, #264]	@ (8000744 <MX_GPIO_Init+0x200>)
 800063a:	f001 fb37 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	483c      	ldr	r0, [pc, #240]	@ (8000748 <MX_GPIO_Init+0x204>)
 8000656:	f001 fb29 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	2301      	movs	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800065e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4838      	ldr	r0, [pc, #224]	@ (8000750 <MX_GPIO_Init+0x20c>)
 8000670:	f001 fb1c 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000674:	2310      	movs	r3, #16
 8000676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000678:	2303      	movs	r3, #3
 800067a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000680:	f107 031c 	add.w	r3, r7, #28
 8000684:	4619      	mov	r1, r3
 8000686:	4832      	ldr	r0, [pc, #200]	@ (8000750 <MX_GPIO_Init+0x20c>)
 8000688:	f001 fb10 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800068c:	2304      	movs	r3, #4
 800068e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	2300      	movs	r3, #0
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	482d      	ldr	r0, [pc, #180]	@ (8000754 <MX_GPIO_Init+0x210>)
 80006a0:	f001 fb04 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006a4:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80006a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4823      	ldr	r0, [pc, #140]	@ (800074c <MX_GPIO_Init+0x208>)
 80006be:	f001 faf5 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80006c2:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006d4:	2306      	movs	r3, #6
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	481a      	ldr	r0, [pc, #104]	@ (8000748 <MX_GPIO_Init+0x204>)
 80006e0:	f001 fae4 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006e4:	2320      	movs	r3, #32
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4815      	ldr	r0, [pc, #84]	@ (800074c <MX_GPIO_Init+0x208>)
 80006f8:	f001 fad8 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80006fc:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000702:	2312      	movs	r3, #18
 8000704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800070e:	2304      	movs	r3, #4
 8000710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	480e      	ldr	r0, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x210>)
 800071a:	f001 fac7 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000722:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000726:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_GPIO_Init+0x200>)
 8000734:	f001 faba 	bl	8001cac <HAL_GPIO_Init>

}
 8000738:	bf00      	nop
 800073a:	3730      	adds	r7, #48	@ 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000
 8000748:	40020800 	.word	0x40020800
 800074c:	40020c00 	.word	0x40020c00
 8000750:	40020000 	.word	0x40020000
 8000754:	40020400 	.word	0x40020400

08000758 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800075c:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <MX_I2C3_Init+0x50>)
 800075e:	4a13      	ldr	r2, [pc, #76]	@ (80007ac <MX_I2C3_Init+0x54>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000764:	4a12      	ldr	r2, [pc, #72]	@ (80007b0 <MX_I2C3_Init+0x58>)
 8000766:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_I2C3_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000776:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800077a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_I2C3_Init+0x50>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_I2C3_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <MX_I2C3_Init+0x50>)
 8000796:	f003 fd73 	bl	8004280 <HAL_I2C_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007a0:	f000 fb2a 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000098 	.word	0x20000098
 80007ac:	40005c00 	.word	0x40005c00
 80007b0:	000186a0 	.word	0x000186a0

080007b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	@ 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a29      	ldr	r2, [pc, #164]	@ (8000878 <HAL_I2C_MspInit+0xc4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d14b      	bne.n	800086e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a27      	ldr	r2, [pc, #156]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b25      	ldr	r3, [pc, #148]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a20      	ldr	r2, [pc, #128]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800080e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000814:	2312      	movs	r3, #18
 8000816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000820:	2304      	movs	r3, #4
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4815      	ldr	r0, [pc, #84]	@ (8000880 <HAL_I2C_MspInit+0xcc>)
 800082c:	f001 fa3e 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000836:	2312      	movs	r3, #18
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000842:	2304      	movs	r3, #4
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <HAL_I2C_MspInit+0xd0>)
 800084e:	f001 fa2d 	bl	8001cac <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b09      	ldr	r3, [pc, #36]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	4a08      	ldr	r2, [pc, #32]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 800085c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000860:	6413      	str	r3, [r2, #64]	@ 0x40
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_I2C_MspInit+0xc8>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40005c00 	.word	0x40005c00
 800087c:	40023800 	.word	0x40023800
 8000880:	40020800 	.word	0x40020800
 8000884:	40020000 	.word	0x40020000

08000888 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_I2S2_Init+0x54>)
 800088e:	4a14      	ldr	r2, [pc, #80]	@ (80008e0 <MX_I2S2_Init+0x58>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_I2S2_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000898:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_I2S2_Init+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ac:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80008b4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_I2S2_Init+0x54>)
 80008ca:	f004 fcfd 	bl	80052c8 <HAL_I2S_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80008d4:	f000 fa90 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200000ec 	.word	0x200000ec
 80008e0:	40003800 	.word	0x40003800

080008e4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	@ 0x38
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a6f      	ldr	r2, [pc, #444]	@ (8000acc <HAL_I2S_MspInit+0x1e8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	f040 80d7 	bne.w	8000ac4 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000916:	2301      	movs	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 800091a:	2360      	movs	r3, #96	@ 0x60
 800091c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800091e:	2302      	movs	r3, #2
 8000920:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4618      	mov	r0, r3
 8000928:	f006 f80a 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000932:	f000 fa61 	bl	8000df8 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b65      	ldr	r3, [pc, #404]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a64      	ldr	r2, [pc, #400]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b62      	ldr	r3, [pc, #392]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a5d      	ldr	r2, [pc, #372]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b5b      	ldr	r3, [pc, #364]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b57      	ldr	r3, [pc, #348]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a56      	ldr	r2, [pc, #344]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b54      	ldr	r3, [pc, #336]	@ (8000ad0 <HAL_I2S_MspInit+0x1ec>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 800098a:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099c:	2305      	movs	r3, #5
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4619      	mov	r1, r3
 80009a6:	484b      	ldr	r0, [pc, #300]	@ (8000ad4 <HAL_I2S_MspInit+0x1f0>)
 80009a8:	f001 f980 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80009ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80009be:	2306      	movs	r3, #6
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4842      	ldr	r0, [pc, #264]	@ (8000ad4 <HAL_I2S_MspInit+0x1f0>)
 80009ca:	f001 f96f 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ce:	2340      	movs	r3, #64	@ 0x40
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	483b      	ldr	r0, [pc, #236]	@ (8000ad8 <HAL_I2S_MspInit+0x1f4>)
 80009ea:	f001 f95f 	bl	8001cac <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80009ee:	4b3b      	ldr	r3, [pc, #236]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 80009f0:	4a3b      	ldr	r2, [pc, #236]	@ (8000ae0 <HAL_I2S_MspInit+0x1fc>)
 80009f2:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80009f4:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 80009f6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80009fa:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fc:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a0e:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a10:	4b32      	ldr	r3, [pc, #200]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a16:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1e:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000a20:	4b2e      	ldr	r3, [pc, #184]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a2e:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000a36:	4829      	ldr	r0, [pc, #164]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a38:	f000 fdc8 	bl	80015cc <HAL_DMA_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8000a42:	f000 f9d9 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a24      	ldr	r2, [pc, #144]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a4c:	4a23      	ldr	r2, [pc, #140]	@ (8000adc <HAL_I2S_MspInit+0x1f8>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a54:	4a24      	ldr	r2, [pc, #144]	@ (8000ae8 <HAL_I2S_MspInit+0x204>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a60:	2240      	movs	r2, #64	@ 0x40
 8000a62:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a80:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a88:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a90:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000a9a:	f000 fd97 	bl	80015cc <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8000aa4:	f000 f9a8 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000aac:	639a      	str	r2, [r3, #56]	@ 0x38
 8000aae:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae4 <HAL_I2S_MspInit+0x200>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2024      	movs	r0, #36	@ 0x24
 8000aba:	f000 fd50 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000abe:	2024      	movs	r0, #36	@ 0x24
 8000ac0:	f000 fd69 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3738      	adds	r7, #56	@ 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40003800 	.word	0x40003800
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	20000134 	.word	0x20000134
 8000ae0:	40026058 	.word	0x40026058
 8000ae4:	20000194 	.word	0x20000194
 8000ae8:	40026070 	.word	0x40026070

08000aec <HAL_I2SEx_TxRxHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

	callback_state = 1;
 8000af4:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]


}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200001f4 	.word	0x200001f4

08000b0c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

	callback_state = 2;
 8000b14:	4b04      	ldr	r3, [pc, #16]	@ (8000b28 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000b16:	2202      	movs	r2, #2
 8000b18:	701a      	strb	r2, [r3, #0]


}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200001f4 	.word	0x200001f4

08000b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b32:	f000 fba3 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b36:	f000 f8f5 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3a:	f7ff fd03 	bl	8000544 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b3e:	f7ff fcd9 	bl	80004f4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b42:	f000 faa5 	bl	8001090 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000b46:	f000 f95d 	bl	8000e04 <MX_SPI1_Init>
  MX_I2C3_Init();
 8000b4a:	f7ff fe05 	bl	8000758 <MX_I2C3_Init>
  MX_USB_HOST_Init();
 8000b4e:	f009 fd73 	bl	800a638 <MX_USB_HOST_Init>
  MX_I2S2_Init();
 8000b52:	f7ff fe99 	bl	8000888 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  //start i2s with 2048 samples transmission => 4096*u16 words
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8000b56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8000d04 <main+0x1d8>)
 8000b5c:	496a      	ldr	r1, [pc, #424]	@ (8000d08 <main+0x1dc>)
 8000b5e:	486b      	ldr	r0, [pc, #428]	@ (8000d0c <main+0x1e0>)
 8000b60:	f004 fdf0 	bl	8005744 <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state != 0) {
 8000b64:	4b6a      	ldr	r3, [pc, #424]	@ (8000d10 <main+0x1e4>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f000 80c7 	beq.w	8000cfc <main+0x1d0>

		  //decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8000b6e:	4b68      	ldr	r3, [pc, #416]	@ (8000d10 <main+0x1e4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d106      	bne.n	8000b84 <main+0x58>
			  	  offset_r_ptr = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
			  	  offset_w_ptr = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
			  	  w_ptr = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e00c      	b.n	8000b9e <main+0x72>
			  }

		  else if (callback_state == 2) {
 8000b84:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <main+0x1e4>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d108      	bne.n	8000b9e <main+0x72>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8000b8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b90:	617b      	str	r3, [r7, #20]
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8000b92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b96:	613b      	str	r3, [r7, #16]
			  w_ptr = BLOCK_SIZE_FLOAT;
 8000b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b9c:	60fb      	str	r3, [r7, #12]
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	e030      	b.n	8000c06 <main+0xda>
			  l_buf_in[w_ptr] = (float) ((int) (rxBuf[i]<<16)|rxBuf[i+1]);
 8000ba4:	4a57      	ldr	r2, [pc, #348]	@ (8000d04 <main+0x1d8>)
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	3201      	adds	r2, #1
 8000bb2:	4954      	ldr	r1, [pc, #336]	@ (8000d04 <main+0x1d8>)
 8000bb4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bc2:	4a54      	ldr	r2, [pc, #336]	@ (8000d14 <main+0x1e8>)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	4413      	add	r3, r2
 8000bca:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_in[w_ptr] = (float) ((int) (rxBuf[i+2]<<16)|rxBuf[i+3]);
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	4a4c      	ldr	r2, [pc, #304]	@ (8000d04 <main+0x1d8>)
 8000bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd8:	041b      	lsls	r3, r3, #16
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	3203      	adds	r2, #3
 8000bde:	4949      	ldr	r1, [pc, #292]	@ (8000d04 <main+0x1d8>)
 8000be0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bee:	4a4a      	ldr	r2, [pc, #296]	@ (8000d18 <main+0x1ec>)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	edc3 7a00 	vstr	s15, [r3]
			  w_ptr++;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3304      	adds	r3, #4
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	ddc8      	ble.n	8000ba4 <main+0x78>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	e016      	b.n	8000c46 <main+0x11a>
			  l_buf_out[i] = l_buf_in[i];
 8000c18:	4a3e      	ldr	r2, [pc, #248]	@ (8000d14 <main+0x1e8>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	493e      	ldr	r1, [pc, #248]	@ (8000d1c <main+0x1f0>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	601a      	str	r2, [r3, #0]
			  r_buf_out[i] = r_buf_in[i];
 8000c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d18 <main+0x1ec>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	493a      	ldr	r1, [pc, #232]	@ (8000d20 <main+0x1f4>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	601a      	str	r2, [r3, #0]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3301      	adds	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dde2      	ble.n	8000c18 <main+0xec>
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	60fb      	str	r3, [r7, #12]

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	e046      	b.n	8000cea <main+0x1be>
			txBuf[i] =  (((int)l_buf_out[w_ptr])>>16)&0xFFFF;
 8000c5c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d1c <main+0x1f0>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6c:	ee17 3a90 	vmov	r3, s15
 8000c70:	0c1b      	lsrs	r3, r3, #16
 8000c72:	b299      	uxth	r1, r3
 8000c74:	4a24      	ldr	r2, [pc, #144]	@ (8000d08 <main+0x1dc>)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+1] = ((int)l_buf_out[w_ptr])&0xFFFF;
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <main+0x1f0>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	ee17 2a90 	vmov	r2, s15
 8000c94:	b291      	uxth	r1, r2
 8000c96:	4a1c      	ldr	r2, [pc, #112]	@ (8000d08 <main+0x1dc>)
 8000c98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+2] = (((int)r_buf_out[w_ptr])>>16)&0xFFFF;
 8000c9c:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <main+0x1f4>)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	edd3 7a00 	vldr	s15, [r3]
 8000ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cac:	ee17 3a90 	vmov	r3, s15
 8000cb0:	0c1a      	lsrs	r2, r3, #16
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	b291      	uxth	r1, r2
 8000cb8:	4a13      	ldr	r2, [pc, #76]	@ (8000d08 <main+0x1dc>)
 8000cba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txBuf[i+3] = ((int)r_buf_out[w_ptr])&0xFFFF;
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <main+0x1f4>)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	edd3 7a00 	vldr	s15, [r3]
 8000cca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3303      	adds	r3, #3
 8000cd2:	ee17 2a90 	vmov	r2, s15
 8000cd6:	b291      	uxth	r1, r2
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <main+0x1dc>)
 8000cda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			w_ptr++;
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	3304      	adds	r3, #4
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	ddb2      	ble.n	8000c5c <main+0x130>
		  }

		  callback_state = 0;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <main+0x1e4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000cfc:	f009 fcc2 	bl	800a684 <MX_USB_HOST_Process>
	  if (callback_state != 0) {
 8000d00:	e730      	b.n	8000b64 <main+0x38>
 8000d02:	bf00      	nop
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	200021f8 	.word	0x200021f8
 8000d0c:	200000ec 	.word	0x200000ec
 8000d10:	200001f4 	.word	0x200001f4
 8000d14:	200041f8 	.word	0x200041f8
 8000d18:	200051f8 	.word	0x200051f8
 8000d1c:	200061f8 	.word	0x200061f8
 8000d20:	200071f8 	.word	0x200071f8

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	@ 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0320 	add.w	r3, r7, #32
 8000d2e:	2230      	movs	r2, #48	@ 0x30
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f00a f868 	bl	800ae08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	4b28      	ldr	r3, [pc, #160]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	4a27      	ldr	r2, [pc, #156]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d58:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <SystemClock_Config+0xd0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a21      	ldr	r2, [pc, #132]	@ (8000df4 <SystemClock_Config+0xd0>)
 8000d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d80:	2301      	movs	r3, #1
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d94:	2308      	movs	r3, #8
 8000d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d98:	2348      	movs	r3, #72	@ 0x48
 8000d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000da0:	2303      	movs	r3, #3
 8000da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4618      	mov	r0, r3
 8000daa:	f005 f933 	bl	8006014 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000db4:	f000 f820 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db8:	230f      	movs	r3, #15
 8000dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2102      	movs	r1, #2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f005 fb94 	bl	8006504 <HAL_RCC_ClockConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000de2:	f000 f809 	bl	8000df8 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	@ 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40007000 	.word	0x40007000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e0a:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <MX_SPI1_Init+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e48:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e50:	220a      	movs	r2, #10
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <MX_SPI1_Init+0x64>)
 8000e56:	f005 feb3 	bl	8006bc0 <HAL_SPI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e60:	f7ff ffca 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200081f8 	.word	0x200081f8
 8000e6c:	40013000 	.word	0x40013000

08000e70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <HAL_SPI_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eca:	23e0      	movs	r3, #224	@ 0xe0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_SPI_MspInit+0x8c>)
 8000ee6:	f000 fee1 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3e:	2007      	movs	r0, #7
 8000f40:	f000 fb02 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa6:	f000 f9bb 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000fb4:	4802      	ldr	r0, [pc, #8]	@ (8000fc0 <DMA1_Stream3_IRQHandler+0x10>)
 8000fb6:	f000 fc0f 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000134 	.word	0x20000134

08000fc4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	@ (8000fd4 <DMA1_Stream4_IRQHandler+0x10>)
 8000fca:	f000 fc05 	bl	80017d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000194 	.word	0x20000194

08000fd8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <SPI2_IRQHandler+0x10>)
 8000fde:	f004 fab3 	bl	8005548 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200000ec 	.word	0x200000ec

08000fec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ff0:	4802      	ldr	r0, [pc, #8]	@ (8000ffc <OTG_FS_IRQHandler+0x10>)
 8000ff2:	f001 faf1 	bl	80025d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000867c 	.word	0x2000867c

08001000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001008:	4a14      	ldr	r2, [pc, #80]	@ (800105c <_sbrk+0x5c>)
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <_sbrk+0x60>)
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001014:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d102      	bne.n	8001022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <_sbrk+0x64>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <_sbrk+0x68>)
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	429a      	cmp	r2, r3
 800102e:	d207      	bcs.n	8001040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001030:	f009 ff02 	bl	800ae38 <__errno>
 8001034:	4603      	mov	r3, r0
 8001036:	220c      	movs	r2, #12
 8001038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800103e:	e009      	b.n	8001054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001040:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <_sbrk+0x64>)
 8001050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001052:	68fb      	ldr	r3, [r7, #12]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20020000 	.word	0x20020000
 8001060:	00000400 	.word	0x00000400
 8001064:	20008250 	.word	0x20008250
 8001068:	20008ba8 	.word	0x20008ba8

0800106c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <SystemInit+0x20>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <SystemInit+0x20>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_USART3_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 800109c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010c8:	f005 fe03 	bl	8006cd2 <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f7ff fe91 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20008254 	.word	0x20008254
 80010e0:	40004800 	.word	0x40004800

080010e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <HAL_UART_MspInit+0xc4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d14b      	bne.n	800119e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a20      	ldr	r2, [pc, #128]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a19      	ldr	r2, [pc, #100]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800115a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800116c:	2307      	movs	r3, #7
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	480e      	ldr	r0, [pc, #56]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 8001178:	f000 fd98 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800117c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	2302      	movs	r3, #2
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118e:	2307      	movs	r3, #7
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <HAL_UART_MspInit+0xd0>)
 800119a:	f000 fd87 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004800 	.word	0x40004800
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020c00 	.word	0x40020c00

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011bc:	f7ff ff56 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	@ (80011f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	@ (80011fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011e6:	f009 fe2d 	bl	800ae44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fc9f 	bl	8000b2c <main>
  bx  lr    
 80011ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011fc:	0800af70 	.word	0x0800af70
  ldr r2, =_sbss
 8001200:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001204:	20008ba4 	.word	0x20008ba4

08001208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>

0800120a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001220:	f000 f804 	bl	800122c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <HAL_I2S_ErrorCallback+0x2c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800125a:	f7ff ffd6 	bl	800120a <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <HAL_I2S_ErrorCallback+0x30>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001268:	f7ff ffe7 	bl	800123a <BSP_AUDIO_IN_Error_Callback>
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40003c00 	.word	0x40003c00
 8001278:	40003800 	.word	0x40003800

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f94f 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fe26 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f967 	bl	80015b2 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012fc:	f000 f92f 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	2000829c 	.word	0x2000829c

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000829c 	.word	0x2000829c

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	@ (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	@ (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	@ (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	@ 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	@ 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff feb6 	bl	8001348 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e099      	b.n	800171c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001608:	e00f      	b.n	800162a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800160a:	f7ff fe9d 	bl	8001348 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b05      	cmp	r3, #5
 8001616:	d908      	bls.n	800162a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e078      	b.n	800171c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e8      	bne.n	800160a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <HAL_DMA_Init+0x158>)
 8001644:	4013      	ands	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4313      	orrs	r3, r2
 800167a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	2b04      	cmp	r3, #4
 8001682:	d107      	bne.n	8001694 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	4313      	orrs	r3, r2
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f023 0307 	bic.w	r3, r3, #7
 80016aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d117      	bne.n	80016ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00e      	beq.n	80016ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fa6f 	bl	8001bb4 <DMA_CheckFifoParam>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80016ea:	2301      	movs	r3, #1
 80016ec:	e016      	b.n	800171c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fa26 	bl	8001b48 <DMA_CalcBaseAndBitshift>
 80016fc:	4603      	mov	r3, r0
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001704:	223f      	movs	r2, #63	@ 0x3f
 8001706:	409a      	lsls	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	f010803f 	.word	0xf010803f

08001728 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_DMA_Start_IT+0x26>
 800174a:	2302      	movs	r3, #2
 800174c:	e040      	b.n	80017d0 <HAL_DMA_Start_IT+0xa8>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b01      	cmp	r3, #1
 8001760:	d12f      	bne.n	80017c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f9b8 	bl	8001aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001780:	223f      	movs	r2, #63	@ 0x3f
 8001782:	409a      	lsls	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0216 	orr.w	r2, r2, #22
 8001796:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0208 	orr.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	e005      	b.n	80017ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001a20 <HAL_DMA_IRQHandler+0x248>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8e      	ldr	r2, [pc, #568]	@ (8001a24 <HAL_DMA_IRQHandler+0x24c>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	0a9b      	lsrs	r3, r3, #10
 80017f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001802:	2208      	movs	r2, #8
 8001804:	409a      	lsls	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d01a      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0204 	bic.w	r2, r2, #4
 800182a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	2208      	movs	r2, #8
 8001832:	409a      	lsls	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183c:	f043 0201 	orr.w	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d012      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00b      	beq.n	800187a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001872:	f043 0202 	orr.w	r2, r3, #2
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800187e:	2204      	movs	r2, #4
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00b      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189c:	2204      	movs	r2, #4
 800189e:	409a      	lsls	r2, r3
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	2210      	movs	r2, #16
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d043      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03c      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d2:	2210      	movs	r2, #16
 80018d4:	409a      	lsls	r2, r3
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d018      	beq.n	800191a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d024      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	4798      	blx	r3
 8001906:	e01f      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190c:	2b00      	cmp	r3, #0
 800190e:	d01b      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e016      	b.n	8001948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d107      	bne.n	8001938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0208 	bic.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	2220      	movs	r2, #32
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808f 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8087 	beq.w	8001a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196e:	2220      	movs	r2, #32
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b05      	cmp	r3, #5
 8001980:	d136      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0216 	bic.w	r2, r2, #22
 8001990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d103      	bne.n	80019b2 <HAL_DMA_IRQHandler+0x1da>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0208 	bic.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c6:	223f      	movs	r2, #63	@ 0x3f
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d07e      	beq.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
        }
        return;
 80019ee:	e079      	b.n	8001ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d01d      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d031      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	e02c      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
 8001a1e:	bf00      	nop
 8001a20:	20000000 	.word	0x20000000
 8001a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e01e      	b.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10f      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0210 	bic.w	r2, r2, #16
 8001a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d022      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d307      	bcc.n	8001ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f2      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x2cc>
 8001abe:	e000      	b.n	8001ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
 8001ae2:	e000      	b.n	8001ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ae4:	bf00      	nop
    }
  }
}
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b40      	cmp	r3, #64	@ 0x40
 8001b18:	d108      	bne.n	8001b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b2a:	e007      	b.n	8001b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3b10      	subs	r3, #16
 8001b58:	4a14      	ldr	r2, [pc, #80]	@ (8001bac <DMA_CalcBaseAndBitshift+0x64>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b62:	4a13      	ldr	r2, [pc, #76]	@ (8001bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d909      	bls.n	8001b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b88:	e007      	b.n	8001b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	0800af58 	.word	0x0800af58

08001bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d11f      	bne.n	8001c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d856      	bhi.n	8001c82 <DMA_CheckFifoParam+0xce>
 8001bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bdc <DMA_CheckFifoParam+0x28>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001bff 	.word	0x08001bff
 8001be4:	08001bed 	.word	0x08001bed
 8001be8:	08001c83 	.word	0x08001c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d046      	beq.n	8001c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bfc:	e043      	b.n	8001c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c06:	d140      	bne.n	8001c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c0c:	e03d      	b.n	8001c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c16:	d121      	bne.n	8001c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d837      	bhi.n	8001c8e <DMA_CheckFifoParam+0xda>
 8001c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c24 <DMA_CheckFifoParam+0x70>)
 8001c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3b 	.word	0x08001c3b
 8001c2c:	08001c35 	.word	0x08001c35
 8001c30:	08001c4d 	.word	0x08001c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e030      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d025      	beq.n	8001c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4a:	e022      	b.n	8001c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c54:	d11f      	bne.n	8001c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c5a:	e01c      	b.n	8001c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d903      	bls.n	8001c6a <DMA_CheckFifoParam+0xb6>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d003      	beq.n	8001c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c68:	e018      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6e:	e015      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c80:	e00b      	b.n	8001c9a <DMA_CheckFifoParam+0xe6>
      break;
 8001c82:	bf00      	nop
 8001c84:	e00a      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c86:	bf00      	nop
 8001c88:	e008      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8a:	bf00      	nop
 8001c8c:	e006      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c8e:	bf00      	nop
 8001c90:	e004      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c92:	bf00      	nop
 8001c94:	e002      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c96:	bf00      	nop
 8001c98:	e000      	b.n	8001c9c <DMA_CheckFifoParam+0xe8>
      break;
 8001c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e16b      	b.n	8001fa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 815a 	bne.w	8001f9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d005      	beq.n	8001cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d130      	bne.n	8001d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2203      	movs	r2, #3
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d34:	2201      	movs	r2, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 0201 	and.w	r2, r3, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d017      	beq.n	8001d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80b4 	beq.w	8001f9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b60      	ldr	r3, [pc, #384]	@ (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fbc <HAL_GPIO_Init+0x310>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_GPIO_Init+0x314>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02b      	beq.n	8001ed2 <HAL_GPIO_Init+0x226>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <HAL_GPIO_Init+0x318>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d025      	beq.n	8001ece <HAL_GPIO_Init+0x222>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a50      	ldr	r2, [pc, #320]	@ (8001fc8 <HAL_GPIO_Init+0x31c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01f      	beq.n	8001eca <HAL_GPIO_Init+0x21e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <HAL_GPIO_Init+0x320>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d019      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd0 <HAL_GPIO_Init+0x324>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d013      	beq.n	8001ec2 <HAL_GPIO_Init+0x216>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8001fd4 <HAL_GPIO_Init+0x328>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00d      	beq.n	8001ebe <HAL_GPIO_Init+0x212>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd8 <HAL_GPIO_Init+0x32c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d007      	beq.n	8001eba <HAL_GPIO_Init+0x20e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	@ (8001fdc <HAL_GPIO_Init+0x330>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_GPIO_Init+0x20a>
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	e00e      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x228>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4935      	ldr	r1, [pc, #212]	@ (8001fbc <HAL_GPIO_Init+0x310>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a32      	ldr	r2, [pc, #200]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b30      	ldr	r3, [pc, #192]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a27      	ldr	r2, [pc, #156]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f46:	4b26      	ldr	r3, [pc, #152]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f94:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <HAL_GPIO_Init+0x334>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f ae90 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40021c00 	.word	0x40021c00
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af02      	add	r7, sp, #8
 800201c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e059      	b.n	80020dc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f008 fb56 	bl	800a6f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2203      	movs	r2, #3
 800204c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002056:	d102      	bne.n	800205e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f005 f96f 	bl	8007346 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6818      	ldr	r0, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7c1a      	ldrb	r2, [r3, #16]
 8002070:	f88d 2000 	strb.w	r2, [sp]
 8002074:	3304      	adds	r3, #4
 8002076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002078:	f005 f8f0 	bl	800725c <USB_CoreInit>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e026      	b.n	80020dc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f005 f967 	bl	8007368 <USB_SetCurrentMode>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e017      	b.n	80020dc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7c1a      	ldrb	r2, [r3, #16]
 80020b4:	f88d 2000 	strb.w	r2, [sp]
 80020b8:	3304      	adds	r3, #4
 80020ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020bc:	f005 fb0a 	bl	80076d4 <USB_HostInit>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e004      	b.n	80020dc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b08b      	sub	sp, #44	@ 0x2c
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	70fb      	strb	r3, [r7, #3]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70bb      	strb	r3, [r7, #2]
 80020fa:	4613      	mov	r3, r2
 80020fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80020fe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002100:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_HCD_HC_Init+0x2c>
 800210c:	2302      	movs	r3, #2
 800210e:	e09d      	b.n	800224c <HAL_HCD_HC_Init+0x168>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3319      	adds	r3, #25
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	1a9b      	subs	r3, r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3314      	adds	r3, #20
 800213c:	787a      	ldrb	r2, [r7, #1]
 800213e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a9b      	subs	r3, r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3315      	adds	r3, #21
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3326      	adds	r3, #38	@ 0x26
 8002164:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002168:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	78bb      	ldrb	r3, [r7, #2]
 800216e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002172:	b2d8      	uxtb	r0, r3
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3316      	adds	r3, #22
 8002182:	4602      	mov	r2, r0
 8002184:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	4619      	mov	r1, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fbc8 	bl	8002920 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002194:	2b00      	cmp	r3, #0
 8002196:	da0a      	bge.n	80021ae <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	3317      	adds	r3, #23
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e009      	b.n	80021c2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	3317      	adds	r3, #23
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 fbe8 	bl	800799c <USB_GetHostSpeed>
 80021cc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80021ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10b      	bne.n	80021ee <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80021d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_HCD_HC_Init+0x10a>
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d104      	bne.n	80021ee <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2bbc      	cmp	r3, #188	@ 0xbc
 80021e8:	d901      	bls.n	80021ee <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80021ea:	23bc      	movs	r3, #188	@ 0xbc
 80021ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3318      	adds	r3, #24
 80021fe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	b298      	uxth	r0, r3
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3328      	adds	r3, #40	@ 0x28
 8002218:	4602      	mov	r2, r0
 800221a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	b29b      	uxth	r3, r3
 8002224:	787c      	ldrb	r4, [r7, #1]
 8002226:	78ba      	ldrb	r2, [r7, #2]
 8002228:	78f9      	ldrb	r1, [r7, #3]
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4623      	mov	r3, r4
 800223a:	f005 fbd7 	bl	80079ec <USB_HC_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}

08002254 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_HCD_HC_Halt+0x1e>
 800226e:	2302      	movs	r3, #2
 8002270:	e00f      	b.n	8002292 <HAL_HCD_HC_Halt+0x3e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	78fa      	ldrb	r2, [r7, #3]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f005 ff69 	bl	800815a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	461a      	mov	r2, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	70fb      	strb	r3, [r7, #3]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70bb      	strb	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3317      	adds	r3, #23
 80022c6:	78ba      	ldrb	r2, [r7, #2]
 80022c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3326      	adds	r3, #38	@ 0x26
 80022da:	787a      	ldrb	r2, [r7, #1]
 80022dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022de:	7c3b      	ldrb	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d114      	bne.n	800230e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	332a      	adds	r3, #42	@ 0x2a
 80022f4:	2203      	movs	r2, #3
 80022f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3319      	adds	r3, #25
 8002308:	7f3a      	ldrb	r2, [r7, #28]
 800230a:	701a      	strb	r2, [r3, #0]
 800230c:	e009      	b.n	8002322 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	332a      	adds	r3, #42	@ 0x2a
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002322:	787b      	ldrb	r3, [r7, #1]
 8002324:	2b03      	cmp	r3, #3
 8002326:	f200 8102 	bhi.w	800252e <HAL_HCD_HC_SubmitRequest+0x292>
 800232a:	a201      	add	r2, pc, #4	@ (adr r2, 8002330 <HAL_HCD_HC_SubmitRequest+0x94>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002519 	.word	0x08002519
 8002338:	08002405 	.word	0x08002405
 800233c:	0800248f 	.word	0x0800248f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002340:	7c3b      	ldrb	r3, [r7, #16]
 8002342:	2b01      	cmp	r3, #1
 8002344:	f040 80f5 	bne.w	8002532 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002348:	78bb      	ldrb	r3, [r7, #2]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d12d      	bne.n	80023aa <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800234e:	8b3b      	ldrh	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	333d      	adds	r3, #61	@ 0x3d
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	333d      	adds	r3, #61	@ 0x3d
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	332a      	adds	r3, #42	@ 0x2a
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002392:	e0ce      	b.n	8002532 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	332a      	adds	r3, #42	@ 0x2a
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      break;
 80023a8:	e0c3      	b.n	8002532 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	331a      	adds	r3, #26
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f040 80b8 	bne.w	8002532 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	333c      	adds	r3, #60	@ 0x3c
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	332a      	adds	r3, #42	@ 0x2a
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e0a1      	b.n	8002532 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ee:	78fa      	ldrb	r2, [r7, #3]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	1a9b      	subs	r3, r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	332a      	adds	r3, #42	@ 0x2a
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
      break;
 8002402:	e096      	b.n	8002532 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002404:	78bb      	ldrb	r3, [r7, #2]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d120      	bne.n	800244c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	333d      	adds	r3, #61	@ 0x3d
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	332a      	adds	r3, #42	@ 0x2a
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002434:	e07e      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	332a      	adds	r3, #42	@ 0x2a
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
      break;
 800244a:	e073      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	333c      	adds	r3, #60	@ 0x3c
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	332a      	adds	r3, #42	@ 0x2a
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      break;
 8002476:	e05d      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	332a      	adds	r3, #42	@ 0x2a
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]
      break;
 800248c:	e052      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800248e:	78bb      	ldrb	r3, [r7, #2]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d120      	bne.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	333d      	adds	r3, #61	@ 0x3d
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	332a      	adds	r3, #42	@ 0x2a
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024be:	e039      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	332a      	adds	r3, #42	@ 0x2a
 80024d0:	2202      	movs	r2, #2
 80024d2:	701a      	strb	r2, [r3, #0]
      break;
 80024d4:	e02e      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	333c      	adds	r3, #60	@ 0x3c
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	332a      	adds	r3, #42	@ 0x2a
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
      break;
 8002500:	e018      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	332a      	adds	r3, #42	@ 0x2a
 8002512:	2202      	movs	r2, #2
 8002514:	701a      	strb	r2, [r3, #0]
      break;
 8002516:	e00d      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	332a      	adds	r3, #42	@ 0x2a
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
      break;
 800252c:	e002      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002532:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	332c      	adds	r3, #44	@ 0x2c
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	8b39      	ldrh	r1, [r7, #24]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4403      	add	r3, r0
 8002558:	3334      	adds	r3, #52	@ 0x34
 800255a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334c      	adds	r3, #76	@ 0x4c
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3338      	adds	r3, #56	@ 0x38
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3315      	adds	r3, #21
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	334d      	adds	r3, #77	@ 0x4d
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	4613      	mov	r3, r2
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3310      	adds	r3, #16
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	1d19      	adds	r1, r3, #4
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	799b      	ldrb	r3, [r3, #6]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f005 fb3c 	bl	8007c44 <USB_HC_StartXfer>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop

080025d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f005 f830 	bl	8007654 <USB_GetMode>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f040 80fb 	bne.w	80027f2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f004 fff3 	bl	80075ec <USB_ReadInterrupts>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80f1 	beq.w	80027f0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 ffea 	bl	80075ec <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800261e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002622:	d104      	bne.n	800262e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800262c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 ffda 	bl	80075ec <USB_ReadInterrupts>
 8002638:	4603      	mov	r3, r0
 800263a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002642:	d104      	bne.n	800264e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800264c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f004 ffca 	bl	80075ec <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800265e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002662:	d104      	bne.n	800266e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800266c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f004 ffba 	bl	80075ec <USB_ReadInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2202      	movs	r2, #2
 8002688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f004 ffac 	bl	80075ec <USB_ReadInterrupts>
 8002694:	4603      	mov	r3, r0
 8002696:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800269a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800269e:	d120      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d113      	bne.n	80026e2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026ba:	2110      	movs	r1, #16
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f004 fe9f 	bl	8007400 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026c2:	6938      	ldr	r0, [r7, #16]
 80026c4:	f004 fece 	bl	8007464 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7a5b      	ldrb	r3, [r3, #9]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d105      	bne.n	80026dc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f005 f8c0 	bl	800785c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f008 f887 	bl	800a7f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f004 ff80 	bl	80075ec <USB_ReadInterrupts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f6:	d102      	bne.n	80026fe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 fd4d 	bl	8004198 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f004 ff72 	bl	80075ec <USB_ReadInterrupts>
 8002708:	4603      	mov	r3, r0
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d106      	bne.n	8002720 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f008 f850 	bl	800a7b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2208      	movs	r2, #8
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 ff61 	bl	80075ec <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002734:	d139      	bne.n	80027aa <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f005 fcfc 	bl	8008138 <USB_HC_ReadInterrupt>
 8002740:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e025      	b.n	8002794 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002772:	d106      	bne.n	8002782 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	4619      	mov	r1, r3
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f905 	bl	800298a <HCD_HC_IN_IRQHandler>
 8002780:	e005      	b.n	800278e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 ff67 	bl	800365c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	3301      	adds	r3, #1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	795b      	ldrb	r3, [r3, #5]
 8002798:	461a      	mov	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4293      	cmp	r3, r2
 800279e:	d3d3      	bcc.n	8002748 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f004 ff1c 	bl	80075ec <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d101      	bne.n	80027c2 <HAL_HCD_IRQHandler+0x1ea>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_HCD_IRQHandler+0x1ec>
 80027c2:	2300      	movs	r3, #0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d014      	beq.n	80027f2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0210 	bic.w	r2, r2, #16
 80027d6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f001 fbfe 	bl	8003fda <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0210 	orr.w	r2, r2, #16
 80027ec:	619a      	str	r2, [r3, #24]
 80027ee:	e000      	b.n	80027f2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80027f0:	bf00      	nop
    }
  }
}
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_HCD_Start+0x16>
 800280a:	2302      	movs	r3, #2
 800280c:	e013      	b.n	8002836 <HAL_HCD_Start+0x3e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f005 f884 	bl	800792a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fd7c 	bl	8007324 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_HCD_Stop+0x16>
 8002850:	2302      	movs	r3, #2
 8002852:	e00d      	b.n	8002870 <HAL_HCD_Stop+0x32>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f005 fdd7 	bl	8008414 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f005 f826 	bl	80078d6 <USB_ResetPort>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	781b      	ldrb	r3, [r3, #0]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3338      	adds	r3, #56	@ 0x38
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 f868 	bl	80079ca <USB_GetCurrentFrame>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f005 f843 	bl	800799c <USB_GetHostSpeed>
 8002916:	4603      	mov	r3, r0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	331a      	adds	r3, #26
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	331b      	adds	r3, #27
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3325      	adds	r3, #37	@ 0x25
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3324      	adds	r3, #36	@ 0x24
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b086      	sub	sp, #24
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 fe32 	bl	8007612 <USB_ReadChInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d11a      	bne.n	80029ee <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c4:	461a      	mov	r2, r3
 80029c6:	2304      	movs	r3, #4
 80029c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	334d      	adds	r3, #77	@ 0x4d
 80029da:	2207      	movs	r2, #7
 80029dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f005 fbb7 	bl	800815a <USB_HC_Halt>
 80029ec:	e09e      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 fe0b 	bl	8007612 <USB_ReadChInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a06:	d11b      	bne.n	8002a40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a14:	461a      	mov	r2, r3
 8002a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fb8e 	bl	800815a <USB_HC_Halt>
 8002a3e:	e075      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 fde2 	bl	8007612 <USB_ReadChInterrupts>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11a      	bne.n	8002a8e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2308      	movs	r3, #8
 8002a68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a6a:	78fa      	ldrb	r2, [r7, #3]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	334d      	adds	r3, #77	@ 0x4d
 8002a7a:	2206      	movs	r2, #6
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f005 fb67 	bl	800815a <USB_HC_Halt>
 8002a8c:	e04e      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fdbb 	bl	8007612 <USB_ReadChInterrupts>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aa6:	d11b      	bne.n	8002ae0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002aba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	@ 0x4d
 8002acc:	2209      	movs	r2, #9
 8002ace:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f005 fb3e 	bl	800815a <USB_HC_Halt>
 8002ade:	e025      	b.n	8002b2c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 fd92 	bl	8007612 <USB_ReadChInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af4:	2b80      	cmp	r3, #128	@ 0x80
 8002af6:	d119      	bne.n	8002b2c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	334d      	adds	r3, #77	@ 0x4d
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f005 fb17 	bl	800815a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fd6c 	bl	8007612 <USB_ReadChInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b44:	d112      	bne.n	8002b6c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f005 fb03 	bl	800815a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b60:	461a      	mov	r2, r3
 8002b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b66:	6093      	str	r3, [r2, #8]
 8002b68:	f000 bd75 	b.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 fd4c 	bl	8007612 <USB_ReadChInterrupts>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	f040 8128 	bne.w	8002dd6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	015a      	lsls	r2, r3, #5
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b92:	461a      	mov	r2, r3
 8002b94:	2320      	movs	r3, #32
 8002b96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	331b      	adds	r3, #27
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d119      	bne.n	8002be2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	331b      	adds	r3, #27
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	0151      	lsls	r1, r2, #5
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	440a      	add	r2, r1
 8002bd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	799b      	ldrb	r3, [r3, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01b      	beq.n	8002c22 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3330      	adds	r3, #48	@ 0x30
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	1ac9      	subs	r1, r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3338      	adds	r3, #56	@ 0x38
 8002c20:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334d      	adds	r3, #77	@ 0x4d
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	3344      	adds	r3, #68	@ 0x44
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3326      	adds	r3, #38	@ 0x26
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3326      	adds	r3, #38	@ 0x26
 8002c82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d110      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f005 fa62 	bl	800815a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	6093      	str	r3, [r2, #8]
 8002ca8:	e03d      	b.n	8002d26 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3326      	adds	r3, #38	@ 0x26
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d00a      	beq.n	8002cd6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3326      	adds	r3, #38	@ 0x26
 8002cd0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d127      	bne.n	8002d26 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	0151      	lsls	r1, r2, #5
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	440a      	add	r2, r1
 8002cec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002cf4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	334c      	adds	r3, #76	@ 0x4c
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	334c      	adds	r3, #76	@ 0x4c
 8002d1a:	781a      	ldrb	r2, [r3, #0]
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f007 fd73 	bl	800a80c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	799b      	ldrb	r3, [r3, #6]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d13b      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3338      	adds	r3, #56	@ 0x38
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3328      	adds	r3, #40	@ 0x28
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	440b      	add	r3, r1
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4403      	add	r3, r0
 8002d64:	3328      	adds	r3, #40	@ 0x28
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8470 	beq.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	333c      	adds	r3, #60	@ 0x3c
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2d8      	uxtb	r0, r3
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	333c      	adds	r3, #60	@ 0x3c
 8002d9e:	4602      	mov	r2, r0
 8002da0:	701a      	strb	r2, [r3, #0]
 8002da2:	f000 bc58 	b.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	333c      	adds	r3, #60	@ 0x3c
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2d8      	uxtb	r0, r3
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	333c      	adds	r3, #60	@ 0x3c
 8002dce:	4602      	mov	r2, r0
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	f000 bc40 	b.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f004 fc17 	bl	8007612 <USB_ReadChInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d131      	bne.n	8002e52 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	1a9b      	subs	r3, r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	331a      	adds	r3, #26
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	f040 841f 	bne.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	331b      	adds	r3, #27
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334d      	adds	r3, #77	@ 0x4d
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 f986 	bl	800815a <USB_HC_Halt>
 8002e4e:	f000 bc02 	b.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 fbd9 	bl	8007612 <USB_ReadChInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 8305 	bne.w	8003476 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	334d      	adds	r3, #77	@ 0x4d
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d114      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	@ 0x4d
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	334c      	adds	r3, #76	@ 0x4c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e2cc      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334d      	adds	r3, #77	@ 0x4d
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d114      	bne.n	8002efe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334d      	adds	r3, #77	@ 0x4d
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	@ 0x4c
 8002ef8:	2205      	movs	r2, #5
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e2ac      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	334d      	adds	r3, #77	@ 0x4d
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b07      	cmp	r3, #7
 8002f12:	d00b      	beq.n	8002f2c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334d      	adds	r3, #77	@ 0x4d
 8002f24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f26:	2b09      	cmp	r3, #9
 8002f28:	f040 80a6 	bne.w	8003078 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	334d      	adds	r3, #77	@ 0x4d
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3344      	adds	r3, #68	@ 0x44
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4403      	add	r3, r0
 8002f60:	3344      	adds	r3, #68	@ 0x44
 8002f62:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	@ 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d943      	bls.n	8003002 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3344      	adds	r3, #68	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	331a      	adds	r3, #26
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d123      	bne.n	8002fec <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	331b      	adds	r3, #27
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	331c      	adds	r3, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	0151      	lsls	r1, r2, #5
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	440a      	add	r2, r1
 8002fe2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fea:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334c      	adds	r3, #76	@ 0x4c
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003000:	e229      	b.n	8003456 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	@ 0x4c
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3326      	adds	r3, #38	@ 0x26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303e:	2b02      	cmp	r3, #2
 8003040:	f040 8209 	bne.w	8003456 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800305a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003062:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003076:	e1ee      	b.n	8003456 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334d      	adds	r3, #77	@ 0x4d
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b05      	cmp	r3, #5
 800308c:	f040 80c8 	bne.w	8003220 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334d      	adds	r3, #77	@ 0x4d
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	331b      	adds	r3, #27
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 81ce 	bne.w	8003458 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	3326      	adds	r3, #38	@ 0x26
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d16b      	bne.n	80031aa <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3348      	adds	r3, #72	@ 0x48
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c59      	adds	r1, r3, #1
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4403      	add	r3, r0
 80030f2:	3348      	adds	r3, #72	@ 0x48
 80030f4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3348      	adds	r3, #72	@ 0x48
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d943      	bls.n	8003194 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3348      	adds	r3, #72	@ 0x48
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	331b      	adds	r3, #27
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3344      	adds	r3, #68	@ 0x44
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d809      	bhi.n	800315e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	331c      	adds	r3, #28
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	0151      	lsls	r1, r2, #5
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	440a      	add	r2, r1
 8003174:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334c      	adds	r3, #76	@ 0x4c
 800318e:	2204      	movs	r2, #4
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e014      	b.n	80031be <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334c      	adds	r3, #76	@ 0x4c
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	e009      	b.n	80031be <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	334c      	adds	r3, #76	@ 0x4c
 80031ba:	2202      	movs	r2, #2
 80031bc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3326      	adds	r3, #38	@ 0x26
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3326      	adds	r3, #38	@ 0x26
 80031e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	f040 8136 	bne.w	8003458 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003202:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800320a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e11b      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	f040 8081 	bne.w	800333a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334d      	adds	r3, #77	@ 0x4d
 8003248:	2202      	movs	r2, #2
 800324a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	331b      	adds	r3, #27
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b01      	cmp	r3, #1
 8003260:	f040 80fa 	bne.w	8003458 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334c      	adds	r3, #76	@ 0x4c
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	440a      	add	r2, r1
 800328e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	0151      	lsls	r1, r2, #5
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	440a      	add	r2, r1
 80032ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	0151      	lsls	r1, r2, #5
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	440a      	add	r2, r1
 80032ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032d2:	f023 0320 	bic.w	r3, r3, #32
 80032d6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3326      	adds	r3, #38	@ 0x26
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3326      	adds	r3, #38	@ 0x26
 80032fe:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003300:	2b02      	cmp	r3, #2
 8003302:	f040 80a9 	bne.w	8003458 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800331c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003324:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	e08e      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334d      	adds	r3, #77	@ 0x4d
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b04      	cmp	r3, #4
 800334e:	d143      	bne.n	80033d8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	2202      	movs	r2, #2
 8003362:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334c      	adds	r3, #76	@ 0x4c
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3326      	adds	r3, #38	@ 0x26
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3326      	adds	r3, #38	@ 0x26
 800339e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d159      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e03f      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	334d      	adds	r3, #77	@ 0x4d
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d126      	bne.n	800343c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334d      	adds	r3, #77	@ 0x4d
 80033fe:	2202      	movs	r2, #2
 8003400:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3344      	adds	r3, #68	@ 0x44
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c59      	adds	r1, r3, #1
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4403      	add	r3, r0
 8003422:	3344      	adds	r3, #68	@ 0x44
 8003424:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2204      	movs	r2, #4
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e00d      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	@ 0x4d
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	f000 8100 	beq.w	8003654 <HCD_HC_IN_IRQHandler+0xcca>
 8003454:	e000      	b.n	8003458 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003456:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003458:	78fa      	ldrb	r2, [r7, #3]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	334c      	adds	r3, #76	@ 0x4c
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	4619      	mov	r1, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f007 f9cc 	bl	800a80c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003474:	e0ef      	b.n	8003656 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f004 f8c7 	bl	8007612 <USB_ReadChInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348a:	2b40      	cmp	r3, #64	@ 0x40
 800348c:	d12f      	bne.n	80034ee <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2340      	movs	r3, #64	@ 0x40
 800349e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334d      	adds	r3, #77	@ 0x4d
 80034b0:	2205      	movs	r2, #5
 80034b2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	331a      	adds	r3, #26
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3344      	adds	r3, #68	@ 0x44
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	4611      	mov	r1, r2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f004 fe37 	bl	800815a <USB_HC_Halt>
 80034ec:	e0b3      	b.n	8003656 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 f88b 	bl	8007612 <USB_ReadChInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	f040 80a7 	bne.w	8003656 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3326      	adds	r3, #38	@ 0x26
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d11b      	bne.n	8003556 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3344      	adds	r3, #68	@ 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334d      	adds	r3, #77	@ 0x4d
 8003542:	2204      	movs	r2, #4
 8003544:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f004 fe03 	bl	800815a <USB_HC_Halt>
 8003554:	e03f      	b.n	80035d6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3326      	adds	r3, #38	@ 0x26
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3326      	adds	r3, #38	@ 0x26
 800357c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357e:	2b02      	cmp	r3, #2
 8003580:	d129      	bne.n	80035d6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3344      	adds	r3, #68	@ 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	799b      	ldrb	r3, [r3, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HCD_HC_IN_IRQHandler+0xc2a>
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	331b      	adds	r3, #27
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d110      	bne.n	80035d6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	334d      	adds	r3, #77	@ 0x4d
 80035c4:	2204      	movs	r2, #4
 80035c6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fdc2 	bl	800815a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	331b      	adds	r3, #27
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d129      	bne.n	8003640 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	331b      	adds	r3, #27
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	440a      	add	r2, r1
 8003616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800361a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800361e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	0151      	lsls	r1, r2, #5
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	440a      	add	r2, r1
 8003636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800363a:	f043 0320 	orr.w	r3, r3, #32
 800363e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364c:	461a      	mov	r2, r3
 800364e:	2310      	movs	r3, #16
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	e000      	b.n	8003656 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003654:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	4611      	mov	r1, r2
 800367a:	4618      	mov	r0, r3
 800367c:	f003 ffc9 	bl	8007612 <USB_ReadChInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b04      	cmp	r3, #4
 8003688:	d11b      	bne.n	80036c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4413      	add	r3, r2
 8003692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003696:	461a      	mov	r2, r3
 8003698:	2304      	movs	r3, #4
 800369a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334d      	adds	r3, #77	@ 0x4d
 80036ac:	2207      	movs	r2, #7
 80036ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 fd4e 	bl	800815a <USB_HC_Halt>
 80036be:	f000 bc89 	b.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 ffa1 	bl	8007612 <USB_ReadChInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	f040 8082 	bne.w	80037e0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e8:	461a      	mov	r2, r3
 80036ea:	2320      	movs	r3, #32
 80036ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3319      	adds	r3, #25
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d124      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3319      	adds	r3, #25
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	334c      	adds	r3, #76	@ 0x4c
 8003728:	2202      	movs	r2, #2
 800372a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	334d      	adds	r3, #77	@ 0x4d
 800373c:	2203      	movs	r2, #3
 800373e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f004 fd06 	bl	800815a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	331a      	adds	r3, #26
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	f040 8437 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	331b      	adds	r3, #27
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 842b 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3326      	adds	r3, #38	@ 0x26
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d009      	beq.n	80037a8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	331b      	adds	r3, #27
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334d      	adds	r3, #77	@ 0x4d
 80037b8:	2203      	movs	r2, #3
 80037ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fcc8 	bl	800815a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3344      	adds	r3, #68	@ 0x44
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e3f9      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f003 ff12 	bl	8007612 <USB_ReadChInterrupts>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f8:	d111      	bne.n	800381e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4413      	add	r3, r2
 8003802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003806:	461a      	mov	r2, r3
 8003808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800380c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fc9f 	bl	800815a <USB_HC_Halt>
 800381c:	e3da      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f003 fef3 	bl	8007612 <USB_ReadChInterrupts>
 800382c:	4603      	mov	r3, r0
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d168      	bne.n	8003908 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fedd 	bl	8007612 <USB_ReadChInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d112      	bne.n	8003888 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3319      	adds	r3, #25
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003882:	461a      	mov	r2, r3
 8003884:	2340      	movs	r3, #64	@ 0x40
 8003886:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	331b      	adds	r3, #27
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d019      	beq.n	80038d2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	331b      	adds	r3, #27
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038de:	461a      	mov	r2, r3
 80038e0:	2301      	movs	r3, #1
 80038e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	334d      	adds	r3, #77	@ 0x4d
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f004 fc2a 	bl	800815a <USB_HC_Halt>
 8003906:	e365      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	4611      	mov	r1, r2
 8003910:	4618      	mov	r0, r3
 8003912:	f003 fe7e 	bl	8007612 <USB_ReadChInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b40      	cmp	r3, #64	@ 0x40
 800391e:	d139      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	334d      	adds	r3, #77	@ 0x4d
 8003930:	2205      	movs	r2, #5
 8003932:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	331a      	adds	r3, #26
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	3319      	adds	r3, #25
 800395a:	2201      	movs	r2, #1
 800395c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	@ 0x44
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fbed 	bl	800815a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4413      	add	r3, r2
 8003988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800398c:	461a      	mov	r2, r3
 800398e:	2340      	movs	r3, #64	@ 0x40
 8003990:	6093      	str	r3, [r2, #8]
 8003992:	e31f      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fe38 	bl	8007612 <USB_ReadChInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d11a      	bne.n	80039e2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b8:	461a      	mov	r2, r3
 80039ba:	2308      	movs	r3, #8
 80039bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	334d      	adds	r3, #77	@ 0x4d
 80039ce:	2206      	movs	r2, #6
 80039d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f004 fbbd 	bl	800815a <USB_HC_Halt>
 80039e0:	e2f8      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fe11 	bl	8007612 <USB_ReadChInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d144      	bne.n	8003a84 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	1a9b      	subs	r3, r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3344      	adds	r3, #68	@ 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	334d      	adds	r3, #77	@ 0x4d
 8003a1e:	2204      	movs	r2, #4
 8003a20:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3319      	adds	r3, #25
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d114      	bne.n	8003a62 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3318      	adds	r3, #24
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3319      	adds	r3, #25
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 fb75 	bl	800815a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2310      	movs	r3, #16
 8003a80:	6093      	str	r3, [r2, #8]
 8003a82:	e2a7      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fdc0 	bl	8007612 <USB_ReadChInterrupts>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a98:	2b80      	cmp	r3, #128	@ 0x80
 8003a9a:	f040 8083 	bne.w	8003ba4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	799b      	ldrb	r3, [r3, #6]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d111      	bne.n	8003aca <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334d      	adds	r3, #77	@ 0x4d
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fb49 	bl	800815a <USB_HC_Halt>
 8003ac8:	e062      	b.n	8003b90 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	3344      	adds	r3, #68	@ 0x44
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4403      	add	r3, r0
 8003aea:	3344      	adds	r3, #68	@ 0x44
 8003aec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3344      	adds	r3, #68	@ 0x44
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d922      	bls.n	8003b4a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3344      	adds	r3, #68	@ 0x44
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	334c      	adds	r3, #76	@ 0x4c
 8003b28:	2204      	movs	r2, #4
 8003b2a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	@ 0x4c
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f006 fe62 	bl	800a80c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b48:	e022      	b.n	8003b90 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	334c      	adds	r3, #76	@ 0x4c
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	6093      	str	r3, [r2, #8]
 8003ba2:	e217      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f003 fd30 	bl	8007612 <USB_ReadChInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d11b      	bne.n	8003bf6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	334d      	adds	r3, #77	@ 0x4d
 8003bce:	2209      	movs	r2, #9
 8003bd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 fabd 	bl	800815a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e1ee      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 fd07 	bl	8007612 <USB_ReadChInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	f040 81df 	bne.w	8003fce <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2302      	movs	r3, #2
 8003c20:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	334d      	adds	r3, #77	@ 0x4d
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	f040 8093 	bne.w	8003d60 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	334d      	adds	r3, #77	@ 0x4d
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	334c      	adds	r3, #76	@ 0x4c
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3326      	adds	r3, #38	@ 0x26
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d00b      	beq.n	8003c90 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	3326      	adds	r3, #38	@ 0x26
 8003c88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	f040 8190 	bne.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	799b      	ldrb	r3, [r3, #6]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d115      	bne.n	8003cc4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	333d      	adds	r3, #61	@ 0x3d
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	f083 0301 	eor.w	r3, r3, #1
 8003cb0:	b2d8      	uxtb	r0, r3
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	333d      	adds	r3, #61	@ 0x3d
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	799b      	ldrb	r3, [r3, #6]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	f040 8171 	bne.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3334      	adds	r3, #52	@ 0x34
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8165 	beq.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3334      	adds	r3, #52	@ 0x34
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4403      	add	r3, r0
 8003d06:	3328      	adds	r3, #40	@ 0x28
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	440b      	add	r3, r1
 8003d0c:	1e59      	subs	r1, r3, #1
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4403      	add	r3, r0
 8003d1c:	3328      	adds	r3, #40	@ 0x28
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d24:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 813f 	beq.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	333d      	adds	r3, #61	@ 0x3d
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	78fa      	ldrb	r2, [r7, #3]
 8003d46:	f083 0301 	eor.w	r3, r3, #1
 8003d4a:	b2d8      	uxtb	r0, r3
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	333d      	adds	r3, #61	@ 0x3d
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e127      	b.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	334d      	adds	r3, #77	@ 0x4d
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d120      	bne.n	8003db8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334d      	adds	r3, #77	@ 0x4d
 8003d86:	2202      	movs	r2, #2
 8003d88:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	331b      	adds	r3, #27
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 8107 	bne.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	@ 0x4c
 8003db2:	2202      	movs	r2, #2
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e0fb      	b.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334d      	adds	r3, #77	@ 0x4d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d13a      	bne.n	8003e44 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334d      	adds	r3, #77	@ 0x4d
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334c      	adds	r3, #76	@ 0x4c
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	331b      	adds	r3, #27
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 80d1 	bne.w	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	331b      	adds	r3, #27
 8003e1e:	2200      	movs	r2, #0
 8003e20:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e40:	6053      	str	r3, [r2, #4]
 8003e42:	e0b5      	b.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	@ 0x4d
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b05      	cmp	r3, #5
 8003e58:	d114      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	334d      	adds	r3, #77	@ 0x4d
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	334c      	adds	r3, #76	@ 0x4c
 8003e7e:	2202      	movs	r2, #2
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e095      	b.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	334d      	adds	r3, #77	@ 0x4d
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d114      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334d      	adds	r3, #77	@ 0x4d
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334c      	adds	r3, #76	@ 0x4c
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e075      	b.n	8003fb0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	334d      	adds	r3, #77	@ 0x4d
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b07      	cmp	r3, #7
 8003ed8:	d00a      	beq.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	334d      	adds	r3, #77	@ 0x4d
 8003eea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	d170      	bne.n	8003fd2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	334d      	adds	r3, #77	@ 0x4d
 8003f00:	2202      	movs	r2, #2
 8003f02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	3344      	adds	r3, #68	@ 0x44
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	1c59      	adds	r1, r3, #1
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4403      	add	r3, r0
 8003f24:	3344      	adds	r3, #68	@ 0x44
 8003f26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3344      	adds	r3, #68	@ 0x44
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d914      	bls.n	8003f68 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3344      	adds	r3, #68	@ 0x44
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334c      	adds	r3, #76	@ 0x4c
 8003f62:	2204      	movs	r2, #4
 8003f64:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f66:	e022      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334c      	adds	r3, #76	@ 0x4c
 8003f78:	2202      	movs	r2, #2
 8003f7a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f92:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f9a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334c      	adds	r3, #76	@ 0x4c
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f006 fc20 	bl	800a80c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003fcc:	e002      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003fd2:	bf00      	nop
  }
}
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08a      	sub	sp, #40	@ 0x28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	0c5b      	lsrs	r3, r3, #17
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d004      	beq.n	8004020 <HCD_RXQLVL_IRQHandler+0x46>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b05      	cmp	r3, #5
 800401a:	f000 80b6 	beq.w	800418a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800401e:	e0b7      	b.n	8004190 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 80b3 	beq.w	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	332c      	adds	r3, #44	@ 0x2c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 80a7 	beq.w	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	3338      	adds	r3, #56	@ 0x38
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	18d1      	adds	r1, r2, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4403      	add	r3, r0
 8004064:	3334      	adds	r3, #52	@ 0x34
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4299      	cmp	r1, r3
 800406a:	f200 8083 	bhi.w	8004174 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	332c      	adds	r3, #44	@ 0x2c
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	b292      	uxth	r2, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f003 fa57 	bl	800753c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	332c      	adds	r3, #44	@ 0x2c
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	18d1      	adds	r1, r2, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4403      	add	r3, r0
 80040b2:	332c      	adds	r3, #44	@ 0x2c
 80040b4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3338      	adds	r3, #56	@ 0x38
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	18d1      	adds	r1, r2, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4403      	add	r3, r0
 80040da:	3338      	adds	r3, #56	@ 0x38
 80040dc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	0cdb      	lsrs	r3, r3, #19
 80040ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	3328      	adds	r3, #40	@ 0x28
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4293      	cmp	r3, r2
 800410c:	d13f      	bne.n	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03c      	beq.n	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800412a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004132:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	333c      	adds	r3, #60	@ 0x3c
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2d8      	uxtb	r0, r3
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4613      	mov	r3, r2
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	333c      	adds	r3, #60	@ 0x3c
 800416e:	4602      	mov	r2, r0
 8004170:	701a      	strb	r2, [r3, #0]
      break;
 8004172:	e00c      	b.n	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4613      	mov	r3, r2
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	334c      	adds	r3, #76	@ 0x4c
 8004184:	2204      	movs	r2, #4
 8004186:	701a      	strb	r2, [r3, #0]
      break;
 8004188:	e001      	b.n	800418e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800418e:	bf00      	nop
  }
}
 8004190:	bf00      	nop
 8004192:	3728      	adds	r7, #40	@ 0x28
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10b      	bne.n	80041e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f006 fafa 	bl	800a7d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f043 0302 	orr.w	r3, r3, #2
 80041e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d132      	bne.n	8004258 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f043 0308 	orr.w	r3, r3, #8
 80041f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b04      	cmp	r3, #4
 8004202:	d126      	bne.n	8004252 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7a5b      	ldrb	r3, [r3, #9]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d113      	bne.n	8004234 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004212:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004216:	d106      	bne.n	8004226 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fb1c 	bl	800785c <USB_InitFSLSPClkSel>
 8004224:	e011      	b.n	800424a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f003 fb15 	bl	800785c <USB_InitFSLSPClkSel>
 8004232:	e00a      	b.n	800424a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	79db      	ldrb	r3, [r3, #7]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d106      	bne.n	800424a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004242:	461a      	mov	r2, r3
 8004244:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004248:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f006 faec 	bl	800a828 <HAL_HCD_PortEnabled_Callback>
 8004250:	e002      	b.n	8004258 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f006 faf6 	bl	800a844 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b20      	cmp	r3, #32
 8004260:	d103      	bne.n	800426a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f043 0320 	orr.w	r3, r3, #32
 8004268:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004270:	461a      	mov	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6013      	str	r3, [r2, #0]
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e12b      	b.n	80044ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fa84 	bl	80007b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2224      	movs	r2, #36	@ 0x24
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042e4:	f002 fb04 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 80042e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4a81      	ldr	r2, [pc, #516]	@ (80044f4 <HAL_I2C_Init+0x274>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d807      	bhi.n	8004304 <HAL_I2C_Init+0x84>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a80      	ldr	r2, [pc, #512]	@ (80044f8 <HAL_I2C_Init+0x278>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf94      	ite	ls
 80042fc:	2301      	movls	r3, #1
 80042fe:	2300      	movhi	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e006      	b.n	8004312 <HAL_I2C_Init+0x92>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4a7d      	ldr	r2, [pc, #500]	@ (80044fc <HAL_I2C_Init+0x27c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	bf94      	ite	ls
 800430c:	2301      	movls	r3, #1
 800430e:	2300      	movhi	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e0e7      	b.n	80044ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4a78      	ldr	r2, [pc, #480]	@ (8004500 <HAL_I2C_Init+0x280>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0c9b      	lsrs	r3, r3, #18
 8004324:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	4a6a      	ldr	r2, [pc, #424]	@ (80044f4 <HAL_I2C_Init+0x274>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d802      	bhi.n	8004354 <HAL_I2C_Init+0xd4>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3301      	adds	r3, #1
 8004352:	e009      	b.n	8004368 <HAL_I2C_Init+0xe8>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a69      	ldr	r2, [pc, #420]	@ (8004504 <HAL_I2C_Init+0x284>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	3301      	adds	r3, #1
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	430b      	orrs	r3, r1
 800436e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800437a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	495c      	ldr	r1, [pc, #368]	@ (80044f4 <HAL_I2C_Init+0x274>)
 8004384:	428b      	cmp	r3, r1
 8004386:	d819      	bhi.n	80043bc <HAL_I2C_Init+0x13c>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	1e59      	subs	r1, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	fbb1 f3f3 	udiv	r3, r1, r3
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800439c:	400b      	ands	r3, r1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_I2C_Init+0x138>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1e59      	subs	r1, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b6:	e051      	b.n	800445c <HAL_I2C_Init+0x1dc>
 80043b8:	2304      	movs	r3, #4
 80043ba:	e04f      	b.n	800445c <HAL_I2C_Init+0x1dc>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d111      	bne.n	80043e8 <HAL_I2C_Init+0x168>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e58      	subs	r0, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6859      	ldr	r1, [r3, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	440b      	add	r3, r1
 80043d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d6:	3301      	adds	r3, #1
 80043d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043dc:	2b00      	cmp	r3, #0
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e012      	b.n	800440e <HAL_I2C_Init+0x18e>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	0099      	lsls	r1, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Init+0x196>
 8004412:	2301      	movs	r3, #1
 8004414:	e022      	b.n	800445c <HAL_I2C_Init+0x1dc>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10e      	bne.n	800443c <HAL_I2C_Init+0x1bc>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	1e58      	subs	r0, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	440b      	add	r3, r1
 800442c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004430:	3301      	adds	r3, #1
 8004432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800443a:	e00f      	b.n	800445c <HAL_I2C_Init+0x1dc>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1e58      	subs	r0, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6859      	ldr	r1, [r3, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	0099      	lsls	r1, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004452:	3301      	adds	r3, #1
 8004454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004458:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	6809      	ldr	r1, [r1, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800448a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6911      	ldr	r1, [r2, #16]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	4311      	orrs	r1, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	430b      	orrs	r3, r1
 800449e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	000186a0 	.word	0x000186a0
 80044f8:	001e847f 	.word	0x001e847f
 80044fc:	003d08ff 	.word	0x003d08ff
 8004500:	431bde83 	.word	0x431bde83
 8004504:	10624dd3 	.word	0x10624dd3

08004508 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	4608      	mov	r0, r1
 8004512:	4611      	mov	r1, r2
 8004514:	461a      	mov	r2, r3
 8004516:	4603      	mov	r3, r0
 8004518:	817b      	strh	r3, [r7, #10]
 800451a:	460b      	mov	r3, r1
 800451c:	813b      	strh	r3, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004522:	f7fc ff11 	bl	8001348 <HAL_GetTick>
 8004526:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	f040 80d9 	bne.w	80046e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2319      	movs	r3, #25
 800453c:	2201      	movs	r2, #1
 800453e:	496d      	ldr	r1, [pc, #436]	@ (80046f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f000 fc8b 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800454c:	2302      	movs	r3, #2
 800454e:	e0cc      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_I2C_Mem_Write+0x56>
 800455a:	2302      	movs	r3, #2
 800455c:	e0c5      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d007      	beq.n	8004584 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2221      	movs	r2, #33	@ 0x21
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2240      	movs	r2, #64	@ 0x40
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4a4d      	ldr	r2, [pc, #308]	@ (80046f8 <HAL_I2C_Mem_Write+0x1f0>)
 80045c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045c6:	88f8      	ldrh	r0, [r7, #6]
 80045c8:	893a      	ldrh	r2, [r7, #8]
 80045ca:	8979      	ldrh	r1, [r7, #10]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	4603      	mov	r3, r0
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fac2 	bl	8004b60 <I2C_RequestMemoryWrite>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d052      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e081      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fd50 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00d      	beq.n	8004612 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d107      	bne.n	800460e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800460c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e06b      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	781a      	ldrb	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d11b      	bne.n	8004688 <HAL_I2C_Mem_Write+0x180>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d017      	beq.n	8004688 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1aa      	bne.n	80045e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fd43 	bl	8005120 <I2C_WaitOnBTFFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d107      	bne.n	80046b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e016      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	00100002 	.word	0x00100002
 80046f8:	ffff0000 	.word	0xffff0000

080046fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	@ 0x30
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	4608      	mov	r0, r1
 8004706:	4611      	mov	r1, r2
 8004708:	461a      	mov	r2, r3
 800470a:	4603      	mov	r3, r0
 800470c:	817b      	strh	r3, [r7, #10]
 800470e:	460b      	mov	r3, r1
 8004710:	813b      	strh	r3, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004716:	f7fc fe17 	bl	8001348 <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b20      	cmp	r3, #32
 8004726:	f040 8214 	bne.w	8004b52 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	2319      	movs	r3, #25
 8004730:	2201      	movs	r2, #1
 8004732:	497b      	ldr	r1, [pc, #492]	@ (8004920 <HAL_I2C_Mem_Read+0x224>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb91 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
 8004742:	e207      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_I2C_Mem_Read+0x56>
 800474e:	2302      	movs	r3, #2
 8004750:	e200      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b01      	cmp	r3, #1
 8004766:	d007      	beq.n	8004778 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2222      	movs	r2, #34	@ 0x22
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004924 <HAL_I2C_Mem_Read+0x228>)
 80047b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ba:	88f8      	ldrh	r0, [r7, #6]
 80047bc:	893a      	ldrh	r2, [r7, #8]
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4603      	mov	r3, r0
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fa5e 	bl	8004c8c <I2C_RequestMemoryRead>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e1bc      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d113      	bne.n	800480a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e2:	2300      	movs	r3, #0
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e190      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800480e:	2b01      	cmp	r3, #1
 8004810:	d11b      	bne.n	800484a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e170      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484e:	2b02      	cmp	r3, #2
 8004850:	d11b      	bne.n	800488a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004860:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	e150      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048a0:	e144      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	f200 80f1 	bhi.w	8004a8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d123      	bne.n	80048fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 fc79 	bl	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e145      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048fa:	e117      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	2b02      	cmp	r3, #2
 8004902:	d14e      	bne.n	80049a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490a:	2200      	movs	r2, #0
 800490c:	4906      	ldr	r1, [pc, #24]	@ (8004928 <HAL_I2C_Mem_Read+0x22c>)
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 faa4 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e11a      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
 800491e:	bf00      	nop
 8004920:	00100002 	.word	0x00100002
 8004924:	ffff0000 	.word	0xffff0000
 8004928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004964:	b29b      	uxth	r3, r3
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049a0:	e0c4      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	2200      	movs	r2, #0
 80049aa:	496c      	ldr	r1, [pc, #432]	@ (8004b5c <HAL_I2C_Mem_Read+0x460>)
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 fa55 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0cb      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	2200      	movs	r2, #0
 8004a06:	4955      	ldr	r1, [pc, #340]	@ (8004b5c <HAL_I2C_Mem_Read+0x460>)
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fa27 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e09d      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a8c:	e04e      	b.n	8004b2c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb8c 	bl	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e058      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d124      	bne.n	8004b2c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f47f aeb6 	bne.w	80048a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	@ 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	00010004 	.word	0x00010004

08004b60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	460b      	mov	r3, r1
 8004b74:	813b      	strh	r3, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f960 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb0:	d103      	bne.n	8004bba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e05f      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	492d      	ldr	r1, [pc, #180]	@ (8004c88 <I2C_RequestMemoryWrite+0x128>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f9bb 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04c      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa46 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d107      	bne.n	8004c22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02b      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
 8004c36:	e021      	b.n	8004c7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c38:	893b      	ldrh	r3, [r7, #8]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fa20 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e005      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c72:	893b      	ldrh	r3, [r7, #8]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	00010002 	.word	0x00010002

08004c8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8c2 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cec:	d103      	bne.n	8004cf6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0aa      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	4952      	ldr	r1, [pc, #328]	@ (8004e58 <I2C_RequestMemoryRead+0x1cc>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f91d 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e097      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f9a8 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d107      	bne.n	8004d5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e076      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]
 8004d72:	e021      	b.n	8004db8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f982 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e050      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dae:	893b      	ldrh	r3, [r7, #8]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dba:	6a39      	ldr	r1, [r7, #32]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f967 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d107      	bne.n	8004de0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e035      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004df2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f82b 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e1a:	d103      	bne.n	8004e24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e013      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e28:	897b      	ldrh	r3, [r7, #10]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	4906      	ldr	r1, [pc, #24]	@ (8004e58 <I2C_RequestMemoryRead+0x1cc>)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f886 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e6c:	e048      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e74:	d044      	beq.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fc fa67 	bl	8001348 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d139      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10d      	bne.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	43da      	mvns	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	e00c      	b.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d116      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e023      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	e00c      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d093      	beq.n	8004e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5e:	e071      	b.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d123      	bne.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e067      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbe:	d041      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fc f9c2 	bl	8001348 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d136      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10c      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e00b      	b.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e021      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10c      	bne.n	8005068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	43da      	mvns	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e00b      	b.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f af6d 	bne.w	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800509c:	e034      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f8e3 	bl	800526a <I2C_IsAcknowledgeFailed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e034      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050b4:	d028      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fc f947 	bl	8001348 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d016      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d1c3      	bne.n	800509e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800512c:	e034      	b.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f89b 	bl	800526a <I2C_IsAcknowledgeFailed>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e034      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005144:	d028      	beq.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fc f8ff 	bl	8001348 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11d      	bne.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b04      	cmp	r3, #4
 8005168:	d016      	beq.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d1c3      	bne.n	800512e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051bc:	e049      	b.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d119      	bne.n	8005200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0210 	mvn.w	r2, #16
 80051d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e030      	b.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fc f8a2 	bl	8001348 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11d      	bne.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005220:	2b40      	cmp	r3, #64	@ 0x40
 8005222:	d016      	beq.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e007      	b.n	8005262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d1ae      	bne.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800527c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005280:	d11b      	bne.n	80052ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800528a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	f043 0204 	orr.w	r2, r3, #4
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e128      	b.n	800552c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a90      	ldr	r2, [pc, #576]	@ (8005534 <HAL_I2S_Init+0x26c>)
 80052f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fb faf5 	bl	80008e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005310:	f023 030f 	bic.w	r3, r3, #15
 8005314:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2202      	movs	r2, #2
 800531c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d060      	beq.n	80053e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d102      	bne.n	8005334 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800532e:	2310      	movs	r3, #16
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	e001      	b.n	8005338 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005334:	2320      	movs	r3, #32
 8005336:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b20      	cmp	r3, #32
 800533e:	d802      	bhi.n	8005346 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005346:	2001      	movs	r0, #1
 8005348:	f001 fbdc 	bl	8006b04 <HAL_RCCEx_GetPeriphCLKFreq>
 800534c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005356:	d125      	bne.n	80053a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d010      	beq.n	8005382 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	fbb2 f2f3 	udiv	r2, r2, r3
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	3305      	adds	r3, #5
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e01f      	b.n	80053c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	fbb2 f2f3 	udiv	r2, r2, r3
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	3305      	adds	r3, #5
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e00e      	b.n	80053c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	461a      	mov	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	3305      	adds	r3, #5
 80053c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4a5c      	ldr	r2, [pc, #368]	@ (8005538 <HAL_I2S_Init+0x270>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	085b      	lsrs	r3, r3, #1
 80053de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	e003      	b.n	80053f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80053e8:	2302      	movs	r3, #2
 80053ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d902      	bls.n	80053fc <HAL_I2S_Init+0x134>
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2bff      	cmp	r3, #255	@ 0xff
 80053fa:	d907      	bls.n	800540c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005400:	f043 0210 	orr.w	r2, r3, #16
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e08f      	b.n	800552c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	ea42 0103 	orr.w	r1, r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	430a      	orrs	r2, r1
 800541e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800542a:	f023 030f 	bic.w	r3, r3, #15
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6851      	ldr	r1, [r2, #4]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6892      	ldr	r2, [r2, #8]
 8005436:	4311      	orrs	r1, r2
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	68d2      	ldr	r2, [r2, #12]
 800543c:	4311      	orrs	r1, r2
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	6992      	ldr	r2, [r2, #24]
 8005442:	430a      	orrs	r2, r1
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800544e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d161      	bne.n	800551c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a38      	ldr	r2, [pc, #224]	@ (800553c <HAL_I2S_Init+0x274>)
 800545c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a37      	ldr	r2, [pc, #220]	@ (8005540 <HAL_I2S_Init+0x278>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_I2S_Init+0x1a4>
 8005468:	4b36      	ldr	r3, [pc, #216]	@ (8005544 <HAL_I2S_Init+0x27c>)
 800546a:	e001      	b.n	8005470 <HAL_I2S_Init+0x1a8>
 800546c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	4932      	ldr	r1, [pc, #200]	@ (8005540 <HAL_I2S_Init+0x278>)
 8005478:	428a      	cmp	r2, r1
 800547a:	d101      	bne.n	8005480 <HAL_I2S_Init+0x1b8>
 800547c:	4a31      	ldr	r2, [pc, #196]	@ (8005544 <HAL_I2S_Init+0x27c>)
 800547e:	e001      	b.n	8005484 <HAL_I2S_Init+0x1bc>
 8005480:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005484:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005488:	f023 030f 	bic.w	r3, r3, #15
 800548c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2b      	ldr	r2, [pc, #172]	@ (8005540 <HAL_I2S_Init+0x278>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <HAL_I2S_Init+0x1d4>
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <HAL_I2S_Init+0x27c>)
 800549a:	e001      	b.n	80054a0 <HAL_I2S_Init+0x1d8>
 800549c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054a0:	2202      	movs	r2, #2
 80054a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a25      	ldr	r2, [pc, #148]	@ (8005540 <HAL_I2S_Init+0x278>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d101      	bne.n	80054b2 <HAL_I2S_Init+0x1ea>
 80054ae:	4b25      	ldr	r3, [pc, #148]	@ (8005544 <HAL_I2S_Init+0x27c>)
 80054b0:	e001      	b.n	80054b6 <HAL_I2S_Init+0x1ee>
 80054b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c2:	d003      	beq.n	80054cc <HAL_I2S_Init+0x204>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80054cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e001      	b.n	80054d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054e2:	4313      	orrs	r3, r2
 80054e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80054f6:	4313      	orrs	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005504:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a0d      	ldr	r2, [pc, #52]	@ (8005540 <HAL_I2S_Init+0x278>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d101      	bne.n	8005514 <HAL_I2S_Init+0x24c>
 8005510:	4b0c      	ldr	r3, [pc, #48]	@ (8005544 <HAL_I2S_Init+0x27c>)
 8005512:	e001      	b.n	8005518 <HAL_I2S_Init+0x250>
 8005514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005518:	897a      	ldrh	r2, [r7, #10]
 800551a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3720      	adds	r7, #32
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0800562f 	.word	0x0800562f
 8005538:	cccccccd 	.word	0xcccccccd
 800553c:	08005a01 	.word	0x08005a01
 8005540:	40003800 	.word	0x40003800
 8005544:	40003400 	.word	0x40003400

08005548 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10e      	bne.n	80055c8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ffcc 	bl	8005560 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e2:	b292      	uxth	r2, r2
 80055e4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10e      	bne.n	8005626 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005616:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb fdf9 	bl	8001218 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b04      	cmp	r3, #4
 8005648:	d13a      	bne.n	80056c0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d109      	bne.n	8005668 <I2S_IRQHandler+0x3a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d102      	bne.n	8005668 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7ff ffb4 	bl	80055d0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d126      	bne.n	80056c0 <I2S_IRQHandler+0x92>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d11f      	bne.n	80056c0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800568e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fb fdc4 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d136      	bne.n	800573a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d109      	bne.n	80056ea <I2S_IRQHandler+0xbc>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e0:	2b80      	cmp	r3, #128	@ 0x80
 80056e2:	d102      	bne.n	80056ea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f7ff ff45 	bl	8005574 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 0308 	and.w	r3, r3, #8
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d122      	bne.n	800573a <I2S_IRQHandler+0x10c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	d11b      	bne.n	800573a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005710:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fb fd87 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800573a:	bf00      	nop
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8005766:	2302      	movs	r3, #2
 8005768:	e13c      	b.n	80059e4 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e131      	b.n	80059e4 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 800578c:	2302      	movs	r3, #2
 800578e:	e129      	b.n	80059e4 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d002      	beq.n	80057bc <HAL_I2SEx_TransmitReceive_DMA+0x78>
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b05      	cmp	r3, #5
 80057ba:	d114      	bne.n	80057e6 <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80057d0:	887b      	ldrh	r3, [r7, #2]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	865a      	strh	r2, [r3, #50]	@ 0x32
 80057e4:	e00b      	b.n	80057fe <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	887a      	ldrh	r2, [r7, #2]
 80057ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2205      	movs	r2, #5
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005810:	4a76      	ldr	r2, [pc, #472]	@ (80059ec <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 8005812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005818:	4a75      	ldr	r2, [pc, #468]	@ (80059f0 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 800581a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	4a74      	ldr	r2, [pc, #464]	@ (80059f4 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 8005822:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	2200      	movs	r2, #0
 800582a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	2200      	movs	r2, #0
 8005832:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	4a6e      	ldr	r2, [pc, #440]	@ (80059f4 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 800583a:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005846:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584e:	d002      	beq.n	8005856 <HAL_I2SEx_TransmitReceive_DMA+0x112>
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d144      	bne.n	80058e0 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8005856:	1d3b      	adds	r3, r7, #4
 8005858:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a65      	ldr	r2, [pc, #404]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d101      	bne.n	800586c <HAL_I2SEx_TransmitReceive_DMA+0x128>
 8005868:	4b64      	ldr	r3, [pc, #400]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800586a:	e001      	b.n	8005870 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 800586c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005870:	330c      	adds	r3, #12
 8005872:	4619      	mov	r1, r3
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800587c:	b29b      	uxth	r3, r3
 800587e:	f7fb ff53 	bl	8001728 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a5c      	ldr	r2, [pc, #368]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 800588c:	4b5b      	ldr	r3, [pc, #364]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800588e:	e001      	b.n	8005894 <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8005890:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4957      	ldr	r1, [pc, #348]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800589c:	428b      	cmp	r3, r1
 800589e:	d101      	bne.n	80058a4 <HAL_I2SEx_TransmitReceive_DMA+0x160>
 80058a0:	4b56      	ldr	r3, [pc, #344]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80058a2:	e001      	b.n	80058a8 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 80058a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058a8:	f042 0201 	orr.w	r2, r2, #1
 80058ac:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	6819      	ldr	r1, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	461a      	mov	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f7fb ff2d 	bl	8001728 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f042 0202 	orr.w	r2, r2, #2
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e056      	b.n	800598e <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ee:	d10a      	bne.n	8005906 <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8005906:	f107 0308 	add.w	r3, r7, #8
 800590a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a37      	ldr	r2, [pc, #220]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 800591e:	4b37      	ldr	r3, [pc, #220]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8005920:	e001      	b.n	8005926 <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 8005922:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005926:	330c      	adds	r3, #12
 8005928:	461a      	mov	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	b29b      	uxth	r3, r3
 8005930:	f7fb fefa 	bl	8001728 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a2f      	ldr	r2, [pc, #188]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8005940:	e001      	b.n	8005946 <HAL_I2SEx_TransmitReceive_DMA+0x202>
 8005942:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	492a      	ldr	r1, [pc, #168]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800594e:	428b      	cmp	r3, r1
 8005950:	d101      	bne.n	8005956 <HAL_I2SEx_TransmitReceive_DMA+0x212>
 8005952:	4b2a      	ldr	r3, [pc, #168]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8005954:	e001      	b.n	800595a <HAL_I2SEx_TransmitReceive_DMA+0x216>
 8005956:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800595a:	f042 0202 	orr.w	r2, r2, #2
 800595e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	4619      	mov	r1, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005978:	b29b      	uxth	r3, r3
 800597a:	f7fb fed5 	bl	8001728 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a4:	d01d      	beq.n	80059e2 <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <HAL_I2SEx_TransmitReceive_DMA+0x270>
 80059b0:	4b12      	ldr	r3, [pc, #72]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80059b2:	e001      	b.n	80059b8 <HAL_I2SEx_TransmitReceive_DMA+0x274>
 80059b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059b8:	69da      	ldr	r2, [r3, #28]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	490e      	ldr	r1, [pc, #56]	@ (80059f8 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80059c0:	428b      	cmp	r3, r1
 80059c2:	d101      	bne.n	80059c8 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 80059c4:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80059c6:	e001      	b.n	80059cc <HAL_I2SEx_TransmitReceive_DMA+0x288>
 80059c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059d0:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059e0:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	08005ca9 	.word	0x08005ca9
 80059f0:	08005cc5 	.word	0x08005cc5
 80059f4:	08005d9d 	.word	0x08005d9d
 80059f8:	40003800 	.word	0x40003800
 80059fc:	40003400 	.word	0x40003400

08005a00 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a92      	ldr	r2, [pc, #584]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d101      	bne.n	8005a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a1a:	4b92      	ldr	r3, [pc, #584]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a1c:	e001      	b.n	8005a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a8b      	ldr	r2, [pc, #556]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a38:	4b8a      	ldr	r3, [pc, #552]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a3a:	e001      	b.n	8005a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4c:	d004      	beq.n	8005a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 8099 	bne.w	8005b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d107      	bne.n	8005a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9d5 	bl	8005e1c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d107      	bne.n	8005a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa78 	bl	8005f7c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b40      	cmp	r3, #64	@ 0x40
 8005a94:	d13a      	bne.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f003 0320 	and.w	r3, r3, #32
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d035      	beq.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aac:	e001      	b.n	8005ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4969      	ldr	r1, [pc, #420]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aba:	428b      	cmp	r3, r1
 8005abc:	d101      	bne.n	8005ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005abe:	4b69      	ldr	r3, [pc, #420]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ac0:	e001      	b.n	8005ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ac6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005aca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ada:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0202 	orr.w	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb fb9e 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	f040 80c3 	bne.w	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 80bd 	beq.w	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b32:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a49      	ldr	r2, [pc, #292]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b3e:	4b49      	ldr	r3, [pc, #292]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b40:	e001      	b.n	8005b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4944      	ldr	r1, [pc, #272]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b4e:	428b      	cmp	r3, r1
 8005b50:	d101      	bne.n	8005b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b52:	4b44      	ldr	r3, [pc, #272]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b54:	e001      	b.n	8005b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b5e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b60:	2300      	movs	r3, #0
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fb60 	bl	8001248 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b88:	e089      	b.n	8005c9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d107      	bne.n	8005ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f96e 	bl	8005e80 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f9ad 	bl	8005f18 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b40      	cmp	r3, #64	@ 0x40
 8005bc6:	d12f      	bne.n	8005c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d02a      	beq.n	8005c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005be0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1e      	ldr	r2, [pc, #120]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005bec:	4b1d      	ldr	r3, [pc, #116]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bee:	e001      	b.n	8005bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005bf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4919      	ldr	r1, [pc, #100]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	d101      	bne.n	8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005c00:	4b18      	ldr	r3, [pc, #96]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c02:	e001      	b.n	8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005c04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	f043 0202 	orr.w	r2, r3, #2
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb fb10 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d136      	bne.n	8005ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d031      	beq.n	8005ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a07      	ldr	r2, [pc, #28]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d101      	bne.n	8005c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c46:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c48:	e001      	b.n	8005c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4902      	ldr	r1, [pc, #8]	@ (8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c56:	428b      	cmp	r3, r1
 8005c58:	d106      	bne.n	8005c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c5a:	4b02      	ldr	r3, [pc, #8]	@ (8005c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c5c:	e006      	b.n	8005c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c5e:	bf00      	nop
 8005c60:	40003800 	.word	0x40003800
 8005c64:	40003400 	.word	0x40003400
 8005c68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c70:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fb fad6 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c9c:	e000      	b.n	8005ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c9e:	bf00      	nop
}
 8005ca0:	bf00      	nop
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7fa ff18 	bl	8000aec <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d155      	bne.n	8005d86 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ce8:	d006      	beq.n	8005cf8 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11e      	bne.n	8005d36 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a25      	ldr	r2, [pc, #148]	@ (8005d94 <I2SEx_TxRxDMACplt+0xd0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <I2SEx_TxRxDMACplt+0x42>
 8005d02:	4b25      	ldr	r3, [pc, #148]	@ (8005d98 <I2SEx_TxRxDMACplt+0xd4>)
 8005d04:	e001      	b.n	8005d0a <I2SEx_TxRxDMACplt+0x46>
 8005d06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4920      	ldr	r1, [pc, #128]	@ (8005d94 <I2SEx_TxRxDMACplt+0xd0>)
 8005d12:	428b      	cmp	r3, r1
 8005d14:	d101      	bne.n	8005d1a <I2SEx_TxRxDMACplt+0x56>
 8005d16:	4b20      	ldr	r3, [pc, #128]	@ (8005d98 <I2SEx_TxRxDMACplt+0xd4>)
 8005d18:	e001      	b.n	8005d1e <I2SEx_TxRxDMACplt+0x5a>
 8005d1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0202 	bic.w	r2, r2, #2
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	e01d      	b.n	8005d72 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a12      	ldr	r2, [pc, #72]	@ (8005d94 <I2SEx_TxRxDMACplt+0xd0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d101      	bne.n	8005d54 <I2SEx_TxRxDMACplt+0x90>
 8005d50:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <I2SEx_TxRxDMACplt+0xd4>)
 8005d52:	e001      	b.n	8005d58 <I2SEx_TxRxDMACplt+0x94>
 8005d54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	490d      	ldr	r1, [pc, #52]	@ (8005d94 <I2SEx_TxRxDMACplt+0xd0>)
 8005d60:	428b      	cmp	r3, r1
 8005d62:	d101      	bne.n	8005d68 <I2SEx_TxRxDMACplt+0xa4>
 8005d64:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <I2SEx_TxRxDMACplt+0xd4>)
 8005d66:	e001      	b.n	8005d6c <I2SEx_TxRxDMACplt+0xa8>
 8005d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d6c:	f022 0202 	bic.w	r2, r2, #2
 8005d70:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fa fec0 	bl	8000b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40003800 	.word	0x40003800
 8005d98:	40003400 	.word	0x40003400

08005d9c <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0203 	bic.w	r2, r2, #3
 8005db8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	@ (8005e14 <I2SEx_TxRxDMAError+0x78>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <I2SEx_TxRxDMAError+0x2c>
 8005dc4:	4b14      	ldr	r3, [pc, #80]	@ (8005e18 <I2SEx_TxRxDMAError+0x7c>)
 8005dc6:	e001      	b.n	8005dcc <I2SEx_TxRxDMAError+0x30>
 8005dc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4910      	ldr	r1, [pc, #64]	@ (8005e14 <I2SEx_TxRxDMAError+0x78>)
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	d101      	bne.n	8005ddc <I2SEx_TxRxDMAError+0x40>
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <I2SEx_TxRxDMAError+0x7c>)
 8005dda:	e001      	b.n	8005de0 <I2SEx_TxRxDMAError+0x44>
 8005ddc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005de0:	f022 0203 	bic.w	r2, r2, #3
 8005de4:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfe:	f043 0208 	orr.w	r2, r3, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7fb fa1e 	bl	8001248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40003800 	.word	0x40003800
 8005e18:	40003400 	.word	0x40003400

08005e1c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e28:	1c99      	adds	r1, r3, #2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e2e:	881a      	ldrh	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d113      	bne.n	8005e76 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e5c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fa fe4b 	bl	8000b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
	...

08005e80 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	1c99      	adds	r1, r3, #2
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e92:	8819      	ldrh	r1, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	@ (8005f10 <I2SEx_TxISR_I2SExt+0x90>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d101      	bne.n	8005ea2 <I2SEx_TxISR_I2SExt+0x22>
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <I2SEx_TxISR_I2SExt+0x94>)
 8005ea0:	e001      	b.n	8005ea6 <I2SEx_TxISR_I2SExt+0x26>
 8005ea2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ea6:	460a      	mov	r2, r1
 8005ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d121      	bne.n	8005f06 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a12      	ldr	r2, [pc, #72]	@ (8005f10 <I2SEx_TxISR_I2SExt+0x90>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <I2SEx_TxISR_I2SExt+0x50>
 8005ecc:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <I2SEx_TxISR_I2SExt+0x94>)
 8005ece:	e001      	b.n	8005ed4 <I2SEx_TxISR_I2SExt+0x54>
 8005ed0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	490d      	ldr	r1, [pc, #52]	@ (8005f10 <I2SEx_TxISR_I2SExt+0x90>)
 8005edc:	428b      	cmp	r3, r1
 8005ede:	d101      	bne.n	8005ee4 <I2SEx_TxISR_I2SExt+0x64>
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f14 <I2SEx_TxISR_I2SExt+0x94>)
 8005ee2:	e001      	b.n	8005ee8 <I2SEx_TxISR_I2SExt+0x68>
 8005ee4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ee8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005eec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d106      	bne.n	8005f06 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fa fe03 	bl	8000b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40003800 	.word	0x40003800
 8005f14:	40003400 	.word	0x40003400

08005f18 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68d8      	ldr	r0, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f2a:	1c99      	adds	r1, r3, #2
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f30:	b282      	uxth	r2, r0
 8005f32:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d113      	bne.n	8005f74 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f5a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fa fdcc 	bl	8000b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a20      	ldr	r2, [pc, #128]	@ (800600c <I2SEx_RxISR_I2SExt+0x90>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <I2SEx_RxISR_I2SExt+0x16>
 8005f8e:	4b20      	ldr	r3, [pc, #128]	@ (8006010 <I2SEx_RxISR_I2SExt+0x94>)
 8005f90:	e001      	b.n	8005f96 <I2SEx_RxISR_I2SExt+0x1a>
 8005f92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f96:	68d8      	ldr	r0, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	1c99      	adds	r1, r3, #2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005fa2:	b282      	uxth	r2, r0
 8005fa4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d121      	bne.n	8006002 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	@ (800600c <I2SEx_RxISR_I2SExt+0x90>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <I2SEx_RxISR_I2SExt+0x50>
 8005fc8:	4b11      	ldr	r3, [pc, #68]	@ (8006010 <I2SEx_RxISR_I2SExt+0x94>)
 8005fca:	e001      	b.n	8005fd0 <I2SEx_RxISR_I2SExt+0x54>
 8005fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	490d      	ldr	r1, [pc, #52]	@ (800600c <I2SEx_RxISR_I2SExt+0x90>)
 8005fd8:	428b      	cmp	r3, r1
 8005fda:	d101      	bne.n	8005fe0 <I2SEx_RxISR_I2SExt+0x64>
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <I2SEx_RxISR_I2SExt+0x94>)
 8005fde:	e001      	b.n	8005fe4 <I2SEx_RxISR_I2SExt+0x68>
 8005fe0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fe4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fe8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fa fd85 	bl	8000b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40003800 	.word	0x40003800
 8006010:	40003400 	.word	0x40003400

08006014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e267      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d075      	beq.n	800611e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006032:	4b88      	ldr	r3, [pc, #544]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b04      	cmp	r3, #4
 800603c:	d00c      	beq.n	8006058 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800603e:	4b85      	ldr	r3, [pc, #532]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006046:	2b08      	cmp	r3, #8
 8006048:	d112      	bne.n	8006070 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800604a:	4b82      	ldr	r3, [pc, #520]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006052:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006056:	d10b      	bne.n	8006070 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006058:	4b7e      	ldr	r3, [pc, #504]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d05b      	beq.n	800611c <HAL_RCC_OscConfig+0x108>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d157      	bne.n	800611c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e242      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006078:	d106      	bne.n	8006088 <HAL_RCC_OscConfig+0x74>
 800607a:	4b76      	ldr	r3, [pc, #472]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a75      	ldr	r2, [pc, #468]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	e01d      	b.n	80060c4 <HAL_RCC_OscConfig+0xb0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006090:	d10c      	bne.n	80060ac <HAL_RCC_OscConfig+0x98>
 8006092:	4b70      	ldr	r3, [pc, #448]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a6f      	ldr	r2, [pc, #444]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006098:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	4b6d      	ldr	r3, [pc, #436]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a6c      	ldr	r2, [pc, #432]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	e00b      	b.n	80060c4 <HAL_RCC_OscConfig+0xb0>
 80060ac:	4b69      	ldr	r3, [pc, #420]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a68      	ldr	r2, [pc, #416]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	4b66      	ldr	r3, [pc, #408]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a65      	ldr	r2, [pc, #404]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d013      	beq.n	80060f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060cc:	f7fb f93c 	bl	8001348 <HAL_GetTick>
 80060d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060d2:	e008      	b.n	80060e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d4:	f7fb f938 	bl	8001348 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b64      	cmp	r3, #100	@ 0x64
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e207      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCC_OscConfig+0xc0>
 80060f2:	e014      	b.n	800611e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fb f928 	bl	8001348 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060fc:	f7fb f924 	bl	8001348 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	@ 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e1f3      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800610e:	4b51      	ldr	r3, [pc, #324]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f0      	bne.n	80060fc <HAL_RCC_OscConfig+0xe8>
 800611a:	e000      	b.n	800611e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800611c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d063      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800612a:	4b4a      	ldr	r3, [pc, #296]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 030c 	and.w	r3, r3, #12
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00b      	beq.n	800614e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006136:	4b47      	ldr	r3, [pc, #284]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800613e:	2b08      	cmp	r3, #8
 8006140:	d11c      	bne.n	800617c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006142:	4b44      	ldr	r3, [pc, #272]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d116      	bne.n	800617c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614e:	4b41      	ldr	r3, [pc, #260]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_RCC_OscConfig+0x152>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d001      	beq.n	8006166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e1c7      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006166:	4b3b      	ldr	r3, [pc, #236]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	4937      	ldr	r1, [pc, #220]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	e03a      	b.n	80061f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006184:	4b34      	ldr	r3, [pc, #208]	@ (8006258 <HAL_RCC_OscConfig+0x244>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618a:	f7fb f8dd 	bl	8001348 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006190:	e008      	b.n	80061a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006192:	f7fb f8d9 	bl	8001348 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e1a8      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4925      	ldr	r1, [pc, #148]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	e015      	b.n	80061f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061c6:	4b24      	ldr	r3, [pc, #144]	@ (8006258 <HAL_RCC_OscConfig+0x244>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fb f8bc 	bl	8001348 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061d4:	f7fb f8b8 	bl	8001348 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e187      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d036      	beq.n	800626c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <HAL_RCC_OscConfig+0x248>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620c:	f7fb f89c 	bl	8001348 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006214:	f7fb f898 	bl	8001348 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e167      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006226:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <HAL_RCC_OscConfig+0x240>)
 8006228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d0f0      	beq.n	8006214 <HAL_RCC_OscConfig+0x200>
 8006232:	e01b      	b.n	800626c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006234:	4b09      	ldr	r3, [pc, #36]	@ (800625c <HAL_RCC_OscConfig+0x248>)
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800623a:	f7fb f885 	bl	8001348 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	e00e      	b.n	8006260 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006242:	f7fb f881 	bl	8001348 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d907      	bls.n	8006260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e150      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
 8006254:	40023800 	.word	0x40023800
 8006258:	42470000 	.word	0x42470000
 800625c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006260:	4b88      	ldr	r3, [pc, #544]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1ea      	bne.n	8006242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8097 	beq.w	80063a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800627e:	4b81      	ldr	r3, [pc, #516]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10f      	bne.n	80062aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800628a:	2300      	movs	r3, #0
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	4b7d      	ldr	r3, [pc, #500]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	4a7c      	ldr	r2, [pc, #496]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006298:	6413      	str	r3, [r2, #64]	@ 0x40
 800629a:	4b7a      	ldr	r3, [pc, #488]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062aa:	4b77      	ldr	r3, [pc, #476]	@ (8006488 <HAL_RCC_OscConfig+0x474>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d118      	bne.n	80062e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062b6:	4b74      	ldr	r3, [pc, #464]	@ (8006488 <HAL_RCC_OscConfig+0x474>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a73      	ldr	r2, [pc, #460]	@ (8006488 <HAL_RCC_OscConfig+0x474>)
 80062bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c2:	f7fb f841 	bl	8001348 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ca:	f7fb f83d 	bl	8001348 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e10c      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062dc:	4b6a      	ldr	r3, [pc, #424]	@ (8006488 <HAL_RCC_OscConfig+0x474>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d0f0      	beq.n	80062ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d106      	bne.n	80062fe <HAL_RCC_OscConfig+0x2ea>
 80062f0:	4b64      	ldr	r3, [pc, #400]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 80062f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f4:	4a63      	ldr	r2, [pc, #396]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80062fc:	e01c      	b.n	8006338 <HAL_RCC_OscConfig+0x324>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b05      	cmp	r3, #5
 8006304:	d10c      	bne.n	8006320 <HAL_RCC_OscConfig+0x30c>
 8006306:	4b5f      	ldr	r3, [pc, #380]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	4a5e      	ldr	r2, [pc, #376]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800630c:	f043 0304 	orr.w	r3, r3, #4
 8006310:	6713      	str	r3, [r2, #112]	@ 0x70
 8006312:	4b5c      	ldr	r3, [pc, #368]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006316:	4a5b      	ldr	r2, [pc, #364]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6713      	str	r3, [r2, #112]	@ 0x70
 800631e:	e00b      	b.n	8006338 <HAL_RCC_OscConfig+0x324>
 8006320:	4b58      	ldr	r3, [pc, #352]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	4a57      	ldr	r2, [pc, #348]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	6713      	str	r3, [r2, #112]	@ 0x70
 800632c:	4b55      	ldr	r3, [pc, #340]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	4a54      	ldr	r2, [pc, #336]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006332:	f023 0304 	bic.w	r3, r3, #4
 8006336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d015      	beq.n	800636c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006340:	f7fb f802 	bl	8001348 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006346:	e00a      	b.n	800635e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006348:	f7fa fffe 	bl	8001348 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e0cb      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635e:	4b49      	ldr	r3, [pc, #292]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0ee      	beq.n	8006348 <HAL_RCC_OscConfig+0x334>
 800636a:	e014      	b.n	8006396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636c:	f7fa ffec 	bl	8001348 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fa ffe8 	bl	8001348 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0b5      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800638a:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1ee      	bne.n	8006374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d105      	bne.n	80063a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800639c:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	4a38      	ldr	r2, [pc, #224]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 80063a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a1 	beq.w	80064f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063b2:	4b34      	ldr	r3, [pc, #208]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 030c 	and.w	r3, r3, #12
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d05c      	beq.n	8006478 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d141      	bne.n	800644a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c6:	4b31      	ldr	r3, [pc, #196]	@ (800648c <HAL_RCC_OscConfig+0x478>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063cc:	f7fa ffbc 	bl	8001348 <HAL_GetTick>
 80063d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fa ffb8 	bl	8001348 <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e087      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	4b27      	ldr	r3, [pc, #156]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f0      	bne.n	80063d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69da      	ldr	r2, [r3, #28]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	019b      	lsls	r3, r3, #6
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006408:	085b      	lsrs	r3, r3, #1
 800640a:	3b01      	subs	r3, #1
 800640c:	041b      	lsls	r3, r3, #16
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	491b      	ldr	r1, [pc, #108]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 8006418:	4313      	orrs	r3, r2
 800641a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641c:	4b1b      	ldr	r3, [pc, #108]	@ (800648c <HAL_RCC_OscConfig+0x478>)
 800641e:	2201      	movs	r2, #1
 8006420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006422:	f7fa ff91 	bl	8001348 <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800642a:	f7fa ff8d 	bl	8001348 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e05c      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643c:	4b11      	ldr	r3, [pc, #68]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0f0      	beq.n	800642a <HAL_RCC_OscConfig+0x416>
 8006448:	e054      	b.n	80064f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800644a:	4b10      	ldr	r3, [pc, #64]	@ (800648c <HAL_RCC_OscConfig+0x478>)
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006450:	f7fa ff7a 	bl	8001348 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006458:	f7fa ff76 	bl	8001348 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e045      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646a:	4b06      	ldr	r3, [pc, #24]	@ (8006484 <HAL_RCC_OscConfig+0x470>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x444>
 8006476:	e03d      	b.n	80064f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d107      	bne.n	8006490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e038      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
 8006484:	40023800 	.word	0x40023800
 8006488:	40007000 	.word	0x40007000
 800648c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006490:	4b1b      	ldr	r3, [pc, #108]	@ (8006500 <HAL_RCC_OscConfig+0x4ec>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d028      	beq.n	80064f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d121      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d11a      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064c0:	4013      	ands	r3, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d111      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	3b01      	subs	r3, #1
 80064da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064dc:	429a      	cmp	r2, r3
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40023800 	.word	0x40023800

08006504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0cc      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006518:	4b68      	ldr	r3, [pc, #416]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d90c      	bls.n	8006540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006526:	4b65      	ldr	r3, [pc, #404]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b63      	ldr	r3, [pc, #396]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0b8      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d005      	beq.n	8006564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006558:	4b59      	ldr	r3, [pc, #356]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	4a58      	ldr	r2, [pc, #352]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006570:	4b53      	ldr	r3, [pc, #332]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	4a52      	ldr	r2, [pc, #328]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800657a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657c:	4b50      	ldr	r3, [pc, #320]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	494d      	ldr	r1, [pc, #308]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	4313      	orrs	r3, r2
 800658c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d044      	beq.n	8006624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065a2:	4b47      	ldr	r3, [pc, #284]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d119      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e07f      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d003      	beq.n	80065c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d107      	bne.n	80065d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c2:	4b3f      	ldr	r3, [pc, #252]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e06f      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d2:	4b3b      	ldr	r3, [pc, #236]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e067      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065e2:	4b37      	ldr	r3, [pc, #220]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f023 0203 	bic.w	r2, r3, #3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4934      	ldr	r1, [pc, #208]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065f4:	f7fa fea8 	bl	8001348 <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065fa:	e00a      	b.n	8006612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065fc:	f7fa fea4 	bl	8001348 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e04f      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006612:	4b2b      	ldr	r3, [pc, #172]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 020c 	and.w	r2, r3, #12
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	429a      	cmp	r2, r3
 8006622:	d1eb      	bne.n	80065fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006624:	4b25      	ldr	r3, [pc, #148]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d20c      	bcs.n	800664c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006632:	4b22      	ldr	r3, [pc, #136]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800663a:	4b20      	ldr	r3, [pc, #128]	@ (80066bc <HAL_RCC_ClockConfig+0x1b8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d001      	beq.n	800664c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e032      	b.n	80066b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006658:	4b19      	ldr	r3, [pc, #100]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4916      	ldr	r1, [pc, #88]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006676:	4b12      	ldr	r3, [pc, #72]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	490e      	ldr	r1, [pc, #56]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	4313      	orrs	r3, r2
 8006688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800668a:	f000 f821 	bl	80066d0 <HAL_RCC_GetSysClockFreq>
 800668e:	4602      	mov	r2, r0
 8006690:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	490a      	ldr	r1, [pc, #40]	@ (80066c4 <HAL_RCC_ClockConfig+0x1c0>)
 800669c:	5ccb      	ldrb	r3, [r1, r3]
 800669e:	fa22 f303 	lsr.w	r3, r2, r3
 80066a2:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <HAL_RCC_ClockConfig+0x1c4>)
 80066a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066a6:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <HAL_RCC_ClockConfig+0x1c8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fa fe08 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40023c00 	.word	0x40023c00
 80066c0:	40023800 	.word	0x40023800
 80066c4:	0800af40 	.word	0x0800af40
 80066c8:	20000000 	.word	0x20000000
 80066cc:	20000004 	.word	0x20000004

080066d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d4:	b094      	sub	sp, #80	@ 0x50
 80066d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066e8:	4b79      	ldr	r3, [pc, #484]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 030c 	and.w	r3, r3, #12
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d00d      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0x40>
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	f200 80e1 	bhi.w	80068bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <HAL_RCC_GetSysClockFreq+0x34>
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d003      	beq.n	800670a <HAL_RCC_GetSysClockFreq+0x3a>
 8006702:	e0db      	b.n	80068bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006704:	4b73      	ldr	r3, [pc, #460]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006708:	e0db      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800670a:	4b72      	ldr	r3, [pc, #456]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800670c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800670e:	e0d8      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006710:	4b6f      	ldr	r3, [pc, #444]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006718:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800671a:	4b6d      	ldr	r3, [pc, #436]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d063      	beq.n	80067ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006726:	4b6a      	ldr	r3, [pc, #424]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	099b      	lsrs	r3, r3, #6
 800672c:	2200      	movs	r2, #0
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	633b      	str	r3, [r7, #48]	@ 0x30
 800673a:	2300      	movs	r3, #0
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
 800673e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	f04f 0000 	mov.w	r0, #0
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	0159      	lsls	r1, r3, #5
 8006750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006754:	0150      	lsls	r0, r2, #5
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4621      	mov	r1, r4
 800675c:	1a51      	subs	r1, r2, r1
 800675e:	6139      	str	r1, [r7, #16]
 8006760:	4629      	mov	r1, r5
 8006762:	eb63 0301 	sbc.w	r3, r3, r1
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006774:	4659      	mov	r1, fp
 8006776:	018b      	lsls	r3, r1, #6
 8006778:	4651      	mov	r1, sl
 800677a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800677e:	4651      	mov	r1, sl
 8006780:	018a      	lsls	r2, r1, #6
 8006782:	4651      	mov	r1, sl
 8006784:	ebb2 0801 	subs.w	r8, r2, r1
 8006788:	4659      	mov	r1, fp
 800678a:	eb63 0901 	sbc.w	r9, r3, r1
 800678e:	f04f 0200 	mov.w	r2, #0
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800679e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a2:	4690      	mov	r8, r2
 80067a4:	4699      	mov	r9, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	eb18 0303 	adds.w	r3, r8, r3
 80067ac:	60bb      	str	r3, [r7, #8]
 80067ae:	462b      	mov	r3, r5
 80067b0:	eb49 0303 	adc.w	r3, r9, r3
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	f04f 0300 	mov.w	r3, #0
 80067be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067c2:	4629      	mov	r1, r5
 80067c4:	028b      	lsls	r3, r1, #10
 80067c6:	4621      	mov	r1, r4
 80067c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067cc:	4621      	mov	r1, r4
 80067ce:	028a      	lsls	r2, r1, #10
 80067d0:	4610      	mov	r0, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d6:	2200      	movs	r2, #0
 80067d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067e0:	f7f9 fcf2 	bl	80001c8 <__aeabi_uldivmod>
 80067e4:	4602      	mov	r2, r0
 80067e6:	460b      	mov	r3, r1
 80067e8:	4613      	mov	r3, r2
 80067ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ec:	e058      	b.n	80068a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ee:	4b38      	ldr	r3, [pc, #224]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	2200      	movs	r2, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	4611      	mov	r1, r2
 80067fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067fe:	623b      	str	r3, [r7, #32]
 8006800:	2300      	movs	r3, #0
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
 8006804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006808:	4642      	mov	r2, r8
 800680a:	464b      	mov	r3, r9
 800680c:	f04f 0000 	mov.w	r0, #0
 8006810:	f04f 0100 	mov.w	r1, #0
 8006814:	0159      	lsls	r1, r3, #5
 8006816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800681a:	0150      	lsls	r0, r2, #5
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4641      	mov	r1, r8
 8006822:	ebb2 0a01 	subs.w	sl, r2, r1
 8006826:	4649      	mov	r1, r9
 8006828:	eb63 0b01 	sbc.w	fp, r3, r1
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800683c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006840:	ebb2 040a 	subs.w	r4, r2, sl
 8006844:	eb63 050b 	sbc.w	r5, r3, fp
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	00eb      	lsls	r3, r5, #3
 8006852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006856:	00e2      	lsls	r2, r4, #3
 8006858:	4614      	mov	r4, r2
 800685a:	461d      	mov	r5, r3
 800685c:	4643      	mov	r3, r8
 800685e:	18e3      	adds	r3, r4, r3
 8006860:	603b      	str	r3, [r7, #0]
 8006862:	464b      	mov	r3, r9
 8006864:	eb45 0303 	adc.w	r3, r5, r3
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006876:	4629      	mov	r1, r5
 8006878:	028b      	lsls	r3, r1, #10
 800687a:	4621      	mov	r1, r4
 800687c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006880:	4621      	mov	r1, r4
 8006882:	028a      	lsls	r2, r1, #10
 8006884:	4610      	mov	r0, r2
 8006886:	4619      	mov	r1, r3
 8006888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800688a:	2200      	movs	r2, #0
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	61fa      	str	r2, [r7, #28]
 8006890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006894:	f7f9 fc98 	bl	80001c8 <__aeabi_uldivmod>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4613      	mov	r3, r2
 800689e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068a0:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	3301      	adds	r3, #1
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ba:	e002      	b.n	80068c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068bc:	4b05      	ldr	r3, [pc, #20]	@ (80068d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80068be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3750      	adds	r7, #80	@ 0x50
 80068c8:	46bd      	mov	sp, r7
 80068ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800
 80068d4:	00f42400 	.word	0x00f42400

080068d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068dc:	4b03      	ldr	r3, [pc, #12]	@ (80068ec <HAL_RCC_GetHCLKFreq+0x14>)
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000000 	.word	0x20000000

080068f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068f4:	f7ff fff0 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b05      	ldr	r3, [pc, #20]	@ (8006910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	0a9b      	lsrs	r3, r3, #10
 8006900:	f003 0307 	and.w	r3, r3, #7
 8006904:	4903      	ldr	r1, [pc, #12]	@ (8006914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	40023800 	.word	0x40023800
 8006914:	0800af50 	.word	0x0800af50

08006918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800691c:	f7ff ffdc 	bl	80068d8 <HAL_RCC_GetHCLKFreq>
 8006920:	4602      	mov	r2, r0
 8006922:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	0b5b      	lsrs	r3, r3, #13
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	4903      	ldr	r1, [pc, #12]	@ (800693c <HAL_RCC_GetPCLK2Freq+0x24>)
 800692e:	5ccb      	ldrb	r3, [r1, r3]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006934:	4618      	mov	r0, r3
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	0800af50 	.word	0x0800af50

08006940 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006964:	2b00      	cmp	r3, #0
 8006966:	d035      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006968:	4b62      	ldr	r3, [pc, #392]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696e:	f7fa fceb 	bl	8001348 <HAL_GetTick>
 8006972:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006974:	e008      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006976:	f7fa fce7 	bl	8001348 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e0b0      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006988:	4b5b      	ldr	r3, [pc, #364]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	019a      	lsls	r2, r3, #6
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	071b      	lsls	r3, r3, #28
 80069a0:	4955      	ldr	r1, [pc, #340]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069a8:	4b52      	ldr	r3, [pc, #328]	@ (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ae:	f7fa fccb 	bl	8001348 <HAL_GetTick>
 80069b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069b4:	e008      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069b6:	f7fa fcc7 	bl	8001348 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e090      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069c8:	4b4b      	ldr	r3, [pc, #300]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f0      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8083 	beq.w	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	4b44      	ldr	r3, [pc, #272]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	4a43      	ldr	r2, [pc, #268]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80069f2:	4b41      	ldr	r3, [pc, #260]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069fe:	4b3f      	ldr	r3, [pc, #252]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a3e      	ldr	r2, [pc, #248]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a0a:	f7fa fc9d 	bl	8001348 <HAL_GetTick>
 8006a0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a12:	f7fa fc99 	bl	8001348 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e062      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a24:	4b35      	ldr	r3, [pc, #212]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a30:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02f      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d028      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a58:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5e:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a64:	4a24      	ldr	r2, [pc, #144]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a6a:	4b23      	ldr	r3, [pc, #140]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d114      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a76:	f7fa fc67 	bl	8001348 <HAL_GetTick>
 8006a7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a7c:	e00a      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a7e:	f7fa fc63 	bl	8001348 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e02a      	b.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a94:	4b18      	ldr	r3, [pc, #96]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ee      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aac:	d10d      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006aae:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ac2:	490d      	ldr	r1, [pc, #52]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	608b      	str	r3, [r1, #8]
 8006ac8:	e005      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	4a0a      	ldr	r2, [pc, #40]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006ad4:	6093      	str	r3, [r2, #8]
 8006ad6:	4b08      	ldr	r3, [pc, #32]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae2:	4905      	ldr	r1, [pc, #20]	@ (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	42470068 	.word	0x42470068
 8006af8:	40023800 	.word	0x40023800
 8006afc:	40007000 	.word	0x40007000
 8006b00:	42470e40 	.word	0x42470e40

08006b04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d13f      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b22:	4b24      	ldr	r3, [pc, #144]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d006      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b38:	d12f      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b3c:	617b      	str	r3, [r7, #20]
          break;
 8006b3e:	e02f      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b40:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b4c:	d108      	bne.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b4e:	4b19      	ldr	r3, [pc, #100]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b56:	4a19      	ldr	r2, [pc, #100]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e007      	b.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b68:	4a14      	ldr	r2, [pc, #80]	@ (8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b70:	4b10      	ldr	r3, [pc, #64]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b84:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b8a:	0f1b      	lsrs	r3, r3, #28
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	617b      	str	r3, [r7, #20]
          break;
 8006b98:	e002      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	617b      	str	r3, [r7, #20]
          break;
 8006b9e:	bf00      	nop
        }
      }
      break;
 8006ba0:	e000      	b.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006ba2:	bf00      	nop
    }
  }
  return frequency;
 8006ba4:	697b      	ldr	r3, [r7, #20]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	00bb8000 	.word	0x00bb8000
 8006bbc:	00f42400 	.word	0x00f42400

08006bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e07b      	b.n	8006cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006be2:	d009      	beq.n	8006bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	61da      	str	r2, [r3, #28]
 8006bea:	e005      	b.n	8006bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fa f92c 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c7c:	ea42 0103 	orr.w	r1, r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	0c1b      	lsrs	r3, r3, #16
 8006c96:	f003 0104 	and.w	r1, r3, #4
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9e:	f003 0210 	and.w	r2, r3, #16
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69da      	ldr	r2, [r3, #28]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e042      	b.n	8006d6a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d106      	bne.n	8006cfe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fa f9f3 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2224      	movs	r2, #36	@ 0x24
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f82c 	bl	8006d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691a      	ldr	r2, [r3, #16]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695a      	ldr	r2, [r3, #20]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b0c0      	sub	sp, #256	@ 0x100
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	68d9      	ldr	r1, [r3, #12]
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	ea40 0301 	orr.w	r3, r0, r1
 8006d9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	431a      	orrs	r2, r3
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dcc:	f021 010c 	bic.w	r1, r1, #12
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dda:	430b      	orrs	r3, r1
 8006ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	6999      	ldr	r1, [r3, #24]
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	ea40 0301 	orr.w	r3, r0, r1
 8006dfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b8f      	ldr	r3, [pc, #572]	@ (8007040 <UART_SetConfig+0x2cc>)
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d005      	beq.n	8006e14 <UART_SetConfig+0xa0>
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8007044 <UART_SetConfig+0x2d0>)
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d104      	bne.n	8006e1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e14:	f7ff fd80 	bl	8006918 <HAL_RCC_GetPCLK2Freq>
 8006e18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e1c:	e003      	b.n	8006e26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e1e:	f7ff fd67 	bl	80068f0 <HAL_RCC_GetPCLK1Freq>
 8006e22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e30:	f040 810c 	bne.w	800704c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e46:	4622      	mov	r2, r4
 8006e48:	462b      	mov	r3, r5
 8006e4a:	1891      	adds	r1, r2, r2
 8006e4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e4e:	415b      	adcs	r3, r3
 8006e50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e56:	4621      	mov	r1, r4
 8006e58:	eb12 0801 	adds.w	r8, r2, r1
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	eb43 0901 	adc.w	r9, r3, r1
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e76:	4690      	mov	r8, r2
 8006e78:	4699      	mov	r9, r3
 8006e7a:	4623      	mov	r3, r4
 8006e7c:	eb18 0303 	adds.w	r3, r8, r3
 8006e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e84:	462b      	mov	r3, r5
 8006e86:	eb49 0303 	adc.w	r3, r9, r3
 8006e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	18db      	adds	r3, r3, r3
 8006ea6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	eb42 0303 	adc.w	r3, r2, r3
 8006eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006eb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006eb8:	f7f9 f986 	bl	80001c8 <__aeabi_uldivmod>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4b61      	ldr	r3, [pc, #388]	@ (8007048 <UART_SetConfig+0x2d4>)
 8006ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	011c      	lsls	r4, r3, #4
 8006eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ed4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ed8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006edc:	4642      	mov	r2, r8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	1891      	adds	r1, r2, r2
 8006ee2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ee4:	415b      	adcs	r3, r3
 8006ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006eec:	4641      	mov	r1, r8
 8006eee:	eb12 0a01 	adds.w	sl, r2, r1
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f0c:	4692      	mov	sl, r2
 8006f0e:	469b      	mov	fp, r3
 8006f10:	4643      	mov	r3, r8
 8006f12:	eb1a 0303 	adds.w	r3, sl, r3
 8006f16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006f20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	18db      	adds	r3, r3, r3
 8006f3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f3e:	4613      	mov	r3, r2
 8006f40:	eb42 0303 	adc.w	r3, r2, r3
 8006f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f4e:	f7f9 f93b 	bl	80001c8 <__aeabi_uldivmod>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4611      	mov	r1, r2
 8006f58:	4b3b      	ldr	r3, [pc, #236]	@ (8007048 <UART_SetConfig+0x2d4>)
 8006f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2264      	movs	r2, #100	@ 0x64
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	1acb      	subs	r3, r1, r3
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f6e:	4b36      	ldr	r3, [pc, #216]	@ (8007048 <UART_SetConfig+0x2d4>)
 8006f70:	fba3 2302 	umull	r2, r3, r3, r2
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f7c:	441c      	add	r4, r3
 8006f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f90:	4642      	mov	r2, r8
 8006f92:	464b      	mov	r3, r9
 8006f94:	1891      	adds	r1, r2, r2
 8006f96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f98:	415b      	adcs	r3, r3
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	1851      	adds	r1, r2, r1
 8006fa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	414b      	adcs	r3, r1
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	f04f 0300 	mov.w	r3, #0
 8006fb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fb8:	4659      	mov	r1, fp
 8006fba:	00cb      	lsls	r3, r1, #3
 8006fbc:	4651      	mov	r1, sl
 8006fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fc2:	4651      	mov	r1, sl
 8006fc4:	00ca      	lsls	r2, r1, #3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4642      	mov	r2, r8
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd4:	464b      	mov	r3, r9
 8006fd6:	460a      	mov	r2, r1
 8006fd8:	eb42 0303 	adc.w	r3, r2, r3
 8006fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ff0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	18db      	adds	r3, r3, r3
 8006ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	eb42 0303 	adc.w	r3, r2, r3
 8007000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007006:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800700a:	f7f9 f8dd 	bl	80001c8 <__aeabi_uldivmod>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <UART_SetConfig+0x2d4>)
 8007014:	fba3 1302 	umull	r1, r3, r3, r2
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	2164      	movs	r1, #100	@ 0x64
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	3332      	adds	r3, #50	@ 0x32
 8007026:	4a08      	ldr	r2, [pc, #32]	@ (8007048 <UART_SetConfig+0x2d4>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	f003 0207 	and.w	r2, r3, #7
 8007032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4422      	add	r2, r4
 800703a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800703c:	e106      	b.n	800724c <UART_SetConfig+0x4d8>
 800703e:	bf00      	nop
 8007040:	40011000 	.word	0x40011000
 8007044:	40011400 	.word	0x40011400
 8007048:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800704c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007050:	2200      	movs	r2, #0
 8007052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007056:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800705a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800705e:	4642      	mov	r2, r8
 8007060:	464b      	mov	r3, r9
 8007062:	1891      	adds	r1, r2, r2
 8007064:	6239      	str	r1, [r7, #32]
 8007066:	415b      	adcs	r3, r3
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
 800706a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800706e:	4641      	mov	r1, r8
 8007070:	1854      	adds	r4, r2, r1
 8007072:	4649      	mov	r1, r9
 8007074:	eb43 0501 	adc.w	r5, r3, r1
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	00eb      	lsls	r3, r5, #3
 8007082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007086:	00e2      	lsls	r2, r4, #3
 8007088:	4614      	mov	r4, r2
 800708a:	461d      	mov	r5, r3
 800708c:	4643      	mov	r3, r8
 800708e:	18e3      	adds	r3, r4, r3
 8007090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007094:	464b      	mov	r3, r9
 8007096:	eb45 0303 	adc.w	r3, r5, r3
 800709a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ba:	4629      	mov	r1, r5
 80070bc:	008b      	lsls	r3, r1, #2
 80070be:	4621      	mov	r1, r4
 80070c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070c4:	4621      	mov	r1, r4
 80070c6:	008a      	lsls	r2, r1, #2
 80070c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070cc:	f7f9 f87c 	bl	80001c8 <__aeabi_uldivmod>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4b60      	ldr	r3, [pc, #384]	@ (8007258 <UART_SetConfig+0x4e4>)
 80070d6:	fba3 2302 	umull	r2, r3, r3, r2
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	011c      	lsls	r4, r3, #4
 80070de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070f0:	4642      	mov	r2, r8
 80070f2:	464b      	mov	r3, r9
 80070f4:	1891      	adds	r1, r2, r2
 80070f6:	61b9      	str	r1, [r7, #24]
 80070f8:	415b      	adcs	r3, r3
 80070fa:	61fb      	str	r3, [r7, #28]
 80070fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007100:	4641      	mov	r1, r8
 8007102:	1851      	adds	r1, r2, r1
 8007104:	6139      	str	r1, [r7, #16]
 8007106:	4649      	mov	r1, r9
 8007108:	414b      	adcs	r3, r1
 800710a:	617b      	str	r3, [r7, #20]
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007118:	4659      	mov	r1, fp
 800711a:	00cb      	lsls	r3, r1, #3
 800711c:	4651      	mov	r1, sl
 800711e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007122:	4651      	mov	r1, sl
 8007124:	00ca      	lsls	r2, r1, #3
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	4603      	mov	r3, r0
 800712c:	4642      	mov	r2, r8
 800712e:	189b      	adds	r3, r3, r2
 8007130:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007134:	464b      	mov	r3, r9
 8007136:	460a      	mov	r2, r1
 8007138:	eb42 0303 	adc.w	r3, r2, r3
 800713c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	67bb      	str	r3, [r7, #120]	@ 0x78
 800714a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007158:	4649      	mov	r1, r9
 800715a:	008b      	lsls	r3, r1, #2
 800715c:	4641      	mov	r1, r8
 800715e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007162:	4641      	mov	r1, r8
 8007164:	008a      	lsls	r2, r1, #2
 8007166:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800716a:	f7f9 f82d 	bl	80001c8 <__aeabi_uldivmod>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4611      	mov	r1, r2
 8007174:	4b38      	ldr	r3, [pc, #224]	@ (8007258 <UART_SetConfig+0x4e4>)
 8007176:	fba3 2301 	umull	r2, r3, r3, r1
 800717a:	095b      	lsrs	r3, r3, #5
 800717c:	2264      	movs	r2, #100	@ 0x64
 800717e:	fb02 f303 	mul.w	r3, r2, r3
 8007182:	1acb      	subs	r3, r1, r3
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	3332      	adds	r3, #50	@ 0x32
 8007188:	4a33      	ldr	r2, [pc, #204]	@ (8007258 <UART_SetConfig+0x4e4>)
 800718a:	fba2 2303 	umull	r2, r3, r2, r3
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007194:	441c      	add	r4, r3
 8007196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719a:	2200      	movs	r2, #0
 800719c:	673b      	str	r3, [r7, #112]	@ 0x70
 800719e:	677a      	str	r2, [r7, #116]	@ 0x74
 80071a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071a4:	4642      	mov	r2, r8
 80071a6:	464b      	mov	r3, r9
 80071a8:	1891      	adds	r1, r2, r2
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	415b      	adcs	r3, r3
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071b4:	4641      	mov	r1, r8
 80071b6:	1851      	adds	r1, r2, r1
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	4649      	mov	r1, r9
 80071bc:	414b      	adcs	r3, r1
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071cc:	4659      	mov	r1, fp
 80071ce:	00cb      	lsls	r3, r1, #3
 80071d0:	4651      	mov	r1, sl
 80071d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071d6:	4651      	mov	r1, sl
 80071d8:	00ca      	lsls	r2, r1, #3
 80071da:	4610      	mov	r0, r2
 80071dc:	4619      	mov	r1, r3
 80071de:	4603      	mov	r3, r0
 80071e0:	4642      	mov	r2, r8
 80071e2:	189b      	adds	r3, r3, r2
 80071e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e6:	464b      	mov	r3, r9
 80071e8:	460a      	mov	r2, r1
 80071ea:	eb42 0303 	adc.w	r3, r2, r3
 80071ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007208:	4649      	mov	r1, r9
 800720a:	008b      	lsls	r3, r1, #2
 800720c:	4641      	mov	r1, r8
 800720e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007212:	4641      	mov	r1, r8
 8007214:	008a      	lsls	r2, r1, #2
 8007216:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800721a:	f7f8 ffd5 	bl	80001c8 <__aeabi_uldivmod>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <UART_SetConfig+0x4e4>)
 8007224:	fba3 1302 	umull	r1, r3, r3, r2
 8007228:	095b      	lsrs	r3, r3, #5
 800722a:	2164      	movs	r1, #100	@ 0x64
 800722c:	fb01 f303 	mul.w	r3, r1, r3
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	011b      	lsls	r3, r3, #4
 8007234:	3332      	adds	r3, #50	@ 0x32
 8007236:	4a08      	ldr	r2, [pc, #32]	@ (8007258 <UART_SetConfig+0x4e4>)
 8007238:	fba2 2303 	umull	r2, r3, r2, r3
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	f003 020f 	and.w	r2, r3, #15
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4422      	add	r2, r4
 800724a:	609a      	str	r2, [r3, #8]
}
 800724c:	bf00      	nop
 800724e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007252:	46bd      	mov	sp, r7
 8007254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007258:	51eb851f 	.word	0x51eb851f

0800725c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800725c:	b084      	sub	sp, #16
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	f107 001c 	add.w	r0, r7, #28
 800726a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800726e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007272:	2b01      	cmp	r3, #1
 8007274:	d123      	bne.n	80072be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800728a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800729e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d105      	bne.n	80072b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9dc 	bl	8007670 <USB_CoreReset>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
 80072bc:	e01b      	b.n	80072f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9d0 	bl	8007670 <USB_CoreReset>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80072d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80072e8:	e005      	b.n	80072f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072f6:	7fbb      	ldrb	r3, [r7, #30]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d10b      	bne.n	8007314 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f043 0206 	orr.w	r2, r3, #6
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f043 0220 	orr.w	r2, r3, #32
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007320:	b004      	add	sp, #16
 8007322:	4770      	bx	lr

08007324 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f043 0201 	orr.w	r2, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007346:	b480      	push	{r7}
 8007348:	b083      	sub	sp, #12
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f023 0201 	bic.w	r2, r3, #1
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d115      	bne.n	80073b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007396:	200a      	movs	r0, #10
 8007398:	f7f9 ffe2 	bl	8001360 <HAL_Delay>
      ms += 10U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	330a      	adds	r3, #10
 80073a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f956 	bl	8007654 <USB_GetMode>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d01e      	beq.n	80073ec <USB_SetCurrentMode+0x84>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80073b2:	d9f0      	bls.n	8007396 <USB_SetCurrentMode+0x2e>
 80073b4:	e01a      	b.n	80073ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d115      	bne.n	80073e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073c8:	200a      	movs	r0, #10
 80073ca:	f7f9 ffc9 	bl	8001360 <HAL_Delay>
      ms += 10U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	330a      	adds	r3, #10
 80073d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f93d 	bl	8007654 <USB_GetMode>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <USB_SetCurrentMode+0x84>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80073e4:	d9f0      	bls.n	80073c8 <USB_SetCurrentMode+0x60>
 80073e6:	e001      	b.n	80073ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e005      	b.n	80073f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80073f0:	d101      	bne.n	80073f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3301      	adds	r3, #1
 8007412:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800741a:	d901      	bls.n	8007420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e01b      	b.n	8007458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	daf2      	bge.n	800740e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	019b      	lsls	r3, r3, #6
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007444:	d901      	bls.n	800744a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e006      	b.n	8007458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b20      	cmp	r3, #32
 8007454:	d0f0      	beq.n	8007438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800747c:	d901      	bls.n	8007482 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e018      	b.n	80074b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	daf2      	bge.n	8007470 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2210      	movs	r2, #16
 8007492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	3301      	adds	r3, #1
 8007498:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074a0:	d901      	bls.n	80074a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e006      	b.n	80074b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0310 	and.w	r3, r3, #16
 80074ae:	2b10      	cmp	r3, #16
 80074b0:	d0f0      	beq.n	8007494 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b089      	sub	sp, #36	@ 0x24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	4611      	mov	r1, r2
 80074cc:	461a      	mov	r2, r3
 80074ce:	460b      	mov	r3, r1
 80074d0:	71fb      	strb	r3, [r7, #7]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d123      	bne.n	800752e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074e6:	88bb      	ldrh	r3, [r7, #4]
 80074e8:	3303      	adds	r3, #3
 80074ea:	089b      	lsrs	r3, r3, #2
 80074ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e018      	b.n	8007526 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	031a      	lsls	r2, r3, #12
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007500:	461a      	mov	r2, r3
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	3301      	adds	r3, #1
 800750c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	3301      	adds	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	3301      	adds	r3, #1
 8007518:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	3301      	adds	r3, #1
 800751e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	3301      	adds	r3, #1
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	429a      	cmp	r2, r3
 800752c:	d3e2      	bcc.n	80074f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3724      	adds	r7, #36	@ 0x24
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800753c:	b480      	push	{r7}
 800753e:	b08b      	sub	sp, #44	@ 0x2c
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	089b      	lsrs	r3, r3, #2
 8007556:	b29b      	uxth	r3, r3
 8007558:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007562:	2300      	movs	r3, #0
 8007564:	623b      	str	r3, [r7, #32]
 8007566:	e014      	b.n	8007592 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007572:	601a      	str	r2, [r3, #0]
    pDest++;
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	3301      	adds	r3, #1
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	3301      	adds	r3, #1
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	3301      	adds	r3, #1
 8007584:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	3301      	adds	r3, #1
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	3301      	adds	r3, #1
 8007590:	623b      	str	r3, [r7, #32]
 8007592:	6a3a      	ldr	r2, [r7, #32]
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	429a      	cmp	r2, r3
 8007598:	d3e6      	bcc.n	8007568 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800759a:	8bfb      	ldrh	r3, [r7, #30]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01e      	beq.n	80075de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075aa:	461a      	mov	r2, r3
 80075ac:	f107 0310 	add.w	r3, r7, #16
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	fa22 f303 	lsr.w	r3, r2, r3
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	701a      	strb	r2, [r3, #0]
      i++;
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	3301      	adds	r3, #1
 80075ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	3301      	adds	r3, #1
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075d2:	8bfb      	ldrh	r3, [r7, #30]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075d8:	8bfb      	ldrh	r3, [r7, #30]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1ea      	bne.n	80075b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	372c      	adds	r7, #44	@ 0x2c
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4013      	ands	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007604:	68fb      	ldr	r3, [r7, #12]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	4013      	ands	r3, r2
 8007644:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007646:	68bb      	ldr	r3, [r7, #8]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f003 0301 	and.w	r3, r3, #1
}
 8007664:	4618      	mov	r0, r3
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007688:	d901      	bls.n	800768e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e01b      	b.n	80076c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	daf2      	bge.n	800767c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f043 0201 	orr.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b2:	d901      	bls.n	80076b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e006      	b.n	80076c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d0f0      	beq.n	80076a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076d4:	b084      	sub	sp, #16
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076f4:	461a      	mov	r2, r3
 80076f6:	2300      	movs	r3, #0
 80076f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007716:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d119      	bne.n	800775e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800772a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10a      	bne.n	8007748 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e014      	b.n	8007772 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007756:	f023 0304 	bic.w	r3, r3, #4
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e009      	b.n	8007772 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800776c:	f023 0304 	bic.w	r3, r3, #4
 8007770:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007772:	2110      	movs	r1, #16
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fe43 	bl	8007400 <USB_FlushTxFifo>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff fe6d 	bl	8007464 <USB_FlushRxFifo>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007794:	2300      	movs	r3, #0
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e015      	b.n	80077c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a6:	461a      	mov	r2, r3
 80077a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ba:	461a      	mov	r2, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	3301      	adds	r3, #1
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077ca:	461a      	mov	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d3e3      	bcc.n	800779a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <USB_HostInit+0x170>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10b      	bne.n	8007800 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <USB_HostInit+0x174>)
 80077f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a14      	ldr	r2, [pc, #80]	@ (800784c <USB_HostInit+0x178>)
 80077fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80077fe:	e009      	b.n	8007814 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2280      	movs	r2, #128	@ 0x80
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a11      	ldr	r2, [pc, #68]	@ (8007850 <USB_HostInit+0x17c>)
 800780a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <USB_HostInit+0x180>)
 8007810:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f043 0210 	orr.w	r2, r3, #16
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <USB_HostInit+0x184>)
 800782e:	4313      	orrs	r3, r2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007840:	b004      	add	sp, #16
 8007842:	4770      	bx	lr
 8007844:	40040000 	.word	0x40040000
 8007848:	01000200 	.word	0x01000200
 800784c:	00e00300 	.word	0x00e00300
 8007850:	00600080 	.word	0x00600080
 8007854:	004000e0 	.word	0x004000e0
 8007858:	a3200008 	.word	0xa3200008

0800785c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007894:	4313      	orrs	r3, r2
 8007896:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d107      	bne.n	80078ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a4:	461a      	mov	r2, r3
 80078a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078aa:	6053      	str	r3, [r2, #4]
 80078ac:	e00c      	b.n	80078c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d107      	bne.n	80078c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ba:	461a      	mov	r2, r3
 80078bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80078c0:	6053      	str	r3, [r2, #4]
 80078c2:	e001      	b.n	80078c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80078f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007900:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007904:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007906:	2064      	movs	r0, #100	@ 0x64
 8007908:	f7f9 fd2a 	bl	8001360 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007918:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800791a:	200a      	movs	r0, #10
 800791c:	f7f9 fd20 	bl	8001360 <HAL_Delay>

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	460b      	mov	r3, r1
 8007934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800794e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d109      	bne.n	800796e <USB_DriveVbus+0x44>
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d106      	bne.n	800796e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800796c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007978:	d109      	bne.n	800798e <USB_DriveVbus+0x64>
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d106      	bne.n	800798e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800798c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	0c5b      	lsrs	r3, r3, #17
 80079ba:	f003 0303 	and.w	r3, r3, #3
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	b29b      	uxth	r3, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	70fb      	strb	r3, [r7, #3]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70bb      	strb	r3, [r7, #2]
 8007a02:	4613      	mov	r3, r2
 8007a04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d87c      	bhi.n	8007b24 <USB_HC_Init+0x138>
 8007a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a30 <USB_HC_Init+0x44>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a41 	.word	0x08007a41
 8007a34:	08007ae7 	.word	0x08007ae7
 8007a38:	08007a41 	.word	0x08007a41
 8007a3c:	08007aa9 	.word	0x08007aa9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007a52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	da10      	bge.n	8007a7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a7a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007a7c:	e055      	b.n	8007b2a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a6f      	ldr	r2, [pc, #444]	@ (8007c40 <USB_HC_Init+0x254>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d151      	bne.n	8007b2a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	78fa      	ldrb	r2, [r7, #3]
 8007a96:	0151      	lsls	r1, r2, #5
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	440a      	add	r2, r1
 8007a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aa0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007aa4:	60d3      	str	r3, [r2, #12]
      break;
 8007aa6:	e040      	b.n	8007b2a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007aba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007abc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da34      	bge.n	8007b2e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	78fa      	ldrb	r2, [r7, #3]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ae4:	e023      	b.n	8007b2e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ae6:	78fb      	ldrb	r3, [r7, #3]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af2:	461a      	mov	r2, r3
 8007af4:	f240 2325 	movw	r3, #549	@ 0x225
 8007af8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007afa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da17      	bge.n	8007b32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b02:	78fb      	ldrb	r3, [r7, #3]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	78fa      	ldrb	r2, [r7, #3]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b1c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007b20:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b22:	e006      	b.n	8007b32 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	77fb      	strb	r3, [r7, #31]
      break;
 8007b28:	e004      	b.n	8007b34 <USB_HC_Init+0x148>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e002      	b.n	8007b34 <USB_HC_Init+0x148>
      break;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <USB_HC_Init+0x148>
      break;
 8007b32:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	461a      	mov	r2, r3
 8007b42:	2300      	movs	r3, #0
 8007b44:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	78fa      	ldrb	r2, [r7, #3]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	78fb      	ldrb	r3, [r7, #3]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	2101      	movs	r1, #1
 8007b76:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7a:	6939      	ldr	r1, [r7, #16]
 8007b7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007b80:	4313      	orrs	r3, r2
 8007b82:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007b90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da03      	bge.n	8007ba0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007b98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	e001      	b.n	8007ba4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fef9 	bl	800799c <USB_GetHostSpeed>
 8007baa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007bac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d106      	bne.n	8007bc2 <USB_HC_Init+0x1d6>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d003      	beq.n	8007bc2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007bba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e001      	b.n	8007bc6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bc6:	787b      	ldrb	r3, [r7, #1]
 8007bc8:	059b      	lsls	r3, r3, #22
 8007bca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007bce:	78bb      	ldrb	r3, [r7, #2]
 8007bd0:	02db      	lsls	r3, r3, #11
 8007bd2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bd6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007bdc:	049b      	lsls	r3, r3, #18
 8007bde:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007be2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007be4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007bea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007bf4:	78fa      	ldrb	r2, [r7, #3]
 8007bf6:	0151      	lsls	r1, r2, #5
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	440a      	add	r2, r1
 8007bfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007c00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c04:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d003      	beq.n	8007c16 <USB_HC_Init+0x22a>
 8007c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d10f      	bne.n	8007c36 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	78fa      	ldrb	r2, [r7, #3]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40040000 	.word	0x40040000

08007c44 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	@ 0x30
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	785b      	ldrb	r3, [r3, #1]
 8007c5a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c60:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a5d      	ldr	r2, [pc, #372]	@ (8007ddc <USB_HC_StartXfer+0x198>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d12f      	bne.n	8007cca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d11c      	bne.n	8007caa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	7c9b      	ldrb	r3, [r3, #18]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <USB_HC_StartXfer+0x3c>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	7c9b      	ldrb	r3, [r3, #18]
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d124      	bne.n	8007cca <USB_HC_StartXfer+0x86>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	799b      	ldrb	r3, [r3, #6]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d120      	bne.n	8007cca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	6a3a      	ldr	r2, [r7, #32]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	60d3      	str	r3, [r2, #12]
 8007ca8:	e00f      	b.n	8007cca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10b      	bne.n	8007cca <USB_HC_StartXfer+0x86>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d107      	bne.n	8007cca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fb6b 	bl	800839c <USB_DoPing>
        return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e232      	b.n	8008130 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	799b      	ldrb	r3, [r3, #6]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d158      	bne.n	8007d84 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	78db      	ldrb	r3, [r3, #3]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cde:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	8a92      	ldrh	r2, [r2, #20]
 8007ce4:	fb03 f202 	mul.w	r2, r3, r2
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	61da      	str	r2, [r3, #28]
 8007cec:	e07c      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	7c9b      	ldrb	r3, [r3, #18]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d130      	bne.n	8007d58 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	2bbc      	cmp	r3, #188	@ 0xbc
 8007cfc:	d918      	bls.n	8007d30 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	8a9b      	ldrh	r3, [r3, #20]
 8007d02:	461a      	mov	r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d003      	beq.n	8007d20 <USB_HC_StartXfer+0xdc>
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d103      	bne.n	8007d28 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2202      	movs	r2, #2
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	e05f      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e05b      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	6a1a      	ldr	r2, [r3, #32]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d007      	beq.n	8007d50 <USB_HC_StartXfer+0x10c>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d003      	beq.n	8007d50 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e04b      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2203      	movs	r2, #3
 8007d54:	60da      	str	r2, [r3, #12]
 8007d56:	e047      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d10d      	bne.n	8007d7a <USB_HC_StartXfer+0x136>
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	8a92      	ldrh	r2, [r2, #20]
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d907      	bls.n	8007d7a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	8a92      	ldrh	r2, [r2, #20]
 8007d70:	fb03 f202 	mul.w	r2, r3, r2
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	61da      	str	r2, [r3, #28]
 8007d78:	e036      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	61da      	str	r2, [r3, #28]
 8007d82:	e031      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	6a1b      	ldr	r3, [r3, #32]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d018      	beq.n	8007dbe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	6a1b      	ldr	r3, [r3, #32]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	8a92      	ldrh	r2, [r2, #20]
 8007d94:	4413      	add	r3, r2
 8007d96:	3b01      	subs	r3, #1
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	8a92      	ldrh	r2, [r2, #20]
 8007d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007da0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007da2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007da4:	8b7b      	ldrh	r3, [r7, #26]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90b      	bls.n	8007dc2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007daa:	8b7b      	ldrh	r3, [r7, #26]
 8007dac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	8a92      	ldrh	r2, [r2, #20]
 8007db4:	fb03 f202 	mul.w	r2, r3, r2
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	61da      	str	r2, [r3, #28]
 8007dbc:	e001      	b.n	8007dc2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	78db      	ldrb	r3, [r3, #3]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007dca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	8a92      	ldrh	r2, [r2, #20]
 8007dd0:	fb03 f202 	mul.w	r2, r3, r2
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	61da      	str	r2, [r3, #28]
 8007dd8:	e006      	b.n	8007de8 <USB_HC_StartXfer+0x1a4>
 8007dda:	bf00      	nop
 8007ddc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6a1a      	ldr	r2, [r3, #32]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007df0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007df2:	04d9      	lsls	r1, r3, #19
 8007df4:	4ba3      	ldr	r3, [pc, #652]	@ (8008084 <USB_HC_StartXfer+0x440>)
 8007df6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007df8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	7d9b      	ldrb	r3, [r3, #22]
 8007dfe:	075b      	lsls	r3, r3, #29
 8007e00:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e04:	69f9      	ldr	r1, [r7, #28]
 8007e06:	0148      	lsls	r0, r1, #5
 8007e08:	6a39      	ldr	r1, [r7, #32]
 8007e0a:	4401      	add	r1, r0
 8007e0c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007e12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d009      	beq.n	8007e2e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	6999      	ldr	r1, [r3, #24]
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2a:	460a      	mov	r2, r1
 8007e2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	2300      	movne	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	6a3a      	ldr	r2, [r7, #32]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	7e7b      	ldrb	r3, [r7, #25]
 8007e76:	075b      	lsls	r3, r3, #29
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	0148      	lsls	r0, r1, #5
 8007e7c:	6a39      	ldr	r1, [r7, #32]
 8007e7e:	4401      	add	r1, r0
 8007e80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007e84:	4313      	orrs	r3, r2
 8007e86:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	799b      	ldrb	r3, [r3, #6]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	f040 80c3 	bne.w	8008018 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	7c5b      	ldrb	r3, [r3, #17]
 8007e96:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	6a3a      	ldr	r2, [r7, #32]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007eaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007eae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	6a3a      	ldr	r2, [r7, #32]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ece:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	79db      	ldrb	r3, [r3, #7]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d123      	bne.n	8007f20 <USB_HC_StartXfer+0x2dc>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	78db      	ldrb	r3, [r3, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11f      	bne.n	8007f20 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	6a3a      	ldr	r2, [r7, #32]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007efe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	6a3a      	ldr	r2, [r7, #32]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f1e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	7c9b      	ldrb	r3, [r3, #18]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d003      	beq.n	8007f30 <USB_HC_StartXfer+0x2ec>
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	7c9b      	ldrb	r3, [r3, #18]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d117      	bne.n	8007f60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d113      	bne.n	8007f60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	78db      	ldrb	r3, [r3, #3]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d10f      	bne.n	8007f60 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	015a      	lsls	r2, r3, #5
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	4413      	add	r3, r2
 8007f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	69fa      	ldr	r2, [r7, #28]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	7c9b      	ldrb	r3, [r3, #18]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d162      	bne.n	800802e <USB_HC_StartXfer+0x3ea>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	78db      	ldrb	r3, [r3, #3]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d15e      	bne.n	800802e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d858      	bhi.n	800802c <USB_HC_StartXfer+0x3e8>
 8007f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <USB_HC_StartXfer+0x33c>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007fb3 	.word	0x08007fb3
 8007f88:	08007fd5 	.word	0x08007fd5
 8007f8c:	08007ff7 	.word	0x08007ff7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	6a3a      	ldr	r2, [r7, #32]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fae:	6053      	str	r3, [r2, #4]
          break;
 8007fb0:	e03d      	b.n	800802e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	6a3a      	ldr	r2, [r7, #32]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fcc:	f043 030e 	orr.w	r3, r3, #14
 8007fd0:	6053      	str	r3, [r2, #4]
          break;
 8007fd2:	e02c      	b.n	800802e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	0151      	lsls	r1, r2, #5
 8007fe6:	6a3a      	ldr	r2, [r7, #32]
 8007fe8:	440a      	add	r2, r1
 8007fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ff2:	6053      	str	r3, [r2, #4]
          break;
 8007ff4:	e01b      	b.n	800802e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	6a3a      	ldr	r2, [r7, #32]
 800800a:	440a      	add	r2, r1
 800800c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008010:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008014:	6053      	str	r3, [r2, #4]
          break;
 8008016:	e00a      	b.n	800802e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008024:	461a      	mov	r2, r3
 8008026:	2300      	movs	r3, #0
 8008028:	6053      	str	r3, [r2, #4]
 800802a:	e000      	b.n	800802e <USB_HC_StartXfer+0x3ea>
          break;
 800802c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	4413      	add	r3, r2
 8008036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008044:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	78db      	ldrb	r3, [r3, #3]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d004      	beq.n	8008058 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008054:	613b      	str	r3, [r7, #16]
 8008056:	e003      	b.n	8008060 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800805e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008066:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	015a      	lsls	r2, r3, #5
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	4413      	add	r3, r2
 8008070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008074:	461a      	mov	r2, r3
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d003      	beq.n	8008088 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e055      	b.n	8008130 <USB_HC_StartXfer+0x4ec>
 8008084:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	78db      	ldrb	r3, [r3, #3]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d14e      	bne.n	800812e <USB_HC_StartXfer+0x4ea>
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d04a      	beq.n	800812e <USB_HC_StartXfer+0x4ea>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	79db      	ldrb	r3, [r3, #7]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d146      	bne.n	800812e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	7c9b      	ldrb	r3, [r3, #18]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d831      	bhi.n	800810c <USB_HC_StartXfer+0x4c8>
 80080a8:	a201      	add	r2, pc, #4	@ (adr r2, 80080b0 <USB_HC_StartXfer+0x46c>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080e5 	.word	0x080080e5
 80080b8:	080080c1 	.word	0x080080c1
 80080bc:	080080e5 	.word	0x080080e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	3303      	adds	r3, #3
 80080c6:	089b      	lsrs	r3, r3, #2
 80080c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80080ca:	8afa      	ldrh	r2, [r7, #22]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d91c      	bls.n	8008110 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f043 0220 	orr.w	r2, r3, #32
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80080e2:	e015      	b.n	8008110 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	3303      	adds	r3, #3
 80080ea:	089b      	lsrs	r3, r3, #2
 80080ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80080ee:	8afa      	ldrh	r2, [r7, #22]
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d90a      	bls.n	8008114 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	619a      	str	r2, [r3, #24]
        }
        break;
 800810a:	e003      	b.n	8008114 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800810c:	bf00      	nop
 800810e:	e002      	b.n	8008116 <USB_HC_StartXfer+0x4d2>
        break;
 8008110:	bf00      	nop
 8008112:	e000      	b.n	8008116 <USB_HC_StartXfer+0x4d2>
        break;
 8008114:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6999      	ldr	r1, [r3, #24]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	785a      	ldrb	r2, [r3, #1]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	b29b      	uxth	r3, r3
 8008124:	2000      	movs	r0, #0
 8008126:	9000      	str	r0, [sp, #0]
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff f9c9 	bl	80074c0 <USB_WritePacket>
  }

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3728      	adds	r7, #40	@ 0x28
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	b29b      	uxth	r3, r3
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800815a:	b480      	push	{r7}
 800815c:	b089      	sub	sp, #36	@ 0x24
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800816a:	78fb      	ldrb	r3, [r7, #3]
 800816c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	015a      	lsls	r2, r3, #5
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	0c9b      	lsrs	r3, r3, #18
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	4413      	add	r3, r2
 8008190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	0fdb      	lsrs	r3, r3, #31
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	015a      	lsls	r2, r3, #5
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	4413      	add	r3, r2
 80081a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	0fdb      	lsrs	r3, r3, #31
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d10d      	bne.n	80081dc <USB_HC_Halt+0x82>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <USB_HC_Halt+0x82>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d002      	beq.n	80081d8 <USB_HC_Halt+0x7e>
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d101      	bne.n	80081dc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	e0d8      	b.n	800838e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <USB_HC_Halt+0x8e>
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d173      	bne.n	80082d0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	69ba      	ldr	r2, [r7, #24]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008202:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008206:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d14a      	bne.n	80082aa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d133      	bne.n	8008288 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	440a      	add	r2, r1
 8008236:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800823a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800823e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	440a      	add	r2, r1
 8008256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800825a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800825e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	3301      	adds	r3, #1
 8008264:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800826c:	d82e      	bhi.n	80082cc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4413      	add	r3, r2
 8008276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008284:	d0ec      	beq.n	8008260 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008286:	e081      	b.n	800838c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082a8:	e070      	b.n	800838c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	69fa      	ldr	r2, [r7, #28]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082ca:	e05f      	b.n	800838c <USB_HC_Halt+0x232>
            break;
 80082cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082ce:	e05d      	b.n	800838c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d133      	bne.n	8008368 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800831a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800831e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800833a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800833e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3301      	adds	r3, #1
 8008344:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800834c:	d81d      	bhi.n	800838a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008360:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008364:	d0ec      	beq.n	8008340 <USB_HC_Halt+0x1e6>
 8008366:	e011      	b.n	800838c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	440a      	add	r2, r1
 800837e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008382:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e000      	b.n	800838c <USB_HC_Halt+0x232>
          break;
 800838a:	bf00      	nop
    }
  }

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3724      	adds	r7, #36	@ 0x24
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
	...

0800839c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80083ac:	78fb      	ldrb	r3, [r7, #3]
 80083ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	04da      	lsls	r2, r3, #19
 80083b8:	4b15      	ldr	r3, [pc, #84]	@ (8008410 <USB_DoPing+0x74>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	0151      	lsls	r1, r2, #5
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	440a      	add	r2, r1
 80083c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80083e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	1ff80000 	.word	0x1ff80000

08008414 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fe ff8c 	bl	8007346 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800842e:	2110      	movs	r1, #16
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe ffe5 	bl	8007400 <USB_FlushTxFifo>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff f80f 	bl	8007464 <USB_FlushRxFifo>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008450:	2300      	movs	r3, #0
 8008452:	61bb      	str	r3, [r7, #24]
 8008454:	e01f      	b.n	8008496 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	015a      	lsls	r2, r3, #5
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4413      	add	r3, r2
 800845e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800846c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008474:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800847c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4413      	add	r3, r2
 8008486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848a:	461a      	mov	r2, r3
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	3301      	adds	r3, #1
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d9dc      	bls.n	8008456 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e034      	b.n	800850c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d6:	461a      	mov	r2, r3
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084e8:	d80c      	bhi.n	8008504 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008500:	d0ec      	beq.n	80084dc <USB_StopHost+0xc8>
 8008502:	e000      	b.n	8008506 <USB_StopHost+0xf2>
        break;
 8008504:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3301      	adds	r3, #1
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b0f      	cmp	r3, #15
 8008510:	d9c7      	bls.n	80084a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008518:	461a      	mov	r2, r3
 800851a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800851e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008526:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7fe fefb 	bl	8007324 <USB_EnableGlobalInt>

  return ret;
 800852e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3720      	adds	r7, #32
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008538:	b590      	push	{r4, r7, lr}
 800853a:	b089      	sub	sp, #36	@ 0x24
 800853c:	af04      	add	r7, sp, #16
 800853e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008540:	2301      	movs	r3, #1
 8008542:	2202      	movs	r2, #2
 8008544:	2102      	movs	r1, #2
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc85 	bl	8008e56 <USBH_FindInterface>
 800854c:	4603      	mov	r3, r0
 800854e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008550:	7bfb      	ldrb	r3, [r7, #15]
 8008552:	2bff      	cmp	r3, #255	@ 0xff
 8008554:	d002      	beq.n	800855c <USBH_CDC_InterfaceInit+0x24>
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d901      	bls.n	8008560 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800855c:	2302      	movs	r3, #2
 800855e:	e13d      	b.n	80087dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc5a 	bl	8008e1e <USBH_SelectInterface>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008574:	2302      	movs	r3, #2
 8008576:	e131      	b.n	80087dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800857e:	2050      	movs	r0, #80	@ 0x50
 8008580:	f002 fb84 	bl	800ac8c <malloc>
 8008584:	4603      	mov	r3, r0
 8008586:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008598:	2302      	movs	r3, #2
 800859a:	e11f      	b.n	80087dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800859c:	2250      	movs	r2, #80	@ 0x50
 800859e:	2100      	movs	r1, #0
 80085a0:	68b8      	ldr	r0, [r7, #8]
 80085a2:	f002 fc31 	bl	800ae08 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	211a      	movs	r1, #26
 80085ac:	fb01 f303 	mul.w	r3, r1, r3
 80085b0:	4413      	add	r3, r2
 80085b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	b25b      	sxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	da15      	bge.n	80085ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80085be:	7bfb      	ldrb	r3, [r7, #15]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	211a      	movs	r1, #26
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	4413      	add	r3, r2
 80085ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80085ce:	781a      	ldrb	r2, [r3, #0]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085d4:	7bfb      	ldrb	r3, [r7, #15]
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	211a      	movs	r1, #26
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	4413      	add	r3, r2
 80085e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80085e4:	881a      	ldrh	r2, [r3, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	785b      	ldrb	r3, [r3, #1]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 ffbe 	bl	800a572 <USBH_AllocPipe>
 80085f6:	4603      	mov	r3, r0
 80085f8:	461a      	mov	r2, r3
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	7819      	ldrb	r1, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	7858      	ldrb	r0, [r3, #1]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	8952      	ldrh	r2, [r2, #10]
 8008616:	9202      	str	r2, [sp, #8]
 8008618:	2203      	movs	r2, #3
 800861a:	9201      	str	r2, [sp, #4]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4623      	mov	r3, r4
 8008620:	4602      	mov	r2, r0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f001 ff76 	bl	800a514 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f002 fa85 	bl	800ab40 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008636:	2300      	movs	r3, #0
 8008638:	2200      	movs	r2, #0
 800863a:	210a      	movs	r1, #10
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fc0a 	bl	8008e56 <USBH_FindInterface>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2bff      	cmp	r3, #255	@ 0xff
 800864a:	d002      	beq.n	8008652 <USBH_CDC_InterfaceInit+0x11a>
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d901      	bls.n	8008656 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008652:	2302      	movs	r3, #2
 8008654:	e0c2      	b.n	80087dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	211a      	movs	r1, #26
 800865c:	fb01 f303 	mul.w	r3, r1, r3
 8008660:	4413      	add	r3, r2
 8008662:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	b25b      	sxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	da16      	bge.n	800869c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	211a      	movs	r1, #26
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	211a      	movs	r1, #26
 800868a:	fb01 f303 	mul.w	r3, r1, r3
 800868e:	4413      	add	r3, r2
 8008690:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008694:	881a      	ldrh	r2, [r3, #0]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	835a      	strh	r2, [r3, #26]
 800869a:	e015      	b.n	80086c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	211a      	movs	r1, #26
 80086a2:	fb01 f303 	mul.w	r3, r1, r3
 80086a6:	4413      	add	r3, r2
 80086a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	211a      	movs	r1, #26
 80086b8:	fb01 f303 	mul.w	r3, r1, r3
 80086bc:	4413      	add	r3, r2
 80086be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80086c2:	881a      	ldrh	r2, [r3, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	211a      	movs	r1, #26
 80086ce:	fb01 f303 	mul.w	r3, r1, r3
 80086d2:	4413      	add	r3, r2
 80086d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da16      	bge.n	800870e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	211a      	movs	r1, #26
 80086e6:	fb01 f303 	mul.w	r3, r1, r3
 80086ea:	4413      	add	r3, r2
 80086ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80086f0:	781a      	ldrb	r2, [r3, #0]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	211a      	movs	r1, #26
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	4413      	add	r3, r2
 8008702:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008706:	881a      	ldrh	r2, [r3, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	835a      	strh	r2, [r3, #26]
 800870c:	e015      	b.n	800873a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	211a      	movs	r1, #26
 8008714:	fb01 f303 	mul.w	r3, r1, r3
 8008718:	4413      	add	r3, r2
 800871a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	211a      	movs	r1, #26
 800872a:	fb01 f303 	mul.w	r3, r1, r3
 800872e:	4413      	add	r3, r2
 8008730:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008734:	881a      	ldrh	r2, [r3, #0]
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	7b9b      	ldrb	r3, [r3, #14]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 ff16 	bl	800a572 <USBH_AllocPipe>
 8008746:	4603      	mov	r3, r0
 8008748:	461a      	mov	r2, r3
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	7bdb      	ldrb	r3, [r3, #15]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 ff0c 	bl	800a572 <USBH_AllocPipe>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	7b59      	ldrb	r1, [r3, #13]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	7b98      	ldrb	r0, [r3, #14]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	8b12      	ldrh	r2, [r2, #24]
 800877a:	9202      	str	r2, [sp, #8]
 800877c:	2202      	movs	r2, #2
 800877e:	9201      	str	r2, [sp, #4]
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4623      	mov	r3, r4
 8008784:	4602      	mov	r2, r0
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f001 fec4 	bl	800a514 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	7b19      	ldrb	r1, [r3, #12]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	7bd8      	ldrb	r0, [r3, #15]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	8b52      	ldrh	r2, [r2, #26]
 80087a4:	9202      	str	r2, [sp, #8]
 80087a6:	2202      	movs	r2, #2
 80087a8:	9201      	str	r2, [sp, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	4623      	mov	r3, r4
 80087ae:	4602      	mov	r2, r0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f001 feaf 	bl	800a514 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	7b5b      	ldrb	r3, [r3, #13]
 80087c2:	2200      	movs	r2, #0
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f002 f9ba 	bl	800ab40 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	7b1b      	ldrb	r3, [r3, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f002 f9b3 	bl	800ab40 <USBH_LL_SetToggle>

  return USBH_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd90      	pop	{r4, r7, pc}

080087e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087f2:	69db      	ldr	r3, [r3, #28]
 80087f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00e      	beq.n	800881c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 fea4 	bl	800a552 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 fecf 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	7b1b      	ldrb	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00e      	beq.n	8008842 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	7b1b      	ldrb	r3, [r3, #12]
 8008828:	4619      	mov	r1, r3
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fe91 	bl	800a552 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	7b1b      	ldrb	r3, [r3, #12]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f001 febc 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	7b5b      	ldrb	r3, [r3, #13]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00e      	beq.n	8008868 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	7b5b      	ldrb	r3, [r3, #13]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fe7e 	bl	800a552 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	7b5b      	ldrb	r3, [r3, #13]
 800885a:	4619      	mov	r1, r3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f001 fea9 	bl	800a5b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00b      	beq.n	800888c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800887a:	69db      	ldr	r3, [r3, #28]
 800887c:	4618      	mov	r0, r3
 800887e:	f002 fa0d 	bl	800ac9c <free>
    phost->pActiveClass->pData = 0U;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008888:	2200      	movs	r2, #0
 800888a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	3340      	adds	r3, #64	@ 0x40
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f8b1 	bl	8008a16 <GetLineCoding>
 80088b4:	4603      	mov	r3, r0
 80088b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d105      	bne.n	80088ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088c4:	2102      	movs	r1, #2
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80088ca:	7afb      	ldrb	r3, [r7, #11]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	d877      	bhi.n	80089e8 <USBH_CDC_Process+0x114>
 80088f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008900 <USBH_CDC_Process+0x2c>)
 80088fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fe:	bf00      	nop
 8008900:	08008915 	.word	0x08008915
 8008904:	0800891b 	.word	0x0800891b
 8008908:	0800894b 	.word	0x0800894b
 800890c:	080089bf 	.word	0x080089bf
 8008910:	080089cd 	.word	0x080089cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
      break;
 8008918:	e06d      	b.n	80089f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f897 	bl	8008a54 <SetLineCoding>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800892a:	7bbb      	ldrb	r3, [r7, #14]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008938:	e058      	b.n	80089ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d055      	beq.n	80089ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2204      	movs	r2, #4
 8008944:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008948:	e050      	b.n	80089ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	3340      	adds	r3, #64	@ 0x40
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f860 	bl	8008a16 <GetLineCoding>
 8008956:	4603      	mov	r3, r0
 8008958:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d126      	bne.n	80089ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008972:	791b      	ldrb	r3, [r3, #4]
 8008974:	429a      	cmp	r2, r3
 8008976:	d13b      	bne.n	80089f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008982:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008984:	429a      	cmp	r2, r3
 8008986:	d133      	bne.n	80089f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008992:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008994:	429a      	cmp	r2, r3
 8008996:	d12b      	bne.n	80089f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d124      	bne.n	80089f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f958 	bl	8008c5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80089ac:	e020      	b.n	80089f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d01d      	beq.n	80089f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2204      	movs	r2, #4
 80089b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80089bc:	e018      	b.n	80089f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f867 	bl	8008a92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8da 	bl	8008b7e <CDC_ProcessReception>
      break;
 80089ca:	e014      	b.n	80089f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 f81a 	bl	8009a08 <USBH_ClrFeature>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10a      	bne.n	80089f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80089e6:	e005      	b.n	80089f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80089e8:	bf00      	nop
 80089ea:	e004      	b.n	80089f6 <USBH_CDC_Process+0x122>
      break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <USBH_CDC_Process+0x122>
      break;
 80089f0:	bf00      	nop
 80089f2:	e000      	b.n	80089f6 <USBH_CDC_Process+0x122>
      break;
 80089f4:	bf00      	nop

  }

  return status;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	22a1      	movs	r2, #161	@ 0xa1
 8008a24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2221      	movs	r2, #33	@ 0x21
 8008a2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2207      	movs	r2, #7
 8008a3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2207      	movs	r2, #7
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 fb14 	bl	800a072 <USBH_CtlReq>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2221      	movs	r2, #33	@ 0x21
 8008a62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2207      	movs	r2, #7
 8008a7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2207      	movs	r2, #7
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 faf5 	bl	800a072 <USBH_CtlReq>
 8008a88:	4603      	mov	r3, r0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b086      	sub	sp, #24
 8008a96:	af02      	add	r7, sp, #8
 8008a98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d002      	beq.n	8008ab8 <CDC_ProcessTransmission+0x26>
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d023      	beq.n	8008afe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008ab6:	e05e      	b.n	8008b76 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	8b12      	ldrh	r2, [r2, #24]
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d90b      	bls.n	8008adc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	69d9      	ldr	r1, [r3, #28]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8b1a      	ldrh	r2, [r3, #24]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7b5b      	ldrb	r3, [r3, #13]
 8008ad0:	2001      	movs	r0, #1
 8008ad2:	9000      	str	r0, [sp, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fcda 	bl	800a48e <USBH_BulkSendData>
 8008ada:	e00b      	b.n	8008af4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	7b5b      	ldrb	r3, [r3, #13]
 8008aea:	2001      	movs	r0, #1
 8008aec:	9000      	str	r0, [sp, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fccd 	bl	800a48e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008afc:	e03b      	b.n	8008b76 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	7b5b      	ldrb	r3, [r3, #13]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fff1 	bl	800aaec <USBH_LL_GetURBState>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008b0e:	7afb      	ldrb	r3, [r7, #11]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d128      	bne.n	8008b66 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	8b12      	ldrh	r2, [r2, #24]
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d90e      	bls.n	8008b3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	8b12      	ldrh	r2, [r2, #24]
 8008b28:	1a9a      	subs	r2, r3, r2
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	8b12      	ldrh	r2, [r2, #24]
 8008b36:	441a      	add	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	61da      	str	r2, [r3, #28]
 8008b3c:	e002      	b.n	8008b44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d004      	beq.n	8008b56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b54:	e00e      	b.n	8008b74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f868 	bl	8008c34 <USBH_CDC_TransmitCallback>
      break;
 8008b64:	e006      	b.n	8008b74 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d103      	bne.n	8008b74 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b74:	bf00      	nop
  }
}
 8008b76:	bf00      	nop
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b8c:	69db      	ldr	r3, [r3, #28]
 8008b8e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b90:	2300      	movs	r3, #0
 8008b92:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d002      	beq.n	8008ba4 <CDC_ProcessReception+0x26>
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d00e      	beq.n	8008bc0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ba2:	e043      	b.n	8008c2c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	6a19      	ldr	r1, [r3, #32]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	8b5a      	ldrh	r2, [r3, #26]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	7b1b      	ldrb	r3, [r3, #12]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 fc91 	bl	800a4d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2204      	movs	r2, #4
 8008bba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008bbe:	e035      	b.n	8008c2c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	7b1b      	ldrb	r3, [r3, #12]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f001 ff90 	bl	800aaec <USBH_LL_GetURBState>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008bd0:	7cfb      	ldrb	r3, [r7, #19]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d129      	bne.n	8008c2a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	7b1b      	ldrb	r3, [r3, #12]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 fef3 	bl	800a9c8 <USBH_LL_GetLastXferSize>
 8008be2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d016      	beq.n	8008c1c <CDC_ProcessReception+0x9e>
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	8b5b      	ldrh	r3, [r3, #26]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d110      	bne.n	8008c1c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	441a      	add	r2, r3
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2203      	movs	r2, #3
 8008c16:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008c1a:	e006      	b.n	8008c2a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f80f 	bl	8008c48 <USBH_CDC_ReceiveCallback>
      break;
 8008c2a:	bf00      	nop
  }
}
 8008c2c:	bf00      	nop
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008c84:	2302      	movs	r3, #2
 8008c86:	e029      	b.n	8008cdc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	79fa      	ldrb	r2, [r7, #7]
 8008c8c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 f81f 	bl	8008ce4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f001 fdc3 	bl	800a860 <USBH_LL_Init>

  return USBH_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e009      	b.n	8008d0a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	33e0      	adds	r3, #224	@ 0xe0
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3301      	adds	r3, #1
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b0f      	cmp	r3, #15
 8008d0e:	d9f2      	bls.n	8008cf6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d10:	2300      	movs	r3, #0
 8008d12:	60fb      	str	r3, [r7, #12]
 8008d14:	e009      	b.n	8008d2a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d30:	d3f1      	bcc.n	8008d16 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2240      	movs	r2, #64	@ 0x40
 8008d56:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	331c      	adds	r3, #28
 8008d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d86:	2100      	movs	r1, #0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f002 f83d 	bl	800ae08 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f002 f834 	bl	800ae08 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008da6:	2212      	movs	r2, #18
 8008da8:	2100      	movs	r1, #0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f002 f82c 	bl	800ae08 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008db6:	223e      	movs	r2, #62	@ 0x3e
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f002 f824 	bl	800ae08 <memset>

  return USBH_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d016      	beq.n	8008e0c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10e      	bne.n	8008e06 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008dee:	1c59      	adds	r1, r3, #1
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	33de      	adds	r3, #222	@ 0xde
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
 8008e04:	e004      	b.n	8008e10 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008e06:	2302      	movs	r3, #2
 8008e08:	73fb      	strb	r3, [r7, #15]
 8008e0a:	e001      	b.n	8008e10 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3714      	adds	r7, #20
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d204      	bcs.n	8008e44 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008e42:	e001      	b.n	8008e48 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008e44:	2302      	movs	r3, #2
 8008e46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b087      	sub	sp, #28
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	4608      	mov	r0, r1
 8008e60:	4611      	mov	r1, r2
 8008e62:	461a      	mov	r2, r3
 8008e64:	4603      	mov	r3, r0
 8008e66:	70fb      	strb	r3, [r7, #3]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70bb      	strb	r3, [r7, #2]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e70:	2300      	movs	r3, #0
 8008e72:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e74:	2300      	movs	r3, #0
 8008e76:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008e7e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e80:	e025      	b.n	8008ece <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	221a      	movs	r2, #26
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	3302      	adds	r3, #2
 8008e92:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	795b      	ldrb	r3, [r3, #5]
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d002      	beq.n	8008ea4 <USBH_FindInterface+0x4e>
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	2bff      	cmp	r3, #255	@ 0xff
 8008ea2:	d111      	bne.n	8008ec8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ea8:	78ba      	ldrb	r2, [r7, #2]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d002      	beq.n	8008eb4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008eae:	78bb      	ldrb	r3, [r7, #2]
 8008eb0:	2bff      	cmp	r3, #255	@ 0xff
 8008eb2:	d109      	bne.n	8008ec8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008eb8:	787a      	ldrb	r2, [r7, #1]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d002      	beq.n	8008ec4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008ebe:	787b      	ldrb	r3, [r7, #1]
 8008ec0:	2bff      	cmp	r3, #255	@ 0xff
 8008ec2:	d101      	bne.n	8008ec8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	e006      	b.n	8008ed6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d9d6      	bls.n	8008e82 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008ed4:	23ff      	movs	r3, #255	@ 0xff
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b082      	sub	sp, #8
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fcf4 	bl	800a8d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f001 fe0d 	bl	800ab12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d102      	bne.n	8008f26 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2203      	movs	r2, #3
 8008f24:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b0b      	cmp	r3, #11
 8008f2e:	f200 81bb 	bhi.w	80092a8 <USBH_Process+0x3a4>
 8008f32:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <USBH_Process+0x34>)
 8008f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f38:	08008f69 	.word	0x08008f69
 8008f3c:	08008f9b 	.word	0x08008f9b
 8008f40:	08009003 	.word	0x08009003
 8008f44:	08009243 	.word	0x08009243
 8008f48:	080092a9 	.word	0x080092a9
 8008f4c:	080090a3 	.word	0x080090a3
 8008f50:	080091e9 	.word	0x080091e9
 8008f54:	080090d9 	.word	0x080090d9
 8008f58:	080090f9 	.word	0x080090f9
 8008f5c:	08009117 	.word	0x08009117
 8008f60:	0800915b 	.word	0x0800915b
 8008f64:	0800922b 	.word	0x0800922b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 819b 	beq.w	80092ac <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f7c:	20c8      	movs	r0, #200	@ 0xc8
 8008f7e:	f001 fe12 	bl	800aba6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 fd05 	bl	800a992 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f98:	e188      	b.n	80092ac <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d107      	bne.n	8008fb4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fb2:	e18a      	b.n	80092ca <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008fba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fbe:	d914      	bls.n	8008fea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	d903      	bls.n	8008fe2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	220d      	movs	r2, #13
 8008fde:	701a      	strb	r2, [r3, #0]
      break;
 8008fe0:	e173      	b.n	80092ca <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
      break;
 8008fe8:	e16f      	b.n	80092ca <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008ff0:	f103 020a 	add.w	r2, r3, #10
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008ffa:	200a      	movs	r0, #10
 8008ffc:	f001 fdd3 	bl	800aba6 <USBH_Delay>
      break;
 8009000:	e163      	b.n	80092ca <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009008:	2b00      	cmp	r3, #0
 800900a:	d005      	beq.n	8009018 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009012:	2104      	movs	r1, #4
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009018:	2064      	movs	r0, #100	@ 0x64
 800901a:	f001 fdc4 	bl	800aba6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fc90 	bl	800a944 <USBH_LL_GetSpeed>
 8009024:	4603      	mov	r3, r0
 8009026:	461a      	mov	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2205      	movs	r2, #5
 8009032:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009034:	2100      	movs	r1, #0
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fa9b 	bl	800a572 <USBH_AllocPipe>
 800903c:	4603      	mov	r3, r0
 800903e:	461a      	mov	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009044:	2180      	movs	r1, #128	@ 0x80
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fa93 	bl	800a572 <USBH_AllocPipe>
 800904c:	4603      	mov	r3, r0
 800904e:	461a      	mov	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7919      	ldrb	r1, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009068:	9202      	str	r2, [sp, #8]
 800906a:	2200      	movs	r2, #0
 800906c:	9201      	str	r2, [sp, #4]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	4603      	mov	r3, r0
 8009072:	2280      	movs	r2, #128	@ 0x80
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 fa4d 	bl	800a514 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7959      	ldrb	r1, [r3, #5]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800908e:	9202      	str	r2, [sp, #8]
 8009090:	2200      	movs	r2, #0
 8009092:	9201      	str	r2, [sp, #4]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	4603      	mov	r3, r0
 8009098:	2200      	movs	r2, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 fa3a 	bl	800a514 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090a0:	e113      	b.n	80092ca <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f916 	bl	80092d4 <USBH_HandleEnum>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f040 80fd 	bne.w	80092b0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d103      	bne.n	80090d0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2208      	movs	r2, #8
 80090cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090ce:	e0ef      	b.n	80092b0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2207      	movs	r2, #7
 80090d4:	701a      	strb	r2, [r3, #0]
      break;
 80090d6:	e0eb      	b.n	80092b0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 80e8 	beq.w	80092b4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090ea:	2101      	movs	r1, #1
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2208      	movs	r2, #8
 80090f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80090f6:	e0dd      	b.n	80092b4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc3a 	bl	800997a <USBH_SetCfg>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 80d5 	bne.w	80092b8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2209      	movs	r2, #9
 8009112:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009114:	e0d0      	b.n	80092b8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d016      	beq.n	8009152 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009124:	2101      	movs	r1, #1
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fc4a 	bl	80099c0 <USBH_SetFeature>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	220a      	movs	r2, #10
 800913c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800913e:	e0bd      	b.n	80092bc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009140:	7bbb      	ldrb	r3, [r7, #14]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b03      	cmp	r3, #3
 8009146:	f040 80b9 	bne.w	80092bc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	220a      	movs	r2, #10
 800914e:	701a      	strb	r2, [r3, #0]
      break;
 8009150:	e0b4      	b.n	80092bc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	220a      	movs	r2, #10
 8009156:	701a      	strb	r2, [r3, #0]
      break;
 8009158:	e0b0      	b.n	80092bc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 80ad 	beq.w	80092c0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	e016      	b.n	80091a2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009174:	7bfa      	ldrb	r2, [r7, #15]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	32de      	adds	r2, #222	@ 0xde
 800917a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800917e:	791a      	ldrb	r2, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009186:	429a      	cmp	r2, r3
 8009188:	d108      	bne.n	800919c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800918a:	7bfa      	ldrb	r2, [r7, #15]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	32de      	adds	r2, #222	@ 0xde
 8009190:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800919a:	e005      	b.n	80091a8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	3301      	adds	r3, #1
 80091a0:	73fb      	strb	r3, [r7, #15]
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0e5      	beq.n	8009174 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d109      	bne.n	80091d8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2206      	movs	r2, #6
 80091c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091d0:	2103      	movs	r1, #3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091d6:	e073      	b.n	80092c0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	220d      	movs	r2, #13
 80091dc:	701a      	strb	r2, [r3, #0]
      break;
 80091de:	e06f      	b.n	80092c0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	220d      	movs	r2, #13
 80091e4:	701a      	strb	r2, [r3, #0]
      break;
 80091e6:	e06b      	b.n	80092c0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d017      	beq.n	8009222 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	4798      	blx	r3
 80091fe:	4603      	mov	r3, r0
 8009200:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	220b      	movs	r2, #11
 800920e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009210:	e058      	b.n	80092c4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009212:	7bbb      	ldrb	r3, [r7, #14]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d154      	bne.n	80092c4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	701a      	strb	r2, [r3, #0]
      break;
 8009220:	e050      	b.n	80092c4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	220d      	movs	r2, #13
 8009226:	701a      	strb	r2, [r3, #0]
      break;
 8009228:	e04c      	b.n	80092c4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d049      	beq.n	80092c8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
      }
      break;
 8009240:	e042      	b.n	80092c8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff fd4a 	bl	8008ce4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800927e:	2105      	movs	r1, #5
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	d107      	bne.n	80092a0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff fe22 	bl	8008ee2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800929e:	e014      	b.n	80092ca <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f001 fb19 	bl	800a8d8 <USBH_LL_Start>
      break;
 80092a6:	e010      	b.n	80092ca <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80092a8:	bf00      	nop
 80092aa:	e00e      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092ac:	bf00      	nop
 80092ae:	e00c      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092b0:	bf00      	nop
 80092b2:	e00a      	b.n	80092ca <USBH_Process+0x3c6>
    break;
 80092b4:	bf00      	nop
 80092b6:	e008      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092b8:	bf00      	nop
 80092ba:	e006      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092bc:	bf00      	nop
 80092be:	e004      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092c0:	bf00      	nop
 80092c2:	e002      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092c4:	bf00      	nop
 80092c6:	e000      	b.n	80092ca <USBH_Process+0x3c6>
      break;
 80092c8:	bf00      	nop
  }
  return USBH_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af04      	add	r7, sp, #16
 80092da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80092dc:	2301      	movs	r3, #1
 80092de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80092e0:	2301      	movs	r3, #1
 80092e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	2b07      	cmp	r3, #7
 80092ea:	f200 81bd 	bhi.w	8009668 <USBH_HandleEnum+0x394>
 80092ee:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <USBH_HandleEnum+0x20>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009315 	.word	0x08009315
 80092f8:	080093cf 	.word	0x080093cf
 80092fc:	08009439 	.word	0x08009439
 8009300:	080094c3 	.word	0x080094c3
 8009304:	0800952d 	.word	0x0800952d
 8009308:	0800959d 	.word	0x0800959d
 800930c:	080095e3 	.word	0x080095e3
 8009310:	08009629 	.word	0x08009629
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009314:	2108      	movs	r1, #8
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa4c 	bl	80097b4 <USBH_Get_DevDesc>
 800931c:	4603      	mov	r3, r0
 800931e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d12e      	bne.n	8009384 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7919      	ldrb	r1, [r3, #4]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800934a:	9202      	str	r2, [sp, #8]
 800934c:	2200      	movs	r2, #0
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	4603      	mov	r3, r0
 8009354:	2280      	movs	r2, #128	@ 0x80
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f001 f8dc 	bl	800a514 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	7959      	ldrb	r1, [r3, #5]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	9201      	str	r2, [sp, #4]
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	4603      	mov	r3, r0
 800937a:	2200      	movs	r2, #0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f8c9 	bl	800a514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009382:	e173      	b.n	800966c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	2b03      	cmp	r3, #3
 8009388:	f040 8170 	bne.w	800966c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009392:	3301      	adds	r3, #1
 8009394:	b2da      	uxtb	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093a2:	2b03      	cmp	r3, #3
 80093a4:	d903      	bls.n	80093ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	220d      	movs	r2, #13
 80093aa:	701a      	strb	r2, [r3, #0]
      break;
 80093ac:	e15e      	b.n	800966c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	795b      	ldrb	r3, [r3, #5]
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 f8fd 	bl	800a5b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	791b      	ldrb	r3, [r3, #4]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f8f7 	bl	800a5b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]
      break;
 80093cc:	e14e      	b.n	800966c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80093ce:	2112      	movs	r1, #18
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9ef 	bl	80097b4 <USBH_Get_DevDesc>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d103      	bne.n	80093e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80093e6:	e143      	b.n	8009670 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	f040 8140 	bne.w	8009670 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80093f6:	3301      	adds	r3, #1
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009406:	2b03      	cmp	r3, #3
 8009408:	d903      	bls.n	8009412 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	220d      	movs	r2, #13
 800940e:	701a      	strb	r2, [r3, #0]
      break;
 8009410:	e12e      	b.n	8009670 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	795b      	ldrb	r3, [r3, #5]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 f8cb 	bl	800a5b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	791b      	ldrb	r3, [r3, #4]
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 f8c5 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	701a      	strb	r2, [r3, #0]
      break;
 8009436:	e11b      	b.n	8009670 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009438:	2101      	movs	r1, #1
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa79 	bl	8009932 <USBH_SetAddress>
 8009440:	4603      	mov	r3, r0
 8009442:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d130      	bne.n	80094ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800944a:	2002      	movs	r0, #2
 800944c:	f001 fbab 	bl	800aba6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2203      	movs	r2, #3
 800945c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	7919      	ldrb	r1, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009472:	9202      	str	r2, [sp, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	9201      	str	r2, [sp, #4]
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4603      	mov	r3, r0
 800947c:	2280      	movs	r2, #128	@ 0x80
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 f848 	bl	800a514 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7959      	ldrb	r1, [r3, #5]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009498:	9202      	str	r2, [sp, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	9201      	str	r2, [sp, #4]
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	4603      	mov	r3, r0
 80094a2:	2200      	movs	r2, #0
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 f835 	bl	800a514 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094aa:	e0e3      	b.n	8009674 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	f040 80e0 	bne.w	8009674 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220d      	movs	r2, #13
 80094b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	705a      	strb	r2, [r3, #1]
      break;
 80094c0:	e0d8      	b.n	8009674 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80094c2:	2109      	movs	r1, #9
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f9a1 	bl	800980c <USBH_Get_CfgDesc>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2204      	movs	r2, #4
 80094d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80094da:	e0cd      	b.n	8009678 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	f040 80ca 	bne.w	8009678 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094ea:	3301      	adds	r3, #1
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d903      	bls.n	8009506 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	220d      	movs	r2, #13
 8009502:	701a      	strb	r2, [r3, #0]
      break;
 8009504:	e0b8      	b.n	8009678 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	795b      	ldrb	r3, [r3, #5]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f851 	bl	800a5b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	791b      	ldrb	r3, [r3, #4]
 8009516:	4619      	mov	r1, r3
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f84b 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
      break;
 800952a:	e0a5      	b.n	8009678 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f969 	bl	800980c <USBH_Get_CfgDesc>
 800953a:	4603      	mov	r3, r0
 800953c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800953e:	7bbb      	ldrb	r3, [r7, #14]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2205      	movs	r2, #5
 8009548:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800954a:	e097      	b.n	800967c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b03      	cmp	r3, #3
 8009550:	f040 8094 	bne.w	800967c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800955a:	3301      	adds	r3, #1
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800956a:	2b03      	cmp	r3, #3
 800956c:	d903      	bls.n	8009576 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	220d      	movs	r2, #13
 8009572:	701a      	strb	r2, [r3, #0]
      break;
 8009574:	e082      	b.n	800967c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	795b      	ldrb	r3, [r3, #5]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 f819 	bl	800a5b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	791b      	ldrb	r3, [r3, #4]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f001 f813 	bl	800a5b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
      break;
 800959a:	e06f      	b.n	800967c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d019      	beq.n	80095da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80095b2:	23ff      	movs	r3, #255	@ 0xff
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f953 	bl	8009860 <USBH_Get_StringDesc>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80095be:	7bbb      	ldrb	r3, [r7, #14]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d103      	bne.n	80095cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2206      	movs	r2, #6
 80095c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80095ca:	e059      	b.n	8009680 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	2b03      	cmp	r3, #3
 80095d0:	d156      	bne.n	8009680 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2206      	movs	r2, #6
 80095d6:	705a      	strb	r2, [r3, #1]
      break;
 80095d8:	e052      	b.n	8009680 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2206      	movs	r2, #6
 80095de:	705a      	strb	r2, [r3, #1]
      break;
 80095e0:	e04e      	b.n	8009680 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d019      	beq.n	8009620 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80095f8:	23ff      	movs	r3, #255	@ 0xff
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 f930 	bl	8009860 <USBH_Get_StringDesc>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2207      	movs	r2, #7
 800960e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009610:	e038      	b.n	8009684 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	2b03      	cmp	r3, #3
 8009616:	d135      	bne.n	8009684 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2207      	movs	r2, #7
 800961c:	705a      	strb	r2, [r3, #1]
      break;
 800961e:	e031      	b.n	8009684 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2207      	movs	r2, #7
 8009624:	705a      	strb	r2, [r3, #1]
      break;
 8009626:	e02d      	b.n	8009684 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800962e:	2b00      	cmp	r3, #0
 8009630:	d017      	beq.n	8009662 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800963e:	23ff      	movs	r3, #255	@ 0xff
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f90d 	bl	8009860 <USBH_Get_StringDesc>
 8009646:	4603      	mov	r3, r0
 8009648:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800964a:	7bbb      	ldrb	r3, [r7, #14]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009654:	e018      	b.n	8009688 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009656:	7bbb      	ldrb	r3, [r7, #14]
 8009658:	2b03      	cmp	r3, #3
 800965a:	d115      	bne.n	8009688 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
      break;
 8009660:	e012      	b.n	8009688 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
      break;
 8009666:	e00f      	b.n	8009688 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009668:	bf00      	nop
 800966a:	e00e      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 800966c:	bf00      	nop
 800966e:	e00c      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009670:	bf00      	nop
 8009672:	e00a      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009674:	bf00      	nop
 8009676:	e008      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009678:	bf00      	nop
 800967a:	e006      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 800967c:	bf00      	nop
 800967e:	e004      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009680:	bf00      	nop
 8009682:	e002      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009684:	bf00      	nop
 8009686:	e000      	b.n	800968a <USBH_HandleEnum+0x3b6>
      break;
 8009688:	bf00      	nop
  }
  return Status;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f804 	bl	80096d6 <USBH_HandleSof>
}
 80096ce:	bf00      	nop
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b0b      	cmp	r3, #11
 80096e6:	d10a      	bne.n	80096fe <USBH_HandleSof+0x28>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	4798      	blx	r3
  }
}
 80096fe:	bf00      	nop
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009716:	bf00      	nop
}
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009732:	bf00      	nop
}
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f8be 	bl	800a90e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	791b      	ldrb	r3, [r3, #4]
 8009796:	4619      	mov	r1, r3
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 ff0b 	bl	800a5b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	795b      	ldrb	r3, [r3, #5]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 ff05 	bl	800a5b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3708      	adds	r7, #8
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	460b      	mov	r3, r1
 80097be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80097c0:	887b      	ldrh	r3, [r7, #2]
 80097c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097c6:	d901      	bls.n	80097cc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e01b      	b.n	8009804 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80097d2:	887b      	ldrh	r3, [r7, #2]
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	4613      	mov	r3, r2
 80097d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f872 	bl	80098c8 <USBH_GetDescriptor>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80097f4:	887a      	ldrh	r2, [r7, #2]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f929 	bl	8009a50 <USBH_ParseDevDesc>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009802:	7bfb      	ldrb	r3, [r7, #15]
}
 8009804:	4618      	mov	r0, r3
 8009806:	3710      	adds	r7, #16
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af02      	add	r7, sp, #8
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	460b      	mov	r3, r1
 8009816:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	331c      	adds	r3, #28
 800981c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800981e:	887b      	ldrh	r3, [r7, #2]
 8009820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009824:	d901      	bls.n	800982a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009826:	2303      	movs	r3, #3
 8009828:	e016      	b.n	8009858 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800982a:	887b      	ldrh	r3, [r7, #2]
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009834:	2100      	movs	r1, #0
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f846 	bl	80098c8 <USBH_GetDescriptor>
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d107      	bne.n	8009856 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009846:	887b      	ldrh	r3, [r7, #2]
 8009848:	461a      	mov	r2, r3
 800984a:	68b9      	ldr	r1, [r7, #8]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 f9af 	bl	8009bb0 <USBH_ParseCfgDesc>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009856:	7bfb      	ldrb	r3, [r7, #15]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af02      	add	r7, sp, #8
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	461a      	mov	r2, r3
 800986c:	460b      	mov	r3, r1
 800986e:	72fb      	strb	r3, [r7, #11]
 8009870:	4613      	mov	r3, r2
 8009872:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009874:	893b      	ldrh	r3, [r7, #8]
 8009876:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800987a:	d802      	bhi.n	8009882 <USBH_Get_StringDesc+0x22>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d101      	bne.n	8009886 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009882:	2303      	movs	r3, #3
 8009884:	e01c      	b.n	80098c0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009886:	7afb      	ldrb	r3, [r7, #11]
 8009888:	b29b      	uxth	r3, r3
 800988a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800988e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009896:	893b      	ldrh	r3, [r7, #8]
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	460b      	mov	r3, r1
 800989c:	2100      	movs	r1, #0
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 f812 	bl	80098c8 <USBH_GetDescriptor>
 80098a4:	4603      	mov	r3, r0
 80098a6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d107      	bne.n	80098be <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80098b4:	893a      	ldrh	r2, [r7, #8]
 80098b6:	6879      	ldr	r1, [r7, #4]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fb8d 	bl	8009fd8 <USBH_ParseStringDesc>
  }

  return status;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	72fb      	strb	r3, [r7, #11]
 80098d6:	4613      	mov	r3, r2
 80098d8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	789b      	ldrb	r3, [r3, #2]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d11c      	bne.n	800991c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80098e2:	7afb      	ldrb	r3, [r7, #11]
 80098e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2206      	movs	r2, #6
 80098f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	893a      	ldrh	r2, [r7, #8]
 80098f8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80098fa:	893b      	ldrh	r3, [r7, #8]
 80098fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009900:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009904:	d104      	bne.n	8009910 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f240 4209 	movw	r2, #1033	@ 0x409
 800990c:	829a      	strh	r2, [r3, #20]
 800990e:	e002      	b.n	8009916 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8b3a      	ldrh	r2, [r7, #24]
 800991a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800991c:	8b3b      	ldrh	r3, [r7, #24]
 800991e:	461a      	mov	r2, r3
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fba5 	bl	800a072 <USBH_CtlReq>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	460b      	mov	r3, r1
 800993c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	789b      	ldrb	r3, [r3, #2]
 8009942:	2b01      	cmp	r3, #1
 8009944:	d10f      	bne.n	8009966 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2205      	movs	r2, #5
 8009950:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fb81 	bl	800a072 <USBH_CtlReq>
 8009970:	4603      	mov	r3, r0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	460b      	mov	r3, r1
 8009984:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	789b      	ldrb	r3, [r3, #2]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10e      	bne.n	80099ac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2209      	movs	r2, #9
 8009998:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	887a      	ldrh	r2, [r7, #2]
 800999e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099ac:	2200      	movs	r2, #0
 80099ae:	2100      	movs	r1, #0
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fb5e 	bl	800a072 <USBH_CtlReq>
 80099b6:	4603      	mov	r3, r0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3708      	adds	r7, #8
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	789b      	ldrb	r3, [r3, #2]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d10f      	bne.n	80099f4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2203      	movs	r2, #3
 80099de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fb3a 	bl	800a072 <USBH_CtlReq>
 80099fe:	4603      	mov	r3, r0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	789b      	ldrb	r3, [r3, #2]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10f      	bne.n	8009a3c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2202      	movs	r2, #2
 8009a20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb16 	bl	800a072 <USBH_CtlReq>
 8009a46:	4603      	mov	r3, r0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009a64:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009a70:	2302      	movs	r3, #2
 8009a72:	e094      	b.n	8009b9e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	785a      	ldrb	r2, [r3, #1]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	3302      	adds	r3, #2
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	3303      	adds	r3, #3
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	791a      	ldrb	r2, [r3, #4]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	795a      	ldrb	r2, [r3, #5]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	799a      	ldrb	r2, [r3, #6]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	79da      	ldrb	r2, [r3, #7]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d004      	beq.n	8009ad2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d11b      	bne.n	8009b0a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	79db      	ldrb	r3, [r3, #7]
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	dc0f      	bgt.n	8009afa <USBH_ParseDevDesc+0xaa>
 8009ada:	2b08      	cmp	r3, #8
 8009adc:	db0f      	blt.n	8009afe <USBH_ParseDevDesc+0xae>
 8009ade:	3b08      	subs	r3, #8
 8009ae0:	4a32      	ldr	r2, [pc, #200]	@ (8009bac <USBH_ParseDevDesc+0x15c>)
 8009ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bf14      	ite	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	2300      	moveq	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <USBH_ParseDevDesc+0xb6>
 8009af8:	e001      	b.n	8009afe <USBH_ParseDevDesc+0xae>
 8009afa:	2b40      	cmp	r3, #64	@ 0x40
 8009afc:	d003      	beq.n	8009b06 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2208      	movs	r2, #8
 8009b02:	71da      	strb	r2, [r3, #7]
        break;
 8009b04:	e000      	b.n	8009b08 <USBH_ParseDevDesc+0xb8>
        break;
 8009b06:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009b08:	e00e      	b.n	8009b28 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d107      	bne.n	8009b24 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	79db      	ldrb	r3, [r3, #7]
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d005      	beq.n	8009b28 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	2208      	movs	r2, #8
 8009b20:	71da      	strb	r2, [r3, #7]
 8009b22:	e001      	b.n	8009b28 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b24:	2303      	movs	r3, #3
 8009b26:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009b28:	88fb      	ldrh	r3, [r7, #6]
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d936      	bls.n	8009b9c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	3308      	adds	r3, #8
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	3309      	adds	r3, #9
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	4313      	orrs	r3, r2
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	330a      	adds	r3, #10
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	330b      	adds	r3, #11
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	021b      	lsls	r3, r3, #8
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	330c      	adds	r3, #12
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	330d      	adds	r3, #13
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	021b      	lsls	r3, r3, #8
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	4313      	orrs	r3, r2
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	7b9a      	ldrb	r2, [r3, #14]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	7bda      	ldrb	r2, [r3, #15]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	7c1a      	ldrb	r2, [r3, #16]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	7c5a      	ldrb	r2, [r3, #17]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	01000101 	.word	0x01000101

08009bb0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08c      	sub	sp, #48	@ 0x30
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009bc4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009bde:	2302      	movs	r3, #2
 8009be0:	e0da      	b.n	8009d98 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b09      	cmp	r3, #9
 8009bec:	d002      	beq.n	8009bf4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	2209      	movs	r2, #9
 8009bf2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	781a      	ldrb	r2, [r3, #0]
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	785a      	ldrb	r2, [r3, #1]
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	3302      	adds	r3, #2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	3303      	adds	r3, #3
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4313      	orrs	r3, r2
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c1e:	bf28      	it	cs
 8009c20:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	791a      	ldrb	r2, [r3, #4]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	795a      	ldrb	r2, [r3, #5]
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	799a      	ldrb	r2, [r3, #6]
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	79da      	ldrb	r2, [r3, #7]
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	7a1a      	ldrb	r2, [r3, #8]
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009c52:	88fb      	ldrh	r3, [r7, #6]
 8009c54:	2b09      	cmp	r3, #9
 8009c56:	f240 809d 	bls.w	8009d94 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009c5a:	2309      	movs	r3, #9
 8009c5c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009c62:	e081      	b.n	8009d68 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009c64:	f107 0316 	add.w	r3, r7, #22
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c6c:	f000 f9e7 	bl	800a03e <USBH_GetNextDesc>
 8009c70:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d176      	bne.n	8009d68 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	d002      	beq.n	8009c88 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	2209      	movs	r2, #9
 8009c86:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009c88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c8c:	221a      	movs	r2, #26
 8009c8e:	fb02 f303 	mul.w	r3, r2, r3
 8009c92:	3308      	adds	r3, #8
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	4413      	add	r3, r2
 8009c98:	3302      	adds	r3, #2
 8009c9a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c9e:	69f8      	ldr	r0, [r7, #28]
 8009ca0:	f000 f87e 	bl	8009da0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009cae:	e043      	b.n	8009d38 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009cb0:	f107 0316 	add.w	r3, r7, #22
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009cb8:	f000 f9c1 	bl	800a03e <USBH_GetNextDesc>
 8009cbc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	2b05      	cmp	r3, #5
 8009cc4:	d138      	bne.n	8009d38 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	795b      	ldrb	r3, [r3, #5]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d113      	bne.n	8009cf6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d003      	beq.n	8009cde <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	799b      	ldrb	r3, [r3, #6]
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d10b      	bne.n	8009cf6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	79db      	ldrb	r3, [r3, #7]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10b      	bne.n	8009cfe <USBH_ParseCfgDesc+0x14e>
 8009ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b09      	cmp	r3, #9
 8009cec:	d007      	beq.n	8009cfe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	2209      	movs	r2, #9
 8009cf2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cf4:	e003      	b.n	8009cfe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	2207      	movs	r2, #7
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e000      	b.n	8009d00 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009cfe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d08:	3201      	adds	r2, #1
 8009d0a:	00d2      	lsls	r2, r2, #3
 8009d0c:	211a      	movs	r1, #26
 8009d0e:	fb01 f303 	mul.w	r3, r1, r3
 8009d12:	4413      	add	r3, r2
 8009d14:	3308      	adds	r3, #8
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	4413      	add	r3, r2
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009d1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d20:	69b9      	ldr	r1, [r7, #24]
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f870 	bl	8009e08 <USBH_ParseEPDesc>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009d2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d32:	3301      	adds	r3, #1
 8009d34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	791b      	ldrb	r3, [r3, #4]
 8009d3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d204      	bcs.n	8009d4e <USBH_ParseCfgDesc+0x19e>
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	885a      	ldrh	r2, [r3, #2]
 8009d48:	8afb      	ldrh	r3, [r7, #22]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d8b0      	bhi.n	8009cb0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	791b      	ldrb	r3, [r3, #4]
 8009d52:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d201      	bcs.n	8009d5e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	e01c      	b.n	8009d98 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009d5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d62:	3301      	adds	r3, #1
 8009d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009d68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d805      	bhi.n	8009d7c <USBH_ParseCfgDesc+0x1cc>
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	885a      	ldrh	r2, [r3, #2]
 8009d74:	8afb      	ldrh	r3, [r7, #22]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	f63f af74 	bhi.w	8009c64 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	791b      	ldrb	r3, [r3, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	bf28      	it	cs
 8009d84:	2302      	movcs	r3, #2
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d201      	bcs.n	8009d94 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e001      	b.n	8009d98 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009d94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3730      	adds	r7, #48	@ 0x30
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781a      	ldrb	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	785a      	ldrb	r2, [r3, #1]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	789a      	ldrb	r2, [r3, #2]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	78da      	ldrb	r2, [r3, #3]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	bf28      	it	cs
 8009dd4:	2302      	movcs	r3, #2
 8009dd6:	b2da      	uxtb	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	795a      	ldrb	r2, [r3, #5]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	799a      	ldrb	r2, [r3, #6]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	79da      	ldrb	r2, [r3, #7]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	7a1a      	ldrb	r2, [r3, #8]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	721a      	strb	r2, [r3, #8]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	785a      	ldrb	r2, [r3, #1]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	789a      	ldrb	r2, [r3, #2]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	78da      	ldrb	r2, [r3, #3]
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	3305      	adds	r3, #5
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	021b      	lsls	r3, r3, #8
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	799a      	ldrb	r2, [r3, #6]
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	889b      	ldrh	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e6a:	d804      	bhi.n	8009e76 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e74:	d901      	bls.n	8009e7a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009e76:	2303      	movs	r3, #3
 8009e78:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d136      	bne.n	8009ef2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	78db      	ldrb	r3, [r3, #3]
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d108      	bne.n	8009ea2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	889b      	ldrh	r3, [r3, #4]
 8009e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e98:	f240 8097 	bls.w	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	75fb      	strb	r3, [r7, #23]
 8009ea0:	e093      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	78db      	ldrb	r3, [r3, #3]
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d107      	bne.n	8009ebe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	889b      	ldrh	r3, [r3, #4]
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	f240 8089 	bls.w	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	75fb      	strb	r3, [r7, #23]
 8009ebc:	e085      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	78db      	ldrb	r3, [r3, #3]
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d005      	beq.n	8009ed6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	78db      	ldrb	r3, [r3, #3]
 8009ece:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d10a      	bne.n	8009eec <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	799b      	ldrb	r3, [r3, #6]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d003      	beq.n	8009ee6 <USBH_ParseEPDesc+0xde>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	799b      	ldrb	r3, [r3, #6]
 8009ee2:	2b10      	cmp	r3, #16
 8009ee4:	d970      	bls.n	8009fc8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009eea:	e06d      	b.n	8009fc8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009eec:	2303      	movs	r3, #3
 8009eee:	75fb      	strb	r3, [r7, #23]
 8009ef0:	e06b      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d13c      	bne.n	8009f76 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	78db      	ldrb	r3, [r3, #3]
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d005      	beq.n	8009f14 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	78db      	ldrb	r3, [r3, #3]
 8009f0c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	889b      	ldrh	r3, [r3, #4]
 8009f18:	2b40      	cmp	r3, #64	@ 0x40
 8009f1a:	d956      	bls.n	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009f20:	e053      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	78db      	ldrb	r3, [r3, #3]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10e      	bne.n	8009f4c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	799b      	ldrb	r3, [r3, #6]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009f3a:	2b10      	cmp	r3, #16
 8009f3c:	d803      	bhi.n	8009f46 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009f42:	2b40      	cmp	r3, #64	@ 0x40
 8009f44:	d941      	bls.n	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f46:	2303      	movs	r3, #3
 8009f48:	75fb      	strb	r3, [r7, #23]
 8009f4a:	e03e      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	78db      	ldrb	r3, [r3, #3]
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d10b      	bne.n	8009f70 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	799b      	ldrb	r3, [r3, #6]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <USBH_ParseEPDesc+0x162>
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	889b      	ldrh	r3, [r3, #4]
 8009f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f68:	d32f      	bcc.n	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	75fb      	strb	r3, [r7, #23]
 8009f6e:	e02c      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009f70:	2303      	movs	r3, #3
 8009f72:	75fb      	strb	r3, [r7, #23]
 8009f74:	e029      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d120      	bne.n	8009fc2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	78db      	ldrb	r3, [r3, #3]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d106      	bne.n	8009f9a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	889b      	ldrh	r3, [r3, #4]
 8009f90:	2b08      	cmp	r3, #8
 8009f92:	d01a      	beq.n	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009f94:	2303      	movs	r3, #3
 8009f96:	75fb      	strb	r3, [r7, #23]
 8009f98:	e017      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	78db      	ldrb	r3, [r3, #3]
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d10a      	bne.n	8009fbc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	799b      	ldrb	r3, [r3, #6]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <USBH_ParseEPDesc+0x1ae>
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
 8009fb2:	2b08      	cmp	r3, #8
 8009fb4:	d909      	bls.n	8009fca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	75fb      	strb	r3, [r7, #23]
 8009fba:	e006      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	75fb      	strb	r3, [r7, #23]
 8009fc0:	e003      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	75fb      	strb	r3, [r7, #23]
 8009fc6:	e000      	b.n	8009fca <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009fc8:	bf00      	nop
  }

  return status;
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	371c      	adds	r7, #28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b087      	sub	sp, #28
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d120      	bne.n	800a032 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	1e9a      	subs	r2, r3, #2
 8009ff6:	88fb      	ldrh	r3, [r7, #6]
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	bf28      	it	cs
 8009ffc:	4613      	movcs	r3, r2
 8009ffe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	3302      	adds	r3, #2
 800a004:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a006:	2300      	movs	r3, #0
 800a008:	82fb      	strh	r3, [r7, #22]
 800a00a:	e00b      	b.n	800a024 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a00c:	8afb      	ldrh	r3, [r7, #22]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a01e:	8afb      	ldrh	r3, [r7, #22]
 800a020:	3302      	adds	r3, #2
 800a022:	82fb      	strh	r3, [r7, #22]
 800a024:	8afa      	ldrh	r2, [r7, #22]
 800a026:	8abb      	ldrh	r3, [r7, #20]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d3ef      	bcc.n	800a00c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	701a      	strb	r2, [r3, #0]
  }
}
 800a032:	bf00      	nop
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	7812      	ldrb	r2, [r2, #0]
 800a050:	4413      	add	r3, r2
 800a052:	b29a      	uxth	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4413      	add	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a064:	68fb      	ldr	r3, [r7, #12]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	4613      	mov	r3, r2
 800a07e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a080:	2301      	movs	r3, #1
 800a082:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	789b      	ldrb	r3, [r3, #2]
 800a088:	2b01      	cmp	r3, #1
 800a08a:	d002      	beq.n	800a092 <USBH_CtlReq+0x20>
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d00f      	beq.n	800a0b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a090:	e027      	b.n	800a0e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	88fa      	ldrh	r2, [r7, #6]
 800a09c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ae:	e018      	b.n	800a0e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f81b 	bl	800a0ec <USBH_HandleControl>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d002      	beq.n	800a0c6 <USBH_CtlReq+0x54>
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d106      	bne.n	800a0d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	761a      	strb	r2, [r3, #24]
      break;
 800a0d2:	e005      	b.n	800a0e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d102      	bne.n	800a0e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	709a      	strb	r2, [r3, #2]
      break;
 800a0e0:	bf00      	nop
  }
  return status;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7e1b      	ldrb	r3, [r3, #24]
 800a100:	3b01      	subs	r3, #1
 800a102:	2b0a      	cmp	r3, #10
 800a104:	f200 8156 	bhi.w	800a3b4 <USBH_HandleControl+0x2c8>
 800a108:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <USBH_HandleControl+0x24>)
 800a10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10e:	bf00      	nop
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	0800a157 	.word	0x0800a157
 800a118:	0800a1c1 	.word	0x0800a1c1
 800a11c:	0800a1e7 	.word	0x0800a1e7
 800a120:	0800a21f 	.word	0x0800a21f
 800a124:	0800a249 	.word	0x0800a249
 800a128:	0800a29b 	.word	0x0800a29b
 800a12c:	0800a2bd 	.word	0x0800a2bd
 800a130:	0800a2f9 	.word	0x0800a2f9
 800a134:	0800a31f 	.word	0x0800a31f
 800a138:	0800a35d 	.word	0x0800a35d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0110 	add.w	r1, r3, #16
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	795b      	ldrb	r3, [r3, #5]
 800a146:	461a      	mov	r2, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f943 	bl	800a3d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2202      	movs	r2, #2
 800a152:	761a      	strb	r2, [r3, #24]
      break;
 800a154:	e139      	b.n	800a3ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	795b      	ldrb	r3, [r3, #5]
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fcc5 	bl	800aaec <USBH_LL_GetURBState>
 800a162:	4603      	mov	r3, r0
 800a164:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d11e      	bne.n	800a1aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	7c1b      	ldrb	r3, [r3, #16]
 800a170:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a174:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8adb      	ldrh	r3, [r3, #22]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a17e:	7b7b      	ldrb	r3, [r7, #13]
 800a180:	2b80      	cmp	r3, #128	@ 0x80
 800a182:	d103      	bne.n	800a18c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2203      	movs	r2, #3
 800a188:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a18a:	e115      	b.n	800a3b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2205      	movs	r2, #5
 800a190:	761a      	strb	r2, [r3, #24]
      break;
 800a192:	e111      	b.n	800a3b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a194:	7b7b      	ldrb	r3, [r7, #13]
 800a196:	2b80      	cmp	r3, #128	@ 0x80
 800a198:	d103      	bne.n	800a1a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2209      	movs	r2, #9
 800a19e:	761a      	strb	r2, [r3, #24]
      break;
 800a1a0:	e10a      	b.n	800a3b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2207      	movs	r2, #7
 800a1a6:	761a      	strb	r2, [r3, #24]
      break;
 800a1a8:	e106      	b.n	800a3b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a1aa:	7bbb      	ldrb	r3, [r7, #14]
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d003      	beq.n	800a1b8 <USBH_HandleControl+0xcc>
 800a1b0:	7bbb      	ldrb	r3, [r7, #14]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	f040 8100 	bne.w	800a3b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	220b      	movs	r2, #11
 800a1bc:	761a      	strb	r2, [r3, #24]
      break;
 800a1be:	e0fb      	b.n	800a3b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6899      	ldr	r1, [r3, #8]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	899a      	ldrh	r2, [r3, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	791b      	ldrb	r3, [r3, #4]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f93a 	bl	800a452 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	761a      	strb	r2, [r3, #24]
      break;
 800a1e4:	e0f1      	b.n	800a3ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	791b      	ldrb	r3, [r3, #4]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fc7d 	bl	800aaec <USBH_LL_GetURBState>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d102      	bne.n	800a202 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2209      	movs	r2, #9
 800a200:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a202:	7bbb      	ldrb	r3, [r7, #14]
 800a204:	2b05      	cmp	r3, #5
 800a206:	d102      	bne.n	800a20e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a208:	2303      	movs	r3, #3
 800a20a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a20c:	e0d6      	b.n	800a3bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	2b04      	cmp	r3, #4
 800a212:	f040 80d3 	bne.w	800a3bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	220b      	movs	r2, #11
 800a21a:	761a      	strb	r2, [r3, #24]
      break;
 800a21c:	e0ce      	b.n	800a3bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6899      	ldr	r1, [r3, #8]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	899a      	ldrh	r2, [r3, #12]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	2001      	movs	r0, #1
 800a22c:	9000      	str	r0, [sp, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f8ea 	bl	800a408 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2206      	movs	r2, #6
 800a244:	761a      	strb	r2, [r3, #24]
      break;
 800a246:	e0c0      	b.n	800a3ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	795b      	ldrb	r3, [r3, #5]
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fc4c 	bl	800aaec <USBH_LL_GetURBState>
 800a254:	4603      	mov	r3, r0
 800a256:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a258:	7bbb      	ldrb	r3, [r7, #14]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d103      	bne.n	800a266 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2207      	movs	r2, #7
 800a262:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a264:	e0ac      	b.n	800a3c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b05      	cmp	r3, #5
 800a26a:	d105      	bne.n	800a278 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	220c      	movs	r2, #12
 800a270:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a272:	2303      	movs	r3, #3
 800a274:	73fb      	strb	r3, [r7, #15]
      break;
 800a276:	e0a3      	b.n	800a3c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d103      	bne.n	800a286 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2205      	movs	r2, #5
 800a282:	761a      	strb	r2, [r3, #24]
      break;
 800a284:	e09c      	b.n	800a3c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a286:	7bbb      	ldrb	r3, [r7, #14]
 800a288:	2b04      	cmp	r3, #4
 800a28a:	f040 8099 	bne.w	800a3c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	220b      	movs	r2, #11
 800a292:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a294:	2302      	movs	r3, #2
 800a296:	73fb      	strb	r3, [r7, #15]
      break;
 800a298:	e092      	b.n	800a3c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	791b      	ldrb	r3, [r3, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f8d5 	bl	800a452 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	761a      	strb	r2, [r3, #24]

      break;
 800a2ba:	e086      	b.n	800a3ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	791b      	ldrb	r3, [r3, #4]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fc12 	bl	800aaec <USBH_LL_GetURBState>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d105      	bne.n	800a2de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	220d      	movs	r2, #13
 800a2d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2dc:	e072      	b.n	800a3c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	d103      	bne.n	800a2ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	220b      	movs	r2, #11
 800a2e8:	761a      	strb	r2, [r3, #24]
      break;
 800a2ea:	e06b      	b.n	800a3c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d168      	bne.n	800a3c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2f6:	e065      	b.n	800a3c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	795b      	ldrb	r3, [r3, #5]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	9200      	str	r2, [sp, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	2100      	movs	r1, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f87f 	bl	800a408 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a310:	b29a      	uxth	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	220a      	movs	r2, #10
 800a31a:	761a      	strb	r2, [r3, #24]
      break;
 800a31c:	e055      	b.n	800a3ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	795b      	ldrb	r3, [r3, #5]
 800a322:	4619      	mov	r1, r3
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fbe1 	bl	800aaec <USBH_LL_GetURBState>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d105      	bne.n	800a340 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	220d      	movs	r2, #13
 800a33c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a33e:	e043      	b.n	800a3c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d103      	bne.n	800a34e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2209      	movs	r2, #9
 800a34a:	761a      	strb	r2, [r3, #24]
      break;
 800a34c:	e03c      	b.n	800a3c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	2b04      	cmp	r3, #4
 800a352:	d139      	bne.n	800a3c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	220b      	movs	r2, #11
 800a358:	761a      	strb	r2, [r3, #24]
      break;
 800a35a:	e035      	b.n	800a3c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	7e5b      	ldrb	r3, [r3, #25]
 800a360:	3301      	adds	r3, #1
 800a362:	b2da      	uxtb	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	765a      	strb	r2, [r3, #25]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7e5b      	ldrb	r3, [r3, #25]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d806      	bhi.n	800a37e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a37c:	e025      	b.n	800a3ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a384:	2106      	movs	r1, #6
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	795b      	ldrb	r3, [r3, #5]
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f90c 	bl	800a5b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	791b      	ldrb	r3, [r3, #4]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f906 	bl	800a5b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b2:	e00a      	b.n	800a3ca <USBH_HandleControl+0x2de>

    default:
      break;
 800a3b4:	bf00      	nop
 800a3b6:	e008      	b.n	800a3ca <USBH_HandleControl+0x2de>
      break;
 800a3b8:	bf00      	nop
 800a3ba:	e006      	b.n	800a3ca <USBH_HandleControl+0x2de>
      break;
 800a3bc:	bf00      	nop
 800a3be:	e004      	b.n	800a3ca <USBH_HandleControl+0x2de>
      break;
 800a3c0:	bf00      	nop
 800a3c2:	e002      	b.n	800a3ca <USBH_HandleControl+0x2de>
      break;
 800a3c4:	bf00      	nop
 800a3c6:	e000      	b.n	800a3ca <USBH_HandleControl+0x2de>
      break;
 800a3c8:	bf00      	nop
  }

  return status;
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af04      	add	r7, sp, #16
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a3e2:	79f9      	ldrb	r1, [r7, #7]
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	2308      	movs	r3, #8
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f000 fb46 	bl	800aa8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3710      	adds	r7, #16
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4611      	mov	r1, r2
 800a414:	461a      	mov	r2, r3
 800a416:	460b      	mov	r3, r1
 800a418:	80fb      	strh	r3, [r7, #6]
 800a41a:	4613      	mov	r3, r2
 800a41c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a42c:	7979      	ldrb	r1, [r7, #5]
 800a42e:	7e3b      	ldrb	r3, [r7, #24]
 800a430:	9303      	str	r3, [sp, #12]
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	9302      	str	r3, [sp, #8]
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	2301      	movs	r3, #1
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	2300      	movs	r3, #0
 800a440:	2200      	movs	r2, #0
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 fb21 	bl	800aa8a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b088      	sub	sp, #32
 800a456:	af04      	add	r7, sp, #16
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	4611      	mov	r1, r2
 800a45e:	461a      	mov	r2, r3
 800a460:	460b      	mov	r3, r1
 800a462:	80fb      	strh	r3, [r7, #6]
 800a464:	4613      	mov	r3, r2
 800a466:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a468:	7979      	ldrb	r1, [r7, #5]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9303      	str	r3, [sp, #12]
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	9302      	str	r3, [sp, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	9301      	str	r3, [sp, #4]
 800a476:	2301      	movs	r3, #1
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	2201      	movs	r2, #1
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 fb03 	bl	800aa8a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a484:	2300      	movs	r3, #0

}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af04      	add	r7, sp, #16
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	460b      	mov	r3, r1
 800a49e:	80fb      	strh	r3, [r7, #6]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4b2:	7979      	ldrb	r1, [r7, #5]
 800a4b4:	7e3b      	ldrb	r3, [r7, #24]
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	88fb      	ldrh	r3, [r7, #6]
 800a4ba:	9302      	str	r3, [sp, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	9301      	str	r3, [sp, #4]
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 fade 	bl	800aa8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af04      	add	r7, sp, #16
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	80fb      	strh	r3, [r7, #6]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a4ee:	7979      	ldrb	r1, [r7, #5]
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2302      	movs	r3, #2
 800a502:	2201      	movs	r2, #1
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 fac0 	bl	800aa8a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af04      	add	r7, sp, #16
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	461a      	mov	r2, r3
 800a522:	4603      	mov	r3, r0
 800a524:	70fb      	strb	r3, [r7, #3]
 800a526:	460b      	mov	r3, r1
 800a528:	70bb      	strb	r3, [r7, #2]
 800a52a:	4613      	mov	r3, r2
 800a52c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a52e:	7878      	ldrb	r0, [r7, #1]
 800a530:	78ba      	ldrb	r2, [r7, #2]
 800a532:	78f9      	ldrb	r1, [r7, #3]
 800a534:	8b3b      	ldrh	r3, [r7, #24]
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	7d3b      	ldrb	r3, [r7, #20]
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	7c3b      	ldrb	r3, [r7, #16]
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	4603      	mov	r3, r0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 fa53 	bl	800a9ee <USBH_LL_OpenPipe>

  return USBH_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa72 	bl	800aa4c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	460b      	mov	r3, r1
 800a57c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f836 	bl	800a5f0 <USBH_GetFreePipe>
 800a584:	4603      	mov	r3, r0
 800a586:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a588:	89fb      	ldrh	r3, [r7, #14]
 800a58a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a58e:	4293      	cmp	r3, r2
 800a590:	d00a      	beq.n	800a5a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	89fb      	ldrh	r3, [r7, #14]
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	33e0      	adds	r3, #224	@ 0xe0
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	440b      	add	r3, r1
 800a5a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a5a8:	89fb      	ldrh	r3, [r7, #14]
 800a5aa:	b2db      	uxtb	r3, r3
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a5c0:	78fb      	ldrb	r3, [r7, #3]
 800a5c2:	2b0f      	cmp	r3, #15
 800a5c4:	d80d      	bhi.n	800a5e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a5c6:	78fb      	ldrb	r3, [r7, #3]
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	33e0      	adds	r3, #224	@ 0xe0
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	78fb      	ldrb	r3, [r7, #3]
 800a5d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	33e0      	adds	r3, #224	@ 0xe0
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	440b      	add	r3, r1
 800a5e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e00f      	b.n	800a622 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a602:	7bfb      	ldrb	r3, [r7, #15]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	33e0      	adds	r3, #224	@ 0xe0
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	e007      	b.n	800a62c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	3301      	adds	r3, #1
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	7bfb      	ldrb	r3, [r7, #15]
 800a624:	2b0f      	cmp	r3, #15
 800a626:	d9ec      	bls.n	800a602 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a628:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a63c:	2201      	movs	r2, #1
 800a63e:	490e      	ldr	r1, [pc, #56]	@ (800a678 <MX_USB_HOST_Init+0x40>)
 800a640:	480e      	ldr	r0, [pc, #56]	@ (800a67c <MX_USB_HOST_Init+0x44>)
 800a642:	f7fe fb15 	bl	8008c70 <USBH_Init>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a64c:	f7f6 fbd4 	bl	8000df8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a650:	490b      	ldr	r1, [pc, #44]	@ (800a680 <MX_USB_HOST_Init+0x48>)
 800a652:	480a      	ldr	r0, [pc, #40]	@ (800a67c <MX_USB_HOST_Init+0x44>)
 800a654:	f7fe fbb9 	bl	8008dca <USBH_RegisterClass>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a65e:	f7f6 fbcb 	bl	8000df8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a662:	4806      	ldr	r0, [pc, #24]	@ (800a67c <MX_USB_HOST_Init+0x44>)
 800a664:	f7fe fc3d 	bl	8008ee2 <USBH_Start>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a66e:	f7f6 fbc3 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a672:	bf00      	nop
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	0800a699 	.word	0x0800a699
 800a67c:	200082a0 	.word	0x200082a0
 800a680:	2000000c 	.word	0x2000000c

0800a684 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a688:	4802      	ldr	r0, [pc, #8]	@ (800a694 <MX_USB_HOST_Process+0x10>)
 800a68a:	f7fe fc3b 	bl	8008f04 <USBH_Process>
}
 800a68e:	bf00      	nop
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	200082a0 	.word	0x200082a0

0800a698 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d819      	bhi.n	800a6e0 <USBH_UserProcess+0x48>
 800a6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b4 <USBH_UserProcess+0x1c>)
 800a6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b2:	bf00      	nop
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	0800a6d1 	.word	0x0800a6d1
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6d9 	.word	0x0800a6d9
 800a6c4:	0800a6c9 	.word	0x0800a6c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a6c8:	4b09      	ldr	r3, [pc, #36]	@ (800a6f0 <USBH_UserProcess+0x58>)
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	701a      	strb	r2, [r3, #0]
  break;
 800a6ce:	e008      	b.n	800a6e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <USBH_UserProcess+0x58>)
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	701a      	strb	r2, [r3, #0]
  break;
 800a6d6:	e004      	b.n	800a6e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a6d8:	4b05      	ldr	r3, [pc, #20]	@ (800a6f0 <USBH_UserProcess+0x58>)
 800a6da:	2201      	movs	r2, #1
 800a6dc:	701a      	strb	r2, [r3, #0]
  break;
 800a6de:	e000      	b.n	800a6e2 <USBH_UserProcess+0x4a>

  default:
  break;
 800a6e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a6e2:	bf00      	nop
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	20008678 	.word	0x20008678

0800a6f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	@ 0x28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6fc:	f107 0314 	add.w	r3, r7, #20
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	609a      	str	r2, [r3, #8]
 800a708:	60da      	str	r2, [r3, #12]
 800a70a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a714:	d147      	bne.n	800a7a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a716:	2300      	movs	r3, #0
 800a718:	613b      	str	r3, [r7, #16]
 800a71a:	4b25      	ldr	r3, [pc, #148]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a71c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71e:	4a24      	ldr	r2, [pc, #144]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a720:	f043 0301 	orr.w	r3, r3, #1
 800a724:	6313      	str	r3, [r2, #48]	@ 0x30
 800a726:	4b22      	ldr	r3, [pc, #136]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	613b      	str	r3, [r7, #16]
 800a730:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a738:	2300      	movs	r3, #0
 800a73a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a740:	f107 0314 	add.w	r3, r7, #20
 800a744:	4619      	mov	r1, r3
 800a746:	481b      	ldr	r0, [pc, #108]	@ (800a7b4 <HAL_HCD_MspInit+0xc0>)
 800a748:	f7f7 fab0 	bl	8001cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a74c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a752:	2302      	movs	r3, #2
 800a754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a756:	2300      	movs	r3, #0
 800a758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a75a:	2300      	movs	r3, #0
 800a75c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a75e:	230a      	movs	r3, #10
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a762:	f107 0314 	add.w	r3, r7, #20
 800a766:	4619      	mov	r1, r3
 800a768:	4812      	ldr	r0, [pc, #72]	@ (800a7b4 <HAL_HCD_MspInit+0xc0>)
 800a76a:	f7f7 fa9f 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a76e:	4b10      	ldr	r3, [pc, #64]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a772:	4a0f      	ldr	r2, [pc, #60]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a778:	6353      	str	r3, [r2, #52]	@ 0x34
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a782:	4a0b      	ldr	r2, [pc, #44]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a788:	6453      	str	r3, [r2, #68]	@ 0x44
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <HAL_HCD_MspInit+0xbc>)
 800a78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a78e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a796:	2200      	movs	r2, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	2043      	movs	r0, #67	@ 0x43
 800a79c:	f7f6 fedf 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a7a0:	2043      	movs	r0, #67	@ 0x43
 800a7a2:	f7f6 fef8 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a7a6:	bf00      	nop
 800a7a8:	3728      	adds	r7, #40	@ 0x28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	40023800 	.word	0x40023800
 800a7b4:	40020000 	.word	0x40020000

0800a7b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe ff73 	bl	80096b2 <USBH_LL_IncTimer>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe ffab 	bl	800973e <USBH_LL_Connect>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe ffb4 	bl	800976c <USBH_LL_Disconnect>
}
 800a804:	bf00      	nop
 800a806:	3708      	adds	r7, #8
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	460b      	mov	r3, r1
 800a816:	70fb      	strb	r3, [r7, #3]
 800a818:	4613      	mov	r3, r2
 800a81a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe ff65 	bl	8009706 <USBH_LL_PortEnabled>
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a852:	4618      	mov	r0, r3
 800a854:	f7fe ff65 	bl	8009722 <USBH_LL_PortDisabled>
}
 800a858:	bf00      	nop
 800a85a:	3708      	adds	r7, #8
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d12a      	bne.n	800a8c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a872:	4a18      	ldr	r2, [pc, #96]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a15      	ldr	r2, [pc, #84]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a87e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a882:	4b14      	ldr	r3, [pc, #80]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a884:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a888:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a88a:	4b12      	ldr	r3, [pc, #72]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a88c:	2208      	movs	r2, #8
 800a88e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a890:	4b10      	ldr	r3, [pc, #64]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a892:	2201      	movs	r2, #1
 800a894:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a896:	4b0f      	ldr	r3, [pc, #60]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a898:	2200      	movs	r2, #0
 800a89a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a89c:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a89e:	2202      	movs	r2, #2
 800a8a0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a8a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a8a8:	480a      	ldr	r0, [pc, #40]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a8aa:	f7f7 fbb4 	bl	8002016 <HAL_HCD_Init>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a8b4:	f7f6 faa0 	bl	8000df8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a8b8:	4806      	ldr	r0, [pc, #24]	@ (800a8d4 <USBH_LL_Init+0x74>)
 800a8ba:	f7f8 f815 	bl	80028e8 <HAL_HCD_GetCurrentFrame>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7fe fee6 	bl	8009694 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000867c 	.word	0x2000867c

0800a8d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f7 ff82 	bl	80027f8 <HAL_HCD_Start>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a8f8:	7bfb      	ldrb	r3, [r7, #15]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 f95e 	bl	800abbc <USBH_Get_USB_Status>
 800a900:	4603      	mov	r3, r0
 800a902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a904:	7bbb      	ldrb	r3, [r7, #14]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a924:	4618      	mov	r0, r3
 800a926:	f7f7 ff8a 	bl	800283e <HAL_HCD_Stop>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	4618      	mov	r0, r3
 800a932:	f000 f943 	bl	800abbc <USBH_Get_USB_Status>
 800a936:	4603      	mov	r3, r0
 800a938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a93a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a94c:	2301      	movs	r3, #1
 800a94e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a956:	4618      	mov	r0, r3
 800a958:	f7f7 ffd4 	bl	8002904 <HAL_HCD_GetCurrentSpeed>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d00c      	beq.n	800a97c <USBH_LL_GetSpeed+0x38>
 800a962:	2b02      	cmp	r3, #2
 800a964:	d80d      	bhi.n	800a982 <USBH_LL_GetSpeed+0x3e>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d002      	beq.n	800a970 <USBH_LL_GetSpeed+0x2c>
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d003      	beq.n	800a976 <USBH_LL_GetSpeed+0x32>
 800a96e:	e008      	b.n	800a982 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a970:	2300      	movs	r3, #0
 800a972:	73fb      	strb	r3, [r7, #15]
    break;
 800a974:	e008      	b.n	800a988 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a976:	2301      	movs	r3, #1
 800a978:	73fb      	strb	r3, [r7, #15]
    break;
 800a97a:	e005      	b.n	800a988 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a97c:	2302      	movs	r3, #2
 800a97e:	73fb      	strb	r3, [r7, #15]
    break;
 800a980:	e002      	b.n	800a988 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
    break;
 800a986:	bf00      	nop
  }
  return  speed;
 800a988:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7f7 ff65 	bl	8002878 <HAL_HCD_ResetPort>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 f901 	bl	800abbc <USBH_Get_USB_Status>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a9da:	78fa      	ldrb	r2, [r7, #3]
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7f7 ff6d 	bl	80028be <HAL_HCD_HC_GetXferCount>
 800a9e4:	4603      	mov	r3, r0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a9ee:	b590      	push	{r4, r7, lr}
 800a9f0:	b089      	sub	sp, #36	@ 0x24
 800a9f2:	af04      	add	r7, sp, #16
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	70fb      	strb	r3, [r7, #3]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70bb      	strb	r3, [r7, #2]
 800aa04:	4613      	mov	r3, r2
 800aa06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800aa16:	787c      	ldrb	r4, [r7, #1]
 800aa18:	78ba      	ldrb	r2, [r7, #2]
 800aa1a:	78f9      	ldrb	r1, [r7, #3]
 800aa1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa1e:	9302      	str	r3, [sp, #8]
 800aa20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	f7f7 fb59 	bl	80020e4 <HAL_HCD_HC_Init>
 800aa32:	4603      	mov	r3, r0
 800aa34:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f000 f8bf 	bl	800abbc <USBH_Get_USB_Status>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd90      	pop	{r4, r7, pc}

0800aa4c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa66:	78fa      	ldrb	r2, [r7, #3]
 800aa68:	4611      	mov	r1, r2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7f7 fbf2 	bl	8002254 <HAL_HCD_HC_Halt>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa74:	7bfb      	ldrb	r3, [r7, #15]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f8a0 	bl	800abbc <USBH_Get_USB_Status>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aa8a:	b590      	push	{r4, r7, lr}
 800aa8c:	b089      	sub	sp, #36	@ 0x24
 800aa8e:	af04      	add	r7, sp, #16
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	4608      	mov	r0, r1
 800aa94:	4611      	mov	r1, r2
 800aa96:	461a      	mov	r2, r3
 800aa98:	4603      	mov	r3, r0
 800aa9a:	70fb      	strb	r3, [r7, #3]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70bb      	strb	r3, [r7, #2]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800aab2:	787c      	ldrb	r4, [r7, #1]
 800aab4:	78ba      	ldrb	r2, [r7, #2]
 800aab6:	78f9      	ldrb	r1, [r7, #3]
 800aab8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800aabc:	9303      	str	r3, [sp, #12]
 800aabe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aac0:	9302      	str	r3, [sp, #8]
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4623      	mov	r3, r4
 800aace:	f7f7 fbe5 	bl	800229c <HAL_HCD_HC_SubmitRequest>
 800aad2:	4603      	mov	r3, r0
 800aad4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f86f 	bl	800abbc <USBH_Get_USB_Status>
 800aade:	4603      	mov	r3, r0
 800aae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd90      	pop	{r4, r7, pc}

0800aaec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aafe:	78fa      	ldrb	r2, [r7, #3]
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7f7 fec6 	bl	8002894 <HAL_HCD_HC_GetURBState>
 800ab08:	4603      	mov	r3, r0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d103      	bne.n	800ab30 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ab28:	78fb      	ldrb	r3, [r7, #3]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f000 f872 	bl	800ac14 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ab30:	20c8      	movs	r0, #200	@ 0xc8
 800ab32:	f7f6 fc15 	bl	8001360 <HAL_Delay>
  return USBH_OK;
 800ab36:	2300      	movs	r3, #0
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab56:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ab58:	78fa      	ldrb	r2, [r7, #3]
 800ab5a:	68f9      	ldr	r1, [r7, #12]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	440b      	add	r3, r1
 800ab66:	3317      	adds	r3, #23
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	68f9      	ldr	r1, [r7, #12]
 800ab72:	4613      	mov	r3, r2
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	440b      	add	r3, r1
 800ab7c:	333c      	adds	r3, #60	@ 0x3c
 800ab7e:	78ba      	ldrb	r2, [r7, #2]
 800ab80:	701a      	strb	r2, [r3, #0]
 800ab82:	e009      	b.n	800ab98 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ab84:	78fa      	ldrb	r2, [r7, #3]
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	1a9b      	subs	r3, r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	440b      	add	r3, r1
 800ab92:	333d      	adds	r3, #61	@ 0x3d
 800ab94:	78ba      	ldrb	r2, [r7, #2]
 800ab96:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b082      	sub	sp, #8
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7f6 fbd6 	bl	8001360 <HAL_Delay>
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	4603      	mov	r3, r0
 800abc4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800abca:	79fb      	ldrb	r3, [r7, #7]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d817      	bhi.n	800ac00 <USBH_Get_USB_Status+0x44>
 800abd0:	a201      	add	r2, pc, #4	@ (adr r2, 800abd8 <USBH_Get_USB_Status+0x1c>)
 800abd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd6:	bf00      	nop
 800abd8:	0800abe9 	.word	0x0800abe9
 800abdc:	0800abef 	.word	0x0800abef
 800abe0:	0800abf5 	.word	0x0800abf5
 800abe4:	0800abfb 	.word	0x0800abfb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]
    break;
 800abec:	e00b      	b.n	800ac06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800abee:	2302      	movs	r3, #2
 800abf0:	73fb      	strb	r3, [r7, #15]
    break;
 800abf2:	e008      	b.n	800ac06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
    break;
 800abf8:	e005      	b.n	800ac06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800abfa:	2302      	movs	r3, #2
 800abfc:	73fb      	strb	r3, [r7, #15]
    break;
 800abfe:	e002      	b.n	800ac06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ac00:	2302      	movs	r3, #2
 800ac02:	73fb      	strb	r3, [r7, #15]
    break;
 800ac04:	bf00      	nop
  }
  return usb_status;
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af04      	add	r7, sp, #16
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800ac26:	2300      	movs	r3, #0
 800ac28:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800ac32:	7b7b      	ldrb	r3, [r7, #13]
 800ac34:	b299      	uxth	r1, r3
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	2364      	movs	r3, #100	@ 0x64
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	2301      	movs	r3, #1
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	f107 030b 	add.w	r3, r7, #11
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	2301      	movs	r3, #1
 800ac4a:	480f      	ldr	r0, [pc, #60]	@ (800ac88 <MX_DriverVbusFS+0x74>)
 800ac4c:	f7f9 fd56 	bl	80046fc <HAL_I2C_Mem_Read>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800ac54:	7b3a      	ldrb	r2, [r7, #12]
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800ac5e:	7b7b      	ldrb	r3, [r7, #13]
 800ac60:	b299      	uxth	r1, r3
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	2364      	movs	r3, #100	@ 0x64
 800ac68:	9302      	str	r3, [sp, #8]
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	f107 030c 	add.w	r3, r7, #12
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	2301      	movs	r3, #1
 800ac76:	4804      	ldr	r0, [pc, #16]	@ (800ac88 <MX_DriverVbusFS+0x74>)
 800ac78:	f7f9 fc46 	bl	8004508 <HAL_I2C_Mem_Write>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800ac80:	bf00      	nop
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000098 	.word	0x20000098

0800ac8c <malloc>:
 800ac8c:	4b02      	ldr	r3, [pc, #8]	@ (800ac98 <malloc+0xc>)
 800ac8e:	4601      	mov	r1, r0
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	f000 b82d 	b.w	800acf0 <_malloc_r>
 800ac96:	bf00      	nop
 800ac98:	2000002c 	.word	0x2000002c

0800ac9c <free>:
 800ac9c:	4b02      	ldr	r3, [pc, #8]	@ (800aca8 <free+0xc>)
 800ac9e:	4601      	mov	r1, r0
 800aca0:	6818      	ldr	r0, [r3, #0]
 800aca2:	f000 b8f5 	b.w	800ae90 <_free_r>
 800aca6:	bf00      	nop
 800aca8:	2000002c 	.word	0x2000002c

0800acac <sbrk_aligned>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	4e0f      	ldr	r6, [pc, #60]	@ (800acec <sbrk_aligned+0x40>)
 800acb0:	460c      	mov	r4, r1
 800acb2:	6831      	ldr	r1, [r6, #0]
 800acb4:	4605      	mov	r5, r0
 800acb6:	b911      	cbnz	r1, 800acbe <sbrk_aligned+0x12>
 800acb8:	f000 f8ae 	bl	800ae18 <_sbrk_r>
 800acbc:	6030      	str	r0, [r6, #0]
 800acbe:	4621      	mov	r1, r4
 800acc0:	4628      	mov	r0, r5
 800acc2:	f000 f8a9 	bl	800ae18 <_sbrk_r>
 800acc6:	1c43      	adds	r3, r0, #1
 800acc8:	d103      	bne.n	800acd2 <sbrk_aligned+0x26>
 800acca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800acce:	4620      	mov	r0, r4
 800acd0:	bd70      	pop	{r4, r5, r6, pc}
 800acd2:	1cc4      	adds	r4, r0, #3
 800acd4:	f024 0403 	bic.w	r4, r4, #3
 800acd8:	42a0      	cmp	r0, r4
 800acda:	d0f8      	beq.n	800acce <sbrk_aligned+0x22>
 800acdc:	1a21      	subs	r1, r4, r0
 800acde:	4628      	mov	r0, r5
 800ace0:	f000 f89a 	bl	800ae18 <_sbrk_r>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d1f2      	bne.n	800acce <sbrk_aligned+0x22>
 800ace8:	e7ef      	b.n	800acca <sbrk_aligned+0x1e>
 800acea:	bf00      	nop
 800acec:	20008a5c 	.word	0x20008a5c

0800acf0 <_malloc_r>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	1ccd      	adds	r5, r1, #3
 800acf6:	f025 0503 	bic.w	r5, r5, #3
 800acfa:	3508      	adds	r5, #8
 800acfc:	2d0c      	cmp	r5, #12
 800acfe:	bf38      	it	cc
 800ad00:	250c      	movcc	r5, #12
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	4606      	mov	r6, r0
 800ad06:	db01      	blt.n	800ad0c <_malloc_r+0x1c>
 800ad08:	42a9      	cmp	r1, r5
 800ad0a:	d904      	bls.n	800ad16 <_malloc_r+0x26>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	6033      	str	r3, [r6, #0]
 800ad10:	2000      	movs	r0, #0
 800ad12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800adec <_malloc_r+0xfc>
 800ad1a:	f000 f869 	bl	800adf0 <__malloc_lock>
 800ad1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad22:	461c      	mov	r4, r3
 800ad24:	bb44      	cbnz	r4, 800ad78 <_malloc_r+0x88>
 800ad26:	4629      	mov	r1, r5
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f7ff ffbf 	bl	800acac <sbrk_aligned>
 800ad2e:	1c43      	adds	r3, r0, #1
 800ad30:	4604      	mov	r4, r0
 800ad32:	d158      	bne.n	800ade6 <_malloc_r+0xf6>
 800ad34:	f8d8 4000 	ldr.w	r4, [r8]
 800ad38:	4627      	mov	r7, r4
 800ad3a:	2f00      	cmp	r7, #0
 800ad3c:	d143      	bne.n	800adc6 <_malloc_r+0xd6>
 800ad3e:	2c00      	cmp	r4, #0
 800ad40:	d04b      	beq.n	800adda <_malloc_r+0xea>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	4639      	mov	r1, r7
 800ad46:	4630      	mov	r0, r6
 800ad48:	eb04 0903 	add.w	r9, r4, r3
 800ad4c:	f000 f864 	bl	800ae18 <_sbrk_r>
 800ad50:	4581      	cmp	r9, r0
 800ad52:	d142      	bne.n	800adda <_malloc_r+0xea>
 800ad54:	6821      	ldr	r1, [r4, #0]
 800ad56:	1a6d      	subs	r5, r5, r1
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ffa6 	bl	800acac <sbrk_aligned>
 800ad60:	3001      	adds	r0, #1
 800ad62:	d03a      	beq.n	800adda <_malloc_r+0xea>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	442b      	add	r3, r5
 800ad68:	6023      	str	r3, [r4, #0]
 800ad6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	bb62      	cbnz	r2, 800adcc <_malloc_r+0xdc>
 800ad72:	f8c8 7000 	str.w	r7, [r8]
 800ad76:	e00f      	b.n	800ad98 <_malloc_r+0xa8>
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	1b52      	subs	r2, r2, r5
 800ad7c:	d420      	bmi.n	800adc0 <_malloc_r+0xd0>
 800ad7e:	2a0b      	cmp	r2, #11
 800ad80:	d917      	bls.n	800adb2 <_malloc_r+0xc2>
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	6025      	str	r5, [r4, #0]
 800ad88:	bf18      	it	ne
 800ad8a:	6059      	strne	r1, [r3, #4]
 800ad8c:	6863      	ldr	r3, [r4, #4]
 800ad8e:	bf08      	it	eq
 800ad90:	f8c8 1000 	streq.w	r1, [r8]
 800ad94:	5162      	str	r2, [r4, r5]
 800ad96:	604b      	str	r3, [r1, #4]
 800ad98:	4630      	mov	r0, r6
 800ad9a:	f000 f82f 	bl	800adfc <__malloc_unlock>
 800ad9e:	f104 000b 	add.w	r0, r4, #11
 800ada2:	1d23      	adds	r3, r4, #4
 800ada4:	f020 0007 	bic.w	r0, r0, #7
 800ada8:	1ac2      	subs	r2, r0, r3
 800adaa:	bf1c      	itt	ne
 800adac:	1a1b      	subne	r3, r3, r0
 800adae:	50a3      	strne	r3, [r4, r2]
 800adb0:	e7af      	b.n	800ad12 <_malloc_r+0x22>
 800adb2:	6862      	ldr	r2, [r4, #4]
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	bf0c      	ite	eq
 800adb8:	f8c8 2000 	streq.w	r2, [r8]
 800adbc:	605a      	strne	r2, [r3, #4]
 800adbe:	e7eb      	b.n	800ad98 <_malloc_r+0xa8>
 800adc0:	4623      	mov	r3, r4
 800adc2:	6864      	ldr	r4, [r4, #4]
 800adc4:	e7ae      	b.n	800ad24 <_malloc_r+0x34>
 800adc6:	463c      	mov	r4, r7
 800adc8:	687f      	ldr	r7, [r7, #4]
 800adca:	e7b6      	b.n	800ad3a <_malloc_r+0x4a>
 800adcc:	461a      	mov	r2, r3
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	42a3      	cmp	r3, r4
 800add2:	d1fb      	bne.n	800adcc <_malloc_r+0xdc>
 800add4:	2300      	movs	r3, #0
 800add6:	6053      	str	r3, [r2, #4]
 800add8:	e7de      	b.n	800ad98 <_malloc_r+0xa8>
 800adda:	230c      	movs	r3, #12
 800addc:	6033      	str	r3, [r6, #0]
 800adde:	4630      	mov	r0, r6
 800ade0:	f000 f80c 	bl	800adfc <__malloc_unlock>
 800ade4:	e794      	b.n	800ad10 <_malloc_r+0x20>
 800ade6:	6005      	str	r5, [r0, #0]
 800ade8:	e7d6      	b.n	800ad98 <_malloc_r+0xa8>
 800adea:	bf00      	nop
 800adec:	20008a60 	.word	0x20008a60

0800adf0 <__malloc_lock>:
 800adf0:	4801      	ldr	r0, [pc, #4]	@ (800adf8 <__malloc_lock+0x8>)
 800adf2:	f000 b84b 	b.w	800ae8c <__retarget_lock_acquire_recursive>
 800adf6:	bf00      	nop
 800adf8:	20008b9c 	.word	0x20008b9c

0800adfc <__malloc_unlock>:
 800adfc:	4801      	ldr	r0, [pc, #4]	@ (800ae04 <__malloc_unlock+0x8>)
 800adfe:	f000 b846 	b.w	800ae8e <__retarget_lock_release_recursive>
 800ae02:	bf00      	nop
 800ae04:	20008b9c 	.word	0x20008b9c

0800ae08 <memset>:
 800ae08:	4402      	add	r2, r0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d100      	bne.n	800ae12 <memset+0xa>
 800ae10:	4770      	bx	lr
 800ae12:	f803 1b01 	strb.w	r1, [r3], #1
 800ae16:	e7f9      	b.n	800ae0c <memset+0x4>

0800ae18 <_sbrk_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d06      	ldr	r5, [pc, #24]	@ (800ae34 <_sbrk_r+0x1c>)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	f7f6 f8ec 	bl	8001000 <_sbrk>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_sbrk_r+0x1a>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_sbrk_r+0x1a>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20008ba0 	.word	0x20008ba0

0800ae38 <__errno>:
 800ae38:	4b01      	ldr	r3, [pc, #4]	@ (800ae40 <__errno+0x8>)
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	2000002c 	.word	0x2000002c

0800ae44 <__libc_init_array>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	4d0d      	ldr	r5, [pc, #52]	@ (800ae7c <__libc_init_array+0x38>)
 800ae48:	4c0d      	ldr	r4, [pc, #52]	@ (800ae80 <__libc_init_array+0x3c>)
 800ae4a:	1b64      	subs	r4, r4, r5
 800ae4c:	10a4      	asrs	r4, r4, #2
 800ae4e:	2600      	movs	r6, #0
 800ae50:	42a6      	cmp	r6, r4
 800ae52:	d109      	bne.n	800ae68 <__libc_init_array+0x24>
 800ae54:	4d0b      	ldr	r5, [pc, #44]	@ (800ae84 <__libc_init_array+0x40>)
 800ae56:	4c0c      	ldr	r4, [pc, #48]	@ (800ae88 <__libc_init_array+0x44>)
 800ae58:	f000 f864 	bl	800af24 <_init>
 800ae5c:	1b64      	subs	r4, r4, r5
 800ae5e:	10a4      	asrs	r4, r4, #2
 800ae60:	2600      	movs	r6, #0
 800ae62:	42a6      	cmp	r6, r4
 800ae64:	d105      	bne.n	800ae72 <__libc_init_array+0x2e>
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae6c:	4798      	blx	r3
 800ae6e:	3601      	adds	r6, #1
 800ae70:	e7ee      	b.n	800ae50 <__libc_init_array+0xc>
 800ae72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae76:	4798      	blx	r3
 800ae78:	3601      	adds	r6, #1
 800ae7a:	e7f2      	b.n	800ae62 <__libc_init_array+0x1e>
 800ae7c:	0800af68 	.word	0x0800af68
 800ae80:	0800af68 	.word	0x0800af68
 800ae84:	0800af68 	.word	0x0800af68
 800ae88:	0800af6c 	.word	0x0800af6c

0800ae8c <__retarget_lock_acquire_recursive>:
 800ae8c:	4770      	bx	lr

0800ae8e <__retarget_lock_release_recursive>:
 800ae8e:	4770      	bx	lr

0800ae90 <_free_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4605      	mov	r5, r0
 800ae94:	2900      	cmp	r1, #0
 800ae96:	d041      	beq.n	800af1c <_free_r+0x8c>
 800ae98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae9c:	1f0c      	subs	r4, r1, #4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bfb8      	it	lt
 800aea2:	18e4      	addlt	r4, r4, r3
 800aea4:	f7ff ffa4 	bl	800adf0 <__malloc_lock>
 800aea8:	4a1d      	ldr	r2, [pc, #116]	@ (800af20 <_free_r+0x90>)
 800aeaa:	6813      	ldr	r3, [r2, #0]
 800aeac:	b933      	cbnz	r3, 800aebc <_free_r+0x2c>
 800aeae:	6063      	str	r3, [r4, #4]
 800aeb0:	6014      	str	r4, [r2, #0]
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeb8:	f7ff bfa0 	b.w	800adfc <__malloc_unlock>
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	d908      	bls.n	800aed2 <_free_r+0x42>
 800aec0:	6820      	ldr	r0, [r4, #0]
 800aec2:	1821      	adds	r1, r4, r0
 800aec4:	428b      	cmp	r3, r1
 800aec6:	bf01      	itttt	eq
 800aec8:	6819      	ldreq	r1, [r3, #0]
 800aeca:	685b      	ldreq	r3, [r3, #4]
 800aecc:	1809      	addeq	r1, r1, r0
 800aece:	6021      	streq	r1, [r4, #0]
 800aed0:	e7ed      	b.n	800aeae <_free_r+0x1e>
 800aed2:	461a      	mov	r2, r3
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	b10b      	cbz	r3, 800aedc <_free_r+0x4c>
 800aed8:	42a3      	cmp	r3, r4
 800aeda:	d9fa      	bls.n	800aed2 <_free_r+0x42>
 800aedc:	6811      	ldr	r1, [r2, #0]
 800aede:	1850      	adds	r0, r2, r1
 800aee0:	42a0      	cmp	r0, r4
 800aee2:	d10b      	bne.n	800aefc <_free_r+0x6c>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	4401      	add	r1, r0
 800aee8:	1850      	adds	r0, r2, r1
 800aeea:	4283      	cmp	r3, r0
 800aeec:	6011      	str	r1, [r2, #0]
 800aeee:	d1e0      	bne.n	800aeb2 <_free_r+0x22>
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	6053      	str	r3, [r2, #4]
 800aef6:	4408      	add	r0, r1
 800aef8:	6010      	str	r0, [r2, #0]
 800aefa:	e7da      	b.n	800aeb2 <_free_r+0x22>
 800aefc:	d902      	bls.n	800af04 <_free_r+0x74>
 800aefe:	230c      	movs	r3, #12
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	e7d6      	b.n	800aeb2 <_free_r+0x22>
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	1821      	adds	r1, r4, r0
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf04      	itt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	bf04      	itt	eq
 800af14:	1809      	addeq	r1, r1, r0
 800af16:	6021      	streq	r1, [r4, #0]
 800af18:	6054      	str	r4, [r2, #4]
 800af1a:	e7ca      	b.n	800aeb2 <_free_r+0x22>
 800af1c:	bd38      	pop	{r3, r4, r5, pc}
 800af1e:	bf00      	nop
 800af20:	20008a60 	.word	0x20008a60

0800af24 <_init>:
 800af24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af26:	bf00      	nop
 800af28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2a:	bc08      	pop	{r3}
 800af2c:	469e      	mov	lr, r3
 800af2e:	4770      	bx	lr

0800af30 <_fini>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr
