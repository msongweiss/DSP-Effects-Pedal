
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800c384  0800c384  0000d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c778  0800c778  0000e07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c778  0800c778  0000d778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c780  0800c780  0000e07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c780  0800c780  0000d780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c784  0800c784  0000d784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800c788  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e07c  2**0
                  CONTENTS
 10 .bss          00002b8c  2000007c  2000007c  0000e07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c08  20002c08  0000e07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbea  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dce  00000000  00000000  0002ac96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002fa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f8  00000000  00000000  000310a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025de3  00000000  00000000  000321a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000209a0  00000000  00000000  00057f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d133f  00000000  00000000  00078923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149c62  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006050  00000000  00000000  00149ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0014fcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c36c 	.word	0x0800c36c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800c36c 	.word	0x0800c36c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b988 	b.w	8000b5c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9d08      	ldr	r5, [sp, #32]
 800086a:	468e      	mov	lr, r1
 800086c:	4604      	mov	r4, r0
 800086e:	4688      	mov	r8, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4617      	mov	r7, r2
 8000878:	d962      	bls.n	8000940 <__udivmoddi4+0xdc>
 800087a:	fab2 f682 	clz	r6, r2
 800087e:	b14e      	cbz	r6, 8000894 <__udivmoddi4+0x30>
 8000880:	f1c6 0320 	rsb	r3, r6, #32
 8000884:	fa01 f806 	lsl.w	r8, r1, r6
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	40b7      	lsls	r7, r6
 800088e:	ea43 0808 	orr.w	r8, r3, r8
 8000892:	40b4      	lsls	r4, r6
 8000894:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000898:	fa1f fc87 	uxth.w	ip, r7
 800089c:	fbb8 f1fe 	udiv	r1, r8, lr
 80008a0:	0c23      	lsrs	r3, r4, #16
 80008a2:	fb0e 8811 	mls	r8, lr, r1, r8
 80008a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008aa:	fb01 f20c 	mul.w	r2, r1, ip
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008b8:	f080 80ea 	bcs.w	8000a90 <__udivmoddi4+0x22c>
 80008bc:	429a      	cmp	r2, r3
 80008be:	f240 80e7 	bls.w	8000a90 <__udivmoddi4+0x22c>
 80008c2:	3902      	subs	r1, #2
 80008c4:	443b      	add	r3, r7
 80008c6:	1a9a      	subs	r2, r3, r2
 80008c8:	b2a3      	uxth	r3, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008d6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008da:	459c      	cmp	ip, r3
 80008dc:	d909      	bls.n	80008f2 <__udivmoddi4+0x8e>
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e4:	f080 80d6 	bcs.w	8000a94 <__udivmoddi4+0x230>
 80008e8:	459c      	cmp	ip, r3
 80008ea:	f240 80d3 	bls.w	8000a94 <__udivmoddi4+0x230>
 80008ee:	443b      	add	r3, r7
 80008f0:	3802      	subs	r0, #2
 80008f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f6:	eba3 030c 	sub.w	r3, r3, ip
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11d      	cbz	r5, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40f3      	lsrs	r3, r6
 8000900:	2200      	movs	r2, #0
 8000902:	e9c5 3200 	strd	r3, r2, [r5]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d905      	bls.n	800091a <__udivmoddi4+0xb6>
 800090e:	b10d      	cbz	r5, 8000914 <__udivmoddi4+0xb0>
 8000910:	e9c5 0100 	strd	r0, r1, [r5]
 8000914:	2100      	movs	r1, #0
 8000916:	4608      	mov	r0, r1
 8000918:	e7f5      	b.n	8000906 <__udivmoddi4+0xa2>
 800091a:	fab3 f183 	clz	r1, r3
 800091e:	2900      	cmp	r1, #0
 8000920:	d146      	bne.n	80009b0 <__udivmoddi4+0x14c>
 8000922:	4573      	cmp	r3, lr
 8000924:	d302      	bcc.n	800092c <__udivmoddi4+0xc8>
 8000926:	4282      	cmp	r2, r0
 8000928:	f200 8105 	bhi.w	8000b36 <__udivmoddi4+0x2d2>
 800092c:	1a84      	subs	r4, r0, r2
 800092e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000932:	2001      	movs	r0, #1
 8000934:	4690      	mov	r8, r2
 8000936:	2d00      	cmp	r5, #0
 8000938:	d0e5      	beq.n	8000906 <__udivmoddi4+0xa2>
 800093a:	e9c5 4800 	strd	r4, r8, [r5]
 800093e:	e7e2      	b.n	8000906 <__udivmoddi4+0xa2>
 8000940:	2a00      	cmp	r2, #0
 8000942:	f000 8090 	beq.w	8000a66 <__udivmoddi4+0x202>
 8000946:	fab2 f682 	clz	r6, r2
 800094a:	2e00      	cmp	r6, #0
 800094c:	f040 80a4 	bne.w	8000a98 <__udivmoddi4+0x234>
 8000950:	1a8a      	subs	r2, r1, r2
 8000952:	0c03      	lsrs	r3, r0, #16
 8000954:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000958:	b280      	uxth	r0, r0
 800095a:	b2bc      	uxth	r4, r7
 800095c:	2101      	movs	r1, #1
 800095e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000962:	fb0e 221c 	mls	r2, lr, ip, r2
 8000966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096a:	fb04 f20c 	mul.w	r2, r4, ip
 800096e:	429a      	cmp	r2, r3
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x11e>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x11c>
 800097a:	429a      	cmp	r2, r3
 800097c:	f200 80e0 	bhi.w	8000b40 <__udivmoddi4+0x2dc>
 8000980:	46c4      	mov	ip, r8
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	fbb3 f2fe 	udiv	r2, r3, lr
 8000988:	fb0e 3312 	mls	r3, lr, r2, r3
 800098c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000990:	fb02 f404 	mul.w	r4, r2, r4
 8000994:	429c      	cmp	r4, r3
 8000996:	d907      	bls.n	80009a8 <__udivmoddi4+0x144>
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	f102 30ff 	add.w	r0, r2, #4294967295
 800099e:	d202      	bcs.n	80009a6 <__udivmoddi4+0x142>
 80009a0:	429c      	cmp	r4, r3
 80009a2:	f200 80ca 	bhi.w	8000b3a <__udivmoddi4+0x2d6>
 80009a6:	4602      	mov	r2, r0
 80009a8:	1b1b      	subs	r3, r3, r4
 80009aa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80009ae:	e7a5      	b.n	80008fc <__udivmoddi4+0x98>
 80009b0:	f1c1 0620 	rsb	r6, r1, #32
 80009b4:	408b      	lsls	r3, r1
 80009b6:	fa22 f706 	lsr.w	r7, r2, r6
 80009ba:	431f      	orrs	r7, r3
 80009bc:	fa0e f401 	lsl.w	r4, lr, r1
 80009c0:	fa20 f306 	lsr.w	r3, r0, r6
 80009c4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009cc:	4323      	orrs	r3, r4
 80009ce:	fa00 f801 	lsl.w	r8, r0, r1
 80009d2:	fa1f fc87 	uxth.w	ip, r7
 80009d6:	fbbe f0f9 	udiv	r0, lr, r9
 80009da:	0c1c      	lsrs	r4, r3, #16
 80009dc:	fb09 ee10 	mls	lr, r9, r0, lr
 80009e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009e4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	fa02 f201 	lsl.w	r2, r2, r1
 80009ee:	d909      	bls.n	8000a04 <__udivmoddi4+0x1a0>
 80009f0:	193c      	adds	r4, r7, r4
 80009f2:	f100 3aff 	add.w	sl, r0, #4294967295
 80009f6:	f080 809c 	bcs.w	8000b32 <__udivmoddi4+0x2ce>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f240 8099 	bls.w	8000b32 <__udivmoddi4+0x2ce>
 8000a00:	3802      	subs	r0, #2
 8000a02:	443c      	add	r4, r7
 8000a04:	eba4 040e 	sub.w	r4, r4, lr
 8000a08:	fa1f fe83 	uxth.w	lr, r3
 8000a0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a10:	fb09 4413 	mls	r4, r9, r3, r4
 8000a14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a1c:	45a4      	cmp	ip, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x1ce>
 8000a20:	193c      	adds	r4, r7, r4
 8000a22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a26:	f080 8082 	bcs.w	8000b2e <__udivmoddi4+0x2ca>
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d97f      	bls.n	8000b2e <__udivmoddi4+0x2ca>
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	443c      	add	r4, r7
 8000a32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a36:	eba4 040c 	sub.w	r4, r4, ip
 8000a3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a3e:	4564      	cmp	r4, ip
 8000a40:	4673      	mov	r3, lr
 8000a42:	46e1      	mov	r9, ip
 8000a44:	d362      	bcc.n	8000b0c <__udivmoddi4+0x2a8>
 8000a46:	d05f      	beq.n	8000b08 <__udivmoddi4+0x2a4>
 8000a48:	b15d      	cbz	r5, 8000a62 <__udivmoddi4+0x1fe>
 8000a4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a52:	fa04 f606 	lsl.w	r6, r4, r6
 8000a56:	fa22 f301 	lsr.w	r3, r2, r1
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	40cc      	lsrs	r4, r1
 8000a5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a62:	2100      	movs	r1, #0
 8000a64:	e74f      	b.n	8000906 <__udivmoddi4+0xa2>
 8000a66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a6a:	0c01      	lsrs	r1, r0, #16
 8000a6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a70:	b280      	uxth	r0, r0
 8000a72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a76:	463b      	mov	r3, r7
 8000a78:	4638      	mov	r0, r7
 8000a7a:	463c      	mov	r4, r7
 8000a7c:	46b8      	mov	r8, r7
 8000a7e:	46be      	mov	lr, r7
 8000a80:	2620      	movs	r6, #32
 8000a82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a86:	eba2 0208 	sub.w	r2, r2, r8
 8000a8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a8e:	e766      	b.n	800095e <__udivmoddi4+0xfa>
 8000a90:	4601      	mov	r1, r0
 8000a92:	e718      	b.n	80008c6 <__udivmoddi4+0x62>
 8000a94:	4610      	mov	r0, r2
 8000a96:	e72c      	b.n	80008f2 <__udivmoddi4+0x8e>
 8000a98:	f1c6 0220 	rsb	r2, r6, #32
 8000a9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000aa0:	40b7      	lsls	r7, r6
 8000aa2:	40b1      	lsls	r1, r6
 8000aa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000aa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aac:	430a      	orrs	r2, r1
 8000aae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ab2:	b2bc      	uxth	r4, r7
 8000ab4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ab8:	0c11      	lsrs	r1, r2, #16
 8000aba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000abe:	fb08 f904 	mul.w	r9, r8, r4
 8000ac2:	40b0      	lsls	r0, r6
 8000ac4:	4589      	cmp	r9, r1
 8000ac6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000aca:	b280      	uxth	r0, r0
 8000acc:	d93e      	bls.n	8000b4c <__udivmoddi4+0x2e8>
 8000ace:	1879      	adds	r1, r7, r1
 8000ad0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ad4:	d201      	bcs.n	8000ada <__udivmoddi4+0x276>
 8000ad6:	4589      	cmp	r9, r1
 8000ad8:	d81f      	bhi.n	8000b1a <__udivmoddi4+0x2b6>
 8000ada:	eba1 0109 	sub.w	r1, r1, r9
 8000ade:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae2:	fb09 f804 	mul.w	r8, r9, r4
 8000ae6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aea:	b292      	uxth	r2, r2
 8000aec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000af0:	4542      	cmp	r2, r8
 8000af2:	d229      	bcs.n	8000b48 <__udivmoddi4+0x2e4>
 8000af4:	18ba      	adds	r2, r7, r2
 8000af6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000afa:	d2c4      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000afc:	4542      	cmp	r2, r8
 8000afe:	d2c2      	bcs.n	8000a86 <__udivmoddi4+0x222>
 8000b00:	f1a9 0102 	sub.w	r1, r9, #2
 8000b04:	443a      	add	r2, r7
 8000b06:	e7be      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b08:	45f0      	cmp	r8, lr
 8000b0a:	d29d      	bcs.n	8000a48 <__udivmoddi4+0x1e4>
 8000b0c:	ebbe 0302 	subs.w	r3, lr, r2
 8000b10:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b14:	3801      	subs	r0, #1
 8000b16:	46e1      	mov	r9, ip
 8000b18:	e796      	b.n	8000a48 <__udivmoddi4+0x1e4>
 8000b1a:	eba7 0909 	sub.w	r9, r7, r9
 8000b1e:	4449      	add	r1, r9
 8000b20:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b24:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b28:	fb09 f804 	mul.w	r8, r9, r4
 8000b2c:	e7db      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b2e:	4673      	mov	r3, lr
 8000b30:	e77f      	b.n	8000a32 <__udivmoddi4+0x1ce>
 8000b32:	4650      	mov	r0, sl
 8000b34:	e766      	b.n	8000a04 <__udivmoddi4+0x1a0>
 8000b36:	4608      	mov	r0, r1
 8000b38:	e6fd      	b.n	8000936 <__udivmoddi4+0xd2>
 8000b3a:	443b      	add	r3, r7
 8000b3c:	3a02      	subs	r2, #2
 8000b3e:	e733      	b.n	80009a8 <__udivmoddi4+0x144>
 8000b40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b44:	443b      	add	r3, r7
 8000b46:	e71c      	b.n	8000982 <__udivmoddi4+0x11e>
 8000b48:	4649      	mov	r1, r9
 8000b4a:	e79c      	b.n	8000a86 <__udivmoddi4+0x222>
 8000b4c:	eba1 0109 	sub.w	r1, r1, r9
 8000b50:	46c4      	mov	ip, r8
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fb09 f804 	mul.w	r8, r9, r4
 8000b5a:	e7c4      	b.n	8000ae6 <__udivmoddi4+0x282>

08000b5c <__aeabi_idiv0>:
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_DMA_Init+0x4c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f9c3 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f9dc 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f001 f9bb 	bl	8001f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f001 f9d4 	bl	8001f4a <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b78      	ldr	r3, [pc, #480]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a77      	ldr	r2, [pc, #476]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b75      	ldr	r3, [pc, #468]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b71      	ldr	r3, [pc, #452]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a70      	ldr	r2, [pc, #448]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b6a      	ldr	r3, [pc, #424]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a69      	ldr	r2, [pc, #420]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b67      	ldr	r3, [pc, #412]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b63      	ldr	r3, [pc, #396]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a62      	ldr	r2, [pc, #392]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b60      	ldr	r3, [pc, #384]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b59      	ldr	r3, [pc, #356]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a54      	ldr	r2, [pc, #336]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b52      	ldr	r3, [pc, #328]	@ (8000dac <MX_GPIO_Init+0x1fc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2108      	movs	r1, #8
 8000c72:	484f      	ldr	r0, [pc, #316]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000c74:	f001 fe90 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	484d      	ldr	r0, [pc, #308]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000c7e:	f001 fe8b 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c82:	2200      	movs	r2, #0
 8000c84:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c88:	484b      	ldr	r0, [pc, #300]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000c8a:	f001 fe85 	bl	8002998 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4842      	ldr	r0, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000ca6:	f001 fcdb 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000caa:	2301      	movs	r3, #1
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	483c      	ldr	r0, [pc, #240]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000cc2:	f001 fccd 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4838      	ldr	r0, [pc, #224]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cdc:	f001 fcc0 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4832      	ldr	r0, [pc, #200]	@ (8000dbc <MX_GPIO_Init+0x20c>)
 8000cf4:	f001 fcb4 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	482d      	ldr	r0, [pc, #180]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d0c:	f001 fca8 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d10:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4823      	ldr	r0, [pc, #140]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d2a:	f001 fc99 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d2e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d40:	2306      	movs	r3, #6
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481a      	ldr	r0, [pc, #104]	@ (8000db4 <MX_GPIO_Init+0x204>)
 8000d4c:	f001 fc88 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000d50:	2320      	movs	r3, #32
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <MX_GPIO_Init+0x208>)
 8000d64:	f001 fc7c 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d68:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	480e      	ldr	r0, [pc, #56]	@ (8000dc0 <MX_GPIO_Init+0x210>)
 8000d86:	f001 fc6b 	bl	8002660 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_GPIO_Init+0x200>)
 8000da0:	f001 fc5e 	bl	8002660 <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dca:	4a13      	ldr	r2, [pc, #76]	@ (8000e18 <MX_I2C3_Init+0x54>)
 8000dcc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd0:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <MX_I2C3_Init+0x58>)
 8000dd2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000de2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df4:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_I2C3_Init+0x50>)
 8000e02:	f003 ff31 	bl	8004c68 <HAL_I2C_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e0c:	f000 fb88 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000098 	.word	0x20000098
 8000e18:	40005c00 	.word	0x40005c00
 8000e1c:	000186a0 	.word	0x000186a0

08000e20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a29      	ldr	r2, [pc, #164]	@ (8000ee4 <HAL_I2C_MspInit+0xc4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d14b      	bne.n	8000eda <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a27      	ldr	r2, [pc, #156]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a20      	ldr	r2, [pc, #128]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e80:	2312      	movs	r3, #18
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4815      	ldr	r0, [pc, #84]	@ (8000eec <HAL_I2C_MspInit+0xcc>)
 8000e98:	f001 fbe2 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea2:	2312      	movs	r3, #18
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <HAL_I2C_MspInit+0xd0>)
 8000eba:	f001 fbd1 	bl	8002660 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40005c00 	.word	0x40005c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000efa:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <MX_I2S2_Init+0x58>)
 8000efc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000efe:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f04:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f0e:	2203      	movs	r2, #3
 8000f10:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f1c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8000f20:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	@ (8000f48 <MX_I2S2_Init+0x54>)
 8000f36:	f004 febb 	bl	8005cb0 <HAL_I2S_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000f40:	f000 faee 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000ec 	.word	0x200000ec
 8000f4c:	40003800 	.word	0x40003800

08000f50 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001138 <HAL_I2S_MspInit+0x1e8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f040 80d7 	bne.w	8001130 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000f86:	2360      	movs	r3, #96	@ 0x60
 8000f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 f9c8 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000f9e:	f000 fabf 	bl	8001520 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a64      	ldr	r2, [pc, #400]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	4a5d      	ldr	r2, [pc, #372]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fce:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	4b57      	ldr	r3, [pc, #348]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a56      	ldr	r2, [pc, #344]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b54      	ldr	r3, [pc, #336]	@ (800113c <HAL_I2S_MspInit+0x1ec>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 8000ff6:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001008:	2305      	movs	r3, #5
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	484b      	ldr	r0, [pc, #300]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001014:	f001 fb24 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001018:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800102a:	2306      	movs	r3, #6
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4842      	ldr	r0, [pc, #264]	@ (8001140 <HAL_I2S_MspInit+0x1f0>)
 8001036:	f001 fb13 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	483b      	ldr	r0, [pc, #236]	@ (8001144 <HAL_I2S_MspInit+0x1f4>)
 8001056:	f001 fb03 	bl	8002660 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800105c:	4a3b      	ldr	r2, [pc, #236]	@ (800114c <HAL_I2S_MspInit+0x1fc>)
 800105e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001060:	4b39      	ldr	r3, [pc, #228]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001062:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001066:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001068:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800106e:	4b36      	ldr	r3, [pc, #216]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001074:	4b34      	ldr	r3, [pc, #208]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800107a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800107e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001082:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001086:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800108a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800108c:	4b2e      	ldr	r3, [pc, #184]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001094:	4b2c      	ldr	r3, [pc, #176]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 8001096:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800109a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109c:	4b2a      	ldr	r3, [pc, #168]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80010a2:	4829      	ldr	r0, [pc, #164]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010a4:	f000 ff6c 	bl	8001f80 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 80010ae:	f000 fa37 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a24      	ldr	r2, [pc, #144]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b8:	4a23      	ldr	r2, [pc, #140]	@ (8001148 <HAL_I2S_MspInit+0x1f8>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80010be:	4b24      	ldr	r3, [pc, #144]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c0:	4a24      	ldr	r2, [pc, #144]	@ (8001154 <HAL_I2S_MspInit+0x204>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010dc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 80010f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001104:	4812      	ldr	r0, [pc, #72]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001106:	f000 ff3b 	bl	8001f80 <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001110:	f000 fa06 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a0e      	ldr	r2, [pc, #56]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 8001118:	639a      	str	r2, [r3, #56]	@ 0x38
 800111a:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <HAL_I2S_MspInit+0x200>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2024      	movs	r0, #36	@ 0x24
 8001126:	f000 fef4 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800112a:	2024      	movs	r0, #36	@ 0x24
 800112c:	f000 ff0d 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	@ 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40003800 	.word	0x40003800
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40020800 	.word	0x40020800
 8001148:	20000134 	.word	0x20000134
 800114c:	40026058 	.word	0x40026058
 8001150:	20000194 	.word	0x20000194
 8001154:	40026070 	.word	0x40026070

08001158 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

// FOR DOUBLE BUFFERING
// Half complete buffer
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	200001f4 	.word	0x200001f4

08001178 <HAL_I2SEx_TxRxCpltCallback>:

// Fully complete buffer
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8001182:	2202      	movs	r2, #2
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001f4 	.word	0x200001f4

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119e:	f000 fd47 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a2:	f000 f953 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a6:	f7ff fd03 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011aa:	f7ff fcd9 	bl	8000b60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011ae:	f000 fc49 	bl	8001a44 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80011b2:	f000 fa3f 	bl	8001634 <MX_SPI1_Init>
  MX_I2C3_Init();
 80011b6:	f7ff fe05 	bl	8000dc4 <MX_I2C3_Init>
  MX_USB_HOST_Init();
 80011ba:	f009 ff31 	bl	800b020 <MX_USB_HOST_Init>
  MX_I2S2_Init();
 80011be:	f7ff fe99 	bl	8000ef4 <MX_I2S2_Init>
  // Initialize overdrive
  // 41.6kHz Fs
  // 800Hz HPF input stage
  // 4000Hz LPF output stage
  // See OD_GAIN defined in user defines
  Overdrive_Init(&od, 41666.0f, 800.0f, 4000.0f, OD_GAIN);
 80011c2:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800140c <main+0x274>
 80011c6:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8001410 <main+0x278>
 80011ca:	eddf 0a92 	vldr	s1, [pc, #584]	@ 8001414 <main+0x27c>
 80011ce:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8001418 <main+0x280>
 80011d2:	4892      	ldr	r0, [pc, #584]	@ (800141c <main+0x284>)
 80011d4:	f000 f9ac 	bl	8001530 <Overdrive_Init>

  Tremolo_Init(&tr, 41666.0f, TR_RATE, TR_DEPTH);
 80011d8:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80011dc:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80011e0:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8001418 <main+0x280>
 80011e4:	488e      	ldr	r0, [pc, #568]	@ (8001420 <main+0x288>)
 80011e6:	f000 fb6b 	bl	80018c0 <Tremolo_Init>

  // Initialize I2S DMA
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80011ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ee:	4a8d      	ldr	r2, [pc, #564]	@ (8001424 <main+0x28c>)
 80011f0:	498d      	ldr	r1, [pc, #564]	@ (8001428 <main+0x290>)
 80011f2:	488e      	ldr	r0, [pc, #568]	@ (800142c <main+0x294>)
 80011f4:	f004 ff9a 	bl	800612c <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_state != 0) {
 80011f8:	4b8d      	ldr	r3, [pc, #564]	@ (8001430 <main+0x298>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8101 	beq.w	8001404 <main+0x26c>

		  // decide if it was half or cplt callback
		  if (callback_state == 1)   {
 8001202:	4b8b      	ldr	r3, [pc, #556]	@ (8001430 <main+0x298>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d106      	bne.n	8001218 <main+0x80>
			  	  offset_r_ptr = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  	  offset_w_ptr = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	  w_ptr = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	e00a      	b.n	800122e <main+0x96>
			  	  // Set pointer to first half of DMA
			  }

		  else if (callback_state == 2) {
 8001218:	4b85      	ldr	r3, [pc, #532]	@ (8001430 <main+0x298>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d106      	bne.n	800122e <main+0x96>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
			  w_ptr = BLOCK_SIZE_FLOAT;
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	627b      	str	r3, [r7, #36]	@ 0x24
			  // Set pointer to second half of DMA
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800122e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	e061      	b.n	80012f8 <main+0x160>

			  // Rebuild signed 24-bit sample from 16-bit rxBuf
			  int32_t sample_l = ((int32_t)(rxBuf[i] << 16) | (rxBuf[i + 1]));
 8001234:	4a7b      	ldr	r2, [pc, #492]	@ (8001424 <main+0x28c>)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	3201      	adds	r2, #1
 8001242:	4978      	ldr	r1, [pc, #480]	@ (8001424 <main+0x28c>)
 8001244:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

			  // Convert to float in range [-1.0f, 1.0f] for easier DSP
			  float sample_f_l = sample_l / 2147483648.0f;  // 2^31
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001256:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001434 <main+0x29c>
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]

			  // Light up debug LED if this is somehow outside of range
			  if (sample_f_l > 1.0f | sample_f_l < -1.0f) {
 8001262:	edd7 7a02 	vldr	s15, [r7, #8]
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	bfcc      	ite	gt
 8001274:	2301      	movgt	r3, #1
 8001276:	2300      	movle	r3, #0
 8001278:	b2da      	uxtb	r2, r3
 800127a:	edd7 7a02 	vldr	s15, [r7, #8]
 800127e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128a:	bf4c      	ite	mi
 800128c:	2301      	movmi	r3, #1
 800128e:	2300      	movpl	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d004      	beq.n	80012a4 <main+0x10c>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	4866      	ldr	r0, [pc, #408]	@ (8001438 <main+0x2a0>)
 80012a0:	f001 fb93 	bl	80029ca <HAL_GPIO_TogglePin>
			  }
			  l_buf_in[w_ptr] = sample_f_l;
 80012a4:	4a65      	ldr	r2, [pc, #404]	@ (800143c <main+0x2a4>)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	601a      	str	r2, [r3, #0]

			  // Repeat for right channel
			  int32_t sample_r = ((int32_t)(rxBuf[i + 2] << 16) | (rxBuf[i + 3]));
 80012b0:	6a3b      	ldr	r3, [r7, #32]
 80012b2:	3302      	adds	r3, #2
 80012b4:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <main+0x28c>)
 80012b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	6a3a      	ldr	r2, [r7, #32]
 80012be:	3203      	adds	r2, #3
 80012c0:	4958      	ldr	r1, [pc, #352]	@ (8001424 <main+0x28c>)
 80012c2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	607b      	str	r3, [r7, #4]
			  float sample_f_r = sample_r / 2147483648.0f;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	ee07 3a90 	vmov	s15, r3
 80012d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d4:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8001434 <main+0x29c>
 80012d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012dc:	edc7 7a00 	vstr	s15, [r7]
			  r_buf_in[w_ptr] = sample_f_r;
 80012e0:	4a57      	ldr	r2, [pc, #348]	@ (8001440 <main+0x2a8>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	601a      	str	r2, [r3, #0]


			  w_ptr++;
 80012ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ee:	3301      	adds	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3304      	adds	r3, #4
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	dd97      	ble.n	8001234 <main+0x9c>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e028      	b.n	800135c <main+0x1c4>
//			  // Populate output buffer with overdrive-processed input buffer data
//			  l_buf_out[i] = Overdrive_Update(&od, l_buf_in[i])/32.0f; // 1/16 for appropriate amp-level volume
//			  r_buf_out[i] = Overdrive_Update(&od, r_buf_in[i])/32.0f;

			  // Populate output buffer with tremolo-processed input buffer data
			  l_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]); // 1/16 for appropriate amp-level volume
 800130a:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <main+0x2a4>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	4841      	ldr	r0, [pc, #260]	@ (8001420 <main+0x288>)
 800131c:	f000 faf8 	bl	8001910 <Tremolo_Update>
 8001320:	eef0 7a40 	vmov.f32	s15, s0
 8001324:	4a47      	ldr	r2, [pc, #284]	@ (8001444 <main+0x2ac>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]);
 8001330:	4a42      	ldr	r2, [pc, #264]	@ (800143c <main+0x2a4>)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eeb0 0a67 	vmov.f32	s0, s15
 8001340:	4837      	ldr	r0, [pc, #220]	@ (8001420 <main+0x288>)
 8001342:	f000 fae5 	bl	8001910 <Tremolo_Update>
 8001346:	eef0 7a40 	vmov.f32	s15, s0
 800134a:	4a3f      	ldr	r2, [pc, #252]	@ (8001448 <main+0x2b0>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	337f      	adds	r3, #127	@ 0x7f
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	429a      	cmp	r2, r3
 8001364:	ddd1      	ble.n	800130a <main+0x172>
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8001366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e040      	b.n	80013f2 <main+0x25a>
			  int sample_out_l = (int)(l_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 8001370:	4a34      	ldr	r2, [pc, #208]	@ (8001444 <main+0x2ac>)
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001434 <main+0x29c>
 8001380:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 3a90 	vmov	r3, s15
 800138c:	617b      	str	r3, [r7, #20]
			  txBuf[i]   = (sample_out_l >> 16) & 0xFFFF;  // upper 16 bits
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	0c1b      	lsrs	r3, r3, #16
 8001392:	b299      	uxth	r1, r3
 8001394:	4a24      	ldr	r2, [pc, #144]	@ (8001428 <main+0x290>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = sample_out_l & 0xFFFF;          // lower 16 bits
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	3301      	adds	r3, #1
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	b291      	uxth	r1, r2
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <main+0x290>)
 80013a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  int sample_out_r = (int)(r_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 80013aa:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <main+0x2b0>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001434 <main+0x29c>
 80013ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	613b      	str	r3, [r7, #16]
			  txBuf[i+2]   = (sample_out_r >> 16) & 0xFFFF;  // upper 16 bits
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	0c1a      	lsrs	r2, r3, #16
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	3302      	adds	r3, #2
 80013d0:	b291      	uxth	r1, r2
 80013d2:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <main+0x290>)
 80013d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = sample_out_r & 0xFFFF;          // lower 16 bits
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3303      	adds	r3, #3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	b291      	uxth	r1, r2
 80013e0:	4a11      	ldr	r2, [pc, #68]	@ (8001428 <main+0x290>)
 80013e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	3304      	adds	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	ddb8      	ble.n	8001370 <main+0x1d8>
		  }

		  callback_state = 0;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <main+0x298>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001404:	f009 fe32 	bl	800b06c <MX_USB_HOST_Process>
	  if (callback_state != 0) {
 8001408:	e6f6      	b.n	80011f8 <main+0x60>
 800140a:	bf00      	nop
 800140c:	42c80000 	.word	0x42c80000
 8001410:	457a0000 	.word	0x457a0000
 8001414:	44480000 	.word	0x44480000
 8001418:	4722c200 	.word	0x4722c200
 800141c:	200021f8 	.word	0x200021f8
 8001420:	20002248 	.word	0x20002248
 8001424:	200001f8 	.word	0x200001f8
 8001428:	200009f8 	.word	0x200009f8
 800142c:	200000ec 	.word	0x200000ec
 8001430:	200001f4 	.word	0x200001f4
 8001434:	4f000000 	.word	0x4f000000
 8001438:	40020c00 	.word	0x40020c00
 800143c:	200011f8 	.word	0x200011f8
 8001440:	200015f8 	.word	0x200015f8
 8001444:	200019f8 	.word	0x200019f8
 8001448:	20001df8 	.word	0x20001df8

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00a f9c8 	bl	800b7f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014c0:	2348      	movs	r3, #72	@ 0x48
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014c8:	2303      	movs	r3, #3
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fa93 	bl	80069fc <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f000 f820 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fcf4 	bl	8006eec <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150a:	f000 f809 	bl	8001520 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>
 800152c:	0000      	movs	r0, r0
	...

08001530 <Overdrive_Init>:
#include "overdrive.h"
#include <stdint.h>

void Overdrive_Init(Overdrive *od, float samplingFreqHz, float hpfCutoffFreqHz, float lpfCutoffFreqHz, float odPreGain) {
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6178      	str	r0, [r7, #20]
 8001538:	ed87 0a04 	vstr	s0, [r7, #16]
 800153c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001540:	ed87 1a02 	vstr	s2, [r7, #8]
 8001544:	edc7 1a01 	vstr	s3, [r7, #4]
    od->T = 1.0f / samplingFreqHz;
 8001548:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800154c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	edc3 7a00 	vstr	s15, [r3]
    od->preGain = odPreGain;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	61da      	str	r2, [r3, #28]
    od->threshold = 1.0f/3.0f;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	4a33      	ldr	r2, [pc, #204]	@ (8001630 <Overdrive_Init+0x100>)
 8001564:	621a      	str	r2, [r3, #32]
    // Input lpf
    od->hpfInpBufIn[0] = 0.0f; od->hpfInpBufIn[1] = 0.0f;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
    od->hpfInpBufOut[0] = 0.0f; od->hpfInpBufOut[1] = 0.0f;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    od->hpfInpWcT = 2.0f * M_PI * hpfCutoffFreqHz * od->T;
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff f8ac 	bl	80006e4 <__aeabi_f2d>
 800158c:	a326      	add	r3, pc, #152	@ (adr r3, 8001628 <Overdrive_Init+0xf8>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7fe fe19 	bl	80001c8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4614      	mov	r4, r2
 800159c:	461d      	mov	r5, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f89e 	bl	80006e4 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe0a 	bl	80001c8 <__aeabi_dmul>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f8ea 	bl	8000794 <__aeabi_d2f>
 80015c0:	4602      	mov	r2, r0
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	615a      	str	r2, [r3, #20]
    od->hpfInpOut = 0.0f;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]

    // Output lpf
    od->lpfOutWcT = 2.0f * M_PI * lpfCutoffFreqHz * od->T;
 80015ce:	68b8      	ldr	r0, [r7, #8]
 80015d0:	f7ff f888 	bl	80006e4 <__aeabi_f2d>
 80015d4:	a314      	add	r3, pc, #80	@ (adr r3, 8001628 <Overdrive_Init+0xf8>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe fdf5 	bl	80001c8 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4614      	mov	r4, r2
 80015e4:	461d      	mov	r5, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff f87a 	bl	80006e4 <__aeabi_f2d>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fde6 	bl	80001c8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff f8c6 	bl	8000794 <__aeabi_d2f>
 8001608:	4602      	mov	r2, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
    od->lpfOutDamp = 1.0f;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44

    od->Q = -0.5;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	54442d18 	.word	0x54442d18
 800162c:	401921fb 	.word	0x401921fb
 8001630:	3eaaaaab 	.word	0x3eaaaaab

08001634 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_SPI1_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_SPI1_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001686:	f005 ff8f 	bl	80075a8 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001690:	f7ff ff46 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000225c 	.word	0x2000225c
 800169c:	40013000 	.word	0x40013000

080016a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_SPI_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12b      	bne.n	800171a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016fa:	23e0      	movs	r3, #224	@ 0xe0
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800170a:	2305      	movs	r3, #5
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_SPI_MspInit+0x8c>)
 8001716:	f000 ffa3 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40013000 	.word	0x40013000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800176e:	2007      	movs	r0, #7
 8001770:	f000 fbc4 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d6:	f000 fa7d 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <DMA1_Stream3_IRQHandler+0x10>)
 80017e6:	f000 fcd1 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000134 	.word	0x20000134

080017f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <DMA1_Stream4_IRQHandler+0x10>)
 80017fa:	f000 fcc7 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000194 	.word	0x20000194

08001808 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <SPI2_IRQHandler+0x10>)
 800180e:	f004 fb8f 	bl	8005f30 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000ec 	.word	0x200000ec

0800181c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <OTG_FS_IRQHandler+0x10>)
 8001822:	f001 fbcd 	bl	8002fc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200026e0 	.word	0x200026e0

08001830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001838:	4a14      	ldr	r2, [pc, #80]	@ (800188c <_sbrk+0x5c>)
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <_sbrk+0x60>)
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001844:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <_sbrk+0x64>)
 800184e:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <_sbrk+0x68>)
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <_sbrk+0x64>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	429a      	cmp	r2, r3
 800185e:	d207      	bcs.n	8001870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001860:	f009 ffde 	bl	800b820 <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	220c      	movs	r2, #12
 8001868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	e009      	b.n	8001884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001870:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001876:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <_sbrk+0x64>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4413      	add	r3, r2
 800187e:	4a05      	ldr	r2, [pc, #20]	@ (8001894 <_sbrk+0x64>)
 8001880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001882:	68fb      	ldr	r3, [r7, #12]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20020000 	.word	0x20020000
 8001890:	00000400 	.word	0x00000400
 8001894:	200022b4 	.word	0x200022b4
 8001898:	20002c08 	.word	0x20002c08

0800189c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <SystemInit+0x20>)
 80018a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <SystemInit+0x20>)
 80018a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <Tremolo_Init>:
#include "tremolo.h"
#include <stdint.h>

void Tremolo_Init(Tremolo *tr, float samplingFreqHz, float rate, float depth) {
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80018cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80018d0:	ed87 1a00 	vstr	s2, [r7]
	tr->T = 1.0f / samplingFreqHz;
 80018d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edc3 7a00 	vstr	s15, [r3]
	tr->rate = rate;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]
	tr->depth = depth;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	609a      	str	r2, [r3, #8]
	tr->phase = 0.0f;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
	tr->out = 0.0f;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	611a      	str	r2, [r3, #16]

//	for (int i = 0; i < LFO_TABLE_SIZE; i++) {
//		tr->lfo_table[i] = 0.5f * tr->depth * sinf(2.0f * M_PI * (float)i / LFO_TABLE_SIZE) + 0.5f;
//	}
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <Tremolo_Update>:



float Tremolo_Update(Tremolo *tr, float inp) {
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	ed2d 8b02 	vpush	{d8}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	ed87 0a00 	vstr	s0, [r7]
	float lfo = 0.5f*tr->depth*sinf(2.0f*M_PI*tr->rate*tr->phase) + (1.0f - 0.5f*tr->depth);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	edd3 7a02 	vldr	s15, [r3, #8]
 8001926:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800192a:	ee27 8a87 	vmul.f32	s16, s15, s14
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fed6 	bl	80006e4 <__aeabi_f2d>
 8001938:	a340      	add	r3, pc, #256	@ (adr r3, 8001a3c <Tremolo_Update+0x12c>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fc43 	bl	80001c8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4614      	mov	r4, r2
 8001948:	461d      	mov	r5, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fec8 	bl	80006e4 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fc34 	bl	80001c8 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7fe ff14 	bl	8000794 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	ee00 3a10 	vmov	s0, r3
 8001972:	f009 ffcb 	bl	800b90c <sinf>
 8001976:	eef0 7a40 	vmov.f32	s15, s0
 800197a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	edd3 7a02 	vldr	s15, [r3, #8]
 8001984:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800198c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001990:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001998:	edc7 7a03 	vstr	s15, [r7, #12]
	tr->out = inp*lfo;
 800199c:	ed97 7a00 	vldr	s14, [r7]
 80019a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edc3 7a04 	vstr	s15, [r3, #16]
	tr->phase += tr->T;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	edc3 7a03 	vstr	s15, [r3, #12]

	if (tr->phase*tr->rate >= 1.0f) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80019d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	db03      	blt.n	80019ea <Tremolo_Update+0xda>
		tr->phase = 0.0f;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
	}

	// Ensure the signal is within -1f to 1f range
	if (tr->out > 1.0f) {
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80019f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	dd04      	ble.n	8001a08 <Tremolo_Update+0xf8>
		tr->out = 1.0f;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	e00c      	b.n	8001a22 <Tremolo_Update+0x112>
	} else if (tr->out < -1.0f) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a0e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d502      	bpl.n	8001a22 <Tremolo_Update+0x112>
		tr->out = -1.0f;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <Tremolo_Update+0x128>)
 8001a20:	611a      	str	r2, [r3, #16]
	}

	return tr->out;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	ee07 3a90 	vmov	s15, r3
}
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	ecbd 8b02 	vpop	{d8}
 8001a36:	bdb0      	pop	{r4, r5, r7, pc}
 8001a38:	bf800000 	.word	0xbf800000
 8001a3c:	54442d18 	.word	0x54442d18
 8001a40:	401921fb 	.word	0x401921fb

08001a44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <MX_USART3_UART_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	f005 fe1d 	bl	80076ba <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a86:	f7ff fd4b 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200022b8 	.word	0x200022b8
 8001a94:	40004800 	.word	0x40004800

08001a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	@ 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <HAL_UART_MspInit+0xc4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d14b      	bne.n	8001b52 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a27      	ldr	r2, [pc, #156]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001ac4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	4a20      	ldr	r2, [pc, #128]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a19      	ldr	r2, [pc, #100]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <HAL_UART_MspInit+0xc8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b20:	2307      	movs	r3, #7
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480e      	ldr	r0, [pc, #56]	@ (8001b64 <HAL_UART_MspInit+0xcc>)
 8001b2c:	f000 fd98 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b42:	2307      	movs	r3, #7
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4806      	ldr	r0, [pc, #24]	@ (8001b68 <HAL_UART_MspInit+0xd0>)
 8001b4e:	f000 fd87 	bl	8002660 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	@ 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40004800 	.word	0x40004800
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020c00 	.word	0x40020c00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b70:	f7ff fe94 	bl	800189c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f009 fe47 	bl	800b82c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fafb 	bl	8001198 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001bb0:	0800c788 	.word	0x0800c788
  ldr r2, =_sbss
 8001bb4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001bb8:	20002c08 	.word	0x20002c08

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>

08001bbe <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001bd4:	f000 f804 	bl	8001be0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a07      	ldr	r2, [pc, #28]	@ (8001c28 <HAL_I2S_ErrorCallback+0x2c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001c0e:	f7ff ffd6 	bl	8001bbe <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <HAL_I2S_ErrorCallback+0x30>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001c1c:	f7ff ffe7 	bl	8001bee <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40003c00 	.word	0x40003c00
 8001c2c:	40003800 	.word	0x40003800

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f94f 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f808 	bl	8001c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff fd64 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <HAL_InitTick+0x54>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_InitTick+0x58>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f967 	bl	8001f66 <HAL_SYSTICK_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00e      	b.n	8001cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0f      	cmp	r3, #15
 8001ca6:	d80a      	bhi.n	8001cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb0:	f000 f92f 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb4:	4a06      	ldr	r2, [pc, #24]	@ (8001cd0 <HAL_InitTick+0x5c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20002300 	.word	0x20002300

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20002300 	.word	0x20002300

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	@ (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	@ (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	@ 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff29 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff3e 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff feb6 	bl	8001cfc <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e099      	b.n	80020d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbc:	e00f      	b.n	8001fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fbe:	f7ff fe9d 	bl	8001cfc <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d908      	bls.n	8001fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e078      	b.n	80020d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e8      	bne.n	8001fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_DMA_Init+0x158>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	4313      	orrs	r3, r2
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f023 0307 	bic.w	r3, r3, #7
 800205e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2b04      	cmp	r3, #4
 8002070:	d117      	bne.n	80020a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00e      	beq.n	80020a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fa6f 	bl	8002568 <DMA_CheckFifoParam>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800209e:	2301      	movs	r3, #1
 80020a0:	e016      	b.n	80020d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa26 	bl	80024fc <DMA_CalcBaseAndBitshift>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b8:	223f      	movs	r2, #63	@ 0x3f
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	f010803f 	.word	0xf010803f

080020dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Start_IT+0x26>
 80020fe:	2302      	movs	r3, #2
 8002100:	e040      	b.n	8002184 <HAL_DMA_Start_IT+0xa8>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b01      	cmp	r3, #1
 8002114:	d12f      	bne.n	8002176 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2202      	movs	r2, #2
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f9b8 	bl	80024a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	223f      	movs	r2, #63	@ 0x3f
 8002136:	409a      	lsls	r2, r3
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0216 	orr.w	r2, r2, #22
 800214a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0208 	orr.w	r2, r2, #8
 8002162:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e005      	b.n	8002182 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800217e:	2302      	movs	r3, #2
 8002180:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002182:	7dfb      	ldrb	r3, [r7, #23]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002198:	4b8e      	ldr	r3, [pc, #568]	@ (80023d4 <HAL_DMA_IRQHandler+0x248>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a8e      	ldr	r2, [pc, #568]	@ (80023d8 <HAL_DMA_IRQHandler+0x24c>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a9b      	lsrs	r3, r3, #10
 80021a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b6:	2208      	movs	r2, #8
 80021b8:	409a      	lsls	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d01a      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e4:	2208      	movs	r2, #8
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fc:	2201      	movs	r2, #1
 80021fe:	409a      	lsls	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d012      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221a:	2201      	movs	r2, #1
 800221c:	409a      	lsls	r2, r3
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f043 0202 	orr.w	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002232:	2204      	movs	r2, #4
 8002234:	409a      	lsls	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	2204      	movs	r2, #4
 8002252:	409a      	lsls	r2, r3
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f043 0204 	orr.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002268:	2210      	movs	r2, #16
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d043      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d03c      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002286:	2210      	movs	r2, #16
 8002288:	409a      	lsls	r2, r3
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d018      	beq.n	80022ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d108      	bne.n	80022bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d024      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	4798      	blx	r3
 80022ba:	e01f      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	4798      	blx	r3
 80022cc:	e016      	b.n	80022fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0208 	bic.w	r2, r2, #8
 80022ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002300:	2220      	movs	r2, #32
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 808f 	beq.w	800242c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8087 	beq.w	800242c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002322:	2220      	movs	r2, #32
 8002324:	409a      	lsls	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b05      	cmp	r3, #5
 8002334:	d136      	bne.n	80023a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0216 	bic.w	r2, r2, #22
 8002344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_DMA_IRQHandler+0x1da>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0208 	bic.w	r2, r2, #8
 8002374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237a:	223f      	movs	r2, #63	@ 0x3f
 800237c:	409a      	lsls	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d07e      	beq.n	8002498 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	4798      	blx	r3
        }
        return;
 80023a2:	e079      	b.n	8002498 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01d      	beq.n	80023ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10d      	bne.n	80023dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d031      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e02c      	b.n	800242c <HAL_DMA_IRQHandler+0x2a0>
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000
 80023d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e01e      	b.n	800242c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0210 	bic.w	r2, r2, #16
 800240a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002430:	2b00      	cmp	r3, #0
 8002432:	d032      	beq.n	800249a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d022      	beq.n	8002486 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2205      	movs	r2, #5
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	d307      	bcc.n	8002474 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f2      	bne.n	8002458 <HAL_DMA_IRQHandler+0x2cc>
 8002472:	e000      	b.n	8002476 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002474:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	4798      	blx	r3
 8002496:	e000      	b.n	800249a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002498:	bf00      	nop
    }
  }
}
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d108      	bne.n	80024e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024de:	e007      	b.n	80024f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	60da      	str	r2, [r3, #12]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3b10      	subs	r3, #16
 800250c:	4a14      	ldr	r2, [pc, #80]	@ (8002560 <DMA_CalcBaseAndBitshift+0x64>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002516:	4a13      	ldr	r2, [pc, #76]	@ (8002564 <DMA_CalcBaseAndBitshift+0x68>)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d909      	bls.n	800253e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002532:	f023 0303 	bic.w	r3, r3, #3
 8002536:	1d1a      	adds	r2, r3, #4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58
 800253c:	e007      	b.n	800254e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	aaaaaaab 	.word	0xaaaaaaab
 8002564:	0800c3a0 	.word	0x0800c3a0

08002568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11f      	bne.n	80025c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d856      	bhi.n	8002636 <DMA_CheckFifoParam+0xce>
 8002588:	a201      	add	r2, pc, #4	@ (adr r2, 8002590 <DMA_CheckFifoParam+0x28>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025a1 	.word	0x080025a1
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025a1 	.word	0x080025a1
 800259c:	08002637 	.word	0x08002637
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d046      	beq.n	800263a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b0:	e043      	b.n	800263a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ba:	d140      	bne.n	800263e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c0:	e03d      	b.n	800263e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ca:	d121      	bne.n	8002610 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d837      	bhi.n	8002642 <DMA_CheckFifoParam+0xda>
 80025d2:	a201      	add	r2, pc, #4	@ (adr r2, 80025d8 <DMA_CheckFifoParam+0x70>)
 80025d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d8:	080025e9 	.word	0x080025e9
 80025dc:	080025ef 	.word	0x080025ef
 80025e0:	080025e9 	.word	0x080025e9
 80025e4:	08002601 	.word	0x08002601
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      break;
 80025ec:	e030      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d025      	beq.n	8002646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fe:	e022      	b.n	8002646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002604:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002608:	d11f      	bne.n	800264a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800260e:	e01c      	b.n	800264a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d903      	bls.n	800261e <DMA_CheckFifoParam+0xb6>
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d003      	beq.n	8002624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800261c:	e018      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      break;
 8002622:	e015      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00e      	beq.n	800264e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
      break;
 8002634:	e00b      	b.n	800264e <DMA_CheckFifoParam+0xe6>
      break;
 8002636:	bf00      	nop
 8002638:	e00a      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e008      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800263e:	bf00      	nop
 8002640:	e006      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
 8002644:	e004      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;   
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
    }
  } 
  
  return status; 
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	@ 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	e16b      	b.n	8002954 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	f040 815a 	bne.w	800294e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d005      	beq.n	80026b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d130      	bne.n	8002714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e8:	2201      	movs	r2, #1
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 0201 	and.w	r2, r3, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d017      	beq.n	8002750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	2203      	movs	r2, #3
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d123      	bne.n	80027a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	08da      	lsrs	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3208      	adds	r2, #8
 8002764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	220f      	movs	r2, #15
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	69b9      	ldr	r1, [r7, #24]
 80027a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 80b4 	beq.w	800294e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b60      	ldr	r3, [pc, #384]	@ (800296c <HAL_GPIO_Init+0x30c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4a5f      	ldr	r2, [pc, #380]	@ (800296c <HAL_GPIO_Init+0x30c>)
 80027f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027f6:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <HAL_GPIO_Init+0x30c>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002802:	4a5b      	ldr	r2, [pc, #364]	@ (8002970 <HAL_GPIO_Init+0x310>)
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	3302      	adds	r3, #2
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	220f      	movs	r2, #15
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	@ (8002974 <HAL_GPIO_Init+0x314>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <HAL_GPIO_Init+0x226>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a51      	ldr	r2, [pc, #324]	@ (8002978 <HAL_GPIO_Init+0x318>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d025      	beq.n	8002882 <HAL_GPIO_Init+0x222>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a50      	ldr	r2, [pc, #320]	@ (800297c <HAL_GPIO_Init+0x31c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x21e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4f      	ldr	r2, [pc, #316]	@ (8002980 <HAL_GPIO_Init+0x320>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x21a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4e      	ldr	r2, [pc, #312]	@ (8002984 <HAL_GPIO_Init+0x324>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x216>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4d      	ldr	r2, [pc, #308]	@ (8002988 <HAL_GPIO_Init+0x328>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x212>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4c      	ldr	r2, [pc, #304]	@ (800298c <HAL_GPIO_Init+0x32c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4b      	ldr	r2, [pc, #300]	@ (8002990 <HAL_GPIO_Init+0x330>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x20a>
 8002866:	2307      	movs	r3, #7
 8002868:	e00e      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286a:	2308      	movs	r3, #8
 800286c:	e00c      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800286e:	2306      	movs	r3, #6
 8002870:	e00a      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002872:	2305      	movs	r3, #5
 8002874:	e008      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002876:	2304      	movs	r3, #4
 8002878:	e006      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287a:	2303      	movs	r3, #3
 800287c:	e004      	b.n	8002888 <HAL_GPIO_Init+0x228>
 800287e:	2302      	movs	r3, #2
 8002880:	e002      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_GPIO_Init+0x228>
 8002886:	2300      	movs	r3, #0
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	0092      	lsls	r2, r2, #2
 8002890:	4093      	lsls	r3, r2
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002898:	4935      	ldr	r1, [pc, #212]	@ (8002970 <HAL_GPIO_Init+0x310>)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002994 <HAL_GPIO_Init+0x334>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ca:	4a32      	ldr	r2, [pc, #200]	@ (8002994 <HAL_GPIO_Init+0x334>)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d0:	4b30      	ldr	r3, [pc, #192]	@ (8002994 <HAL_GPIO_Init+0x334>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f4:	4a27      	ldr	r2, [pc, #156]	@ (8002994 <HAL_GPIO_Init+0x334>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028fa:	4b26      	ldr	r3, [pc, #152]	@ (8002994 <HAL_GPIO_Init+0x334>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291e:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <HAL_GPIO_Init+0x334>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <HAL_GPIO_Init+0x334>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002948:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <HAL_GPIO_Init+0x334>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3301      	adds	r3, #1
 8002952:	61fb      	str	r3, [r7, #28]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	2b0f      	cmp	r3, #15
 8002958:	f67f ae90 	bls.w	800267c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	40013800 	.word	0x40013800
 8002974:	40020000 	.word	0x40020000
 8002978:	40020400 	.word	0x40020400
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	40021000 	.word	0x40021000
 8002988:	40021400 	.word	0x40021400
 800298c:	40021800 	.word	0x40021800
 8002990:	40021c00 	.word	0x40021c00
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029dc:	887a      	ldrh	r2, [r7, #2]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	400b      	ands	r3, r1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e059      	b.n	8002ac4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f008 fb56 	bl	800b0dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a3e:	d102      	bne.n	8002a46 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f005 f96f 	bl	8007d2e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7c1a      	ldrb	r2, [r3, #16]
 8002a58:	f88d 2000 	strb.w	r2, [sp]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a60:	f005 f8f0 	bl	8007c44 <USB_CoreInit>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e026      	b.n	8002ac4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f005 f967 	bl	8007d50 <USB_SetCurrentMode>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e017      	b.n	8002ac4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7c1a      	ldrb	r2, [r3, #16]
 8002a9c:	f88d 2000 	strb.w	r2, [sp]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	f005 fb0a 	bl	80080bc <USB_HostInit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e004      	b.n	8002ac4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b08b      	sub	sp, #44	@ 0x2c
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	4608      	mov	r0, r1
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	70bb      	strb	r3, [r7, #2]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002ae6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002ae8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_HCD_HC_Init+0x2c>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e09d      	b.n	8002c34 <HAL_HCD_HC_Init+0x168>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3319      	adds	r3, #25
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	3314      	adds	r3, #20
 8002b24:	787a      	ldrb	r2, [r7, #1]
 8002b26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3315      	adds	r3, #21
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3326      	adds	r3, #38	@ 0x26
 8002b4c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002b50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	78bb      	ldrb	r3, [r7, #2]
 8002b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3316      	adds	r3, #22
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fbc8 	bl	8003308 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002b78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	da0a      	bge.n	8002b96 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3317      	adds	r3, #23
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e009      	b.n	8002baa <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3317      	adds	r3, #23
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f005 fbe8 	bl	8008384 <USB_GetHostSpeed>
 8002bb4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002bb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <HAL_HCD_HC_Init+0x10a>
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2bbc      	cmp	r3, #188	@ 0xbc
 8002bd0:	d901      	bls.n	8002bd6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002bd2:	23bc      	movs	r3, #188	@ 0xbc
 8002bd4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3318      	adds	r3, #24
 8002be6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	b298      	uxth	r0, r3
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3328      	adds	r3, #40	@ 0x28
 8002c00:	4602      	mov	r2, r0
 8002c02:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	787c      	ldrb	r4, [r7, #1]
 8002c0e:	78ba      	ldrb	r2, [r7, #2]
 8002c10:	78f9      	ldrb	r1, [r7, #3]
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4623      	mov	r3, r4
 8002c22:	f005 fbd7 	bl	80083d4 <USB_HC_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd90      	pop	{r4, r7, pc}

08002c3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_HCD_HC_Halt+0x1e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e00f      	b.n	8002c7a <HAL_HCD_HC_Halt+0x3e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 ff69 	bl	8008b42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	70fb      	strb	r3, [r7, #3]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70bb      	strb	r3, [r7, #2]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3317      	adds	r3, #23
 8002cae:	78ba      	ldrb	r2, [r7, #2]
 8002cb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3326      	adds	r3, #38	@ 0x26
 8002cc2:	787a      	ldrb	r2, [r7, #1]
 8002cc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002cc6:	7c3b      	ldrb	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d114      	bne.n	8002cf6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	332a      	adds	r3, #42	@ 0x2a
 8002cdc:	2203      	movs	r2, #3
 8002cde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	3319      	adds	r3, #25
 8002cf0:	7f3a      	ldrb	r2, [r7, #28]
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e009      	b.n	8002d0a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	332a      	adds	r3, #42	@ 0x2a
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002d0a:	787b      	ldrb	r3, [r7, #1]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	f200 8102 	bhi.w	8002f16 <HAL_HCD_HC_SubmitRequest+0x292>
 8002d12:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002f01 	.word	0x08002f01
 8002d20:	08002ded 	.word	0x08002ded
 8002d24:	08002e77 	.word	0x08002e77
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002d28:	7c3b      	ldrb	r3, [r7, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	f040 80f5 	bne.w	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002d30:	78bb      	ldrb	r3, [r7, #2]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12d      	bne.n	8002d92 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002d36:	8b3b      	ldrh	r3, [r7, #24]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	333d      	adds	r3, #61	@ 0x3d
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	333d      	adds	r3, #61	@ 0x3d
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	332a      	adds	r3, #42	@ 0x2a
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002d7a:	e0ce      	b.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	332a      	adds	r3, #42	@ 0x2a
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
      break;
 8002d90:	e0c3      	b.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331a      	adds	r3, #26
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 80b8 	bne.w	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	333c      	adds	r3, #60	@ 0x3c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	011b      	lsls	r3, r3, #4
 8002dc8:	1a9b      	subs	r3, r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	332a      	adds	r3, #42	@ 0x2a
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
      break;
 8002dd4:	e0a1      	b.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	332a      	adds	r3, #42	@ 0x2a
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
      break;
 8002dea:	e096      	b.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002dec:	78bb      	ldrb	r3, [r7, #2]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d120      	bne.n	8002e34 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	333d      	adds	r3, #61	@ 0x3d
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	332a      	adds	r3, #42	@ 0x2a
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002e1c:	e07e      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	332a      	adds	r3, #42	@ 0x2a
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]
      break;
 8002e32:	e073      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	333c      	adds	r3, #60	@ 0x3c
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10a      	bne.n	8002e60 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	332a      	adds	r3, #42	@ 0x2a
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
      break;
 8002e5e:	e05d      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	332a      	adds	r3, #42	@ 0x2a
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
      break;
 8002e74:	e052      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002e76:	78bb      	ldrb	r3, [r7, #2]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d120      	bne.n	8002ebe <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	333d      	adds	r3, #61	@ 0x3d
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	332a      	adds	r3, #42	@ 0x2a
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002ea6:	e039      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	332a      	adds	r3, #42	@ 0x2a
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
      break;
 8002ebc:	e02e      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	333c      	adds	r3, #60	@ 0x3c
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	332a      	adds	r3, #42	@ 0x2a
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
      break;
 8002ee8:	e018      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	332a      	adds	r3, #42	@ 0x2a
 8002efa:	2202      	movs	r2, #2
 8002efc:	701a      	strb	r2, [r3, #0]
      break;
 8002efe:	e00d      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	332a      	adds	r3, #42	@ 0x2a
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
      break;
 8002f14:	e002      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002f1a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	332c      	adds	r3, #44	@ 0x2c
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	8b39      	ldrh	r1, [r7, #24]
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4403      	add	r3, r0
 8002f40:	3334      	adds	r3, #52	@ 0x34
 8002f42:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334c      	adds	r3, #76	@ 0x4c
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3338      	adds	r3, #56	@ 0x38
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3315      	adds	r3, #21
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	@ 0x4d
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	3310      	adds	r3, #16
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	1d19      	adds	r1, r3, #4
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	799b      	ldrb	r3, [r3, #6]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f005 fb3c 	bl	800862c <USB_HC_StartXfer>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 f830 	bl	800803c <USB_GetMode>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	f040 80fb 	bne.w	80031da <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fff3 	bl	8007fd4 <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80f1 	beq.w	80031d8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 ffea 	bl	8007fd4 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003006:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800300a:	d104      	bne.n	8003016 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003014:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f004 ffda 	bl	8007fd4 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302a:	d104      	bne.n	8003036 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003034:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f004 ffca 	bl	8007fd4 <USB_ReadInterrupts>
 8003040:	4603      	mov	r3, r0
 8003042:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003046:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800304a:	d104      	bne.n	8003056 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003054:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 ffba 	bl	8007fd4 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b02      	cmp	r3, #2
 8003068:	d103      	bne.n	8003072 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f004 ffac 	bl	8007fd4 <USB_ReadInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003086:	d120      	bne.n	80030ca <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003090:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d113      	bne.n	80030ca <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80030a2:	2110      	movs	r1, #16
 80030a4:	6938      	ldr	r0, [r7, #16]
 80030a6:	f004 fe9f 	bl	8007de8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80030aa:	6938      	ldr	r0, [r7, #16]
 80030ac:	f004 fece 	bl	8007e4c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7a5b      	ldrb	r3, [r3, #9]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d105      	bne.n	80030c4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	4618      	mov	r0, r3
 80030c0:	f005 f8c0 	bl	8008244 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f008 f887 	bl	800b1d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 ff80 	bl	8007fd4 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030de:	d102      	bne.n	80030e6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 fd4d 	bl	8004b80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 ff72 	bl	8007fd4 <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d106      	bne.n	8003108 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f008 f850 	bl	800b1a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f004 ff61 	bl	8007fd4 <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003118:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800311c:	d139      	bne.n	8003192 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f005 fcfc 	bl	8008b20 <USB_HC_ReadInterrupt>
 8003128:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	e025      	b.n	800317c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d018      	beq.n	8003176 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315a:	d106      	bne.n	800316a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f905 	bl	8003372 <HCD_HC_IN_IRQHandler>
 8003168:	e005      	b.n	8003176 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 ff67 	bl	8004044 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	795b      	ldrb	r3, [r3, #5]
 8003180:	461a      	mov	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	4293      	cmp	r3, r2
 8003186:	d3d3      	bcc.n	8003130 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 ff1c 	bl	8007fd4 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d101      	bne.n	80031aa <HAL_HCD_IRQHandler+0x1ea>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_HCD_IRQHandler+0x1ec>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d014      	beq.n	80031da <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0210 	bic.w	r2, r2, #16
 80031be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f001 fbfe 	bl	80049c2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f042 0210 	orr.w	r2, r2, #16
 80031d4:	619a      	str	r2, [r3, #24]
 80031d6:	e000      	b.n	80031da <HAL_HCD_IRQHandler+0x21a>
      return;
 80031d8:	bf00      	nop
    }
  }
}
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_HCD_Start+0x16>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e013      	b.n	800321e <HAL_HCD_Start+0x3e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f005 f884 	bl	8008312 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fd7c 	bl	8007d0c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_HCD_Stop+0x16>
 8003238:	2302      	movs	r3, #2
 800323a:	e00d      	b.n	8003258 <HAL_HCD_Stop+0x32>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f005 fdd7 	bl	8008dfc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f005 f826 	bl	80082be <USB_ResetPort>
 8003272:	4603      	mov	r3, r0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	@ 0x4c
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3338      	adds	r3, #56	@ 0x38
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f005 f868 	bl	80083b2 <USB_GetCurrentFrame>
 80032e2:	4603      	mov	r3, r0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f005 f843 	bl	8008384 <USB_GetHostSpeed>
 80032fe:	4603      	mov	r3, r0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	331a      	adds	r3, #26
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331b      	adds	r3, #27
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	3325      	adds	r3, #37	@ 0x25
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3324      	adds	r3, #36	@ 0x24
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	460b      	mov	r3, r1
 800337c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fe32 	bl	8007ffa <USB_ReadChInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11a      	bne.n	80033d6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	461a      	mov	r2, r3
 80033ae:	2304      	movs	r3, #4
 80033b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334d      	adds	r3, #77	@ 0x4d
 80033c2:	2207      	movs	r2, #7
 80033c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 fbb7 	bl	8008b42 <USB_HC_Halt>
 80033d4:	e09e      	b.n	8003514 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fe0b 	bl	8007ffa <USB_ReadChInterrupts>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ee:	d11b      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003402:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334d      	adds	r3, #77	@ 0x4d
 8003414:	2208      	movs	r2, #8
 8003416:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f005 fb8e 	bl	8008b42 <USB_HC_Halt>
 8003426:	e075      	b.n	8003514 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f004 fde2 	bl	8007ffa <USB_ReadChInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b08      	cmp	r3, #8
 800343e:	d11a      	bne.n	8003476 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	2308      	movs	r3, #8
 8003450:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	2206      	movs	r2, #6
 8003464:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f005 fb67 	bl	8008b42 <USB_HC_Halt>
 8003474:	e04e      	b.n	8003514 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fdbb 	bl	8007ffa <USB_ReadChInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	d11b      	bne.n	80034c8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	334d      	adds	r3, #77	@ 0x4d
 80034b4:	2209      	movs	r2, #9
 80034b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f005 fb3e 	bl	8008b42 <USB_HC_Halt>
 80034c6:	e025      	b.n	8003514 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f004 fd92 	bl	8007ffa <USB_ReadChInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b80      	cmp	r3, #128	@ 0x80
 80034de:	d119      	bne.n	8003514 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	2380      	movs	r3, #128	@ 0x80
 80034f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	334d      	adds	r3, #77	@ 0x4d
 8003502:	2207      	movs	r2, #7
 8003504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f005 fb17 	bl	8008b42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fd6c 	bl	8007ffa <USB_ReadChInterrupts>
 8003522:	4603      	mov	r3, r0
 8003524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352c:	d112      	bne.n	8003554 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f005 fb03 	bl	8008b42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003548:	461a      	mov	r2, r3
 800354a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800354e:	6093      	str	r3, [r2, #8]
 8003550:	f000 bd75 	b.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	4611      	mov	r1, r2
 800355c:	4618      	mov	r0, r3
 800355e:	f004 fd4c 	bl	8007ffa <USB_ReadChInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 8128 	bne.w	80037be <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357a:	461a      	mov	r2, r3
 800357c:	2320      	movs	r3, #32
 800357e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	331b      	adds	r3, #27
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d119      	bne.n	80035ca <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	331b      	adds	r3, #27
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	0151      	lsls	r1, r2, #5
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	440a      	add	r2, r1
 80035c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035c8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01b      	beq.n	800360a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3330      	adds	r3, #48	@ 0x30
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	1ac9      	subs	r1, r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4403      	add	r3, r0
 8003606:	3338      	adds	r3, #56	@ 0x38
 8003608:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	334d      	adds	r3, #77	@ 0x4d
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3344      	adds	r3, #68	@ 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	2301      	movs	r3, #1
 8003642:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3326      	adds	r3, #38	@ 0x26
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3326      	adds	r3, #38	@ 0x26
 800366a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800366c:	2b02      	cmp	r3, #2
 800366e:	d110      	bne.n	8003692 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f005 fa62 	bl	8008b42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368a:	461a      	mov	r2, r3
 800368c:	2310      	movs	r3, #16
 800368e:	6093      	str	r3, [r2, #8]
 8003690:	e03d      	b.n	800370e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3326      	adds	r3, #38	@ 0x26
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d00a      	beq.n	80036be <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3326      	adds	r3, #38	@ 0x26
 80036b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d127      	bne.n	800370e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	0151      	lsls	r1, r2, #5
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	440a      	add	r2, r1
 80036d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334c      	adds	r3, #76	@ 0x4c
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	@ 0x4c
 8003702:	781a      	ldrb	r2, [r3, #0]
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f007 fd73 	bl	800b1f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	799b      	ldrb	r3, [r3, #6]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d13b      	bne.n	800378e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3338      	adds	r3, #56	@ 0x38
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	3328      	adds	r3, #40	@ 0x28
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	440b      	add	r3, r1
 800373c:	1e59      	subs	r1, r3, #1
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	1a9b      	subs	r3, r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4403      	add	r3, r0
 800374c:	3328      	adds	r3, #40	@ 0x28
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	fbb1 f3f3 	udiv	r3, r1, r3
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8470 	beq.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	333c      	adds	r3, #60	@ 0x3c
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	78fa      	ldrb	r2, [r7, #3]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2d8      	uxtb	r0, r3
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	333c      	adds	r3, #60	@ 0x3c
 8003786:	4602      	mov	r2, r0
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	f000 bc58 	b.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	333c      	adds	r3, #60	@ 0x3c
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	f083 0301 	eor.w	r3, r3, #1
 80037a6:	b2d8      	uxtb	r0, r3
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	333c      	adds	r3, #60	@ 0x3c
 80037b6:	4602      	mov	r2, r0
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	f000 bc40 	b.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fc17 	bl	8007ffa <USB_ReadChInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d131      	bne.n	800383a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037d6:	78fb      	ldrb	r3, [r7, #3]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e2:	461a      	mov	r2, r3
 80037e4:	2320      	movs	r3, #32
 80037e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	331a      	adds	r3, #26
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	f040 841f 	bne.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	331b      	adds	r3, #27
 8003810:	2201      	movs	r2, #1
 8003812:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	334d      	adds	r3, #77	@ 0x4d
 8003824:	2203      	movs	r2, #3
 8003826:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f005 f986 	bl	8008b42 <USB_HC_Halt>
 8003836:	f000 bc02 	b.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fbd9 	bl	8007ffa <USB_ReadChInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	f040 8305 	bne.w	8003e5e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	2302      	movs	r3, #2
 8003864:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	334d      	adds	r3, #77	@ 0x4d
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d114      	bne.n	80038a6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	334d      	adds	r3, #77	@ 0x4d
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	334c      	adds	r3, #76	@ 0x4c
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e2cc      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	334d      	adds	r3, #77	@ 0x4d
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d114      	bne.n	80038e6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	334d      	adds	r3, #77	@ 0x4d
 80038cc:	2202      	movs	r2, #2
 80038ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	334c      	adds	r3, #76	@ 0x4c
 80038e0:	2205      	movs	r2, #5
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e2ac      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	1a9b      	subs	r3, r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	334d      	adds	r3, #77	@ 0x4d
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	d00b      	beq.n	8003914 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334d      	adds	r3, #77	@ 0x4d
 800390c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800390e:	2b09      	cmp	r3, #9
 8003910:	f040 80a6 	bne.w	8003a60 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	334d      	adds	r3, #77	@ 0x4d
 8003924:	2202      	movs	r2, #2
 8003926:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	3344      	adds	r3, #68	@ 0x44
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4403      	add	r3, r0
 8003948:	3344      	adds	r3, #68	@ 0x44
 800394a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	3344      	adds	r3, #68	@ 0x44
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d943      	bls.n	80039ea <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3344      	adds	r3, #68	@ 0x44
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	331a      	adds	r3, #26
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d123      	bne.n	80039d4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	331b      	adds	r3, #27
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	331c      	adds	r3, #28
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	334c      	adds	r3, #76	@ 0x4c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039e8:	e229      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	334c      	adds	r3, #76	@ 0x4c
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3326      	adds	r3, #38	@ 0x26
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00b      	beq.n	8003a2c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	3326      	adds	r3, #38	@ 0x26
 8003a24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	f040 8209 	bne.w	8003e3e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a5e:	e1ee      	b.n	8003e3e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334d      	adds	r3, #77	@ 0x4d
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	f040 80c8 	bne.w	8003c08 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	334d      	adds	r3, #77	@ 0x4d
 8003a88:	2202      	movs	r2, #2
 8003a8a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	331b      	adds	r3, #27
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 81ce 	bne.w	8003e40 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3326      	adds	r3, #38	@ 0x26
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d16b      	bne.n	8003b92 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3348      	adds	r3, #72	@ 0x48
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c59      	adds	r1, r3, #1
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4403      	add	r3, r0
 8003ada:	3348      	adds	r3, #72	@ 0x48
 8003adc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3348      	adds	r3, #72	@ 0x48
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d943      	bls.n	8003b7c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	3348      	adds	r3, #72	@ 0x48
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	331b      	adds	r3, #27
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3344      	adds	r3, #68	@ 0x44
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d809      	bhi.n	8003b46 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331c      	adds	r3, #28
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b64:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	334c      	adds	r3, #76	@ 0x4c
 8003b76:	2204      	movs	r2, #4
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e014      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334c      	adds	r3, #76	@ 0x4c
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e009      	b.n	8003ba6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334c      	adds	r3, #76	@ 0x4c
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3326      	adds	r3, #38	@ 0x26
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	3326      	adds	r3, #38	@ 0x26
 8003bcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	f040 8136 	bne.w	8003e40 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e11b      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334d      	adds	r3, #77	@ 0x4d
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	f040 8081 	bne.w	8003d22 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334d      	adds	r3, #77	@ 0x4d
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	331b      	adds	r3, #27
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 80fa 	bne.w	8003e40 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	334c      	adds	r3, #76	@ 0x4c
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	0151      	lsls	r1, r2, #5
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	440a      	add	r2, r1
 8003c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	0151      	lsls	r1, r2, #5
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	440a      	add	r2, r1
 8003c96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c9e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	78fa      	ldrb	r2, [r7, #3]
 8003cb0:	0151      	lsls	r1, r2, #5
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	440a      	add	r2, r1
 8003cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3326      	adds	r3, #38	@ 0x26
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3326      	adds	r3, #38	@ 0x26
 8003ce6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	f040 80a9 	bne.w	8003e40 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cee:	78fb      	ldrb	r3, [r7, #3]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d04:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d0c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e08e      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	334d      	adds	r3, #77	@ 0x4d
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d143      	bne.n	8003dc0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	334d      	adds	r3, #77	@ 0x4d
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	334c      	adds	r3, #76	@ 0x4c
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3326      	adds	r3, #38	@ 0x26
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3326      	adds	r3, #38	@ 0x26
 8003d86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d159      	bne.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003da2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003daa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db8:	461a      	mov	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e03f      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	334d      	adds	r3, #77	@ 0x4d
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d126      	bne.n	8003e24 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334d      	adds	r3, #77	@ 0x4d
 8003de6:	2202      	movs	r2, #2
 8003de8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3344      	adds	r3, #68	@ 0x44
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	1c59      	adds	r1, r3, #1
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4403      	add	r3, r0
 8003e0a:	3344      	adds	r3, #68	@ 0x44
 8003e0c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334c      	adds	r3, #76	@ 0x4c
 8003e1e:	2204      	movs	r2, #4
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e00d      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	334d      	adds	r3, #77	@ 0x4d
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	f000 8100 	beq.w	800403c <HCD_HC_IN_IRQHandler+0xcca>
 8003e3c:	e000      	b.n	8003e40 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e3e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334c      	adds	r3, #76	@ 0x4c
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f007 f9cc 	bl	800b1f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e5c:	e0ef      	b.n	800403e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 f8c7 	bl	8007ffa <USB_ReadChInterrupts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e72:	2b40      	cmp	r3, #64	@ 0x40
 8003e74:	d12f      	bne.n	8003ed6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	2340      	movs	r3, #64	@ 0x40
 8003e86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	1a9b      	subs	r3, r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	334d      	adds	r3, #77	@ 0x4d
 8003e98:	2205      	movs	r2, #5
 8003e9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	331a      	adds	r3, #26
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3344      	adds	r3, #68	@ 0x44
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 fe37 	bl	8008b42 <USB_HC_Halt>
 8003ed4:	e0b3      	b.n	800403e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 f88b 	bl	8007ffa <USB_ReadChInterrupts>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	f040 80a7 	bne.w	800403e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ef0:	78fa      	ldrb	r2, [r7, #3]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	3326      	adds	r3, #38	@ 0x26
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d11b      	bne.n	8003f3e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	3344      	adds	r3, #68	@ 0x44
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f004 fe03 	bl	8008b42 <USB_HC_Halt>
 8003f3c:	e03f      	b.n	8003fbe <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	3326      	adds	r3, #38	@ 0x26
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	3326      	adds	r3, #38	@ 0x26
 8003f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d129      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	3344      	adds	r3, #68	@ 0x44
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	799b      	ldrb	r3, [r3, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <HCD_HC_IN_IRQHandler+0xc2a>
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	331b      	adds	r3, #27
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d110      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	334d      	adds	r3, #77	@ 0x4d
 8003fac:	2204      	movs	r2, #4
 8003fae:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f004 fdc2 	bl	8008b42 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	331b      	adds	r3, #27
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d129      	bne.n	8004028 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	331b      	adds	r3, #27
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004006:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	440a      	add	r2, r1
 800401e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004022:	f043 0320 	orr.w	r3, r3, #32
 8004026:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004034:	461a      	mov	r2, r3
 8004036:	2310      	movs	r3, #16
 8004038:	6093      	str	r3, [r2, #8]
 800403a:	e000      	b.n	800403e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800403c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f003 ffc9 	bl	8007ffa <USB_ReadChInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d11b      	bne.n	80040aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4413      	add	r3, r2
 800407a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800407e:	461a      	mov	r2, r3
 8004080:	2304      	movs	r3, #4
 8004082:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004084:	78fa      	ldrb	r2, [r7, #3]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	011b      	lsls	r3, r3, #4
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	334d      	adds	r3, #77	@ 0x4d
 8004094:	2207      	movs	r2, #7
 8004096:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f004 fd4e 	bl	8008b42 <USB_HC_Halt>
 80040a6:	f000 bc89 	b.w	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 ffa1 	bl	8007ffa <USB_ReadChInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b20      	cmp	r3, #32
 80040c0:	f040 8082 	bne.w	80041c8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d0:	461a      	mov	r2, r3
 80040d2:	2320      	movs	r3, #32
 80040d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3319      	adds	r3, #25
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d124      	bne.n	8004136 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80040ec:	78fa      	ldrb	r2, [r7, #3]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	3319      	adds	r3, #25
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004100:	78fa      	ldrb	r2, [r7, #3]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	334c      	adds	r3, #76	@ 0x4c
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	334d      	adds	r3, #77	@ 0x4d
 8004124:	2203      	movs	r2, #3
 8004126:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 fd06 	bl	8008b42 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	331a      	adds	r3, #26
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 8437 	bne.w	80049bc <HCD_HC_OUT_IRQHandler+0x978>
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	331b      	adds	r3, #27
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 842b 	bne.w	80049bc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3326      	adds	r3, #38	@ 0x26
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d009      	beq.n	8004190 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	331b      	adds	r3, #27
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334d      	adds	r3, #77	@ 0x4d
 80041a0:	2203      	movs	r2, #3
 80041a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 fcc8 	bl	8008b42 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3344      	adds	r3, #68	@ 0x44
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e3f9      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 ff12 	bl	8007ffa <USB_ReadChInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e0:	d111      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ee:	461a      	mov	r2, r3
 80041f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f004 fc9f 	bl	8008b42 <USB_HC_Halt>
 8004204:	e3da      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f003 fef3 	bl	8007ffa <USB_ReadChInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d168      	bne.n	80042f0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	3344      	adds	r3, #68	@ 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f003 fedd 	bl	8007ffa <USB_ReadChInterrupts>
 8004240:	4603      	mov	r3, r0
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	d112      	bne.n	8004270 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3319      	adds	r3, #25
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426a:	461a      	mov	r2, r3
 800426c:	2340      	movs	r3, #64	@ 0x40
 800426e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	331b      	adds	r3, #27
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d019      	beq.n	80042ba <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	331b      	adds	r3, #27
 8004296:	2200      	movs	r2, #0
 8004298:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2301      	movs	r3, #1
 80042ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	334d      	adds	r3, #77	@ 0x4d
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f004 fc2a 	bl	8008b42 <USB_HC_Halt>
 80042ee:	e365      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 fe7e 	bl	8007ffa <USB_ReadChInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d139      	bne.n	800437c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	334d      	adds	r3, #77	@ 0x4d
 8004318:	2205      	movs	r2, #5
 800431a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	331a      	adds	r3, #26
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	3319      	adds	r3, #25
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3344      	adds	r3, #68	@ 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f004 fbed 	bl	8008b42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004374:	461a      	mov	r2, r3
 8004376:	2340      	movs	r3, #64	@ 0x40
 8004378:	6093      	str	r3, [r2, #8]
 800437a:	e31f      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f003 fe38 	bl	8007ffa <USB_ReadChInterrupts>
 800438a:	4603      	mov	r3, r0
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d11a      	bne.n	80043ca <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a0:	461a      	mov	r2, r3
 80043a2:	2308      	movs	r3, #8
 80043a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334d      	adds	r3, #77	@ 0x4d
 80043b6:	2206      	movs	r2, #6
 80043b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	4611      	mov	r1, r2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f004 fbbd 	bl	8008b42 <USB_HC_Halt>
 80043c8:	e2f8      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 fe11 	bl	8007ffa <USB_ReadChInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d144      	bne.n	800446c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80043e2:	78fa      	ldrb	r2, [r7, #3]
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3344      	adds	r3, #68	@ 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	011b      	lsls	r3, r3, #4
 80043fe:	1a9b      	subs	r3, r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	334d      	adds	r3, #77	@ 0x4d
 8004406:	2204      	movs	r2, #4
 8004408:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3319      	adds	r3, #25
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d114      	bne.n	800444a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3318      	adds	r3, #24
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3319      	adds	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	4611      	mov	r1, r2
 8004452:	4618      	mov	r0, r3
 8004454:	f004 fb75 	bl	8008b42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4413      	add	r3, r2
 8004460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004464:	461a      	mov	r2, r3
 8004466:	2310      	movs	r3, #16
 8004468:	6093      	str	r3, [r2, #8]
 800446a:	e2a7      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f003 fdc0 	bl	8007ffa <USB_ReadChInterrupts>
 800447a:	4603      	mov	r3, r0
 800447c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004480:	2b80      	cmp	r3, #128	@ 0x80
 8004482:	f040 8083 	bne.w	800458c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	799b      	ldrb	r3, [r3, #6]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d111      	bne.n	80044b2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	334d      	adds	r3, #77	@ 0x4d
 800449e:	2207      	movs	r2, #7
 80044a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f004 fb49 	bl	8008b42 <USB_HC_Halt>
 80044b0:	e062      	b.n	8004578 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3344      	adds	r3, #68	@ 0x44
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1c59      	adds	r1, r3, #1
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4403      	add	r3, r0
 80044d2:	3344      	adds	r3, #68	@ 0x44
 80044d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3344      	adds	r3, #68	@ 0x44
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d922      	bls.n	8004532 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3344      	adds	r3, #68	@ 0x44
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	334c      	adds	r3, #76	@ 0x4c
 8004510:	2204      	movs	r2, #4
 8004512:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	334c      	adds	r3, #76	@ 0x4c
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f006 fe62 	bl	800b1f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004530:	e022      	b.n	8004578 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334c      	adds	r3, #76	@ 0x4c
 8004542:	2202      	movs	r2, #2
 8004544:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800455c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004564:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4413      	add	r3, r2
 800456e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004584:	461a      	mov	r2, r3
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	6093      	str	r3, [r2, #8]
 800458a:	e217      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f003 fd30 	bl	8007ffa <USB_ReadChInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a4:	d11b      	bne.n	80045de <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	334d      	adds	r3, #77	@ 0x4d
 80045b6:	2209      	movs	r2, #9
 80045b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	78fa      	ldrb	r2, [r7, #3]
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 fabd 	bl	8008b42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	e1ee      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 fd07 	bl	8007ffa <USB_ReadChInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	f040 81df 	bne.w	80049b6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004604:	461a      	mov	r2, r3
 8004606:	2302      	movs	r3, #2
 8004608:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334d      	adds	r3, #77	@ 0x4d
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	f040 8093 	bne.w	8004748 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	334d      	adds	r3, #77	@ 0x4d
 8004632:	2202      	movs	r2, #2
 8004634:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	334c      	adds	r3, #76	@ 0x4c
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3326      	adds	r3, #38	@ 0x26
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d00b      	beq.n	8004678 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3326      	adds	r3, #38	@ 0x26
 8004670:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004672:	2b03      	cmp	r3, #3
 8004674:	f040 8190 	bne.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	799b      	ldrb	r3, [r3, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d115      	bne.n	80046ac <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004680:	78fa      	ldrb	r2, [r7, #3]
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	4613      	mov	r3, r2
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	440b      	add	r3, r1
 800468e:	333d      	adds	r3, #61	@ 0x3d
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	f083 0301 	eor.w	r3, r3, #1
 8004698:	b2d8      	uxtb	r0, r3
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	333d      	adds	r3, #61	@ 0x3d
 80046a8:	4602      	mov	r2, r0
 80046aa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	799b      	ldrb	r3, [r3, #6]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 8171 	bne.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3334      	adds	r3, #52	@ 0x34
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8165 	beq.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3334      	adds	r3, #52	@ 0x34
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4403      	add	r3, r0
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	440b      	add	r3, r1
 80046f4:	1e59      	subs	r1, r3, #1
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4403      	add	r3, r0
 8004704:	3328      	adds	r3, #40	@ 0x28
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	fbb1 f3f3 	udiv	r3, r1, r3
 800470c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 813f 	beq.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	333d      	adds	r3, #61	@ 0x3d
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2d8      	uxtb	r0, r3
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	333d      	adds	r3, #61	@ 0x3d
 8004742:	4602      	mov	r2, r0
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e127      	b.n	8004998 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	334d      	adds	r3, #77	@ 0x4d
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d120      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	334d      	adds	r3, #77	@ 0x4d
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	331b      	adds	r3, #27
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 8107 	bne.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	334c      	adds	r3, #76	@ 0x4c
 800479a:	2202      	movs	r2, #2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e0fb      	b.n	8004998 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	334d      	adds	r3, #77	@ 0x4d
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d13a      	bne.n	800482c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	334d      	adds	r3, #77	@ 0x4d
 80047c6:	2202      	movs	r2, #2
 80047c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	4613      	mov	r3, r2
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	440b      	add	r3, r1
 80047d8:	334c      	adds	r3, #76	@ 0x4c
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	331b      	adds	r3, #27
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	f040 80d1 	bne.w	8004998 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	331b      	adds	r3, #27
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	440a      	add	r2, r1
 8004820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004828:	6053      	str	r3, [r2, #4]
 800482a:	e0b5      	b.n	8004998 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	@ 0x4d
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b05      	cmp	r3, #5
 8004840:	d114      	bne.n	800486c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004842:	78fa      	ldrb	r2, [r7, #3]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	334d      	adds	r3, #77	@ 0x4d
 8004852:	2202      	movs	r2, #2
 8004854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	334c      	adds	r3, #76	@ 0x4c
 8004866:	2202      	movs	r2, #2
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e095      	b.n	8004998 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	334d      	adds	r3, #77	@ 0x4d
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d114      	bne.n	80048ac <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	334d      	adds	r3, #77	@ 0x4d
 8004892:	2202      	movs	r2, #2
 8004894:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004896:	78fa      	ldrb	r2, [r7, #3]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	440b      	add	r3, r1
 80048a4:	334c      	adds	r3, #76	@ 0x4c
 80048a6:	2205      	movs	r2, #5
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	e075      	b.n	8004998 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	1a9b      	subs	r3, r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	334d      	adds	r3, #77	@ 0x4d
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b07      	cmp	r3, #7
 80048c0:	d00a      	beq.n	80048d8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80048c2:	78fa      	ldrb	r2, [r7, #3]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	334d      	adds	r3, #77	@ 0x4d
 80048d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d170      	bne.n	80049ba <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	334d      	adds	r3, #77	@ 0x4d
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	3344      	adds	r3, #68	@ 0x44
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	1c59      	adds	r1, r3, #1
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4403      	add	r3, r0
 800490c:	3344      	adds	r3, #68	@ 0x44
 800490e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	3344      	adds	r3, #68	@ 0x44
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d914      	bls.n	8004950 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3344      	adds	r3, #68	@ 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	334c      	adds	r3, #76	@ 0x4c
 800494a:	2204      	movs	r2, #4
 800494c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800494e:	e022      	b.n	8004996 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	334c      	adds	r3, #76	@ 0x4c
 8004960:	2202      	movs	r2, #2
 8004962:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800497a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004982:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004990:	461a      	mov	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004996:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	334c      	adds	r3, #76	@ 0x4c
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f006 fc20 	bl	800b1f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80049b4:	e002      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80049ba:	bf00      	nop
  }
}
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08a      	sub	sp, #40	@ 0x28
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	0c5b      	lsrs	r3, r3, #17
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d004      	beq.n	8004a08 <HCD_RXQLVL_IRQHandler+0x46>
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2b05      	cmp	r3, #5
 8004a02:	f000 80b6 	beq.w	8004b72 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a06:	e0b7      	b.n	8004b78 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80b3 	beq.w	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	332c      	adds	r3, #44	@ 0x2c
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80a7 	beq.w	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	3338      	adds	r3, #56	@ 0x38
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	18d1      	adds	r1, r2, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4613      	mov	r3, r2
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4403      	add	r3, r0
 8004a4c:	3334      	adds	r3, #52	@ 0x34
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4299      	cmp	r1, r3
 8004a52:	f200 8083 	bhi.w	8004b5c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	332c      	adds	r3, #44	@ 0x2c
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	f003 fa57 	bl	8007f24 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	332c      	adds	r3, #44	@ 0x2c
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	18d1      	adds	r1, r2, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4403      	add	r3, r0
 8004a9a:	332c      	adds	r3, #44	@ 0x2c
 8004a9c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3338      	adds	r3, #56	@ 0x38
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	18d1      	adds	r1, r2, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3338      	adds	r3, #56	@ 0x38
 8004ac4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	0cdb      	lsrs	r3, r3, #19
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d13f      	bne.n	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d03c      	beq.n	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b28:	461a      	mov	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4613      	mov	r3, r2
 8004b34:	011b      	lsls	r3, r3, #4
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	333c      	adds	r3, #60	@ 0x3c
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f083 0301 	eor.w	r3, r3, #1
 8004b44:	b2d8      	uxtb	r0, r3
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a9b      	subs	r3, r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	333c      	adds	r3, #60	@ 0x3c
 8004b56:	4602      	mov	r2, r0
 8004b58:	701a      	strb	r2, [r3, #0]
      break;
 8004b5a:	e00c      	b.n	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4613      	mov	r3, r2
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	334c      	adds	r3, #76	@ 0x4c
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	701a      	strb	r2, [r3, #0]
      break;
 8004b70:	e001      	b.n	8004b76 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004b76:	bf00      	nop
  }
}
 8004b78:	bf00      	nop
 8004b7a:	3728      	adds	r7, #40	@ 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004bac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d10b      	bne.n	8004bd0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d102      	bne.n	8004bc8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f006 fafa 	bl	800b1bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f043 0302 	orr.w	r3, r3, #2
 8004bce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d132      	bne.n	8004c40 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f043 0308 	orr.w	r3, r3, #8
 8004be0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d126      	bne.n	8004c3a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	7a5b      	ldrb	r3, [r3, #9]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d113      	bne.n	8004c1c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004bfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bfe:	d106      	bne.n	8004c0e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2102      	movs	r1, #2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fb1c 	bl	8008244 <USB_InitFSLSPClkSel>
 8004c0c:	e011      	b.n	8004c32 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2101      	movs	r1, #1
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 fb15 	bl	8008244 <USB_InitFSLSPClkSel>
 8004c1a:	e00a      	b.n	8004c32 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	79db      	ldrb	r3, [r3, #7]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d106      	bne.n	8004c32 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004c30:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f006 faec 	bl	800b210 <HAL_HCD_PortEnabled_Callback>
 8004c38:	e002      	b.n	8004c40 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f006 faf6 	bl	800b22c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0320 	and.w	r3, r3, #32
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d103      	bne.n	8004c52 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f043 0320 	orr.w	r3, r3, #32
 8004c50:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c58:	461a      	mov	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6013      	str	r3, [r2, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e12b      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc f8c6 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	@ 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f002 fb04 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a81      	ldr	r2, [pc, #516]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d807      	bhi.n	8004cec <HAL_I2C_Init+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a80      	ldr	r2, [pc, #512]	@ (8004ee0 <HAL_I2C_Init+0x278>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e006      	b.n	8004cfa <HAL_I2C_Init+0x92>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee4 <HAL_I2C_Init+0x27c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bf94      	ite	ls
 8004cf4:	2301      	movls	r3, #1
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a78      	ldr	r2, [pc, #480]	@ (8004ee8 <HAL_I2C_Init+0x280>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9b      	lsrs	r3, r3, #18
 8004d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a6a      	ldr	r2, [pc, #424]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d802      	bhi.n	8004d3c <HAL_I2C_Init+0xd4>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	e009      	b.n	8004d50 <HAL_I2C_Init+0xe8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	4a69      	ldr	r2, [pc, #420]	@ (8004eec <HAL_I2C_Init+0x284>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	3301      	adds	r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	495c      	ldr	r1, [pc, #368]	@ (8004edc <HAL_I2C_Init+0x274>)
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d819      	bhi.n	8004da4 <HAL_I2C_Init+0x13c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e59      	subs	r1, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d84:	400b      	ands	r3, r1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_I2C_Init+0x138>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e59      	subs	r1, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	e051      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da0:	2304      	movs	r3, #4
 8004da2:	e04f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d111      	bne.n	8004dd0 <HAL_I2C_Init+0x168>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e012      	b.n	8004df6 <HAL_I2C_Init+0x18e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x196>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <HAL_I2C_Init+0x1bc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e58      	subs	r0, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	440b      	add	r3, r1
 8004e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e22:	e00f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6809      	ldr	r1, [r1, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6911      	ldr	r1, [r2, #16]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	000186a0 	.word	0x000186a0
 8004ee0:	001e847f 	.word	0x001e847f
 8004ee4:	003d08ff 	.word	0x003d08ff
 8004ee8:	431bde83 	.word	0x431bde83
 8004eec:	10624dd3 	.word	0x10624dd3

08004ef0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	4608      	mov	r0, r1
 8004efa:	4611      	mov	r1, r2
 8004efc:	461a      	mov	r2, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	817b      	strh	r3, [r7, #10]
 8004f02:	460b      	mov	r3, r1
 8004f04:	813b      	strh	r3, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f0a:	f7fc fef7 	bl	8001cfc <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	f040 80d9 	bne.w	80050d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2319      	movs	r3, #25
 8004f24:	2201      	movs	r2, #1
 8004f26:	496d      	ldr	r1, [pc, #436]	@ (80050dc <HAL_I2C_Mem_Write+0x1ec>)
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fc8b 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0cc      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Mem_Write+0x56>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0c5      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d007      	beq.n	8004f6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	@ 0x21
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2240      	movs	r2, #64	@ 0x40
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a4d      	ldr	r2, [pc, #308]	@ (80050e0 <HAL_I2C_Mem_Write+0x1f0>)
 8004fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fae:	88f8      	ldrh	r0, [r7, #6]
 8004fb0:	893a      	ldrh	r2, [r7, #8]
 8004fb2:	8979      	ldrh	r1, [r7, #10]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fac2 	bl	8005548 <I2C_RequestMemoryWrite>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d052      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e081      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fd50 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d107      	bne.n	8004ff6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e06b      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b04      	cmp	r3, #4
 8005036:	d11b      	bne.n	8005070 <HAL_I2C_Mem_Write+0x180>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1aa      	bne.n	8004fce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f000 fd43 	bl	8005b08 <I2C_WaitOnBTFFlagUntilTimeout>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00d      	beq.n	80050a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	2b04      	cmp	r3, #4
 800508e:	d107      	bne.n	80050a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e016      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	00100002 	.word	0x00100002
 80050e0:	ffff0000 	.word	0xffff0000

080050e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08c      	sub	sp, #48	@ 0x30
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050fe:	f7fc fdfd 	bl	8001cfc <HAL_GetTick>
 8005102:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b20      	cmp	r3, #32
 800510e:	f040 8214 	bne.w	800553a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2319      	movs	r3, #25
 8005118:	2201      	movs	r2, #1
 800511a:	497b      	ldr	r1, [pc, #492]	@ (8005308 <HAL_I2C_Mem_Read+0x224>)
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fb91 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
 800512a:	e207      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_I2C_Mem_Read+0x56>
 8005136:	2302      	movs	r3, #2
 8005138:	e200      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b01      	cmp	r3, #1
 800514e:	d007      	beq.n	8005160 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800516e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	@ 0x22
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2240      	movs	r2, #64	@ 0x40
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a5b      	ldr	r2, [pc, #364]	@ (800530c <HAL_I2C_Mem_Read+0x228>)
 80051a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051a2:	88f8      	ldrh	r0, [r7, #6]
 80051a4:	893a      	ldrh	r2, [r7, #8]
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4603      	mov	r3, r0
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fa5e 	bl	8005674 <I2C_RequestMemoryRead>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e1bc      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d113      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e190      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d11b      	bne.n	8005232 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e170      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	2b02      	cmp	r3, #2
 8005238:	d11b      	bne.n	8005272 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	e150      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005288:	e144      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800528e:	2b03      	cmp	r3, #3
 8005290:	f200 80f1 	bhi.w	8005476 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005298:	2b01      	cmp	r3, #1
 800529a:	d123      	bne.n	80052e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fc79 	bl	8005b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e145      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052e2:	e117      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d14e      	bne.n	800538a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f2:	2200      	movs	r2, #0
 80052f4:	4906      	ldr	r1, [pc, #24]	@ (8005310 <HAL_I2C_Mem_Read+0x22c>)
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 faa4 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e11a      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
 8005306:	bf00      	nop
 8005308:	00100002 	.word	0x00100002
 800530c:	ffff0000 	.word	0xffff0000
 8005310:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005388:	e0c4      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	2200      	movs	r2, #0
 8005392:	496c      	ldr	r1, [pc, #432]	@ (8005544 <HAL_I2C_Mem_Read+0x460>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fa55 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e0cb      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691a      	ldr	r2, [r3, #16]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	2200      	movs	r2, #0
 80053ee:	4955      	ldr	r1, [pc, #340]	@ (8005544 <HAL_I2C_Mem_Read+0x460>)
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fa27 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e09d      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005474:	e04e      	b.n	8005514 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005478:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb8c 	bl	8005b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e058      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d124      	bne.n	8005514 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d107      	bne.n	80054e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b29a      	uxth	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f aeb6 	bne.w	800528a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e000      	b.n	800553c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
  }
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	@ 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	00010004 	.word	0x00010004

08005548 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b088      	sub	sp, #32
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4603      	mov	r3, r0
 8005558:	817b      	strh	r3, [r7, #10]
 800555a:	460b      	mov	r3, r1
 800555c:	813b      	strh	r3, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005570:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2200      	movs	r2, #0
 800557a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 f960 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00d      	beq.n	80055a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005598:	d103      	bne.n	80055a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e05f      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055a6:	897b      	ldrh	r3, [r7, #10]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	492d      	ldr	r1, [pc, #180]	@ (8005670 <I2C_RequestMemoryWrite+0x128>)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f9bb 	bl	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e04c      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e4:	6a39      	ldr	r1, [r7, #32]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fa46 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d107      	bne.n	800560a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005608:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e02b      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005614:	893b      	ldrh	r3, [r7, #8]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]
 800561e:	e021      	b.n	8005664 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005620:	893b      	ldrh	r3, [r7, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	b29b      	uxth	r3, r3
 8005626:	b2da      	uxtb	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005630:	6a39      	ldr	r1, [r7, #32]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fa20 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	2b04      	cmp	r3, #4
 8005644:	d107      	bne.n	8005656 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005654:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e005      	b.n	8005666 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800565a:	893b      	ldrh	r3, [r7, #8]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	00010002 	.word	0x00010002

08005674 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	461a      	mov	r2, r3
 8005682:	4603      	mov	r3, r0
 8005684:	817b      	strh	r3, [r7, #10]
 8005686:	460b      	mov	r3, r1
 8005688:	813b      	strh	r3, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800569c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 f8c2 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d4:	d103      	bne.n	80056de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e0aa      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	6a3a      	ldr	r2, [r7, #32]
 80056f6:	4952      	ldr	r1, [pc, #328]	@ (8005840 <I2C_RequestMemoryRead+0x1cc>)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f91d 	bl	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e097      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005720:	6a39      	ldr	r1, [r7, #32]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9a8 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00d      	beq.n	800574a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	2b04      	cmp	r3, #4
 8005734:	d107      	bne.n	8005746 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005744:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e076      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574a:	88fb      	ldrh	r3, [r7, #6]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d105      	bne.n	800575c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005750:	893b      	ldrh	r3, [r7, #8]
 8005752:	b2da      	uxtb	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	611a      	str	r2, [r3, #16]
 800575a:	e021      	b.n	80057a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800575c:	893b      	ldrh	r3, [r7, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	b29b      	uxth	r3, r3
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576c:	6a39      	ldr	r1, [r7, #32]
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f982 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b04      	cmp	r3, #4
 8005780:	d107      	bne.n	8005792 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005790:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e050      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005796:	893b      	ldrh	r3, [r7, #8]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	6a39      	ldr	r1, [r7, #32]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f967 	bl	8005a78 <I2C_WaitOnTXEFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d107      	bne.n	80057c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e035      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f82b 	bl	8005844 <I2C_WaitOnFlagUntilTimeout>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00d      	beq.n	8005810 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005802:	d103      	bne.n	800580c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800580a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e013      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	4906      	ldr	r1, [pc, #24]	@ (8005840 <I2C_RequestMemoryRead+0x1cc>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f886 	bl	8005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e000      	b.n	8005838 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	00010002 	.word	0x00010002

08005844 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4613      	mov	r3, r2
 8005852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	e048      	b.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d044      	beq.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fc fa4d 	bl	8001cfc <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x30>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d139      	bne.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	d10d      	bne.n	800589a <I2C_WaitOnFlagUntilTimeout+0x56>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	e00c      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	43da      	mvns	r2, r3
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4013      	ands	r3, r2
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bf0c      	ite	eq
 80058ac:	2301      	moveq	r3, #1
 80058ae:	2300      	movne	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d116      	bne.n	80058e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	f043 0220 	orr.w	r2, r3, #32
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e023      	b.n	8005930 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d10d      	bne.n	800590e <I2C_WaitOnFlagUntilTimeout+0xca>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	e00c      	b.n	8005928 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	43da      	mvns	r2, r3
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4013      	ands	r3, r2
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf0c      	ite	eq
 8005920:	2301      	moveq	r3, #1
 8005922:	2300      	movne	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	429a      	cmp	r2, r3
 800592c:	d093      	beq.n	8005856 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005946:	e071      	b.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005956:	d123      	bne.n	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005966:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e067      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d041      	beq.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a8:	f7fc f9a8 	bl	8001cfc <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d302      	bcc.n	80059be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d136      	bne.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0c1b      	lsrs	r3, r3, #16
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10c      	bne.n	80059e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	43da      	mvns	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4013      	ands	r3, r2
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bf14      	ite	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	2300      	moveq	r3, #0
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e00b      	b.n	80059fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	43da      	mvns	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4013      	ands	r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf14      	ite	ne
 80059f4:	2301      	movne	r3, #1
 80059f6:	2300      	moveq	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a18:	f043 0220 	orr.w	r2, r3, #32
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e021      	b.n	8005a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d10c      	bne.n	8005a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	43da      	mvns	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4013      	ands	r3, r2
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	e00b      	b.n	8005a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	43da      	mvns	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f af6d 	bne.w	8005948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8e3 	bl	8005c52 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d028      	beq.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fc f92d 	bl	8001cfc <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abe:	2b80      	cmp	r3, #128	@ 0x80
 8005ac0:	d016      	beq.n	8005af0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afa:	2b80      	cmp	r3, #128	@ 0x80
 8005afc:	d1c3      	bne.n	8005a86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b14:	e034      	b.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f89b 	bl	8005c52 <I2C_IsAcknowledgeFailed>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e034      	b.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d028      	beq.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fc f8e5 	bl	8001cfc <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11d      	bne.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d016      	beq.n	8005b80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e007      	b.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0304 	and.w	r3, r3, #4
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d1c3      	bne.n	8005b16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ba4:	e049      	b.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d119      	bne.n	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0210 	mvn.w	r2, #16
 8005bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e030      	b.n	8005c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be8:	f7fc f888 	bl	8001cfc <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d302      	bcc.n	8005bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d11d      	bne.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c08:	2b40      	cmp	r3, #64	@ 0x40
 8005c0a:	d016      	beq.n	8005c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e007      	b.n	8005c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c44:	2b40      	cmp	r3, #64	@ 0x40
 8005c46:	d1ae      	bne.n	8005ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b083      	sub	sp, #12
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c68:	d11b      	bne.n	8005ca2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8e:	f043 0204 	orr.w	r2, r3, #4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e128      	b.n	8005f14 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a90      	ldr	r2, [pc, #576]	@ (8005f1c <HAL_I2S_Init+0x26c>)
 8005cda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fb f937 	bl	8000f50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005cf8:	f023 030f 	bic.w	r3, r3, #15
 8005cfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2202      	movs	r2, #2
 8005d04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d060      	beq.n	8005dd0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d16:	2310      	movs	r3, #16
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e001      	b.n	8005d20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d802      	bhi.n	8005d2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d2e:	2001      	movs	r0, #1
 8005d30:	f001 fbdc 	bl	80074ec <HAL_RCCEx_GetPeriphCLKFreq>
 8005d34:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d3e:	d125      	bne.n	8005d8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	3305      	adds	r3, #5
 8005d66:	613b      	str	r3, [r7, #16]
 8005d68:	e01f      	b.n	8005daa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	3305      	adds	r3, #5
 8005d88:	613b      	str	r3, [r7, #16]
 8005d8a:	e00e      	b.n	8005daa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d94:	4613      	mov	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da6:	3305      	adds	r3, #5
 8005da8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	4a5c      	ldr	r2, [pc, #368]	@ (8005f20 <HAL_I2S_Init+0x270>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	08db      	lsrs	r3, r3, #3
 8005db4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	e003      	b.n	8005dd8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d902      	bls.n	8005de4 <HAL_I2S_Init+0x134>
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2bff      	cmp	r3, #255	@ 0xff
 8005de2:	d907      	bls.n	8005df4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de8:	f043 0210 	orr.w	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e08f      	b.n	8005f14 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	ea42 0103 	orr.w	r1, r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e12:	f023 030f 	bic.w	r3, r3, #15
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6851      	ldr	r1, [r2, #4]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6892      	ldr	r2, [r2, #8]
 8005e1e:	4311      	orrs	r1, r2
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68d2      	ldr	r2, [r2, #12]
 8005e24:	4311      	orrs	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6992      	ldr	r2, [r2, #24]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d161      	bne.n	8005f04 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a38      	ldr	r2, [pc, #224]	@ (8005f24 <HAL_I2S_Init+0x274>)
 8005e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a37      	ldr	r2, [pc, #220]	@ (8005f28 <HAL_I2S_Init+0x278>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d101      	bne.n	8005e54 <HAL_I2S_Init+0x1a4>
 8005e50:	4b36      	ldr	r3, [pc, #216]	@ (8005f2c <HAL_I2S_Init+0x27c>)
 8005e52:	e001      	b.n	8005e58 <HAL_I2S_Init+0x1a8>
 8005e54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e58:	69db      	ldr	r3, [r3, #28]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	4932      	ldr	r1, [pc, #200]	@ (8005f28 <HAL_I2S_Init+0x278>)
 8005e60:	428a      	cmp	r2, r1
 8005e62:	d101      	bne.n	8005e68 <HAL_I2S_Init+0x1b8>
 8005e64:	4a31      	ldr	r2, [pc, #196]	@ (8005f2c <HAL_I2S_Init+0x27c>)
 8005e66:	e001      	b.n	8005e6c <HAL_I2S_Init+0x1bc>
 8005e68:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005e6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005e70:	f023 030f 	bic.w	r3, r3, #15
 8005e74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f28 <HAL_I2S_Init+0x278>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <HAL_I2S_Init+0x1d4>
 8005e80:	4b2a      	ldr	r3, [pc, #168]	@ (8005f2c <HAL_I2S_Init+0x27c>)
 8005e82:	e001      	b.n	8005e88 <HAL_I2S_Init+0x1d8>
 8005e84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e88:	2202      	movs	r2, #2
 8005e8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a25      	ldr	r2, [pc, #148]	@ (8005f28 <HAL_I2S_Init+0x278>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d101      	bne.n	8005e9a <HAL_I2S_Init+0x1ea>
 8005e96:	4b25      	ldr	r3, [pc, #148]	@ (8005f2c <HAL_I2S_Init+0x27c>)
 8005e98:	e001      	b.n	8005e9e <HAL_I2S_Init+0x1ee>
 8005e9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eaa:	d003      	beq.n	8005eb4 <HAL_I2S_Init+0x204>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005eb4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	e001      	b.n	8005ec0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	897b      	ldrh	r3, [r7, #10]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005eec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f28 <HAL_I2S_Init+0x278>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_I2S_Init+0x24c>
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f2c <HAL_I2S_Init+0x27c>)
 8005efa:	e001      	b.n	8005f00 <HAL_I2S_Init+0x250>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f00:	897a      	ldrh	r2, [r7, #10]
 8005f02:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3720      	adds	r7, #32
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	08006017 	.word	0x08006017
 8005f20:	cccccccd 	.word	0xcccccccd
 8005f24:	080063e9 	.word	0x080063e9
 8005f28:	40003800 	.word	0x40003800
 8005f2c:	40003400 	.word	0x40003400

08005f30 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10e      	bne.n	8005fb0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fa0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffcc 	bl	8005f48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10e      	bne.n	800600e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ffe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fb fddf 	bl	8001bcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800600e:	bf00      	nop
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b04      	cmp	r3, #4
 8006030:	d13a      	bne.n	80060a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d109      	bne.n	8006050 <I2S_IRQHandler+0x3a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d102      	bne.n	8006050 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff ffb4 	bl	8005fb8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006056:	2b40      	cmp	r3, #64	@ 0x40
 8006058:	d126      	bne.n	80060a8 <I2S_IRQHandler+0x92>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b20      	cmp	r3, #32
 8006066:	d11f      	bne.n	80060a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006076:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	f043 0202 	orr.w	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb fdaa 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d136      	bne.n	8006122 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d109      	bne.n	80060d2 <I2S_IRQHandler+0xbc>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c8:	2b80      	cmp	r3, #128	@ 0x80
 80060ca:	d102      	bne.n	80060d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff45 	bl	8005f5c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d122      	bne.n	8006122 <I2S_IRQHandler+0x10c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	d11b      	bne.n	8006122 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006114:	f043 0204 	orr.w	r2, r3, #4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fb fd6d 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006122:	bf00      	nop
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d001      	beq.n	8006152 <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	e13c      	b.n	80063cc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 800615e:	887b      	ldrh	r3, [r7, #2]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e131      	b.n	80063cc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 8006174:	2302      	movs	r3, #2
 8006176:	e129      	b.n	80063cc <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b03      	cmp	r3, #3
 800619c:	d002      	beq.n	80061a4 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b05      	cmp	r3, #5
 80061a2:	d114      	bne.n	80061ce <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80061a4:	887b      	ldrh	r3, [r7, #2]
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 80061ae:	887b      	ldrh	r3, [r7, #2]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80061b8:	887b      	ldrh	r3, [r7, #2]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	865a      	strh	r2, [r3, #50]	@ 0x32
 80061cc:	e00b      	b.n	80061e6 <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	887a      	ldrh	r2, [r7, #2]
 80061de:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	887a      	ldrh	r2, [r7, #2]
 80061e4:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2205      	movs	r2, #5
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f8:	4a76      	ldr	r2, [pc, #472]	@ (80063d4 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006200:	4a75      	ldr	r2, [pc, #468]	@ (80063d8 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 8006202:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006208:	4a74      	ldr	r2, [pc, #464]	@ (80063dc <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 800620a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	2200      	movs	r2, #0
 8006212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	2200      	movs	r2, #0
 800621a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	4a6e      	ldr	r2, [pc, #440]	@ (80063dc <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 8006222:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622e:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006236:	d002      	beq.n	800623e <HAL_I2SEx_TransmitReceive_DMA+0x112>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d144      	bne.n	80062c8 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800623e:	1d3b      	adds	r3, r7, #4
 8006240:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a65      	ldr	r2, [pc, #404]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d101      	bne.n	8006254 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 8006250:	4b64      	ldr	r3, [pc, #400]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006252:	e001      	b.n	8006258 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 8006254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006258:	330c      	adds	r3, #12
 800625a:	4619      	mov	r1, r3
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006264:	b29b      	uxth	r3, r3
 8006266:	f7fb ff39 	bl	80020dc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5c      	ldr	r2, [pc, #368]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 8006274:	4b5b      	ldr	r3, [pc, #364]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006276:	e001      	b.n	800627c <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8006278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4957      	ldr	r1, [pc, #348]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006284:	428b      	cmp	r3, r1
 8006286:	d101      	bne.n	800628c <HAL_I2SEx_TransmitReceive_DMA+0x160>
 8006288:	4b56      	ldr	r3, [pc, #344]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800628a:	e001      	b.n	8006290 <HAL_I2SEx_TransmitReceive_DMA+0x164>
 800628c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f7fb ff13 	bl	80020dc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f042 0202 	orr.w	r2, r2, #2
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	e056      	b.n	8006376 <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d6:	d10a      	bne.n	80062ee <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80062ee:	f107 0308 	add.w	r3, r7, #8
 80062f2:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a37      	ldr	r2, [pc, #220]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 8006306:	4b37      	ldr	r3, [pc, #220]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006308:	e001      	b.n	800630e <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 800630a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800630e:	330c      	adds	r3, #12
 8006310:	461a      	mov	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	b29b      	uxth	r3, r3
 8006318:	f7fb fee0 	bl	80020dc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a2f      	ldr	r2, [pc, #188]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 8006326:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006328:	e001      	b.n	800632e <HAL_I2SEx_TransmitReceive_DMA+0x202>
 800632a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	492a      	ldr	r1, [pc, #168]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006336:	428b      	cmp	r3, r1
 8006338:	d101      	bne.n	800633e <HAL_I2SEx_TransmitReceive_DMA+0x212>
 800633a:	4b2a      	ldr	r3, [pc, #168]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800633c:	e001      	b.n	8006342 <HAL_I2SEx_TransmitReceive_DMA+0x216>
 800633e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006342:	f042 0202 	orr.w	r2, r2, #2
 8006346:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8006348:	1d3b      	adds	r3, r7, #4
 800634a:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	4619      	mov	r1, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006360:	b29b      	uxth	r3, r3
 8006362:	f7fb febb 	bl	80020dc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f042 0201 	orr.w	r2, r2, #1
 8006374:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006388:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800638c:	d01d      	beq.n	80063ca <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a13      	ldr	r2, [pc, #76]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d101      	bne.n	800639c <HAL_I2SEx_TransmitReceive_DMA+0x270>
 8006398:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 800639a:	e001      	b.n	80063a0 <HAL_I2SEx_TransmitReceive_DMA+0x274>
 800639c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063a0:	69da      	ldr	r2, [r3, #28]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	490e      	ldr	r1, [pc, #56]	@ (80063e0 <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80063a8:	428b      	cmp	r3, r1
 80063aa:	d101      	bne.n	80063b0 <HAL_I2SEx_TransmitReceive_DMA+0x284>
 80063ac:	4b0d      	ldr	r3, [pc, #52]	@ (80063e4 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80063ae:	e001      	b.n	80063b4 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 80063b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063b8:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063c8:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08006691 	.word	0x08006691
 80063d8:	080066ad 	.word	0x080066ad
 80063dc:	08006785 	.word	0x08006785
 80063e0:	40003800 	.word	0x40003800
 80063e4:	40003400 	.word	0x40003400

080063e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a92      	ldr	r2, [pc, #584]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d101      	bne.n	8006406 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006402:	4b92      	ldr	r3, [pc, #584]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006404:	e001      	b.n	800640a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006406:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a8b      	ldr	r2, [pc, #556]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006420:	4b8a      	ldr	r3, [pc, #552]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006422:	e001      	b.n	8006428 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006434:	d004      	beq.n	8006440 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 8099 	bne.w	8006572 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d107      	bne.n	800645a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9d5 	bl	8006804 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d107      	bne.n	8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fa78 	bl	8006964 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b40      	cmp	r3, #64	@ 0x40
 800647c:	d13a      	bne.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d035      	beq.n	80064f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a6e      	ldr	r2, [pc, #440]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d101      	bne.n	8006496 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006492:	4b6e      	ldr	r3, [pc, #440]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006494:	e001      	b.n	800649a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006496:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4969      	ldr	r1, [pc, #420]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d101      	bne.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80064a6:	4b69      	ldr	r3, [pc, #420]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064a8:	e001      	b.n	80064ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80064aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80064ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e6:	f043 0202 	orr.w	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fb fb84 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	f040 80c3 	bne.w	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 80bd 	beq.w	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800651a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a49      	ldr	r2, [pc, #292]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006526:	4b49      	ldr	r3, [pc, #292]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006528:	e001      	b.n	800652e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800652a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4944      	ldr	r1, [pc, #272]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006536:	428b      	cmp	r3, r1
 8006538:	d101      	bne.n	800653e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800653a:	4b44      	ldr	r3, [pc, #272]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800653c:	e001      	b.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800653e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006542:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006546:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006548:	2300      	movs	r3, #0
 800654a:	60bb      	str	r3, [r7, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006562:	f043 0204 	orr.w	r2, r3, #4
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fb fb46 	bl	8001bfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006570:	e089      	b.n	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d107      	bne.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f96e 	bl	8006868 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d107      	bne.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f9ad 	bl	8006900 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	d12f      	bne.n	8006610 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d02a      	beq.n	8006610 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80065d4:	4b1d      	ldr	r3, [pc, #116]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065d6:	e001      	b.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80065d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4919      	ldr	r1, [pc, #100]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d101      	bne.n	80065ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80065e8:	4b18      	ldr	r3, [pc, #96]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065ea:	e001      	b.n	80065f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80065ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80065f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80065f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	f043 0202 	orr.w	r2, r3, #2
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fb faf6 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b08      	cmp	r3, #8
 8006618:	d136      	bne.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d031      	beq.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a07      	ldr	r2, [pc, #28]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d101      	bne.n	8006632 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800662e:	4b07      	ldr	r3, [pc, #28]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006630:	e001      	b.n	8006636 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006632:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4902      	ldr	r1, [pc, #8]	@ (8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800663e:	428b      	cmp	r3, r1
 8006640:	d106      	bne.n	8006650 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006642:	4b02      	ldr	r3, [pc, #8]	@ (800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006644:	e006      	b.n	8006654 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006646:	bf00      	nop
 8006648:	40003800 	.word	0x40003800
 800664c:	40003400 	.word	0x40003400
 8006650:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006654:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006658:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006668:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006676:	f043 0204 	orr.w	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fabc 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006684:	e000      	b.n	8006688 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006686:	bf00      	nop
}
 8006688:	bf00      	nop
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7fa fd5a 	bl	8001158 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d155      	bne.n	800676e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d0:	d006      	beq.n	80066e0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11e      	bne.n	800671e <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a25      	ldr	r2, [pc, #148]	@ (800677c <I2SEx_TxRxDMACplt+0xd0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <I2SEx_TxRxDMACplt+0x42>
 80066ea:	4b25      	ldr	r3, [pc, #148]	@ (8006780 <I2SEx_TxRxDMACplt+0xd4>)
 80066ec:	e001      	b.n	80066f2 <I2SEx_TxRxDMACplt+0x46>
 80066ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4920      	ldr	r1, [pc, #128]	@ (800677c <I2SEx_TxRxDMACplt+0xd0>)
 80066fa:	428b      	cmp	r3, r1
 80066fc:	d101      	bne.n	8006702 <I2SEx_TxRxDMACplt+0x56>
 80066fe:	4b20      	ldr	r3, [pc, #128]	@ (8006780 <I2SEx_TxRxDMACplt+0xd4>)
 8006700:	e001      	b.n	8006706 <I2SEx_TxRxDMACplt+0x5a>
 8006702:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0202 	bic.w	r2, r2, #2
 800671a:	605a      	str	r2, [r3, #4]
 800671c:	e01d      	b.n	800675a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a12      	ldr	r2, [pc, #72]	@ (800677c <I2SEx_TxRxDMACplt+0xd0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <I2SEx_TxRxDMACplt+0x90>
 8006738:	4b11      	ldr	r3, [pc, #68]	@ (8006780 <I2SEx_TxRxDMACplt+0xd4>)
 800673a:	e001      	b.n	8006740 <I2SEx_TxRxDMACplt+0x94>
 800673c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	490d      	ldr	r1, [pc, #52]	@ (800677c <I2SEx_TxRxDMACplt+0xd0>)
 8006748:	428b      	cmp	r3, r1
 800674a:	d101      	bne.n	8006750 <I2SEx_TxRxDMACplt+0xa4>
 800674c:	4b0c      	ldr	r3, [pc, #48]	@ (8006780 <I2SEx_TxRxDMACplt+0xd4>)
 800674e:	e001      	b.n	8006754 <I2SEx_TxRxDMACplt+0xa8>
 8006750:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006754:	f022 0202 	bic.w	r2, r2, #2
 8006758:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7fa fd02 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40003800 	.word	0x40003800
 8006780:	40003400 	.word	0x40003400

08006784 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0203 	bic.w	r2, r2, #3
 80067a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <I2SEx_TxRxDMAError+0x78>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <I2SEx_TxRxDMAError+0x2c>
 80067ac:	4b14      	ldr	r3, [pc, #80]	@ (8006800 <I2SEx_TxRxDMAError+0x7c>)
 80067ae:	e001      	b.n	80067b4 <I2SEx_TxRxDMAError+0x30>
 80067b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4910      	ldr	r1, [pc, #64]	@ (80067fc <I2SEx_TxRxDMAError+0x78>)
 80067bc:	428b      	cmp	r3, r1
 80067be:	d101      	bne.n	80067c4 <I2SEx_TxRxDMAError+0x40>
 80067c0:	4b0f      	ldr	r3, [pc, #60]	@ (8006800 <I2SEx_TxRxDMAError+0x7c>)
 80067c2:	e001      	b.n	80067c8 <I2SEx_TxRxDMAError+0x44>
 80067c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067c8:	f022 0203 	bic.w	r2, r2, #3
 80067cc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e6:	f043 0208 	orr.w	r2, r3, #8
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7fb fa04 	bl	8001bfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40003800 	.word	0x40003800
 8006800:	40003400 	.word	0x40003400

08006804 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	1c99      	adds	r1, r3, #2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6251      	str	r1, [r2, #36]	@ 0x24
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d113      	bne.n	800685e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fa fc8d 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	1c99      	adds	r1, r3, #2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6251      	str	r1, [r2, #36]	@ 0x24
 800687a:	8819      	ldrh	r1, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x90>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <I2SEx_TxISR_I2SExt+0x22>
 8006886:	4b1d      	ldr	r3, [pc, #116]	@ (80068fc <I2SEx_TxISR_I2SExt+0x94>)
 8006888:	e001      	b.n	800688e <I2SEx_TxISR_I2SExt+0x26>
 800688a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800688e:	460a      	mov	r2, r1
 8006890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d121      	bne.n	80068ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a12      	ldr	r2, [pc, #72]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x90>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d101      	bne.n	80068b8 <I2SEx_TxISR_I2SExt+0x50>
 80068b4:	4b11      	ldr	r3, [pc, #68]	@ (80068fc <I2SEx_TxISR_I2SExt+0x94>)
 80068b6:	e001      	b.n	80068bc <I2SEx_TxISR_I2SExt+0x54>
 80068b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	490d      	ldr	r1, [pc, #52]	@ (80068f8 <I2SEx_TxISR_I2SExt+0x90>)
 80068c4:	428b      	cmp	r3, r1
 80068c6:	d101      	bne.n	80068cc <I2SEx_TxISR_I2SExt+0x64>
 80068c8:	4b0c      	ldr	r3, [pc, #48]	@ (80068fc <I2SEx_TxISR_I2SExt+0x94>)
 80068ca:	e001      	b.n	80068d0 <I2SEx_TxISR_I2SExt+0x68>
 80068cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80068da:	b29b      	uxth	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fa fc45 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068ee:	bf00      	nop
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40003800 	.word	0x40003800
 80068fc:	40003400 	.word	0x40003400

08006900 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68d8      	ldr	r0, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	1c99      	adds	r1, r3, #2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006918:	b282      	uxth	r2, r0
 800691a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800692e:	b29b      	uxth	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d113      	bne.n	800695c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006942:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d106      	bne.n	800695c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fa fc0e 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a20      	ldr	r2, [pc, #128]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x90>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d101      	bne.n	800697a <I2SEx_RxISR_I2SExt+0x16>
 8006976:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <I2SEx_RxISR_I2SExt+0x94>)
 8006978:	e001      	b.n	800697e <I2SEx_RxISR_I2SExt+0x1a>
 800697a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800697e:	68d8      	ldr	r0, [r3, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	1c99      	adds	r1, r3, #2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800698a:	b282      	uxth	r2, r0
 800698c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d121      	bne.n	80069ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a12      	ldr	r2, [pc, #72]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x90>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d101      	bne.n	80069b4 <I2SEx_RxISR_I2SExt+0x50>
 80069b0:	4b11      	ldr	r3, [pc, #68]	@ (80069f8 <I2SEx_RxISR_I2SExt+0x94>)
 80069b2:	e001      	b.n	80069b8 <I2SEx_RxISR_I2SExt+0x54>
 80069b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	490d      	ldr	r1, [pc, #52]	@ (80069f4 <I2SEx_RxISR_I2SExt+0x90>)
 80069c0:	428b      	cmp	r3, r1
 80069c2:	d101      	bne.n	80069c8 <I2SEx_RxISR_I2SExt+0x64>
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <I2SEx_RxISR_I2SExt+0x94>)
 80069c6:	e001      	b.n	80069cc <I2SEx_RxISR_I2SExt+0x68>
 80069c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d106      	bne.n	80069ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fa fbc7 	bl	8001178 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40003800 	.word	0x40003800
 80069f8:	40003400 	.word	0x40003400

080069fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e267      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d075      	beq.n	8006b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a1a:	4b88      	ldr	r3, [pc, #544]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 030c 	and.w	r3, r3, #12
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d00c      	beq.n	8006a40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a26:	4b85      	ldr	r3, [pc, #532]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d112      	bne.n	8006a58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a32:	4b82      	ldr	r3, [pc, #520]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a3e:	d10b      	bne.n	8006a58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	4b7e      	ldr	r3, [pc, #504]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d05b      	beq.n	8006b04 <HAL_RCC_OscConfig+0x108>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d157      	bne.n	8006b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e242      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a60:	d106      	bne.n	8006a70 <HAL_RCC_OscConfig+0x74>
 8006a62:	4b76      	ldr	r3, [pc, #472]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a75      	ldr	r2, [pc, #468]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	e01d      	b.n	8006aac <HAL_RCC_OscConfig+0xb0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCC_OscConfig+0x98>
 8006a7a:	4b70      	ldr	r3, [pc, #448]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6f      	ldr	r2, [pc, #444]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4b6d      	ldr	r3, [pc, #436]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a6c      	ldr	r2, [pc, #432]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e00b      	b.n	8006aac <HAL_RCC_OscConfig+0xb0>
 8006a94:	4b69      	ldr	r3, [pc, #420]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a68      	ldr	r2, [pc, #416]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	4b66      	ldr	r3, [pc, #408]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a65      	ldr	r2, [pc, #404]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fb f922 	bl	8001cfc <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fb f91e 	bl	8001cfc <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	@ 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e207      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	4b5b      	ldr	r3, [pc, #364]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0xc0>
 8006ada:	e014      	b.n	8006b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006adc:	f7fb f90e 	bl	8001cfc <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fb f90a 	bl	8001cfc <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	@ 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e1f3      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af6:	4b51      	ldr	r3, [pc, #324]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1f0      	bne.n	8006ae4 <HAL_RCC_OscConfig+0xe8>
 8006b02:	e000      	b.n	8006b06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d063      	beq.n	8006bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b12:	4b4a      	ldr	r3, [pc, #296]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 030c 	and.w	r3, r3, #12
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b1e:	4b47      	ldr	r3, [pc, #284]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d11c      	bne.n	8006b64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b2a:	4b44      	ldr	r3, [pc, #272]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d116      	bne.n	8006b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b36:	4b41      	ldr	r3, [pc, #260]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <HAL_RCC_OscConfig+0x152>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d001      	beq.n	8006b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e1c7      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	4937      	ldr	r1, [pc, #220]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b62:	e03a      	b.n	8006bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d020      	beq.n	8006bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b6c:	4b34      	ldr	r3, [pc, #208]	@ (8006c40 <HAL_RCC_OscConfig+0x244>)
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b72:	f7fb f8c3 	bl	8001cfc <HAL_GetTick>
 8006b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b7a:	f7fb f8bf 	bl	8001cfc <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e1a8      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b98:	4b28      	ldr	r3, [pc, #160]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	4925      	ldr	r1, [pc, #148]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	600b      	str	r3, [r1, #0]
 8006bac:	e015      	b.n	8006bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bae:	4b24      	ldr	r3, [pc, #144]	@ (8006c40 <HAL_RCC_OscConfig+0x244>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fb f8a2 	bl	8001cfc <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bbc:	f7fb f89e 	bl	8001cfc <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e187      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bce:	4b1b      	ldr	r3, [pc, #108]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1f0      	bne.n	8006bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d036      	beq.n	8006c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d016      	beq.n	8006c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bee:	4b15      	ldr	r3, [pc, #84]	@ (8006c44 <HAL_RCC_OscConfig+0x248>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf4:	f7fb f882 	bl	8001cfc <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bfc:	f7fb f87e 	bl	8001cfc <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e167      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c3c <HAL_RCC_OscConfig+0x240>)
 8006c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0f0      	beq.n	8006bfc <HAL_RCC_OscConfig+0x200>
 8006c1a:	e01b      	b.n	8006c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <HAL_RCC_OscConfig+0x248>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c22:	f7fb f86b 	bl	8001cfc <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c28:	e00e      	b.n	8006c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2a:	f7fb f867 	bl	8001cfc <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d907      	bls.n	8006c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e150      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	42470000 	.word	0x42470000
 8006c44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c48:	4b88      	ldr	r3, [pc, #544]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1ea      	bne.n	8006c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 8097 	beq.w	8006d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c62:	2300      	movs	r3, #0
 8006c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c66:	4b81      	ldr	r3, [pc, #516]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10f      	bne.n	8006c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c72:	2300      	movs	r3, #0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	4b7d      	ldr	r3, [pc, #500]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c82:	4b7a      	ldr	r3, [pc, #488]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c92:	4b77      	ldr	r3, [pc, #476]	@ (8006e70 <HAL_RCC_OscConfig+0x474>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d118      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c9e:	4b74      	ldr	r3, [pc, #464]	@ (8006e70 <HAL_RCC_OscConfig+0x474>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a73      	ldr	r2, [pc, #460]	@ (8006e70 <HAL_RCC_OscConfig+0x474>)
 8006ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006caa:	f7fb f827 	bl	8001cfc <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cb0:	e008      	b.n	8006cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb2:	f7fb f823 	bl	8001cfc <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d901      	bls.n	8006cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e10c      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8006e70 <HAL_RCC_OscConfig+0x474>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0f0      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x2ea>
 8006cd8:	4b64      	ldr	r3, [pc, #400]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cdc:	4a63      	ldr	r2, [pc, #396]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ce4:	e01c      	b.n	8006d20 <HAL_RCC_OscConfig+0x324>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	2b05      	cmp	r3, #5
 8006cec:	d10c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x30c>
 8006cee:	4b5f      	ldr	r3, [pc, #380]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf2:	4a5e      	ldr	r2, [pc, #376]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006cf4:	f043 0304 	orr.w	r3, r3, #4
 8006cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d06:	e00b      	b.n	8006d20 <HAL_RCC_OscConfig+0x324>
 8006d08:	4b58      	ldr	r3, [pc, #352]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0c:	4a57      	ldr	r2, [pc, #348]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d14:	4b55      	ldr	r3, [pc, #340]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d18:	4a54      	ldr	r2, [pc, #336]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d1a:	f023 0304 	bic.w	r3, r3, #4
 8006d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d015      	beq.n	8006d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fa ffe8 	bl	8001cfc <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d2e:	e00a      	b.n	8006d46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d30:	f7fa ffe4 	bl	8001cfc <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e0cb      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d46:	4b49      	ldr	r3, [pc, #292]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0ee      	beq.n	8006d30 <HAL_RCC_OscConfig+0x334>
 8006d52:	e014      	b.n	8006d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d54:	f7fa ffd2 	bl	8001cfc <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5c:	f7fa ffce 	bl	8001cfc <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e0b5      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d72:	4b3e      	ldr	r3, [pc, #248]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1ee      	bne.n	8006d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d105      	bne.n	8006d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d84:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	4a38      	ldr	r2, [pc, #224]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80a1 	beq.w	8006edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d9a:	4b34      	ldr	r3, [pc, #208]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 030c 	and.w	r3, r3, #12
 8006da2:	2b08      	cmp	r3, #8
 8006da4:	d05c      	beq.n	8006e60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d141      	bne.n	8006e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dae:	4b31      	ldr	r3, [pc, #196]	@ (8006e74 <HAL_RCC_OscConfig+0x478>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006db4:	f7fa ffa2 	bl	8001cfc <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dbc:	f7fa ff9e 	bl	8001cfc <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e087      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	4b27      	ldr	r3, [pc, #156]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f0      	bne.n	8006dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69da      	ldr	r2, [r3, #28]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	019b      	lsls	r3, r3, #6
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	3b01      	subs	r3, #1
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	061b      	lsls	r3, r3, #24
 8006dfe:	491b      	ldr	r1, [pc, #108]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e04:	4b1b      	ldr	r3, [pc, #108]	@ (8006e74 <HAL_RCC_OscConfig+0x478>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0a:	f7fa ff77 	bl	8001cfc <HAL_GetTick>
 8006e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e10:	e008      	b.n	8006e24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e12:	f7fa ff73 	bl	8001cfc <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e05c      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e24:	4b11      	ldr	r3, [pc, #68]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCC_OscConfig+0x416>
 8006e30:	e054      	b.n	8006edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e32:	4b10      	ldr	r3, [pc, #64]	@ (8006e74 <HAL_RCC_OscConfig+0x478>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fa ff60 	bl	8001cfc <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e40:	f7fa ff5c 	bl	8001cfc <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e045      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e52:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <HAL_RCC_OscConfig+0x470>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x444>
 8006e5e:	e03d      	b.n	8006edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e038      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40007000 	.word	0x40007000
 8006e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e78:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <HAL_RCC_OscConfig+0x4ec>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d028      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d121      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d11a      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d111      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d001      	beq.n	8006edc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e000      	b.n	8006ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3718      	adds	r7, #24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40023800 	.word	0x40023800

08006eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0cc      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f00:	4b68      	ldr	r3, [pc, #416]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d90c      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b65      	ldr	r3, [pc, #404]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b63      	ldr	r3, [pc, #396]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0b8      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d020      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f40:	4b59      	ldr	r3, [pc, #356]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a58      	ldr	r2, [pc, #352]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f58:	4b53      	ldr	r3, [pc, #332]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a52      	ldr	r2, [pc, #328]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f64:	4b50      	ldr	r3, [pc, #320]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	494d      	ldr	r1, [pc, #308]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d044      	beq.n	800700c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	4b47      	ldr	r3, [pc, #284]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d119      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d003      	beq.n	8006faa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d107      	bne.n	8006fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006faa:	4b3f      	ldr	r3, [pc, #252]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e06f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fba:	4b3b      	ldr	r3, [pc, #236]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e067      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fca:	4b37      	ldr	r3, [pc, #220]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 0203 	bic.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4934      	ldr	r1, [pc, #208]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fdc:	f7fa fe8e 	bl	8001cfc <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe2:	e00a      	b.n	8006ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe4:	f7fa fe8a 	bl	8001cfc <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e04f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 020c 	and.w	r2, r3, #12
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	429a      	cmp	r2, r3
 800700a:	d1eb      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800700c:	4b25      	ldr	r3, [pc, #148]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d20c      	bcs.n	8007034 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701a:	4b22      	ldr	r3, [pc, #136]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b20      	ldr	r3, [pc, #128]	@ (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e032      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007040:	4b19      	ldr	r3, [pc, #100]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4916      	ldr	r1, [pc, #88]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800705e:	4b12      	ldr	r3, [pc, #72]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	490e      	ldr	r1, [pc, #56]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	4313      	orrs	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007072:	f000 f821 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007076:	4602      	mov	r2, r0
 8007078:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	490a      	ldr	r1, [pc, #40]	@ (80070ac <HAL_RCC_ClockConfig+0x1c0>)
 8007084:	5ccb      	ldrb	r3, [r1, r3]
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	4a09      	ldr	r2, [pc, #36]	@ (80070b0 <HAL_RCC_ClockConfig+0x1c4>)
 800708c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800708e:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fa fdee 	bl	8001c74 <HAL_InitTick>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40023c00 	.word	0x40023c00
 80070a8:	40023800 	.word	0x40023800
 80070ac:	0800c388 	.word	0x0800c388
 80070b0:	20000000 	.word	0x20000000
 80070b4:	20000004 	.word	0x20000004

080070b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070bc:	b094      	sub	sp, #80	@ 0x50
 80070be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80070c4:	2300      	movs	r3, #0
 80070c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070d0:	4b79      	ldr	r3, [pc, #484]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d00d      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x40>
 80070dc:	2b08      	cmp	r3, #8
 80070de:	f200 80e1 	bhi.w	80072a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x34>
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d003      	beq.n	80070f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ea:	e0db      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070ec:	4b73      	ldr	r3, [pc, #460]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x204>)
 80070ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070f0:	e0db      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070f2:	4b72      	ldr	r3, [pc, #456]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x204>)
 80070f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070f6:	e0d8      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070f8:	4b6f      	ldr	r3, [pc, #444]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007100:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007102:	4b6d      	ldr	r3, [pc, #436]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800710e:	4b6a      	ldr	r3, [pc, #424]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	099b      	lsrs	r3, r3, #6
 8007114:	2200      	movs	r2, #0
 8007116:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007118:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007120:	633b      	str	r3, [r7, #48]	@ 0x30
 8007122:	2300      	movs	r3, #0
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	f04f 0000 	mov.w	r0, #0
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	0159      	lsls	r1, r3, #5
 8007138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800713c:	0150      	lsls	r0, r2, #5
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4621      	mov	r1, r4
 8007144:	1a51      	subs	r1, r2, r1
 8007146:	6139      	str	r1, [r7, #16]
 8007148:	4629      	mov	r1, r5
 800714a:	eb63 0301 	sbc.w	r3, r3, r1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800715c:	4659      	mov	r1, fp
 800715e:	018b      	lsls	r3, r1, #6
 8007160:	4651      	mov	r1, sl
 8007162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007166:	4651      	mov	r1, sl
 8007168:	018a      	lsls	r2, r1, #6
 800716a:	4651      	mov	r1, sl
 800716c:	ebb2 0801 	subs.w	r8, r2, r1
 8007170:	4659      	mov	r1, fp
 8007172:	eb63 0901 	sbc.w	r9, r3, r1
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800718a:	4690      	mov	r8, r2
 800718c:	4699      	mov	r9, r3
 800718e:	4623      	mov	r3, r4
 8007190:	eb18 0303 	adds.w	r3, r8, r3
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	462b      	mov	r3, r5
 8007198:	eb49 0303 	adc.w	r3, r9, r3
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071aa:	4629      	mov	r1, r5
 80071ac:	028b      	lsls	r3, r1, #10
 80071ae:	4621      	mov	r1, r4
 80071b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071b4:	4621      	mov	r1, r4
 80071b6:	028a      	lsls	r2, r1, #10
 80071b8:	4610      	mov	r0, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071be:	2200      	movs	r2, #0
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071c8:	f7f9 fb34 	bl	8000834 <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4613      	mov	r3, r2
 80071d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071d4:	e058      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d6:	4b38      	ldr	r3, [pc, #224]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	099b      	lsrs	r3, r3, #6
 80071dc:	2200      	movs	r2, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	4611      	mov	r1, r2
 80071e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	2300      	movs	r3, #0
 80071ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f04f 0100 	mov.w	r1, #0
 80071fc:	0159      	lsls	r1, r3, #5
 80071fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007202:	0150      	lsls	r0, r2, #5
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4641      	mov	r1, r8
 800720a:	ebb2 0a01 	subs.w	sl, r2, r1
 800720e:	4649      	mov	r1, r9
 8007210:	eb63 0b01 	sbc.w	fp, r3, r1
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007228:	ebb2 040a 	subs.w	r4, r2, sl
 800722c:	eb63 050b 	sbc.w	r5, r3, fp
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	00eb      	lsls	r3, r5, #3
 800723a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723e:	00e2      	lsls	r2, r4, #3
 8007240:	4614      	mov	r4, r2
 8007242:	461d      	mov	r5, r3
 8007244:	4643      	mov	r3, r8
 8007246:	18e3      	adds	r3, r4, r3
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	464b      	mov	r3, r9
 800724c:	eb45 0303 	adc.w	r3, r5, r3
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800725e:	4629      	mov	r1, r5
 8007260:	028b      	lsls	r3, r1, #10
 8007262:	4621      	mov	r1, r4
 8007264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007268:	4621      	mov	r1, r4
 800726a:	028a      	lsls	r2, r1, #10
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007272:	2200      	movs	r2, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	61fa      	str	r2, [r7, #28]
 8007278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800727c:	f7f9 fada 	bl	8000834 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4613      	mov	r3, r2
 8007286:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007288:	4b0b      	ldr	r3, [pc, #44]	@ (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	3301      	adds	r3, #1
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007298:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800729a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072a2:	e002      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a4:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x204>)
 80072a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3750      	adds	r7, #80	@ 0x50
 80072b0:	46bd      	mov	sp, r7
 80072b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800
 80072bc:	00f42400 	.word	0x00f42400

080072c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c4:	4b03      	ldr	r3, [pc, #12]	@ (80072d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80072c6:	681b      	ldr	r3, [r3, #0]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000000 	.word	0x20000000

080072d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072dc:	f7ff fff0 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 80072e0:	4602      	mov	r2, r0
 80072e2:	4b05      	ldr	r3, [pc, #20]	@ (80072f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	4903      	ldr	r1, [pc, #12]	@ (80072fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ee:	5ccb      	ldrb	r3, [r1, r3]
 80072f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40023800 	.word	0x40023800
 80072fc:	0800c398 	.word	0x0800c398

08007300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007304:	f7ff ffdc 	bl	80072c0 <HAL_RCC_GetHCLKFreq>
 8007308:	4602      	mov	r2, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0b5b      	lsrs	r3, r3, #13
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4903      	ldr	r1, [pc, #12]	@ (8007324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007316:	5ccb      	ldrb	r3, [r1, r3]
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	0800c398 	.word	0x0800c398

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800734c:	2b00      	cmp	r3, #0
 800734e:	d035      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007350:	4b62      	ldr	r3, [pc, #392]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007356:	f7fa fcd1 	bl	8001cfc <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800735c:	e008      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800735e:	f7fa fccd 	bl	8001cfc <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e0b0      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007370:	4b5b      	ldr	r3, [pc, #364]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f0      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	019a      	lsls	r2, r3, #6
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	071b      	lsls	r3, r3, #28
 8007388:	4955      	ldr	r1, [pc, #340]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800738a:	4313      	orrs	r3, r2
 800738c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007390:	4b52      	ldr	r3, [pc, #328]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007392:	2201      	movs	r2, #1
 8007394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007396:	f7fa fcb1 	bl	8001cfc <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800739e:	f7fa fcad 	bl	8001cfc <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e090      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073b0:	4b4b      	ldr	r3, [pc, #300]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0f0      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8083 	beq.w	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073ca:	2300      	movs	r3, #0
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	4b44      	ldr	r3, [pc, #272]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	4a43      	ldr	r2, [pc, #268]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80073da:	4b41      	ldr	r3, [pc, #260]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80073e6:	4b3f      	ldr	r3, [pc, #252]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a3e      	ldr	r2, [pc, #248]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073f2:	f7fa fc83 	bl	8001cfc <HAL_GetTick>
 80073f6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80073f8:	e008      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fa:	f7fa fc7f 	bl	8001cfc <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e062      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800740c:	4b35      	ldr	r3, [pc, #212]	@ (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0f0      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007418:	4b31      	ldr	r3, [pc, #196]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007420:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d02f      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	429a      	cmp	r2, r3
 8007434:	d028      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007436:	4b2a      	ldr	r3, [pc, #168]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800743e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007440:	4b29      	ldr	r3, [pc, #164]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007446:	4b28      	ldr	r3, [pc, #160]	@ (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800744c:	4a24      	ldr	r2, [pc, #144]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007452:	4b23      	ldr	r3, [pc, #140]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d114      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800745e:	f7fa fc4d 	bl	8001cfc <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007464:	e00a      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007466:	f7fa fc49 	bl	8001cfc <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007474:	4293      	cmp	r3, r2
 8007476:	d901      	bls.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007478:	2303      	movs	r3, #3
 800747a:	e02a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747c:	4b18      	ldr	r3, [pc, #96]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0ee      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007494:	d10d      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007496:	4b12      	ldr	r3, [pc, #72]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80074a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074aa:	490d      	ldr	r1, [pc, #52]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	608b      	str	r3, [r1, #8]
 80074b0:	e005      	b.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074b2:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	4a0a      	ldr	r2, [pc, #40]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80074bc:	6093      	str	r3, [r2, #8]
 80074be:	4b08      	ldr	r3, [pc, #32]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ca:	4905      	ldr	r1, [pc, #20]	@ (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	42470068 	.word	0x42470068
 80074e0:	40023800 	.word	0x40023800
 80074e4:	40007000 	.word	0x40007000
 80074e8:	42470e40 	.word	0x42470e40

080074ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d13f      	bne.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800750a:	4b24      	ldr	r3, [pc, #144]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007512:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d006      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007520:	d12f      	bne.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007522:	4b1f      	ldr	r3, [pc, #124]	@ (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007524:	617b      	str	r3, [r7, #20]
          break;
 8007526:	e02f      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007528:	4b1c      	ldr	r3, [pc, #112]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007534:	d108      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007536:	4b19      	ldr	r3, [pc, #100]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800753e:	4a19      	ldr	r2, [pc, #100]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007540:	fbb2 f3f3 	udiv	r3, r2, r3
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	e007      	b.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007548:	4b14      	ldr	r3, [pc, #80]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007550:	4a14      	ldr	r2, [pc, #80]	@ (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007552:	fbb2 f3f3 	udiv	r3, r2, r3
 8007556:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007558:	4b10      	ldr	r3, [pc, #64]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800755a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755e:	099b      	lsrs	r3, r3, #6
 8007560:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800756c:	4b0b      	ldr	r3, [pc, #44]	@ (800759c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007572:	0f1b      	lsrs	r3, r3, #28
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	fbb2 f3f3 	udiv	r3, r2, r3
 800757e:	617b      	str	r3, [r7, #20]
          break;
 8007580:	e002      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
          break;
 8007586:	bf00      	nop
        }
      }
      break;
 8007588:	e000      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800758a:	bf00      	nop
    }
  }
  return frequency;
 800758c:	697b      	ldr	r3, [r7, #20]
}
 800758e:	4618      	mov	r0, r3
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800
 80075a0:	00bb8000 	.word	0x00bb8000
 80075a4:	00f42400 	.word	0x00f42400

080075a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e07b      	b.n	80076b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ca:	d009      	beq.n	80075e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	61da      	str	r2, [r3, #28]
 80075d2:	e005      	b.n	80075e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fa f850 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007632:	431a      	orrs	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	431a      	orrs	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007650:	431a      	orrs	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007664:	ea42 0103 	orr.w	r1, r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	f003 0104 	and.w	r1, r3, #4
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007686:	f003 0210 	and.w	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80076a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e042      	b.n	8007752 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d106      	bne.n	80076e6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fa f9d9 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2224      	movs	r2, #36	@ 0x24
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80076fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f82c 	bl	800775c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007712:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695a      	ldr	r2, [r3, #20]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007722:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007732:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2220      	movs	r2, #32
 8007746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800775c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007760:	b0c0      	sub	sp, #256	@ 0x100
 8007762:	af00      	add	r7, sp, #0
 8007764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	68d9      	ldr	r1, [r3, #12]
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	ea40 0301 	orr.w	r3, r0, r1
 8007784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	431a      	orrs	r2, r3
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	431a      	orrs	r2, r3
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077b4:	f021 010c 	bic.w	r1, r1, #12
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077c2:	430b      	orrs	r3, r1
 80077c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	6999      	ldr	r1, [r3, #24]
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	ea40 0301 	orr.w	r3, r0, r1
 80077e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007a28 <UART_SetConfig+0x2cc>)
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d005      	beq.n	80077fc <UART_SetConfig+0xa0>
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b8d      	ldr	r3, [pc, #564]	@ (8007a2c <UART_SetConfig+0x2d0>)
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d104      	bne.n	8007806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7ff fd80 	bl	8007300 <HAL_RCC_GetPCLK2Freq>
 8007800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007804:	e003      	b.n	800780e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007806:	f7ff fd67 	bl	80072d8 <HAL_RCC_GetPCLK1Freq>
 800780a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007818:	f040 810c 	bne.w	8007a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800781c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007820:	2200      	movs	r2, #0
 8007822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800782a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	1891      	adds	r1, r2, r2
 8007834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007836:	415b      	adcs	r3, r3
 8007838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800783a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800783e:	4621      	mov	r1, r4
 8007840:	eb12 0801 	adds.w	r8, r2, r1
 8007844:	4629      	mov	r1, r5
 8007846:	eb43 0901 	adc.w	r9, r3, r1
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800785a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800785e:	4690      	mov	r8, r2
 8007860:	4699      	mov	r9, r3
 8007862:	4623      	mov	r3, r4
 8007864:	eb18 0303 	adds.w	r3, r8, r3
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800786c:	462b      	mov	r3, r5
 800786e:	eb49 0303 	adc.w	r3, r9, r3
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800788a:	460b      	mov	r3, r1
 800788c:	18db      	adds	r3, r3, r3
 800788e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007890:	4613      	mov	r3, r2
 8007892:	eb42 0303 	adc.w	r3, r2, r3
 8007896:	657b      	str	r3, [r7, #84]	@ 0x54
 8007898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800789c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078a0:	f7f8 ffc8 	bl	8000834 <__aeabi_uldivmod>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4b61      	ldr	r3, [pc, #388]	@ (8007a30 <UART_SetConfig+0x2d4>)
 80078aa:	fba3 2302 	umull	r2, r3, r3, r2
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	011c      	lsls	r4, r3, #4
 80078b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078c4:	4642      	mov	r2, r8
 80078c6:	464b      	mov	r3, r9
 80078c8:	1891      	adds	r1, r2, r2
 80078ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078cc:	415b      	adcs	r3, r3
 80078ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078d4:	4641      	mov	r1, r8
 80078d6:	eb12 0a01 	adds.w	sl, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb43 0b01 	adc.w	fp, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f4:	4692      	mov	sl, r2
 80078f6:	469b      	mov	fp, r3
 80078f8:	4643      	mov	r3, r8
 80078fa:	eb1a 0303 	adds.w	r3, sl, r3
 80078fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007902:	464b      	mov	r3, r9
 8007904:	eb4b 0303 	adc.w	r3, fp, r3
 8007908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800791c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007920:	460b      	mov	r3, r1
 8007922:	18db      	adds	r3, r3, r3
 8007924:	643b      	str	r3, [r7, #64]	@ 0x40
 8007926:	4613      	mov	r3, r2
 8007928:	eb42 0303 	adc.w	r3, r2, r3
 800792c:	647b      	str	r3, [r7, #68]	@ 0x44
 800792e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007936:	f7f8 ff7d 	bl	8000834 <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4611      	mov	r1, r2
 8007940:	4b3b      	ldr	r3, [pc, #236]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007942:	fba3 2301 	umull	r2, r3, r3, r1
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2264      	movs	r2, #100	@ 0x64
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	1acb      	subs	r3, r1, r3
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007956:	4b36      	ldr	r3, [pc, #216]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007958:	fba3 2302 	umull	r2, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007964:	441c      	add	r4, r3
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007980:	415b      	adcs	r3, r3
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007988:	4641      	mov	r1, r8
 800798a:	1851      	adds	r1, r2, r1
 800798c:	6339      	str	r1, [r7, #48]	@ 0x30
 800798e:	4649      	mov	r1, r9
 8007990:	414b      	adcs	r3, r1
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079a0:	4659      	mov	r1, fp
 80079a2:	00cb      	lsls	r3, r1, #3
 80079a4:	4651      	mov	r1, sl
 80079a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079aa:	4651      	mov	r1, sl
 80079ac:	00ca      	lsls	r2, r1, #3
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	4642      	mov	r2, r8
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079bc:	464b      	mov	r3, r9
 80079be:	460a      	mov	r2, r1
 80079c0:	eb42 0303 	adc.w	r3, r2, r3
 80079c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079dc:	460b      	mov	r3, r1
 80079de:	18db      	adds	r3, r3, r3
 80079e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079e2:	4613      	mov	r3, r2
 80079e4:	eb42 0303 	adc.w	r3, r2, r3
 80079e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079f2:	f7f8 ff1f 	bl	8000834 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <UART_SetConfig+0x2d4>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	@ 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	3332      	adds	r3, #50	@ 0x32
 8007a0e:	4a08      	ldr	r2, [pc, #32]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 0207 	and.w	r2, r3, #7
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4422      	add	r2, r4
 8007a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a24:	e106      	b.n	8007c34 <UART_SetConfig+0x4d8>
 8007a26:	bf00      	nop
 8007a28:	40011000 	.word	0x40011000
 8007a2c:	40011400 	.word	0x40011400
 8007a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	1891      	adds	r1, r2, r2
 8007a4c:	6239      	str	r1, [r7, #32]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a56:	4641      	mov	r1, r8
 8007a58:	1854      	adds	r4, r2, r1
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	eb43 0501 	adc.w	r5, r3, r1
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	00eb      	lsls	r3, r5, #3
 8007a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a6e:	00e2      	lsls	r2, r4, #3
 8007a70:	4614      	mov	r4, r2
 8007a72:	461d      	mov	r5, r3
 8007a74:	4643      	mov	r3, r8
 8007a76:	18e3      	adds	r3, r4, r3
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	eb45 0303 	adc.w	r3, r5, r3
 8007a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	008b      	lsls	r3, r1, #2
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aac:	4621      	mov	r1, r4
 8007aae:	008a      	lsls	r2, r1, #2
 8007ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ab4:	f7f8 febe 	bl	8000834 <__aeabi_uldivmod>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4b60      	ldr	r3, [pc, #384]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007abe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	011c      	lsls	r4, r3, #4
 8007ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	1891      	adds	r1, r2, r2
 8007ade:	61b9      	str	r1, [r7, #24]
 8007ae0:	415b      	adcs	r3, r3
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae8:	4641      	mov	r1, r8
 8007aea:	1851      	adds	r1, r2, r1
 8007aec:	6139      	str	r1, [r7, #16]
 8007aee:	4649      	mov	r1, r9
 8007af0:	414b      	adcs	r3, r1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b00:	4659      	mov	r1, fp
 8007b02:	00cb      	lsls	r3, r1, #3
 8007b04:	4651      	mov	r1, sl
 8007b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	00ca      	lsls	r2, r1, #3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	4642      	mov	r2, r8
 8007b16:	189b      	adds	r3, r3, r2
 8007b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	460a      	mov	r2, r1
 8007b20:	eb42 0303 	adc.w	r3, r2, r3
 8007b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b40:	4649      	mov	r1, r9
 8007b42:	008b      	lsls	r3, r1, #2
 8007b44:	4641      	mov	r1, r8
 8007b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	008a      	lsls	r2, r1, #2
 8007b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b52:	f7f8 fe6f 	bl	8000834 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4b38      	ldr	r3, [pc, #224]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2264      	movs	r2, #100	@ 0x64
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	1acb      	subs	r3, r1, r3
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	3332      	adds	r3, #50	@ 0x32
 8007b70:	4a33      	ldr	r2, [pc, #204]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b7c:	441c      	add	r4, r3
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	1891      	adds	r1, r2, r2
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	415b      	adcs	r3, r3
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	1851      	adds	r1, r2, r1
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	414b      	adcs	r3, r1
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	00cb      	lsls	r3, r1, #3
 8007bb8:	4651      	mov	r1, sl
 8007bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	00ca      	lsls	r2, r1, #3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4642      	mov	r2, r8
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bce:	464b      	mov	r3, r9
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	eb42 0303 	adc.w	r3, r2, r3
 8007bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	008b      	lsls	r3, r1, #2
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	008a      	lsls	r2, r1, #2
 8007bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c02:	f7f8 fe17 	bl	8000834 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	@ 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	3332      	adds	r3, #50	@ 0x32
 8007c1e:	4a08      	ldr	r2, [pc, #32]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	f003 020f 	and.w	r2, r3, #15
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4422      	add	r2, r4
 8007c32:	609a      	str	r2, [r3, #8]
}
 8007c34:	bf00      	nop
 8007c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c40:	51eb851f 	.word	0x51eb851f

08007c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c44:	b084      	sub	sp, #16
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	f107 001c 	add.w	r0, r7, #28
 8007c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d123      	bne.n	8007ca6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9dc 	bl	8008058 <USB_CoreReset>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e01b      	b.n	8007cde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9d0 	bl	8008058 <USB_CoreReset>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007cbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cd0:	e005      	b.n	8007cde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007cde:	7fbb      	ldrb	r3, [r7, #30]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d10b      	bne.n	8007cfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f043 0206 	orr.w	r2, r3, #6
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f043 0220 	orr.w	r2, r3, #32
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d08:	b004      	add	sp, #16
 8007d0a:	4770      	bx	lr

08007d0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f043 0201 	orr.w	r2, r3, #1
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f023 0201 	bic.w	r2, r3, #1
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d115      	bne.n	8007d9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d7e:	200a      	movs	r0, #10
 8007d80:	f7f9 ffc8 	bl	8001d14 <HAL_Delay>
      ms += 10U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	330a      	adds	r3, #10
 8007d88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f956 	bl	800803c <USB_GetMode>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d01e      	beq.n	8007dd4 <USB_SetCurrentMode+0x84>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d9a:	d9f0      	bls.n	8007d7e <USB_SetCurrentMode+0x2e>
 8007d9c:	e01a      	b.n	8007dd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d9e:	78fb      	ldrb	r3, [r7, #3]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d115      	bne.n	8007dd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007db0:	200a      	movs	r0, #10
 8007db2:	f7f9 ffaf 	bl	8001d14 <HAL_Delay>
      ms += 10U;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	330a      	adds	r3, #10
 8007dba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f93d 	bl	800803c <USB_GetMode>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d005      	beq.n	8007dd4 <USB_SetCurrentMode+0x84>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2bc7      	cmp	r3, #199	@ 0xc7
 8007dcc:	d9f0      	bls.n	8007db0 <USB_SetCurrentMode+0x60>
 8007dce:	e001      	b.n	8007dd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e005      	b.n	8007de0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8007dd8:	d101      	bne.n	8007dde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e02:	d901      	bls.n	8007e08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e01b      	b.n	8007e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	daf2      	bge.n	8007df6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	019b      	lsls	r3, r3, #6
 8007e18:	f043 0220 	orr.w	r2, r3, #32
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	3301      	adds	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e2c:	d901      	bls.n	8007e32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e006      	b.n	8007e40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b20      	cmp	r3, #32
 8007e3c:	d0f0      	beq.n	8007e20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e64:	d901      	bls.n	8007e6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e018      	b.n	8007e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	daf2      	bge.n	8007e58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2210      	movs	r2, #16
 8007e7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e88:	d901      	bls.n	8007e8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e006      	b.n	8007e9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0310 	and.w	r3, r3, #16
 8007e96:	2b10      	cmp	r3, #16
 8007e98:	d0f0      	beq.n	8007e7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	@ 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	71fb      	strb	r3, [r7, #7]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d123      	bne.n	8007f16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ece:	88bb      	ldrh	r3, [r7, #4]
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e018      	b.n	8007f0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	031a      	lsls	r2, r3, #12
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee8:	461a      	mov	r2, r3
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3301      	adds	r3, #1
 8007f00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	3301      	adds	r3, #1
 8007f06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d3e2      	bcc.n	8007edc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	@ 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b08b      	sub	sp, #44	@ 0x2c
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	e014      	b.n	8007f7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	3301      	adds	r3, #1
 8007f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	3301      	adds	r3, #1
 8007f66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	3301      	adds	r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	3301      	adds	r3, #1
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d3e6      	bcc.n	8007f50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f82:	8bfb      	ldrh	r3, [r7, #30]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01e      	beq.n	8007fc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f92:	461a      	mov	r2, r3
 8007f94:	f107 0310 	add.w	r3, r7, #16
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	701a      	strb	r2, [r3, #0]
      i++;
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fba:	8bfb      	ldrh	r3, [r7, #30]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fc0:	8bfb      	ldrh	r3, [r7, #30]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ea      	bne.n	8007f9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	372c      	adds	r7, #44	@ 0x2c
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fec:	68fb      	ldr	r3, [r7, #12]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4413      	add	r3, r2
 8008022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800802e:	68bb      	ldr	r3, [r7, #8]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f003 0301 	and.w	r3, r3, #1
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3301      	adds	r3, #1
 8008068:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008070:	d901      	bls.n	8008076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e01b      	b.n	80080ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	daf2      	bge.n	8008064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	f043 0201 	orr.w	r2, r3, #1
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800809a:	d901      	bls.n	80080a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e006      	b.n	80080ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d0f0      	beq.n	800808e <USB_CoreReset+0x36>

  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080bc:	b084      	sub	sp, #16
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80080ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080dc:	461a      	mov	r2, r3
 80080de:	2300      	movs	r3, #0
 80080e0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	d119      	bne.n	8008146 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008116:	2b01      	cmp	r3, #1
 8008118:	d10a      	bne.n	8008130 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008128:	f043 0304 	orr.w	r3, r3, #4
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	e014      	b.n	800815a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800813e:	f023 0304 	bic.w	r3, r3, #4
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	e009      	b.n	800815a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008154:	f023 0304 	bic.w	r3, r3, #4
 8008158:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800815a:	2110      	movs	r1, #16
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff fe43 	bl	8007de8 <USB_FlushTxFifo>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff fe6d 	bl	8007e4c <USB_FlushRxFifo>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	e015      	b.n	80081ae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	461a      	mov	r2, r3
 8008190:	f04f 33ff 	mov.w	r3, #4294967295
 8008194:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a2:	461a      	mov	r2, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	3301      	adds	r3, #1
 80081ac:	613b      	str	r3, [r7, #16]
 80081ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80081b2:	461a      	mov	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d3e3      	bcc.n	8008182 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a18      	ldr	r2, [pc, #96]	@ (800822c <USB_HostInit+0x170>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10b      	bne.n	80081e8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081d6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a15      	ldr	r2, [pc, #84]	@ (8008230 <USB_HostInit+0x174>)
 80081dc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a14      	ldr	r2, [pc, #80]	@ (8008234 <USB_HostInit+0x178>)
 80081e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80081e6:	e009      	b.n	80081fc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2280      	movs	r2, #128	@ 0x80
 80081ec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a11      	ldr	r2, [pc, #68]	@ (8008238 <USB_HostInit+0x17c>)
 80081f2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a11      	ldr	r2, [pc, #68]	@ (800823c <USB_HostInit+0x180>)
 80081f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80081fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	699b      	ldr	r3, [r3, #24]
 8008208:	f043 0210 	orr.w	r2, r3, #16
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	4b0a      	ldr	r3, [pc, #40]	@ (8008240 <USB_HostInit+0x184>)
 8008216:	4313      	orrs	r3, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800821c:	7dfb      	ldrb	r3, [r7, #23]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008228:	b004      	add	sp, #16
 800822a:	4770      	bx	lr
 800822c:	40040000 	.word	0x40040000
 8008230:	01000200 	.word	0x01000200
 8008234:	00e00300 	.word	0x00e00300
 8008238:	00600080 	.word	0x00600080
 800823c:	004000e0 	.word	0x004000e0
 8008240:	a3200008 	.word	0xa3200008

08008244 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800827c:	4313      	orrs	r3, r2
 800827e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d107      	bne.n	8008296 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800828c:	461a      	mov	r2, r3
 800828e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008292:	6053      	str	r3, [r2, #4]
 8008294:	e00c      	b.n	80082b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008296:	78fb      	ldrb	r3, [r7, #3]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d107      	bne.n	80082ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082a2:	461a      	mov	r2, r3
 80082a4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80082a8:	6053      	str	r3, [r2, #4]
 80082aa:	e001      	b.n	80082b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80082de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80082ee:	2064      	movs	r0, #100	@ 0x64
 80082f0:	f7f9 fd10 	bl	8001d14 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80082fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008300:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008302:	200a      	movs	r0, #10
 8008304:	f7f9 fd06 	bl	8001d14 <HAL_Delay>

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008336:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <USB_DriveVbus+0x44>
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d106      	bne.n	8008356 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008354:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800835c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008360:	d109      	bne.n	8008376 <USB_DriveVbus+0x64>
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008374:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	0c5b      	lsrs	r3, r3, #17
 80083a2:	f003 0303 	and.w	r3, r3, #3
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	b29b      	uxth	r3, r3
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	4603      	mov	r3, r0
 80083e4:	70fb      	strb	r3, [r7, #3]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70bb      	strb	r3, [r7, #2]
 80083ea:	4613      	mov	r3, r2
 80083ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008402:	461a      	mov	r2, r3
 8008404:	f04f 33ff 	mov.w	r3, #4294967295
 8008408:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800840a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800840e:	2b03      	cmp	r3, #3
 8008410:	d87c      	bhi.n	800850c <USB_HC_Init+0x138>
 8008412:	a201      	add	r2, pc, #4	@ (adr r2, 8008418 <USB_HC_Init+0x44>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008429 	.word	0x08008429
 800841c:	080084cf 	.word	0x080084cf
 8008420:	08008429 	.word	0x08008429
 8008424:	08008491 	.word	0x08008491
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008434:	461a      	mov	r2, r3
 8008436:	f240 439d 	movw	r3, #1181	@ 0x49d
 800843a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800843c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008440:	2b00      	cmp	r3, #0
 8008442:	da10      	bge.n	8008466 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4413      	add	r3, r2
 800844c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	0151      	lsls	r1, r2, #5
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	440a      	add	r2, r1
 800845a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800845e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008462:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008464:	e055      	b.n	8008512 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a6f      	ldr	r2, [pc, #444]	@ (8008628 <USB_HC_Init+0x254>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d151      	bne.n	8008512 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	015a      	lsls	r2, r3, #5
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	78fa      	ldrb	r2, [r7, #3]
 800847e:	0151      	lsls	r1, r2, #5
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	440a      	add	r2, r1
 8008484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008488:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800848c:	60d3      	str	r3, [r2, #12]
      break;
 800848e:	e040      	b.n	8008512 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	4413      	add	r3, r2
 8008498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800849c:	461a      	mov	r2, r3
 800849e:	f240 639d 	movw	r3, #1693	@ 0x69d
 80084a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	da34      	bge.n	8008516 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	78fa      	ldrb	r2, [r7, #3]
 80084bc:	0151      	lsls	r1, r2, #5
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	440a      	add	r2, r1
 80084c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80084cc:	e023      	b.n	8008516 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084da:	461a      	mov	r2, r3
 80084dc:	f240 2325 	movw	r3, #549	@ 0x225
 80084e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80084e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	da17      	bge.n	800851a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80084ea:	78fb      	ldrb	r3, [r7, #3]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	78fa      	ldrb	r2, [r7, #3]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008504:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008508:	60d3      	str	r3, [r2, #12]
      }
      break;
 800850a:	e006      	b.n	800851a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	77fb      	strb	r3, [r7, #31]
      break;
 8008510:	e004      	b.n	800851c <USB_HC_Init+0x148>
      break;
 8008512:	bf00      	nop
 8008514:	e002      	b.n	800851c <USB_HC_Init+0x148>
      break;
 8008516:	bf00      	nop
 8008518:	e000      	b.n	800851c <USB_HC_Init+0x148>
      break;
 800851a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800851c:	78fb      	ldrb	r3, [r7, #3]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008528:	461a      	mov	r2, r3
 800852a:	2300      	movs	r3, #0
 800852c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800852e:	78fb      	ldrb	r3, [r7, #3]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	4413      	add	r3, r2
 8008536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	440a      	add	r2, r1
 8008544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008548:	f043 0302 	orr.w	r3, r3, #2
 800854c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008554:	699a      	ldr	r2, [r3, #24]
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	2101      	movs	r1, #1
 800855e:	fa01 f303 	lsl.w	r3, r1, r3
 8008562:	6939      	ldr	r1, [r7, #16]
 8008564:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008568:	4313      	orrs	r3, r2
 800856a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008578:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da03      	bge.n	8008588 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008584:	61bb      	str	r3, [r7, #24]
 8008586:	e001      	b.n	800858c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fef9 	bl	8008384 <USB_GetHostSpeed>
 8008592:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008594:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008598:	2b02      	cmp	r3, #2
 800859a:	d106      	bne.n	80085aa <USB_HC_Init+0x1d6>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d003      	beq.n	80085aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80085a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	e001      	b.n	80085ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ae:	787b      	ldrb	r3, [r7, #1]
 80085b0:	059b      	lsls	r3, r3, #22
 80085b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085b6:	78bb      	ldrb	r3, [r7, #2]
 80085b8:	02db      	lsls	r3, r3, #11
 80085ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085c4:	049b      	lsls	r3, r3, #18
 80085c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80085ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80085cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80085ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80085d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085dc:	78fa      	ldrb	r2, [r7, #3]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80085e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80085ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80085ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d003      	beq.n	80085fe <USB_HC_Init+0x22a>
 80085f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d10f      	bne.n	800861e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	0151      	lsls	r1, r2, #5
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	440a      	add	r2, r1
 8008614:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008618:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800861c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800861e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40040000 	.word	0x40040000

0800862c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	@ 0x30
 8008630:	af02      	add	r7, sp, #8
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	4613      	mov	r3, r2
 8008638:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008648:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4a5d      	ldr	r2, [pc, #372]	@ (80087c4 <USB_HC_StartXfer+0x198>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d12f      	bne.n	80086b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008652:	79fb      	ldrb	r3, [r7, #7]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d11c      	bne.n	8008692 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	7c9b      	ldrb	r3, [r3, #18]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <USB_HC_StartXfer+0x3c>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	7c9b      	ldrb	r3, [r3, #18]
 8008664:	2b02      	cmp	r3, #2
 8008666:	d124      	bne.n	80086b2 <USB_HC_StartXfer+0x86>
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	799b      	ldrb	r3, [r3, #6]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d120      	bne.n	80086b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	015a      	lsls	r2, r3, #5
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	4413      	add	r3, r2
 8008678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	69fa      	ldr	r2, [r7, #28]
 8008680:	0151      	lsls	r1, r2, #5
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	440a      	add	r2, r1
 8008686:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800868a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800868e:	60d3      	str	r3, [r2, #12]
 8008690:	e00f      	b.n	80086b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	791b      	ldrb	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10b      	bne.n	80086b2 <USB_HC_StartXfer+0x86>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	795b      	ldrb	r3, [r3, #5]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d107      	bne.n	80086b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	785b      	ldrb	r3, [r3, #1]
 80086a6:	4619      	mov	r1, r3
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 fb6b 	bl	8008d84 <USB_DoPing>
        return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e232      	b.n	8008b18 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	799b      	ldrb	r3, [r3, #6]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d158      	bne.n	800876c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80086ba:	2301      	movs	r3, #1
 80086bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	78db      	ldrb	r3, [r3, #3]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	8a92      	ldrh	r2, [r2, #20]
 80086cc:	fb03 f202 	mul.w	r2, r3, r2
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	61da      	str	r2, [r3, #28]
 80086d4:	e07c      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	7c9b      	ldrb	r3, [r3, #18]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d130      	bne.n	8008740 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80086e4:	d918      	bls.n	8008718 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	8a9b      	ldrh	r3, [r3, #20]
 80086ea:	461a      	mov	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	69da      	ldr	r2, [r3, #28]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d003      	beq.n	8008708 <USB_HC_StartXfer+0xdc>
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d103      	bne.n	8008710 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2202      	movs	r2, #2
 800870c:	60da      	str	r2, [r3, #12]
 800870e:	e05f      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2201      	movs	r2, #1
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e05b      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6a1a      	ldr	r2, [r3, #32]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d007      	beq.n	8008738 <USB_HC_StartXfer+0x10c>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d003      	beq.n	8008738 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2204      	movs	r2, #4
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e04b      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2203      	movs	r2, #3
 800873c:	60da      	str	r2, [r3, #12]
 800873e:	e047      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d10d      	bne.n	8008762 <USB_HC_StartXfer+0x136>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	8a92      	ldrh	r2, [r2, #20]
 800874e:	4293      	cmp	r3, r2
 8008750:	d907      	bls.n	8008762 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008752:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	8a92      	ldrh	r2, [r2, #20]
 8008758:	fb03 f202 	mul.w	r2, r3, r2
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	61da      	str	r2, [r3, #28]
 8008760:	e036      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	6a1a      	ldr	r2, [r3, #32]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	61da      	str	r2, [r3, #28]
 800876a:	e031      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d018      	beq.n	80087a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	8a92      	ldrh	r2, [r2, #20]
 800877c:	4413      	add	r3, r2
 800877e:	3b01      	subs	r3, #1
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	8a92      	ldrh	r2, [r2, #20]
 8008784:	fbb3 f3f2 	udiv	r3, r3, r2
 8008788:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800878a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800878c:	8b7b      	ldrh	r3, [r7, #26]
 800878e:	429a      	cmp	r2, r3
 8008790:	d90b      	bls.n	80087aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008792:	8b7b      	ldrh	r3, [r7, #26]
 8008794:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	8a92      	ldrh	r2, [r2, #20]
 800879c:	fb03 f202 	mul.w	r2, r3, r2
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61da      	str	r2, [r3, #28]
 80087a4:	e001      	b.n	80087aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80087a6:	2301      	movs	r3, #1
 80087a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	78db      	ldrb	r3, [r3, #3]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	8a92      	ldrh	r2, [r2, #20]
 80087b8:	fb03 f202 	mul.w	r2, r3, r2
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	61da      	str	r2, [r3, #28]
 80087c0:	e006      	b.n	80087d0 <USB_HC_StartXfer+0x1a4>
 80087c2:	bf00      	nop
 80087c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	6a1a      	ldr	r2, [r3, #32]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	69db      	ldr	r3, [r3, #28]
 80087d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80087da:	04d9      	lsls	r1, r3, #19
 80087dc:	4ba3      	ldr	r3, [pc, #652]	@ (8008a6c <USB_HC_StartXfer+0x440>)
 80087de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	7d9b      	ldrb	r3, [r3, #22]
 80087e6:	075b      	lsls	r3, r3, #29
 80087e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087ec:	69f9      	ldr	r1, [r7, #28]
 80087ee:	0148      	lsls	r0, r1, #5
 80087f0:	6a39      	ldr	r1, [r7, #32]
 80087f2:	4401      	add	r1, r0
 80087f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80087f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80087fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	4413      	add	r3, r2
 800880e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008812:	460a      	mov	r2, r1
 8008814:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	bf0c      	ite	eq
 8008826:	2301      	moveq	r3, #1
 8008828:	2300      	movne	r3, #0
 800882a:	b2db      	uxtb	r3, r3
 800882c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	015a      	lsls	r2, r3, #5
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	4413      	add	r3, r2
 8008836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	0151      	lsls	r1, r2, #5
 8008840:	6a3a      	ldr	r2, [r7, #32]
 8008842:	440a      	add	r2, r1
 8008844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008848:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800884c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	4413      	add	r3, r2
 8008856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	7e7b      	ldrb	r3, [r7, #25]
 800885e:	075b      	lsls	r3, r3, #29
 8008860:	69f9      	ldr	r1, [r7, #28]
 8008862:	0148      	lsls	r0, r1, #5
 8008864:	6a39      	ldr	r1, [r7, #32]
 8008866:	4401      	add	r1, r0
 8008868:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800886c:	4313      	orrs	r3, r2
 800886e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	799b      	ldrb	r3, [r3, #6]
 8008874:	2b01      	cmp	r3, #1
 8008876:	f040 80c3 	bne.w	8008a00 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	7c5b      	ldrb	r3, [r3, #17]
 800887e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008884:	4313      	orrs	r3, r2
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	0151      	lsls	r1, r2, #5
 800888a:	6a3a      	ldr	r2, [r7, #32]
 800888c:	440a      	add	r2, r1
 800888e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008892:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008896:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	6a3a      	ldr	r2, [r7, #32]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80088b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	79db      	ldrb	r3, [r3, #7]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d123      	bne.n	8008908 <USB_HC_StartXfer+0x2dc>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d11f      	bne.n	8008908 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	6a3a      	ldr	r2, [r7, #32]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008906:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	7c9b      	ldrb	r3, [r3, #18]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d003      	beq.n	8008918 <USB_HC_StartXfer+0x2ec>
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	7c9b      	ldrb	r3, [r3, #18]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d117      	bne.n	8008948 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800891c:	2b01      	cmp	r3, #1
 800891e:	d113      	bne.n	8008948 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	78db      	ldrb	r3, [r3, #3]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d10f      	bne.n	8008948 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	4413      	add	r3, r2
 8008930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	440a      	add	r2, r1
 800893e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008942:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008946:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	7c9b      	ldrb	r3, [r3, #18]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d162      	bne.n	8008a16 <USB_HC_StartXfer+0x3ea>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	78db      	ldrb	r3, [r3, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d15e      	bne.n	8008a16 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	3b01      	subs	r3, #1
 800895e:	2b03      	cmp	r3, #3
 8008960:	d858      	bhi.n	8008a14 <USB_HC_StartXfer+0x3e8>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <USB_HC_StartXfer+0x33c>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008979 	.word	0x08008979
 800896c:	0800899b 	.word	0x0800899b
 8008970:	080089bd 	.word	0x080089bd
 8008974:	080089df 	.word	0x080089df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	4413      	add	r3, r2
 8008980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	6a3a      	ldr	r2, [r7, #32]
 800898c:	440a      	add	r2, r1
 800898e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008996:	6053      	str	r3, [r2, #4]
          break;
 8008998:	e03d      	b.n	8008a16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	0151      	lsls	r1, r2, #5
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	440a      	add	r2, r1
 80089b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b4:	f043 030e 	orr.w	r3, r3, #14
 80089b8:	6053      	str	r3, [r2, #4]
          break;
 80089ba:	e02c      	b.n	8008a16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	6a3a      	ldr	r2, [r7, #32]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089da:	6053      	str	r3, [r2, #4]
          break;
 80089dc:	e01b      	b.n	8008a16 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	69fa      	ldr	r2, [r7, #28]
 80089ee:	0151      	lsls	r1, r2, #5
 80089f0:	6a3a      	ldr	r2, [r7, #32]
 80089f2:	440a      	add	r2, r1
 80089f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089fc:	6053      	str	r3, [r2, #4]
          break;
 80089fe:	e00a      	b.n	8008a16 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6053      	str	r3, [r2, #4]
 8008a12:	e000      	b.n	8008a16 <USB_HC_StartXfer+0x3ea>
          break;
 8008a14:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a2c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	78db      	ldrb	r3, [r3, #3]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e003      	b.n	8008a48 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a46:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a4e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	e055      	b.n	8008b18 <USB_HC_StartXfer+0x4ec>
 8008a6c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	78db      	ldrb	r3, [r3, #3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d14e      	bne.n	8008b16 <USB_HC_StartXfer+0x4ea>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6a1b      	ldr	r3, [r3, #32]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d04a      	beq.n	8008b16 <USB_HC_StartXfer+0x4ea>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	79db      	ldrb	r3, [r3, #7]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d146      	bne.n	8008b16 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	7c9b      	ldrb	r3, [r3, #18]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d831      	bhi.n	8008af4 <USB_HC_StartXfer+0x4c8>
 8008a90:	a201      	add	r2, pc, #4	@ (adr r2, 8008a98 <USB_HC_StartXfer+0x46c>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008acd 	.word	0x08008acd
 8008aa0:	08008aa9 	.word	0x08008aa9
 8008aa4:	08008acd 	.word	0x08008acd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	3303      	adds	r3, #3
 8008aae:	089b      	lsrs	r3, r3, #2
 8008ab0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008ab2:	8afa      	ldrh	r2, [r7, #22]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d91c      	bls.n	8008af8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f043 0220 	orr.w	r2, r3, #32
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	619a      	str	r2, [r3, #24]
        }
        break;
 8008aca:	e015      	b.n	8008af8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	3303      	adds	r3, #3
 8008ad2:	089b      	lsrs	r3, r3, #2
 8008ad4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008ad6:	8afa      	ldrh	r2, [r7, #22]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d90a      	bls.n	8008afc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	619a      	str	r2, [r3, #24]
        }
        break;
 8008af2:	e003      	b.n	8008afc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008af4:	bf00      	nop
 8008af6:	e002      	b.n	8008afe <USB_HC_StartXfer+0x4d2>
        break;
 8008af8:	bf00      	nop
 8008afa:	e000      	b.n	8008afe <USB_HC_StartXfer+0x4d2>
        break;
 8008afc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6999      	ldr	r1, [r3, #24]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	785a      	ldrb	r2, [r3, #1]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	9000      	str	r0, [sp, #0]
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff f9c9 	bl	8007ea8 <USB_WritePacket>
  }

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3728      	adds	r7, #40	@ 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	b29b      	uxth	r3, r3
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b089      	sub	sp, #36	@ 0x24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	0c9b      	lsrs	r3, r3, #18
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	015a      	lsls	r2, r3, #5
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	4413      	add	r3, r2
 8008b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	0fdb      	lsrs	r3, r3, #31
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	0fdb      	lsrs	r3, r3, #31
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d10d      	bne.n	8008bc4 <USB_HC_Halt+0x82>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10a      	bne.n	8008bc4 <USB_HC_Halt+0x82>
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d002      	beq.n	8008bc0 <USB_HC_Halt+0x7e>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d101      	bne.n	8008bc4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	e0d8      	b.n	8008d76 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <USB_HC_Halt+0x8e>
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d173      	bne.n	8008cb8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d14a      	bne.n	8008c92 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d133      	bne.n	8008c70 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	69fa      	ldr	r2, [r7, #28]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69ba      	ldr	r2, [r7, #24]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c46:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c54:	d82e      	bhi.n	8008cb4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c6c:	d0ec      	beq.n	8008c48 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c6e:	e081      	b.n	8008d74 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	0151      	lsls	r1, r2, #5
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	440a      	add	r2, r1
 8008c86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c90:	e070      	b.n	8008d74 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	015a      	lsls	r2, r3, #5
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	4413      	add	r3, r2
 8008c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69ba      	ldr	r2, [r7, #24]
 8008ca2:	0151      	lsls	r1, r2, #5
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	440a      	add	r2, r1
 8008ca8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cb2:	e05f      	b.n	8008d74 <USB_HC_Halt+0x232>
            break;
 8008cb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cb6:	e05d      	b.n	8008d74 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d133      	bne.n	8008d50 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	0151      	lsls	r1, r2, #5
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d34:	d81d      	bhi.n	8008d72 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d4c:	d0ec      	beq.n	8008d28 <USB_HC_Halt+0x1e6>
 8008d4e:	e011      	b.n	8008d74 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e000      	b.n	8008d74 <USB_HC_Halt+0x232>
          break;
 8008d72:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3724      	adds	r7, #36	@ 0x24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
	...

08008d84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	04da      	lsls	r2, r3, #19
 8008da0:	4b15      	ldr	r3, [pc, #84]	@ (8008df8 <USB_DoPing+0x74>)
 8008da2:	4013      	ands	r3, r2
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008db4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008dcc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de2:	461a      	mov	r2, r3
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	371c      	adds	r7, #28
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	1ff80000 	.word	0x1ff80000

08008dfc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7fe ff8c 	bl	8007d2e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e16:	2110      	movs	r1, #16
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7fe ffe5 	bl	8007de8 <USB_FlushTxFifo>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7ff f80f 	bl	8007e4c <USB_FlushRxFifo>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	61bb      	str	r3, [r7, #24]
 8008e3c:	e01f      	b.n	8008e7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e72:	461a      	mov	r2, r3
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	2b0f      	cmp	r3, #15
 8008e82:	d9dc      	bls.n	8008e3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	61bb      	str	r3, [r7, #24]
 8008e88:	e034      	b.n	8008ef4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ea0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ea8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008eb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ed0:	d80c      	bhi.n	8008eec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ee8:	d0ec      	beq.n	8008ec4 <USB_StopHost+0xc8>
 8008eea:	e000      	b.n	8008eee <USB_StopHost+0xf2>
        break;
 8008eec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d9c7      	bls.n	8008e8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f00:	461a      	mov	r2, r3
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7fe fefb 	bl	8007d0c <USB_EnableGlobalInt>

  return ret;
 8008f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3720      	adds	r7, #32
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b089      	sub	sp, #36	@ 0x24
 8008f24:	af04      	add	r7, sp, #16
 8008f26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008f28:	2301      	movs	r3, #1
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	2102      	movs	r1, #2
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fc85 	bl	800983e <USBH_FindInterface>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2bff      	cmp	r3, #255	@ 0xff
 8008f3c:	d002      	beq.n	8008f44 <USBH_CDC_InterfaceInit+0x24>
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d901      	bls.n	8008f48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f44:	2302      	movs	r3, #2
 8008f46:	e13d      	b.n	80091c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fc5a 	bl	8009806 <USBH_SelectInterface>
 8008f52:	4603      	mov	r3, r0
 8008f54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f56:	7bbb      	ldrb	r3, [r7, #14]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e131      	b.n	80091c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008f66:	2050      	movs	r0, #80	@ 0x50
 8008f68:	f002 fb84 	bl	800b674 <malloc>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d101      	bne.n	8008f84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f80:	2302      	movs	r3, #2
 8008f82:	e11f      	b.n	80091c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f84:	2250      	movs	r2, #80	@ 0x50
 8008f86:	2100      	movs	r1, #0
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	f002 fc31 	bl	800b7f0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	211a      	movs	r1, #26
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b25b      	sxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da15      	bge.n	8008fd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	211a      	movs	r1, #26
 8008fac:	fb01 f303 	mul.w	r3, r1, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fbc:	7bfb      	ldrb	r3, [r7, #15]
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	211a      	movs	r1, #26
 8008fc2:	fb01 f303 	mul.w	r3, r1, r3
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fcc:	881a      	ldrh	r2, [r3, #0]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 ffbe 	bl	800af5a <USBH_AllocPipe>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	7819      	ldrb	r1, [r3, #0]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	7858      	ldrb	r0, [r3, #1]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	8952      	ldrh	r2, [r2, #10]
 8008ffe:	9202      	str	r2, [sp, #8]
 8009000:	2203      	movs	r2, #3
 8009002:	9201      	str	r2, [sp, #4]
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4623      	mov	r3, r4
 8009008:	4602      	mov	r2, r0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 ff76 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f002 fa85 	bl	800b528 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800901e:	2300      	movs	r3, #0
 8009020:	2200      	movs	r2, #0
 8009022:	210a      	movs	r1, #10
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc0a 	bl	800983e <USBH_FindInterface>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	2bff      	cmp	r3, #255	@ 0xff
 8009032:	d002      	beq.n	800903a <USBH_CDC_InterfaceInit+0x11a>
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d901      	bls.n	800903e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800903a:	2302      	movs	r3, #2
 800903c:	e0c2      	b.n	80091c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	211a      	movs	r1, #26
 8009044:	fb01 f303 	mul.w	r3, r1, r3
 8009048:	4413      	add	r3, r2
 800904a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	b25b      	sxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	da16      	bge.n	8009084 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	211a      	movs	r1, #26
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	4413      	add	r3, r2
 8009062:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009066:	781a      	ldrb	r2, [r3, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	211a      	movs	r1, #26
 8009072:	fb01 f303 	mul.w	r3, r1, r3
 8009076:	4413      	add	r3, r2
 8009078:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800907c:	881a      	ldrh	r2, [r3, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	835a      	strh	r2, [r3, #26]
 8009082:	e015      	b.n	80090b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	211a      	movs	r1, #26
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	4413      	add	r3, r2
 8009090:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009094:	781a      	ldrb	r2, [r3, #0]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	211a      	movs	r1, #26
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80090aa:	881a      	ldrh	r2, [r3, #0]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	211a      	movs	r1, #26
 80090b6:	fb01 f303 	mul.w	r3, r1, r3
 80090ba:	4413      	add	r3, r2
 80090bc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	b25b      	sxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	da16      	bge.n	80090f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	211a      	movs	r1, #26
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80090d8:	781a      	ldrb	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090de:	7bfb      	ldrb	r3, [r7, #15]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	211a      	movs	r1, #26
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80090ee:	881a      	ldrh	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	835a      	strh	r2, [r3, #26]
 80090f4:	e015      	b.n	8009122 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	211a      	movs	r1, #26
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	4413      	add	r3, r2
 8009102:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	211a      	movs	r1, #26
 8009112:	fb01 f303 	mul.w	r3, r1, r3
 8009116:	4413      	add	r3, r2
 8009118:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800911c:	881a      	ldrh	r2, [r3, #0]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	7b9b      	ldrb	r3, [r3, #14]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 ff16 	bl	800af5a <USBH_AllocPipe>
 800912e:	4603      	mov	r3, r0
 8009130:	461a      	mov	r2, r3
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	7bdb      	ldrb	r3, [r3, #15]
 800913a:	4619      	mov	r1, r3
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 ff0c 	bl	800af5a <USBH_AllocPipe>
 8009142:	4603      	mov	r3, r0
 8009144:	461a      	mov	r2, r3
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	7b59      	ldrb	r1, [r3, #13]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	7b98      	ldrb	r0, [r3, #14]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	8b12      	ldrh	r2, [r2, #24]
 8009162:	9202      	str	r2, [sp, #8]
 8009164:	2202      	movs	r2, #2
 8009166:	9201      	str	r2, [sp, #4]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4623      	mov	r3, r4
 800916c:	4602      	mov	r2, r0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f001 fec4 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	7b19      	ldrb	r1, [r3, #12]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	7bd8      	ldrb	r0, [r3, #15]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	8b52      	ldrh	r2, [r2, #26]
 800918c:	9202      	str	r2, [sp, #8]
 800918e:	2202      	movs	r2, #2
 8009190:	9201      	str	r2, [sp, #4]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	4623      	mov	r3, r4
 8009196:	4602      	mov	r2, r0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 feaf 	bl	800aefc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	7b5b      	ldrb	r3, [r3, #13]
 80091aa:	2200      	movs	r2, #0
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f002 f9ba 	bl	800b528 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	7b1b      	ldrb	r3, [r3, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f002 f9b3 	bl	800b528 <USBH_LL_SetToggle>

  return USBH_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd90      	pop	{r4, r7, pc}

080091cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00e      	beq.n	8009204 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	4619      	mov	r1, r3
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fea4 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f001 fecf 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	7b1b      	ldrb	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00e      	beq.n	800922a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	7b1b      	ldrb	r3, [r3, #12]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f001 fe91 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	7b1b      	ldrb	r3, [r3, #12]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 febc 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	7b5b      	ldrb	r3, [r3, #13]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00e      	beq.n	8009250 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	7b5b      	ldrb	r3, [r3, #13]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fe7e 	bl	800af3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	7b5b      	ldrb	r3, [r3, #13]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fea9 	bl	800af9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	4618      	mov	r0, r3
 8009266:	f002 fa0d 	bl	800b684 <free>
    phost->pActiveClass->pData = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009270:	2200      	movs	r2, #0
 8009272:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	3340      	adds	r3, #64	@ 0x40
 8009294:	4619      	mov	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f8b1 	bl	80093fe <GetLineCoding>
 800929c:	4603      	mov	r3, r0
 800929e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d105      	bne.n	80092b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092ac:	2102      	movs	r1, #2
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80092b2:	7afb      	ldrb	r3, [r7, #11]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80092c4:	2301      	movs	r3, #1
 80092c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d877      	bhi.n	80093d0 <USBH_CDC_Process+0x114>
 80092e0:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <USBH_CDC_Process+0x2c>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	080092fd 	.word	0x080092fd
 80092ec:	08009303 	.word	0x08009303
 80092f0:	08009333 	.word	0x08009333
 80092f4:	080093a7 	.word	0x080093a7
 80092f8:	080093b5 	.word	0x080093b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009300:	e06d      	b.n	80093de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f897 	bl	800943c <SetLineCoding>
 800930e:	4603      	mov	r3, r0
 8009310:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009312:	7bbb      	ldrb	r3, [r7, #14]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009320:	e058      	b.n	80093d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d055      	beq.n	80093d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2204      	movs	r2, #4
 800932c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009330:	e050      	b.n	80093d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	3340      	adds	r3, #64	@ 0x40
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f860 	bl	80093fe <GetLineCoding>
 800933e:	4603      	mov	r3, r0
 8009340:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d126      	bne.n	8009396 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800935a:	791b      	ldrb	r3, [r3, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d13b      	bne.n	80093d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800936a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800936c:	429a      	cmp	r2, r3
 800936e:	d133      	bne.n	80093d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800937a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800937c:	429a      	cmp	r2, r3
 800937e:	d12b      	bne.n	80093d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009388:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800938a:	429a      	cmp	r2, r3
 800938c:	d124      	bne.n	80093d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f958 	bl	8009644 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009394:	e020      	b.n	80093d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d01d      	beq.n	80093d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2204      	movs	r2, #4
 80093a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80093a4:	e018      	b.n	80093d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f867 	bl	800947a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8da 	bl	8009566 <CDC_ProcessReception>
      break;
 80093b2:	e014      	b.n	80093de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80093b4:	2100      	movs	r1, #0
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 f81a 	bl	800a3f0 <USBH_ClrFeature>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10a      	bne.n	80093dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80093ce:	e005      	b.n	80093dc <USBH_CDC_Process+0x120>

    default:
      break;
 80093d0:	bf00      	nop
 80093d2:	e004      	b.n	80093de <USBH_CDC_Process+0x122>
      break;
 80093d4:	bf00      	nop
 80093d6:	e002      	b.n	80093de <USBH_CDC_Process+0x122>
      break;
 80093d8:	bf00      	nop
 80093da:	e000      	b.n	80093de <USBH_CDC_Process+0x122>
      break;
 80093dc:	bf00      	nop

  }

  return status;
 80093de:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	22a1      	movs	r2, #161	@ 0xa1
 800940c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2221      	movs	r2, #33	@ 0x21
 8009412:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2207      	movs	r2, #7
 8009424:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2207      	movs	r2, #7
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f001 fb14 	bl	800aa5a <USBH_CtlReq>
 8009432:	4603      	mov	r3, r0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2221      	movs	r2, #33	@ 0x21
 800944a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2207      	movs	r2, #7
 8009462:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2207      	movs	r2, #7
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 faf5 	bl	800aa5a <USBH_CtlReq>
 8009470:	4603      	mov	r3, r0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af02      	add	r7, sp, #8
 8009480:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800948c:	2300      	movs	r3, #0
 800948e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009496:	2b01      	cmp	r3, #1
 8009498:	d002      	beq.n	80094a0 <CDC_ProcessTransmission+0x26>
 800949a:	2b02      	cmp	r3, #2
 800949c:	d023      	beq.n	80094e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800949e:	e05e      	b.n	800955e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	8b12      	ldrh	r2, [r2, #24]
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d90b      	bls.n	80094c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	69d9      	ldr	r1, [r3, #28]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8b1a      	ldrh	r2, [r3, #24]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	7b5b      	ldrb	r3, [r3, #13]
 80094b8:	2001      	movs	r0, #1
 80094ba:	9000      	str	r0, [sp, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fcda 	bl	800ae76 <USBH_BulkSendData>
 80094c2:	e00b      	b.n	80094dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	7b5b      	ldrb	r3, [r3, #13]
 80094d2:	2001      	movs	r0, #1
 80094d4:	9000      	str	r0, [sp, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 fccd 	bl	800ae76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80094e4:	e03b      	b.n	800955e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	7b5b      	ldrb	r3, [r3, #13]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f001 fff1 	bl	800b4d4 <USBH_LL_GetURBState>
 80094f2:	4603      	mov	r3, r0
 80094f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094f6:	7afb      	ldrb	r3, [r7, #11]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d128      	bne.n	800954e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	8b12      	ldrh	r2, [r2, #24]
 8009504:	4293      	cmp	r3, r2
 8009506:	d90e      	bls.n	8009526 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	8b12      	ldrh	r2, [r2, #24]
 8009510:	1a9a      	subs	r2, r3, r2
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	8b12      	ldrh	r2, [r2, #24]
 800951e:	441a      	add	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	61da      	str	r2, [r3, #28]
 8009524:	e002      	b.n	800952c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d004      	beq.n	800953e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800953c:	e00e      	b.n	800955c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f868 	bl	800961c <USBH_CDC_TransmitCallback>
      break;
 800954c:	e006      	b.n	800955c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d103      	bne.n	800955c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800955c:	bf00      	nop
  }
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b086      	sub	sp, #24
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009578:	2300      	movs	r3, #0
 800957a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009582:	2b03      	cmp	r3, #3
 8009584:	d002      	beq.n	800958c <CDC_ProcessReception+0x26>
 8009586:	2b04      	cmp	r3, #4
 8009588:	d00e      	beq.n	80095a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800958a:	e043      	b.n	8009614 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	6a19      	ldr	r1, [r3, #32]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	8b5a      	ldrh	r2, [r3, #26]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	7b1b      	ldrb	r3, [r3, #12]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 fc91 	bl	800aec0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2204      	movs	r2, #4
 80095a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80095a6:	e035      	b.n	8009614 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	7b1b      	ldrb	r3, [r3, #12]
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 ff90 	bl	800b4d4 <USBH_LL_GetURBState>
 80095b4:	4603      	mov	r3, r0
 80095b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80095b8:	7cfb      	ldrb	r3, [r7, #19]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d129      	bne.n	8009612 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	7b1b      	ldrb	r3, [r3, #12]
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f001 fef3 	bl	800b3b0 <USBH_LL_GetLastXferSize>
 80095ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d016      	beq.n	8009604 <CDC_ProcessReception+0x9e>
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	8b5b      	ldrh	r3, [r3, #26]
 80095da:	461a      	mov	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4293      	cmp	r3, r2
 80095e0:	d110      	bne.n	8009604 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	1ad2      	subs	r2, r2, r3
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	6a1a      	ldr	r2, [r3, #32]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	441a      	add	r2, r3
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2203      	movs	r2, #3
 80095fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009602:	e006      	b.n	8009612 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f80f 	bl	8009630 <USBH_CDC_ReceiveCallback>
      break;
 8009612:	bf00      	nop
  }
}
 8009614:	bf00      	nop
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800966c:	2302      	movs	r3, #2
 800966e:	e029      	b.n	80096c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	79fa      	ldrb	r2, [r7, #7]
 8009674:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f000 f81f 	bl	80096cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f001 fdc3 	bl	800b248 <USBH_LL_Init>

  return USBH_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096d8:	2300      	movs	r3, #0
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e009      	b.n	80096f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	33e0      	adds	r3, #224	@ 0xe0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	2200      	movs	r2, #0
 80096ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2b0f      	cmp	r3, #15
 80096f6:	d9f2      	bls.n	80096de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	e009      	b.n	8009712 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009718:	d3f1      	bcc.n	80096fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2201      	movs	r2, #1
 800972a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2240      	movs	r2, #64	@ 0x40
 800973e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	331c      	adds	r3, #28
 800976a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f002 f83d 	bl	800b7f0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800977c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009780:	2100      	movs	r1, #0
 8009782:	4618      	mov	r0, r3
 8009784:	f002 f834 	bl	800b7f0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800978e:	2212      	movs	r2, #18
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f002 f82c 	bl	800b7f0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800979e:	223e      	movs	r2, #62	@ 0x3e
 80097a0:	2100      	movs	r1, #0
 80097a2:	4618      	mov	r0, r3
 80097a4:	f002 f824 	bl	800b7f0 <memset>

  return USBH_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b085      	sub	sp, #20
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d016      	beq.n	80097f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10e      	bne.n	80097ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80097d6:	1c59      	adds	r1, r3, #1
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	33de      	adds	r3, #222	@ 0xde
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
 80097ec:	e004      	b.n	80097f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80097ee:	2302      	movs	r3, #2
 80097f0:	73fb      	strb	r3, [r7, #15]
 80097f2:	e001      	b.n	80097f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80097f4:	2302      	movs	r3, #2
 80097f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009806:	b480      	push	{r7}
 8009808:	b085      	sub	sp, #20
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	429a      	cmp	r2, r3
 8009820:	d204      	bcs.n	800982c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800982a:	e001      	b.n	8009830 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800982c:	2302      	movs	r3, #2
 800982e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009830:	7bfb      	ldrb	r3, [r7, #15]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800983e:	b480      	push	{r7}
 8009840:	b087      	sub	sp, #28
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	461a      	mov	r2, r3
 800984c:	4603      	mov	r3, r0
 800984e:	70fb      	strb	r3, [r7, #3]
 8009850:	460b      	mov	r3, r1
 8009852:	70bb      	strb	r3, [r7, #2]
 8009854:	4613      	mov	r3, r2
 8009856:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009866:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009868:	e025      	b.n	80098b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	221a      	movs	r2, #26
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	3308      	adds	r3, #8
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	3302      	adds	r3, #2
 800987a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	795b      	ldrb	r3, [r3, #5]
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	429a      	cmp	r2, r3
 8009884:	d002      	beq.n	800988c <USBH_FindInterface+0x4e>
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	2bff      	cmp	r3, #255	@ 0xff
 800988a:	d111      	bne.n	80098b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009890:	78ba      	ldrb	r2, [r7, #2]
 8009892:	429a      	cmp	r2, r3
 8009894:	d002      	beq.n	800989c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009896:	78bb      	ldrb	r3, [r7, #2]
 8009898:	2bff      	cmp	r3, #255	@ 0xff
 800989a:	d109      	bne.n	80098b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80098a0:	787a      	ldrb	r2, [r7, #1]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d002      	beq.n	80098ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80098a6:	787b      	ldrb	r3, [r7, #1]
 80098a8:	2bff      	cmp	r3, #255	@ 0xff
 80098aa:	d101      	bne.n	80098b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	e006      	b.n	80098be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80098b0:	7dfb      	ldrb	r3, [r7, #23]
 80098b2:	3301      	adds	r3, #1
 80098b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d9d6      	bls.n	800986a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80098bc:	23ff      	movs	r3, #255	@ 0xff
}
 80098be:	4618      	mov	r0, r3
 80098c0:	371c      	adds	r7, #28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 fcf4 	bl	800b2c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80098d8:	2101      	movs	r1, #1
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fe0d 	bl	800b4fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af04      	add	r7, sp, #16
 80098f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80098f4:	2302      	movs	r3, #2
 80098f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b01      	cmp	r3, #1
 8009906:	d102      	bne.n	800990e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2203      	movs	r2, #3
 800990c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	2b0b      	cmp	r3, #11
 8009916:	f200 81bb 	bhi.w	8009c90 <USBH_Process+0x3a4>
 800991a:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <USBH_Process+0x34>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009951 	.word	0x08009951
 8009924:	08009983 	.word	0x08009983
 8009928:	080099eb 	.word	0x080099eb
 800992c:	08009c2b 	.word	0x08009c2b
 8009930:	08009c91 	.word	0x08009c91
 8009934:	08009a8b 	.word	0x08009a8b
 8009938:	08009bd1 	.word	0x08009bd1
 800993c:	08009ac1 	.word	0x08009ac1
 8009940:	08009ae1 	.word	0x08009ae1
 8009944:	08009aff 	.word	0x08009aff
 8009948:	08009b43 	.word	0x08009b43
 800994c:	08009c13 	.word	0x08009c13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 819b 	beq.w	8009c94 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009964:	20c8      	movs	r0, #200	@ 0xc8
 8009966:	f001 fe12 	bl	800b58e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 fd05 	bl	800b37a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009980:	e188      	b.n	8009c94 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009988:	2b01      	cmp	r3, #1
 800998a:	d107      	bne.n	800999c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800999a:	e18a      	b.n	8009cb2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80099a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099a6:	d914      	bls.n	80099d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099ae:	3301      	adds	r3, #1
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80099be:	2b03      	cmp	r3, #3
 80099c0:	d903      	bls.n	80099ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	220d      	movs	r2, #13
 80099c6:	701a      	strb	r2, [r3, #0]
      break;
 80099c8:	e173      	b.n	8009cb2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	701a      	strb	r2, [r3, #0]
      break;
 80099d0:	e16f      	b.n	8009cb2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80099d8:	f103 020a 	add.w	r2, r3, #10
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80099e2:	200a      	movs	r0, #10
 80099e4:	f001 fdd3 	bl	800b58e <USBH_Delay>
      break;
 80099e8:	e163      	b.n	8009cb2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099fa:	2104      	movs	r1, #4
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009a00:	2064      	movs	r0, #100	@ 0x64
 8009a02:	f001 fdc4 	bl	800b58e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f001 fc90 	bl	800b32c <USBH_LL_GetSpeed>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2205      	movs	r2, #5
 8009a1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f001 fa9b 	bl	800af5a <USBH_AllocPipe>
 8009a24:	4603      	mov	r3, r0
 8009a26:	461a      	mov	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009a2c:	2180      	movs	r1, #128	@ 0x80
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 fa93 	bl	800af5a <USBH_AllocPipe>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7919      	ldrb	r1, [r3, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a50:	9202      	str	r2, [sp, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	9201      	str	r2, [sp, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2280      	movs	r2, #128	@ 0x80
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fa4d 	bl	800aefc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	7959      	ldrb	r1, [r3, #5]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a76:	9202      	str	r2, [sp, #8]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	9201      	str	r2, [sp, #4]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2200      	movs	r2, #0
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fa3a 	bl	800aefc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a88:	e113      	b.n	8009cb2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f916 	bl	8009cbc <USBH_HandleEnum>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 80fd 	bne.w	8009c98 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d103      	bne.n	8009ab8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2208      	movs	r2, #8
 8009ab4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ab6:	e0ef      	b.n	8009c98 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2207      	movs	r2, #7
 8009abc:	701a      	strb	r2, [r3, #0]
      break;
 8009abe:	e0eb      	b.n	8009c98 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 80e8 	beq.w	8009c9c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2208      	movs	r2, #8
 8009adc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009ade:	e0dd      	b.n	8009c9c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fc3a 	bl	800a362 <USBH_SetCfg>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f040 80d5 	bne.w	8009ca0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2209      	movs	r2, #9
 8009afa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009afc:	e0d0      	b.n	8009ca0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d016      	beq.n	8009b3a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009b0c:	2101      	movs	r1, #1
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fc4a 	bl	800a3a8 <USBH_SetFeature>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d103      	bne.n	8009b28 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	220a      	movs	r2, #10
 8009b24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b26:	e0bd      	b.n	8009ca4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	f040 80b9 	bne.w	8009ca4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	220a      	movs	r2, #10
 8009b36:	701a      	strb	r2, [r3, #0]
      break;
 8009b38:	e0b4      	b.n	8009ca4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	220a      	movs	r2, #10
 8009b3e:	701a      	strb	r2, [r3, #0]
      break;
 8009b40:	e0b0      	b.n	8009ca4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f000 80ad 	beq.w	8009ca8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b56:	2300      	movs	r3, #0
 8009b58:	73fb      	strb	r3, [r7, #15]
 8009b5a:	e016      	b.n	8009b8a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b5c:	7bfa      	ldrb	r2, [r7, #15]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	32de      	adds	r2, #222	@ 0xde
 8009b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b66:	791a      	ldrb	r2, [r3, #4]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d108      	bne.n	8009b84 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b72:	7bfa      	ldrb	r2, [r7, #15]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	32de      	adds	r2, #222	@ 0xde
 8009b78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009b82:	e005      	b.n	8009b90 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	3301      	adds	r3, #1
 8009b88:	73fb      	strb	r3, [r7, #15]
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d0e5      	beq.n	8009b5c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d016      	beq.n	8009bc8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2206      	movs	r2, #6
 8009bb0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009bb8:	2103      	movs	r1, #3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bbe:	e073      	b.n	8009ca8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	220d      	movs	r2, #13
 8009bc4:	701a      	strb	r2, [r3, #0]
      break;
 8009bc6:	e06f      	b.n	8009ca8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	220d      	movs	r2, #13
 8009bcc:	701a      	strb	r2, [r3, #0]
      break;
 8009bce:	e06b      	b.n	8009ca8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d017      	beq.n	8009c0a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	4798      	blx	r3
 8009be6:	4603      	mov	r3, r0
 8009be8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	220b      	movs	r2, #11
 8009bf6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bf8:	e058      	b.n	8009cac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d154      	bne.n	8009cac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	220d      	movs	r2, #13
 8009c06:	701a      	strb	r2, [r3, #0]
      break;
 8009c08:	e050      	b.n	8009cac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	220d      	movs	r2, #13
 8009c0e:	701a      	strb	r2, [r3, #0]
      break;
 8009c10:	e04c      	b.n	8009cac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d049      	beq.n	8009cb0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
      }
      break;
 8009c28:	e042      	b.n	8009cb0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7ff fd4a 	bl	80096cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d009      	beq.n	8009c56 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c66:	2105      	movs	r1, #5
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d107      	bne.n	8009c88 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff fe22 	bl	80098ca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c86:	e014      	b.n	8009cb2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fb19 	bl	800b2c0 <USBH_LL_Start>
      break;
 8009c8e:	e010      	b.n	8009cb2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c90:	bf00      	nop
 8009c92:	e00e      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009c94:	bf00      	nop
 8009c96:	e00c      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e00a      	b.n	8009cb2 <USBH_Process+0x3c6>
    break;
 8009c9c:	bf00      	nop
 8009c9e:	e008      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e006      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e004      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e002      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009cac:	bf00      	nop
 8009cae:	e000      	b.n	8009cb2 <USBH_Process+0x3c6>
      break;
 8009cb0:	bf00      	nop
  }
  return USBH_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	785b      	ldrb	r3, [r3, #1]
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	f200 81bd 	bhi.w	800a050 <USBH_HandleEnum+0x394>
 8009cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8009cdc <USBH_HandleEnum+0x20>)
 8009cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cdc:	08009cfd 	.word	0x08009cfd
 8009ce0:	08009db7 	.word	0x08009db7
 8009ce4:	08009e21 	.word	0x08009e21
 8009ce8:	08009eab 	.word	0x08009eab
 8009cec:	08009f15 	.word	0x08009f15
 8009cf0:	08009f85 	.word	0x08009f85
 8009cf4:	08009fcb 	.word	0x08009fcb
 8009cf8:	0800a011 	.word	0x0800a011
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009cfc:	2108      	movs	r1, #8
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fa4c 	bl	800a19c <USBH_Get_DevDesc>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d12e      	bne.n	8009d6c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7919      	ldrb	r1, [r3, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2280      	movs	r2, #128	@ 0x80
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f001 f8dc 	bl	800aefc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	7959      	ldrb	r1, [r3, #5]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d58:	9202      	str	r2, [sp, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	9201      	str	r2, [sp, #4]
 8009d5e:	9300      	str	r3, [sp, #0]
 8009d60:	4603      	mov	r3, r0
 8009d62:	2200      	movs	r2, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f001 f8c9 	bl	800aefc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d6a:	e173      	b.n	800a054 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
 8009d6e:	2b03      	cmp	r3, #3
 8009d70:	f040 8170 	bne.w	800a054 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d903      	bls.n	8009d96 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	220d      	movs	r2, #13
 8009d92:	701a      	strb	r2, [r3, #0]
      break;
 8009d94:	e15e      	b.n	800a054 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	795b      	ldrb	r3, [r3, #5]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f001 f8fd 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	791b      	ldrb	r3, [r3, #4]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f8f7 	bl	800af9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	701a      	strb	r2, [r3, #0]
      break;
 8009db4:	e14e      	b.n	800a054 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009db6:	2112      	movs	r1, #18
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9ef 	bl	800a19c <USBH_Get_DevDesc>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2202      	movs	r2, #2
 8009dcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009dce:	e143      	b.n	800a058 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	f040 8140 	bne.w	800a058 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dde:	3301      	adds	r3, #1
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009dee:	2b03      	cmp	r3, #3
 8009df0:	d903      	bls.n	8009dfa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	220d      	movs	r2, #13
 8009df6:	701a      	strb	r2, [r3, #0]
      break;
 8009df8:	e12e      	b.n	800a058 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	795b      	ldrb	r3, [r3, #5]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 f8cb 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	791b      	ldrb	r3, [r3, #4]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 f8c5 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	701a      	strb	r2, [r3, #0]
      break;
 8009e1e:	e11b      	b.n	800a058 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e20:	2101      	movs	r1, #1
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fa79 	bl	800a31a <USBH_SetAddress>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d130      	bne.n	8009e94 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009e32:	2002      	movs	r0, #2
 8009e34:	f001 fbab 	bl	800b58e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2203      	movs	r2, #3
 8009e44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7919      	ldrb	r1, [r3, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e5a:	9202      	str	r2, [sp, #8]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	9201      	str	r2, [sp, #4]
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	4603      	mov	r3, r0
 8009e64:	2280      	movs	r2, #128	@ 0x80
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 f848 	bl	800aefc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7959      	ldrb	r1, [r3, #5]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e80:	9202      	str	r2, [sp, #8]
 8009e82:	2200      	movs	r2, #0
 8009e84:	9201      	str	r2, [sp, #4]
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f001 f835 	bl	800aefc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e92:	e0e3      	b.n	800a05c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	f040 80e0 	bne.w	800a05c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	220d      	movs	r2, #13
 8009ea0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	705a      	strb	r2, [r3, #1]
      break;
 8009ea8:	e0d8      	b.n	800a05c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009eaa:	2109      	movs	r1, #9
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 f9a1 	bl	800a1f4 <USBH_Get_CfgDesc>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d103      	bne.n	8009ec4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ec2:	e0cd      	b.n	800a060 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ec4:	7bbb      	ldrb	r3, [r7, #14]
 8009ec6:	2b03      	cmp	r3, #3
 8009ec8:	f040 80ca 	bne.w	800a060 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d903      	bls.n	8009eee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	220d      	movs	r2, #13
 8009eea:	701a      	strb	r2, [r3, #0]
      break;
 8009eec:	e0b8      	b.n	800a060 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	795b      	ldrb	r3, [r3, #5]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f851 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	791b      	ldrb	r3, [r3, #4]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f001 f84b 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
      break;
 8009f12:	e0a5      	b.n	800a060 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f969 	bl	800a1f4 <USBH_Get_CfgDesc>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2205      	movs	r2, #5
 8009f30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f32:	e097      	b.n	800a064 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	f040 8094 	bne.w	800a064 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f42:	3301      	adds	r3, #1
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d903      	bls.n	8009f5e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	220d      	movs	r2, #13
 8009f5a:	701a      	strb	r2, [r3, #0]
      break;
 8009f5c:	e082      	b.n	800a064 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	795b      	ldrb	r3, [r3, #5]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f819 	bl	800af9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	791b      	ldrb	r3, [r3, #4]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f001 f813 	bl	800af9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	701a      	strb	r2, [r3, #0]
      break;
 8009f82:	e06f      	b.n	800a064 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d019      	beq.n	8009fc2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f9a:	23ff      	movs	r3, #255	@ 0xff
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f953 	bl	800a248 <USBH_Get_StringDesc>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d103      	bne.n	8009fb4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2206      	movs	r2, #6
 8009fb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fb2:	e059      	b.n	800a068 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
 8009fb6:	2b03      	cmp	r3, #3
 8009fb8:	d156      	bne.n	800a068 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2206      	movs	r2, #6
 8009fbe:	705a      	strb	r2, [r3, #1]
      break;
 8009fc0:	e052      	b.n	800a068 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2206      	movs	r2, #6
 8009fc6:	705a      	strb	r2, [r3, #1]
      break;
 8009fc8:	e04e      	b.n	800a068 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d019      	beq.n	800a008 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fe0:	23ff      	movs	r3, #255	@ 0xff
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f930 	bl	800a248 <USBH_Get_StringDesc>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d103      	bne.n	8009ffa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2207      	movs	r2, #7
 8009ff6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ff8:	e038      	b.n	800a06c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d135      	bne.n	800a06c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2207      	movs	r2, #7
 800a004:	705a      	strb	r2, [r3, #1]
      break;
 800a006:	e031      	b.n	800a06c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2207      	movs	r2, #7
 800a00c:	705a      	strb	r2, [r3, #1]
      break;
 800a00e:	e02d      	b.n	800a06c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a016:	2b00      	cmp	r3, #0
 800a018:	d017      	beq.n	800a04a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a026:	23ff      	movs	r3, #255	@ 0xff
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f90d 	bl	800a248 <USBH_Get_StringDesc>
 800a02e:	4603      	mov	r3, r0
 800a030:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a03c:	e018      	b.n	800a070 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a03e:	7bbb      	ldrb	r3, [r7, #14]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d115      	bne.n	800a070 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]
      break;
 800a048:	e012      	b.n	800a070 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73fb      	strb	r3, [r7, #15]
      break;
 800a04e:	e00f      	b.n	800a070 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a050:	bf00      	nop
 800a052:	e00e      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a054:	bf00      	nop
 800a056:	e00c      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a058:	bf00      	nop
 800a05a:	e00a      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a05c:	bf00      	nop
 800a05e:	e008      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a060:	bf00      	nop
 800a062:	e006      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a064:	bf00      	nop
 800a066:	e004      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a068:	bf00      	nop
 800a06a:	e002      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <USBH_HandleEnum+0x3b6>
      break;
 800a070:	bf00      	nop
  }
  return Status;
 800a072:	7bfb      	ldrb	r3, [r7, #15]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr

0800a09a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f804 	bl	800a0be <USBH_HandleSof>
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b0b      	cmp	r3, #11
 800a0ce:	d10a      	bne.n	800a0e6 <USBH_HandleSof+0x28>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	4798      	blx	r3
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0ee:	b480      	push	{r7}
 800a0f0:	b083      	sub	sp, #12
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a0fe:	bf00      	nop
}
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a11a:	bf00      	nop
}
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f001 f8be 	bl	800b2f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	791b      	ldrb	r3, [r3, #4]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 ff0b 	bl	800af9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	795b      	ldrb	r3, [r3, #5]
 800a18a:	4619      	mov	r1, r3
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 ff05 	bl	800af9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3708      	adds	r7, #8
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a1a8:	887b      	ldrh	r3, [r7, #2]
 800a1aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1ae:	d901      	bls.n	800a1b4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e01b      	b.n	800a1ec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 f872 	bl	800a2b0 <USBH_GetDescriptor>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d109      	bne.n	800a1ea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1dc:	887a      	ldrh	r2, [r7, #2]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f929 	bl	800a438 <USBH_ParseDevDesc>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	331c      	adds	r3, #28
 800a204:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a206:	887b      	ldrh	r3, [r7, #2]
 800a208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20c:	d901      	bls.n	800a212 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a20e:	2303      	movs	r3, #3
 800a210:	e016      	b.n	800a240 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a212:	887b      	ldrh	r3, [r7, #2]
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a21c:	2100      	movs	r1, #0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f846 	bl	800a2b0 <USBH_GetDescriptor>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d107      	bne.n	800a23e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a22e:	887b      	ldrh	r3, [r7, #2]
 800a230:	461a      	mov	r2, r3
 800a232:	68b9      	ldr	r1, [r7, #8]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f9af 	bl	800a598 <USBH_ParseCfgDesc>
 800a23a:	4603      	mov	r3, r0
 800a23c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	461a      	mov	r2, r3
 800a254:	460b      	mov	r3, r1
 800a256:	72fb      	strb	r3, [r7, #11]
 800a258:	4613      	mov	r3, r2
 800a25a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a25c:	893b      	ldrh	r3, [r7, #8]
 800a25e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a262:	d802      	bhi.n	800a26a <USBH_Get_StringDesc+0x22>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e01c      	b.n	800a2a8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a26e:	7afb      	ldrb	r3, [r7, #11]
 800a270:	b29b      	uxth	r3, r3
 800a272:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a276:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a27e:	893b      	ldrh	r3, [r7, #8]
 800a280:	9300      	str	r3, [sp, #0]
 800a282:	460b      	mov	r3, r1
 800a284:	2100      	movs	r1, #0
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f812 	bl	800a2b0 <USBH_GetDescriptor>
 800a28c:	4603      	mov	r3, r0
 800a28e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d107      	bne.n	800a2a6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a29c:	893a      	ldrh	r2, [r7, #8]
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fb8d 	bl	800a9c0 <USBH_ParseStringDesc>
  }

  return status;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	72fb      	strb	r3, [r7, #11]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	789b      	ldrb	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d11c      	bne.n	800a304 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2d0:	b2da      	uxtb	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2206      	movs	r2, #6
 800a2da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	893a      	ldrh	r2, [r7, #8]
 800a2e0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2ec:	d104      	bne.n	800a2f8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f240 4209 	movw	r2, #1033	@ 0x409
 800a2f4:	829a      	strh	r2, [r3, #20]
 800a2f6:	e002      	b.n	800a2fe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8b3a      	ldrh	r2, [r7, #24]
 800a302:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a304:	8b3b      	ldrh	r3, [r7, #24]
 800a306:	461a      	mov	r2, r3
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fba5 	bl	800aa5a <USBH_CtlReq>
 800a310:	4603      	mov	r3, r0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	789b      	ldrb	r3, [r3, #2]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d10f      	bne.n	800a34e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2205      	movs	r2, #5
 800a338:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a34e:	2200      	movs	r2, #0
 800a350:	2100      	movs	r1, #0
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fb81 	bl	800aa5a <USBH_CtlReq>
 800a358:	4603      	mov	r3, r0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	789b      	ldrb	r3, [r3, #2]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d10e      	bne.n	800a394 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2209      	movs	r2, #9
 800a380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	887a      	ldrh	r2, [r7, #2]
 800a386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb5e 	bl	800aa5a <USBH_CtlReq>
 800a39e:	4603      	mov	r3, r0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	789b      	ldrb	r3, [r3, #2]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d10f      	bne.n	800a3dc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2203      	movs	r2, #3
 800a3c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a3c8:	78fb      	ldrb	r3, [r7, #3]
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fb3a 	bl	800aa5a <USBH_CtlReq>
 800a3e6:	4603      	mov	r3, r0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	789b      	ldrb	r3, [r3, #2]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d10f      	bne.n	800a424 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a416:	78fb      	ldrb	r3, [r7, #3]
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a424:	2200      	movs	r2, #0
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb16 	bl	800aa5a <USBH_CtlReq>
 800a42e:	4603      	mov	r3, r0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	4613      	mov	r3, r2
 800a444:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a44c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a458:	2302      	movs	r3, #2
 800a45a:	e094      	b.n	800a586 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	781a      	ldrb	r2, [r3, #0]
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	785a      	ldrb	r2, [r3, #1]
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	3302      	adds	r3, #2
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	3303      	adds	r3, #3
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	021b      	lsls	r3, r3, #8
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	791a      	ldrb	r2, [r3, #4]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	795a      	ldrb	r2, [r3, #5]
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	799a      	ldrb	r2, [r3, #6]
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	79da      	ldrb	r2, [r3, #7]
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d004      	beq.n	800a4ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d11b      	bne.n	800a4f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	79db      	ldrb	r3, [r3, #7]
 800a4be:	2b20      	cmp	r3, #32
 800a4c0:	dc0f      	bgt.n	800a4e2 <USBH_ParseDevDesc+0xaa>
 800a4c2:	2b08      	cmp	r3, #8
 800a4c4:	db0f      	blt.n	800a4e6 <USBH_ParseDevDesc+0xae>
 800a4c6:	3b08      	subs	r3, #8
 800a4c8:	4a32      	ldr	r2, [pc, #200]	@ (800a594 <USBH_ParseDevDesc+0x15c>)
 800a4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bf14      	ite	ne
 800a4d6:	2301      	movne	r3, #1
 800a4d8:	2300      	moveq	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <USBH_ParseDevDesc+0xb6>
 800a4e0:	e001      	b.n	800a4e6 <USBH_ParseDevDesc+0xae>
 800a4e2:	2b40      	cmp	r3, #64	@ 0x40
 800a4e4:	d003      	beq.n	800a4ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	2208      	movs	r2, #8
 800a4ea:	71da      	strb	r2, [r3, #7]
        break;
 800a4ec:	e000      	b.n	800a4f0 <USBH_ParseDevDesc+0xb8>
        break;
 800a4ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4f0:	e00e      	b.n	800a510 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d107      	bne.n	800a50c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	79db      	ldrb	r3, [r3, #7]
 800a500:	2b08      	cmp	r3, #8
 800a502:	d005      	beq.n	800a510 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	2208      	movs	r2, #8
 800a508:	71da      	strb	r2, [r3, #7]
 800a50a:	e001      	b.n	800a510 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a50c:	2303      	movs	r3, #3
 800a50e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a510:	88fb      	ldrh	r3, [r7, #6]
 800a512:	2b08      	cmp	r3, #8
 800a514:	d936      	bls.n	800a584 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	3308      	adds	r3, #8
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	3309      	adds	r3, #9
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	b29b      	uxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	330a      	adds	r3, #10
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	330b      	adds	r3, #11
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	021b      	lsls	r3, r3, #8
 800a540:	b29b      	uxth	r3, r3
 800a542:	4313      	orrs	r3, r2
 800a544:	b29a      	uxth	r2, r3
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	330c      	adds	r3, #12
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	330d      	adds	r3, #13
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b29a      	uxth	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	7b9a      	ldrb	r2, [r3, #14]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	7bda      	ldrb	r2, [r3, #15]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	7c1a      	ldrb	r2, [r3, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	7c5a      	ldrb	r2, [r3, #17]
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	01000101 	.word	0x01000101

0800a598 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	@ 0x30
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a5ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d101      	bne.n	800a5ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e0da      	b.n	800a780 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b09      	cmp	r3, #9
 800a5d4:	d002      	beq.n	800a5dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d8:	2209      	movs	r2, #9
 800a5da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	785a      	ldrb	r2, [r3, #1]
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	3303      	adds	r3, #3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	4313      	orrs	r3, r2
 800a600:	b29b      	uxth	r3, r3
 800a602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a606:	bf28      	it	cs
 800a608:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	791a      	ldrb	r2, [r3, #4]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	795a      	ldrb	r2, [r3, #5]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	799a      	ldrb	r2, [r3, #6]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	79da      	ldrb	r2, [r3, #7]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	7a1a      	ldrb	r2, [r3, #8]
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a63a:	88fb      	ldrh	r3, [r7, #6]
 800a63c:	2b09      	cmp	r3, #9
 800a63e:	f240 809d 	bls.w	800a77c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a642:	2309      	movs	r3, #9
 800a644:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a64a:	e081      	b.n	800a750 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a64c:	f107 0316 	add.w	r3, r7, #22
 800a650:	4619      	mov	r1, r3
 800a652:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a654:	f000 f9e7 	bl	800aa26 <USBH_GetNextDesc>
 800a658:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d176      	bne.n	800a750 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b09      	cmp	r3, #9
 800a668:	d002      	beq.n	800a670 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	2209      	movs	r2, #9
 800a66e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a674:	221a      	movs	r2, #26
 800a676:	fb02 f303 	mul.w	r3, r2, r3
 800a67a:	3308      	adds	r3, #8
 800a67c:	6a3a      	ldr	r2, [r7, #32]
 800a67e:	4413      	add	r3, r2
 800a680:	3302      	adds	r3, #2
 800a682:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a686:	69f8      	ldr	r0, [r7, #28]
 800a688:	f000 f87e 	bl	800a788 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a692:	2300      	movs	r3, #0
 800a694:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a696:	e043      	b.n	800a720 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a698:	f107 0316 	add.w	r3, r7, #22
 800a69c:	4619      	mov	r1, r3
 800a69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a0:	f000 f9c1 	bl	800aa26 <USBH_GetNextDesc>
 800a6a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a8:	785b      	ldrb	r3, [r3, #1]
 800a6aa:	2b05      	cmp	r3, #5
 800a6ac:	d138      	bne.n	800a720 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	795b      	ldrb	r3, [r3, #5]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d113      	bne.n	800a6de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d003      	beq.n	800a6c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	799b      	ldrb	r3, [r3, #6]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d10b      	bne.n	800a6de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	79db      	ldrb	r3, [r3, #7]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10b      	bne.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d007      	beq.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d8:	2209      	movs	r2, #9
 800a6da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6dc:	e003      	b.n	800a6e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e0:	2207      	movs	r2, #7
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	e000      	b.n	800a6e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a6e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a6f0:	3201      	adds	r2, #1
 800a6f2:	00d2      	lsls	r2, r2, #3
 800a6f4:	211a      	movs	r1, #26
 800a6f6:	fb01 f303 	mul.w	r3, r1, r3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	6a3a      	ldr	r2, [r7, #32]
 800a700:	4413      	add	r3, r2
 800a702:	3304      	adds	r3, #4
 800a704:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a708:	69b9      	ldr	r1, [r7, #24]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f870 	bl	800a7f0 <USBH_ParseEPDesc>
 800a710:	4603      	mov	r3, r0
 800a712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a716:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a71a:	3301      	adds	r3, #1
 800a71c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	791b      	ldrb	r3, [r3, #4]
 800a724:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a728:	429a      	cmp	r2, r3
 800a72a:	d204      	bcs.n	800a736 <USBH_ParseCfgDesc+0x19e>
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	885a      	ldrh	r2, [r3, #2]
 800a730:	8afb      	ldrh	r3, [r7, #22]
 800a732:	429a      	cmp	r2, r3
 800a734:	d8b0      	bhi.n	800a698 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	791b      	ldrb	r3, [r3, #4]
 800a73a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a73e:	429a      	cmp	r2, r3
 800a740:	d201      	bcs.n	800a746 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a742:	2303      	movs	r3, #3
 800a744:	e01c      	b.n	800a780 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a74a:	3301      	adds	r3, #1
 800a74c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a754:	2b01      	cmp	r3, #1
 800a756:	d805      	bhi.n	800a764 <USBH_ParseCfgDesc+0x1cc>
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	885a      	ldrh	r2, [r3, #2]
 800a75c:	8afb      	ldrh	r3, [r7, #22]
 800a75e:	429a      	cmp	r2, r3
 800a760:	f63f af74 	bhi.w	800a64c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	791b      	ldrb	r3, [r3, #4]
 800a768:	2b02      	cmp	r3, #2
 800a76a:	bf28      	it	cs
 800a76c:	2302      	movcs	r3, #2
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a774:	429a      	cmp	r2, r3
 800a776:	d201      	bcs.n	800a77c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a778:	2303      	movs	r3, #3
 800a77a:	e001      	b.n	800a780 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a77c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a780:	4618      	mov	r0, r3
 800a782:	3730      	adds	r7, #48	@ 0x30
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781a      	ldrb	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	785a      	ldrb	r2, [r3, #1]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	789a      	ldrb	r2, [r3, #2]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	78da      	ldrb	r2, [r3, #3]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	bf28      	it	cs
 800a7bc:	2302      	movcs	r3, #2
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	795a      	ldrb	r2, [r3, #5]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	799a      	ldrb	r2, [r3, #6]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	79da      	ldrb	r2, [r3, #7]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	7a1a      	ldrb	r2, [r3, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	721a      	strb	r2, [r3, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	785a      	ldrb	r2, [r3, #1]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	789a      	ldrb	r2, [r3, #2]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	78da      	ldrb	r2, [r3, #3]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3304      	adds	r3, #4
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3305      	adds	r3, #5
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	021b      	lsls	r3, r3, #8
 800a830:	b29b      	uxth	r3, r3
 800a832:	4313      	orrs	r3, r2
 800a834:	b29a      	uxth	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	799a      	ldrb	r2, [r3, #6]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	889b      	ldrh	r3, [r3, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d009      	beq.n	800a85e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a84e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a852:	d804      	bhi.n	800a85e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a85c:	d901      	bls.n	800a862 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a85e:	2303      	movs	r3, #3
 800a860:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d136      	bne.n	800a8da <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	78db      	ldrb	r3, [r3, #3]
 800a870:	f003 0303 	and.w	r3, r3, #3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d108      	bne.n	800a88a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	889b      	ldrh	r3, [r3, #4]
 800a87c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a880:	f240 8097 	bls.w	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a884:	2303      	movs	r3, #3
 800a886:	75fb      	strb	r3, [r7, #23]
 800a888:	e093      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	78db      	ldrb	r3, [r3, #3]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d107      	bne.n	800a8a6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	889b      	ldrh	r3, [r3, #4]
 800a89a:	2b40      	cmp	r3, #64	@ 0x40
 800a89c:	f240 8089 	bls.w	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	75fb      	strb	r3, [r7, #23]
 800a8a4:	e085      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	78db      	ldrb	r3, [r3, #3]
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d005      	beq.n	800a8be <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	78db      	ldrb	r3, [r3, #3]
 800a8b6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d10a      	bne.n	800a8d4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	799b      	ldrb	r3, [r3, #6]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <USBH_ParseEPDesc+0xde>
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	799b      	ldrb	r3, [r3, #6]
 800a8ca:	2b10      	cmp	r3, #16
 800a8cc:	d970      	bls.n	800a9b0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8d2:	e06d      	b.n	800a9b0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	e06b      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d13c      	bne.n	800a95e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	78db      	ldrb	r3, [r3, #3]
 800a8e8:	f003 0303 	and.w	r3, r3, #3
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d005      	beq.n	800a8fc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	78db      	ldrb	r3, [r3, #3]
 800a8f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	889b      	ldrh	r3, [r3, #4]
 800a900:	2b40      	cmp	r3, #64	@ 0x40
 800a902:	d956      	bls.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a904:	2303      	movs	r3, #3
 800a906:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a908:	e053      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	78db      	ldrb	r3, [r3, #3]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b01      	cmp	r3, #1
 800a914:	d10e      	bne.n	800a934 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	799b      	ldrb	r3, [r3, #6]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d007      	beq.n	800a92e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a922:	2b10      	cmp	r3, #16
 800a924:	d803      	bhi.n	800a92e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a92a:	2b40      	cmp	r3, #64	@ 0x40
 800a92c:	d941      	bls.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a92e:	2303      	movs	r3, #3
 800a930:	75fb      	strb	r3, [r7, #23]
 800a932:	e03e      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	78db      	ldrb	r3, [r3, #3]
 800a938:	f003 0303 	and.w	r3, r3, #3
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d10b      	bne.n	800a958 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	799b      	ldrb	r3, [r3, #6]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d004      	beq.n	800a952 <USBH_ParseEPDesc+0x162>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	889b      	ldrh	r3, [r3, #4]
 800a94c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a950:	d32f      	bcc.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a952:	2303      	movs	r3, #3
 800a954:	75fb      	strb	r3, [r7, #23]
 800a956:	e02c      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a958:	2303      	movs	r3, #3
 800a95a:	75fb      	strb	r3, [r7, #23]
 800a95c:	e029      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a964:	2b02      	cmp	r3, #2
 800a966:	d120      	bne.n	800a9aa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	78db      	ldrb	r3, [r3, #3]
 800a96c:	f003 0303 	and.w	r3, r3, #3
 800a970:	2b00      	cmp	r3, #0
 800a972:	d106      	bne.n	800a982 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	889b      	ldrh	r3, [r3, #4]
 800a978:	2b08      	cmp	r3, #8
 800a97a:	d01a      	beq.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a97c:	2303      	movs	r3, #3
 800a97e:	75fb      	strb	r3, [r7, #23]
 800a980:	e017      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	78db      	ldrb	r3, [r3, #3]
 800a986:	f003 0303 	and.w	r3, r3, #3
 800a98a:	2b03      	cmp	r3, #3
 800a98c:	d10a      	bne.n	800a9a4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	799b      	ldrb	r3, [r3, #6]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <USBH_ParseEPDesc+0x1ae>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	889b      	ldrh	r3, [r3, #4]
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d909      	bls.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	75fb      	strb	r3, [r7, #23]
 800a9a2:	e006      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	75fb      	strb	r3, [r7, #23]
 800a9a8:	e003      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	75fb      	strb	r3, [r7, #23]
 800a9ae:	e000      	b.n	800a9b2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9b0:	bf00      	nop
  }

  return status;
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	371c      	adds	r7, #28
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d120      	bne.n	800aa1a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	1e9a      	subs	r2, r3, #2
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	bf28      	it	cs
 800a9e4:	4613      	movcs	r3, r2
 800a9e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	3302      	adds	r3, #2
 800a9ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	82fb      	strh	r3, [r7, #22]
 800a9f2:	e00b      	b.n	800aa0c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9f4:	8afb      	ldrh	r3, [r7, #22]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	781a      	ldrb	r2, [r3, #0]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	3301      	adds	r3, #1
 800aa04:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa06:	8afb      	ldrh	r3, [r7, #22]
 800aa08:	3302      	adds	r3, #2
 800aa0a:	82fb      	strh	r3, [r7, #22]
 800aa0c:	8afa      	ldrh	r2, [r7, #22]
 800aa0e:	8abb      	ldrh	r3, [r7, #20]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d3ef      	bcc.n	800a9f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2200      	movs	r2, #0
 800aa18:	701a      	strb	r2, [r3, #0]
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b085      	sub	sp, #20
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
 800aa2e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	7812      	ldrb	r2, [r2, #0]
 800aa38:	4413      	add	r3, r2
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4413      	add	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	4613      	mov	r3, r2
 800aa66:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	789b      	ldrb	r3, [r3, #2]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d002      	beq.n	800aa7a <USBH_CtlReq+0x20>
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d00f      	beq.n	800aa98 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa78:	e027      	b.n	800aaca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	88fa      	ldrh	r2, [r7, #6]
 800aa84:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa92:	2301      	movs	r3, #1
 800aa94:	75fb      	strb	r3, [r7, #23]
      break;
 800aa96:	e018      	b.n	800aaca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f000 f81b 	bl	800aad4 <USBH_HandleControl>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <USBH_CtlReq+0x54>
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d106      	bne.n	800aabc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2201      	movs	r2, #1
 800aab2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	761a      	strb	r2, [r3, #24]
      break;
 800aaba:	e005      	b.n	800aac8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aabc:	7dfb      	ldrb	r3, [r7, #23]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d102      	bne.n	800aac8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2201      	movs	r2, #1
 800aac6:	709a      	strb	r2, [r3, #2]
      break;
 800aac8:	bf00      	nop
  }
  return status;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aadc:	2301      	movs	r3, #1
 800aade:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	7e1b      	ldrb	r3, [r3, #24]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	2b0a      	cmp	r3, #10
 800aaec:	f200 8156 	bhi.w	800ad9c <USBH_HandleControl+0x2c8>
 800aaf0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <USBH_HandleControl+0x24>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab25 	.word	0x0800ab25
 800aafc:	0800ab3f 	.word	0x0800ab3f
 800ab00:	0800aba9 	.word	0x0800aba9
 800ab04:	0800abcf 	.word	0x0800abcf
 800ab08:	0800ac07 	.word	0x0800ac07
 800ab0c:	0800ac31 	.word	0x0800ac31
 800ab10:	0800ac83 	.word	0x0800ac83
 800ab14:	0800aca5 	.word	0x0800aca5
 800ab18:	0800ace1 	.word	0x0800ace1
 800ab1c:	0800ad07 	.word	0x0800ad07
 800ab20:	0800ad45 	.word	0x0800ad45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f103 0110 	add.w	r1, r3, #16
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	795b      	ldrb	r3, [r3, #5]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f943 	bl	800adbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2202      	movs	r2, #2
 800ab3a:	761a      	strb	r2, [r3, #24]
      break;
 800ab3c:	e139      	b.n	800adb2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	795b      	ldrb	r3, [r3, #5]
 800ab42:	4619      	mov	r1, r3
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fcc5 	bl	800b4d4 <USBH_LL_GetURBState>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d11e      	bne.n	800ab92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7c1b      	ldrb	r3, [r3, #16]
 800ab58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ab5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	8adb      	ldrh	r3, [r3, #22]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab66:	7b7b      	ldrb	r3, [r7, #13]
 800ab68:	2b80      	cmp	r3, #128	@ 0x80
 800ab6a:	d103      	bne.n	800ab74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2203      	movs	r2, #3
 800ab70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab72:	e115      	b.n	800ada0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2205      	movs	r2, #5
 800ab78:	761a      	strb	r2, [r3, #24]
      break;
 800ab7a:	e111      	b.n	800ada0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab7c:	7b7b      	ldrb	r3, [r7, #13]
 800ab7e:	2b80      	cmp	r3, #128	@ 0x80
 800ab80:	d103      	bne.n	800ab8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2209      	movs	r2, #9
 800ab86:	761a      	strb	r2, [r3, #24]
      break;
 800ab88:	e10a      	b.n	800ada0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2207      	movs	r2, #7
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e106      	b.n	800ada0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	d003      	beq.n	800aba0 <USBH_HandleControl+0xcc>
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	f040 8100 	bne.w	800ada0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	220b      	movs	r2, #11
 800aba4:	761a      	strb	r2, [r3, #24]
      break;
 800aba6:	e0fb      	b.n	800ada0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abae:	b29a      	uxth	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	899a      	ldrh	r2, [r3, #12]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	791b      	ldrb	r3, [r3, #4]
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f93a 	bl	800ae3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2204      	movs	r2, #4
 800abca:	761a      	strb	r2, [r3, #24]
      break;
 800abcc:	e0f1      	b.n	800adb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc7d 	bl	800b4d4 <USBH_LL_GetURBState>
 800abda:	4603      	mov	r3, r0
 800abdc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d102      	bne.n	800abea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2209      	movs	r2, #9
 800abe8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b05      	cmp	r3, #5
 800abee:	d102      	bne.n	800abf6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800abf0:	2303      	movs	r3, #3
 800abf2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abf4:	e0d6      	b.n	800ada4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	f040 80d3 	bne.w	800ada4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	220b      	movs	r2, #11
 800ac02:	761a      	strb	r2, [r3, #24]
      break;
 800ac04:	e0ce      	b.n	800ada4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6899      	ldr	r1, [r3, #8]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	899a      	ldrh	r2, [r3, #12]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	2001      	movs	r0, #1
 800ac14:	9000      	str	r0, [sp, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f8ea 	bl	800adf0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2206      	movs	r2, #6
 800ac2c:	761a      	strb	r2, [r3, #24]
      break;
 800ac2e:	e0c0      	b.n	800adb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	795b      	ldrb	r3, [r3, #5]
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fc4c 	bl	800b4d4 <USBH_LL_GetURBState>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d103      	bne.n	800ac4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2207      	movs	r2, #7
 800ac4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac4c:	e0ac      	b.n	800ada8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b05      	cmp	r3, #5
 800ac52:	d105      	bne.n	800ac60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	220c      	movs	r2, #12
 800ac58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5e:	e0a3      	b.n	800ada8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac60:	7bbb      	ldrb	r3, [r7, #14]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d103      	bne.n	800ac6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2205      	movs	r2, #5
 800ac6a:	761a      	strb	r2, [r3, #24]
      break;
 800ac6c:	e09c      	b.n	800ada8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
 800ac70:	2b04      	cmp	r3, #4
 800ac72:	f040 8099 	bne.w	800ada8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	220b      	movs	r2, #11
 800ac7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac80:	e092      	b.n	800ada8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	791b      	ldrb	r3, [r3, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	2100      	movs	r1, #0
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f8d5 	bl	800ae3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2208      	movs	r2, #8
 800aca0:	761a      	strb	r2, [r3, #24]

      break;
 800aca2:	e086      	b.n	800adb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	791b      	ldrb	r3, [r3, #4]
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fc12 	bl	800b4d4 <USBH_LL_GetURBState>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d105      	bne.n	800acc6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	220d      	movs	r2, #13
 800acbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acc4:	e072      	b.n	800adac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	2b04      	cmp	r3, #4
 800acca:	d103      	bne.n	800acd4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	220b      	movs	r2, #11
 800acd0:	761a      	strb	r2, [r3, #24]
      break;
 800acd2:	e06b      	b.n	800adac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	2b05      	cmp	r3, #5
 800acd8:	d168      	bne.n	800adac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800acda:	2303      	movs	r3, #3
 800acdc:	73fb      	strb	r3, [r7, #15]
      break;
 800acde:	e065      	b.n	800adac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	795b      	ldrb	r3, [r3, #5]
 800ace4:	2201      	movs	r2, #1
 800ace6:	9200      	str	r2, [sp, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	2100      	movs	r1, #0
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 f87f 	bl	800adf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	220a      	movs	r2, #10
 800ad02:	761a      	strb	r2, [r3, #24]
      break;
 800ad04:	e055      	b.n	800adb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	795b      	ldrb	r3, [r3, #5]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fbe1 	bl	800b4d4 <USBH_LL_GetURBState>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d105      	bne.n	800ad28 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	220d      	movs	r2, #13
 800ad24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad26:	e043      	b.n	800adb0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d103      	bne.n	800ad36 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2209      	movs	r2, #9
 800ad32:	761a      	strb	r2, [r3, #24]
      break;
 800ad34:	e03c      	b.n	800adb0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad36:	7bbb      	ldrb	r3, [r7, #14]
 800ad38:	2b04      	cmp	r3, #4
 800ad3a:	d139      	bne.n	800adb0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	220b      	movs	r2, #11
 800ad40:	761a      	strb	r2, [r3, #24]
      break;
 800ad42:	e035      	b.n	800adb0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7e5b      	ldrb	r3, [r3, #25]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	765a      	strb	r2, [r3, #25]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7e5b      	ldrb	r3, [r3, #25]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d806      	bhi.n	800ad66 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad64:	e025      	b.n	800adb2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ad6c:	2106      	movs	r1, #6
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	795b      	ldrb	r3, [r3, #5]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f90c 	bl	800af9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	791b      	ldrb	r3, [r3, #4]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f906 	bl	800af9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad96:	2302      	movs	r3, #2
 800ad98:	73fb      	strb	r3, [r7, #15]
      break;
 800ad9a:	e00a      	b.n	800adb2 <USBH_HandleControl+0x2de>

    default:
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e008      	b.n	800adb2 <USBH_HandleControl+0x2de>
      break;
 800ada0:	bf00      	nop
 800ada2:	e006      	b.n	800adb2 <USBH_HandleControl+0x2de>
      break;
 800ada4:	bf00      	nop
 800ada6:	e004      	b.n	800adb2 <USBH_HandleControl+0x2de>
      break;
 800ada8:	bf00      	nop
 800adaa:	e002      	b.n	800adb2 <USBH_HandleControl+0x2de>
      break;
 800adac:	bf00      	nop
 800adae:	e000      	b.n	800adb2 <USBH_HandleControl+0x2de>
      break;
 800adb0:	bf00      	nop
  }

  return status;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af04      	add	r7, sp, #16
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adca:	79f9      	ldrb	r1, [r7, #7]
 800adcc:	2300      	movs	r3, #0
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	2308      	movs	r3, #8
 800add2:	9302      	str	r3, [sp, #8]
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	2200      	movs	r2, #0
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 fb46 	bl	800b472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af04      	add	r7, sp, #16
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	460b      	mov	r3, r1
 800ae00:	80fb      	strh	r3, [r7, #6]
 800ae02:	4613      	mov	r3, r2
 800ae04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae10:	2300      	movs	r3, #0
 800ae12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae14:	7979      	ldrb	r1, [r7, #5]
 800ae16:	7e3b      	ldrb	r3, [r7, #24]
 800ae18:	9303      	str	r3, [sp, #12]
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	9302      	str	r3, [sp, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	9301      	str	r3, [sp, #4]
 800ae22:	2301      	movs	r3, #1
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	2300      	movs	r3, #0
 800ae28:	2200      	movs	r2, #0
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 fb21 	bl	800b472 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b088      	sub	sp, #32
 800ae3e:	af04      	add	r7, sp, #16
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	4611      	mov	r1, r2
 800ae46:	461a      	mov	r2, r3
 800ae48:	460b      	mov	r3, r1
 800ae4a:	80fb      	strh	r3, [r7, #6]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae50:	7979      	ldrb	r1, [r7, #5]
 800ae52:	2300      	movs	r3, #0
 800ae54:	9303      	str	r3, [sp, #12]
 800ae56:	88fb      	ldrh	r3, [r7, #6]
 800ae58:	9302      	str	r3, [sp, #8]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	2301      	movs	r3, #1
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	2201      	movs	r2, #1
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fb03 	bl	800b472 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae6c:	2300      	movs	r3, #0

}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af04      	add	r7, sp, #16
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	4611      	mov	r1, r2
 800ae82:	461a      	mov	r2, r3
 800ae84:	460b      	mov	r3, r1
 800ae86:	80fb      	strh	r3, [r7, #6]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae9a:	7979      	ldrb	r1, [r7, #5]
 800ae9c:	7e3b      	ldrb	r3, [r7, #24]
 800ae9e:	9303      	str	r3, [sp, #12]
 800aea0:	88fb      	ldrh	r3, [r7, #6]
 800aea2:	9302      	str	r3, [sp, #8]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	2302      	movs	r3, #2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 fade 	bl	800b472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b088      	sub	sp, #32
 800aec4:	af04      	add	r7, sp, #16
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	460b      	mov	r3, r1
 800aed0:	80fb      	strh	r3, [r7, #6]
 800aed2:	4613      	mov	r3, r2
 800aed4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aed6:	7979      	ldrb	r1, [r7, #5]
 800aed8:	2300      	movs	r3, #0
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	2301      	movs	r3, #1
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	2302      	movs	r3, #2
 800aeea:	2201      	movs	r2, #1
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f000 fac0 	bl	800b472 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af04      	add	r7, sp, #16
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	461a      	mov	r2, r3
 800af0a:	4603      	mov	r3, r0
 800af0c:	70fb      	strb	r3, [r7, #3]
 800af0e:	460b      	mov	r3, r1
 800af10:	70bb      	strb	r3, [r7, #2]
 800af12:	4613      	mov	r3, r2
 800af14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af16:	7878      	ldrb	r0, [r7, #1]
 800af18:	78ba      	ldrb	r2, [r7, #2]
 800af1a:	78f9      	ldrb	r1, [r7, #3]
 800af1c:	8b3b      	ldrh	r3, [r7, #24]
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	7d3b      	ldrb	r3, [r7, #20]
 800af22:	9301      	str	r3, [sp, #4]
 800af24:	7c3b      	ldrb	r3, [r7, #16]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	4603      	mov	r3, r0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa53 	bl	800b3d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	460b      	mov	r3, r1
 800af44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af46:	78fb      	ldrb	r3, [r7, #3]
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fa72 	bl	800b434 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	460b      	mov	r3, r1
 800af64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 f836 	bl	800afd8 <USBH_GetFreePipe>
 800af6c:	4603      	mov	r3, r0
 800af6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af70:	89fb      	ldrh	r3, [r7, #14]
 800af72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af76:	4293      	cmp	r3, r2
 800af78:	d00a      	beq.n	800af90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af7a:	78fa      	ldrb	r2, [r7, #3]
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	33e0      	adds	r3, #224	@ 0xe0
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af90:	89fb      	ldrh	r3, [r7, #14]
 800af92:	b2db      	uxtb	r3, r3
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	2b0f      	cmp	r3, #15
 800afac:	d80d      	bhi.n	800afca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	33e0      	adds	r3, #224	@ 0xe0
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afc0:	6879      	ldr	r1, [r7, #4]
 800afc2:	33e0      	adds	r3, #224	@ 0xe0
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	440b      	add	r3, r1
 800afc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
 800afe8:	e00f      	b.n	800b00a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	33e0      	adds	r3, #224	@ 0xe0
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d102      	bne.n	800b004 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	b29b      	uxth	r3, r3
 800b002:	e007      	b.n	800b014 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	3301      	adds	r3, #1
 800b008:	73fb      	strb	r3, [r7, #15]
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	d9ec      	bls.n	800afea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b010:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b024:	2201      	movs	r2, #1
 800b026:	490e      	ldr	r1, [pc, #56]	@ (800b060 <MX_USB_HOST_Init+0x40>)
 800b028:	480e      	ldr	r0, [pc, #56]	@ (800b064 <MX_USB_HOST_Init+0x44>)
 800b02a:	f7fe fb15 	bl	8009658 <USBH_Init>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b034:	f7f6 fa74 	bl	8001520 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b038:	490b      	ldr	r1, [pc, #44]	@ (800b068 <MX_USB_HOST_Init+0x48>)
 800b03a:	480a      	ldr	r0, [pc, #40]	@ (800b064 <MX_USB_HOST_Init+0x44>)
 800b03c:	f7fe fbb9 	bl	80097b2 <USBH_RegisterClass>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b046:	f7f6 fa6b 	bl	8001520 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b04a:	4806      	ldr	r0, [pc, #24]	@ (800b064 <MX_USB_HOST_Init+0x44>)
 800b04c:	f7fe fc3d 	bl	80098ca <USBH_Start>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d001      	beq.n	800b05a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b056:	f7f6 fa63 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b05a:	bf00      	nop
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	0800b081 	.word	0x0800b081
 800b064:	20002304 	.word	0x20002304
 800b068:	2000000c 	.word	0x2000000c

0800b06c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b070:	4802      	ldr	r0, [pc, #8]	@ (800b07c <MX_USB_HOST_Process+0x10>)
 800b072:	f7fe fc3b 	bl	80098ec <USBH_Process>
}
 800b076:	bf00      	nop
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20002304 	.word	0x20002304

0800b080 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b08c:	78fb      	ldrb	r3, [r7, #3]
 800b08e:	3b01      	subs	r3, #1
 800b090:	2b04      	cmp	r3, #4
 800b092:	d819      	bhi.n	800b0c8 <USBH_UserProcess+0x48>
 800b094:	a201      	add	r2, pc, #4	@ (adr r2, 800b09c <USBH_UserProcess+0x1c>)
 800b096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09a:	bf00      	nop
 800b09c:	0800b0c9 	.word	0x0800b0c9
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0c1 	.word	0x0800b0c1
 800b0ac:	0800b0b1 	.word	0x0800b0b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0b0:	4b09      	ldr	r3, [pc, #36]	@ (800b0d8 <USBH_UserProcess+0x58>)
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	701a      	strb	r2, [r3, #0]
  break;
 800b0b6:	e008      	b.n	800b0ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0b8:	4b07      	ldr	r3, [pc, #28]	@ (800b0d8 <USBH_UserProcess+0x58>)
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	701a      	strb	r2, [r3, #0]
  break;
 800b0be:	e004      	b.n	800b0ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0c0:	4b05      	ldr	r3, [pc, #20]	@ (800b0d8 <USBH_UserProcess+0x58>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	701a      	strb	r2, [r3, #0]
  break;
 800b0c6:	e000      	b.n	800b0ca <USBH_UserProcess+0x4a>

  default:
  break;
 800b0c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0ca:	bf00      	nop
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	200026dc 	.word	0x200026dc

0800b0dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b08a      	sub	sp, #40	@ 0x28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e4:	f107 0314 	add.w	r3, r7, #20
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	609a      	str	r2, [r3, #8]
 800b0f0:	60da      	str	r2, [r3, #12]
 800b0f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0fc:	d147      	bne.n	800b18e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0fe:	2300      	movs	r3, #0
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	4b25      	ldr	r3, [pc, #148]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b106:	4a24      	ldr	r2, [pc, #144]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b108:	f043 0301 	orr.w	r3, r3, #1
 800b10c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b10e:	4b22      	ldr	r3, [pc, #136]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b11a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b11e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b120:	2300      	movs	r3, #0
 800b122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b124:	2300      	movs	r3, #0
 800b126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b128:	f107 0314 	add.w	r3, r7, #20
 800b12c:	4619      	mov	r1, r3
 800b12e:	481b      	ldr	r0, [pc, #108]	@ (800b19c <HAL_HCD_MspInit+0xc0>)
 800b130:	f7f7 fa96 	bl	8002660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b134:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b13a:	2302      	movs	r3, #2
 800b13c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b142:	2300      	movs	r3, #0
 800b144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b146:	230a      	movs	r3, #10
 800b148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b14a:	f107 0314 	add.w	r3, r7, #20
 800b14e:	4619      	mov	r1, r3
 800b150:	4812      	ldr	r0, [pc, #72]	@ (800b19c <HAL_HCD_MspInit+0xc0>)
 800b152:	f7f7 fa85 	bl	8002660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b156:	4b10      	ldr	r3, [pc, #64]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b15a:	4a0f      	ldr	r2, [pc, #60]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b15c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b160:	6353      	str	r3, [r2, #52]	@ 0x34
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
 800b166:	4b0c      	ldr	r3, [pc, #48]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b16a:	4a0b      	ldr	r2, [pc, #44]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b16c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b170:	6453      	str	r3, [r2, #68]	@ 0x44
 800b172:	4b09      	ldr	r3, [pc, #36]	@ (800b198 <HAL_HCD_MspInit+0xbc>)
 800b174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b176:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b17e:	2200      	movs	r2, #0
 800b180:	2100      	movs	r1, #0
 800b182:	2043      	movs	r0, #67	@ 0x43
 800b184:	f7f6 fec5 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b188:	2043      	movs	r0, #67	@ 0x43
 800b18a:	f7f6 fede 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b18e:	bf00      	nop
 800b190:	3728      	adds	r7, #40	@ 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	40023800 	.word	0x40023800
 800b19c:	40020000 	.word	0x40020000

0800b1a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe ff73 	bl	800a09a <USBH_LL_IncTimer>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe ffab 	bl	800a126 <USBH_LL_Connect>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe ffb4 	bl	800a154 <USBH_LL_Disconnect>
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
 800b200:	4613      	mov	r3, r2
 800b202:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe ff65 	bl	800a0ee <USBH_LL_PortEnabled>
}
 800b224:	bf00      	nop
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fe ff65 	bl	800a10a <USBH_LL_PortDisabled>
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b256:	2b01      	cmp	r3, #1
 800b258:	d12a      	bne.n	800b2b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b25a:	4a18      	ldr	r2, [pc, #96]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a15      	ldr	r2, [pc, #84]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b266:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b26a:	4b14      	ldr	r3, [pc, #80]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b26c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b270:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b272:	4b12      	ldr	r3, [pc, #72]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b274:	2208      	movs	r2, #8
 800b276:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b278:	4b10      	ldr	r3, [pc, #64]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b27e:	4b0f      	ldr	r3, [pc, #60]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b280:	2200      	movs	r2, #0
 800b282:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b284:	4b0d      	ldr	r3, [pc, #52]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b286:	2202      	movs	r2, #2
 800b288:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b28a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b290:	480a      	ldr	r0, [pc, #40]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b292:	f7f7 fbb4 	bl	80029fe <HAL_HCD_Init>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b29c:	f7f6 f940 	bl	8001520 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2a0:	4806      	ldr	r0, [pc, #24]	@ (800b2bc <USBH_LL_Init+0x74>)
 800b2a2:	f7f8 f815 	bl	80032d0 <HAL_HCD_GetCurrentFrame>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7fe fee6 	bl	800a07c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200026e0 	.word	0x200026e0

0800b2c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f7 ff82 	bl	80031e0 <HAL_HCD_Start>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 f95e 	bl	800b5a4 <USBH_Get_USB_Status>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f7 ff8a 	bl	8003226 <HAL_HCD_Stop>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	4618      	mov	r0, r3
 800b31a:	f000 f943 	bl	800b5a4 <USBH_Get_USB_Status>
 800b31e:	4603      	mov	r3, r0
 800b320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b322:	7bbb      	ldrb	r3, [r7, #14]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b334:	2301      	movs	r3, #1
 800b336:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b33e:	4618      	mov	r0, r3
 800b340:	f7f7 ffd4 	bl	80032ec <HAL_HCD_GetCurrentSpeed>
 800b344:	4603      	mov	r3, r0
 800b346:	2b02      	cmp	r3, #2
 800b348:	d00c      	beq.n	800b364 <USBH_LL_GetSpeed+0x38>
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d80d      	bhi.n	800b36a <USBH_LL_GetSpeed+0x3e>
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <USBH_LL_GetSpeed+0x2c>
 800b352:	2b01      	cmp	r3, #1
 800b354:	d003      	beq.n	800b35e <USBH_LL_GetSpeed+0x32>
 800b356:	e008      	b.n	800b36a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b358:	2300      	movs	r3, #0
 800b35a:	73fb      	strb	r3, [r7, #15]
    break;
 800b35c:	e008      	b.n	800b370 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b35e:	2301      	movs	r3, #1
 800b360:	73fb      	strb	r3, [r7, #15]
    break;
 800b362:	e005      	b.n	800b370 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b364:	2302      	movs	r3, #2
 800b366:	73fb      	strb	r3, [r7, #15]
    break;
 800b368:	e002      	b.n	800b370 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b36a:	2301      	movs	r3, #1
 800b36c:	73fb      	strb	r3, [r7, #15]
    break;
 800b36e:	bf00      	nop
  }
  return  speed;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b084      	sub	sp, #16
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b390:	4618      	mov	r0, r3
 800b392:	f7f7 ff65 	bl	8003260 <HAL_HCD_ResetPort>
 800b396:	4603      	mov	r3, r0
 800b398:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b39a:	7bfb      	ldrb	r3, [r7, #15]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f901 	bl	800b5a4 <USBH_Get_USB_Status>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3c2:	78fa      	ldrb	r2, [r7, #3]
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7f7 ff6d 	bl	80032a6 <HAL_HCD_HC_GetXferCount>
 800b3cc:	4603      	mov	r3, r0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3d6:	b590      	push	{r4, r7, lr}
 800b3d8:	b089      	sub	sp, #36	@ 0x24
 800b3da:	af04      	add	r7, sp, #16
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	4608      	mov	r0, r1
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	70fb      	strb	r3, [r7, #3]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70bb      	strb	r3, [r7, #2]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3fe:	787c      	ldrb	r4, [r7, #1]
 800b400:	78ba      	ldrb	r2, [r7, #2]
 800b402:	78f9      	ldrb	r1, [r7, #3]
 800b404:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b406:	9302      	str	r3, [sp, #8]
 800b408:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	4623      	mov	r3, r4
 800b416:	f7f7 fb59 	bl	8002acc <HAL_HCD_HC_Init>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 f8bf 	bl	800b5a4 <USBH_Get_USB_Status>
 800b426:	4603      	mov	r3, r0
 800b428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b42a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	bd90      	pop	{r4, r7, pc}

0800b434 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	460b      	mov	r3, r1
 800b43e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b440:	2300      	movs	r3, #0
 800b442:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b44e:	78fa      	ldrb	r2, [r7, #3]
 800b450:	4611      	mov	r1, r2
 800b452:	4618      	mov	r0, r3
 800b454:	f7f7 fbf2 	bl	8002c3c <HAL_HCD_HC_Halt>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f8a0 	bl	800b5a4 <USBH_Get_USB_Status>
 800b464:	4603      	mov	r3, r0
 800b466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b468:	7bbb      	ldrb	r3, [r7, #14]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b472:	b590      	push	{r4, r7, lr}
 800b474:	b089      	sub	sp, #36	@ 0x24
 800b476:	af04      	add	r7, sp, #16
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	4608      	mov	r0, r1
 800b47c:	4611      	mov	r1, r2
 800b47e:	461a      	mov	r2, r3
 800b480:	4603      	mov	r3, r0
 800b482:	70fb      	strb	r3, [r7, #3]
 800b484:	460b      	mov	r3, r1
 800b486:	70bb      	strb	r3, [r7, #2]
 800b488:	4613      	mov	r3, r2
 800b48a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b49a:	787c      	ldrb	r4, [r7, #1]
 800b49c:	78ba      	ldrb	r2, [r7, #2]
 800b49e:	78f9      	ldrb	r1, [r7, #3]
 800b4a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b4a4:	9303      	str	r3, [sp, #12]
 800b4a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b4a8:	9302      	str	r3, [sp, #8]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	f7f7 fbe5 	bl	8002c84 <HAL_HCD_HC_SubmitRequest>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f86f 	bl	800b5a4 <USBH_Get_USB_Status>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd90      	pop	{r4, r7, pc}

0800b4d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f7 fec6 	bl	800327c <HAL_HCD_HC_GetURBState>
 800b4f0:	4603      	mov	r3, r0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d103      	bne.n	800b518 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 f872 	bl	800b5fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b518:	20c8      	movs	r0, #200	@ 0xc8
 800b51a:	f7f6 fbfb 	bl	8001d14 <HAL_Delay>
  return USBH_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	70fb      	strb	r3, [r7, #3]
 800b534:	4613      	mov	r3, r2
 800b536:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b53e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	68f9      	ldr	r1, [r7, #12]
 800b544:	4613      	mov	r3, r2
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	1a9b      	subs	r3, r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	3317      	adds	r3, #23
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	68f9      	ldr	r1, [r7, #12]
 800b55a:	4613      	mov	r3, r2
 800b55c:	011b      	lsls	r3, r3, #4
 800b55e:	1a9b      	subs	r3, r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	333c      	adds	r3, #60	@ 0x3c
 800b566:	78ba      	ldrb	r2, [r7, #2]
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	e009      	b.n	800b580 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b56c:	78fa      	ldrb	r2, [r7, #3]
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	4613      	mov	r3, r2
 800b572:	011b      	lsls	r3, r3, #4
 800b574:	1a9b      	subs	r3, r3, r2
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	333d      	adds	r3, #61	@ 0x3d
 800b57c:	78ba      	ldrb	r2, [r7, #2]
 800b57e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b082      	sub	sp, #8
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7f6 fbbc 	bl	8001d14 <HAL_Delay>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5b2:	79fb      	ldrb	r3, [r7, #7]
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d817      	bhi.n	800b5e8 <USBH_Get_USB_Status+0x44>
 800b5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b5c0 <USBH_Get_USB_Status+0x1c>)
 800b5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5be:	bf00      	nop
 800b5c0:	0800b5d1 	.word	0x0800b5d1
 800b5c4:	0800b5d7 	.word	0x0800b5d7
 800b5c8:	0800b5dd 	.word	0x0800b5dd
 800b5cc:	0800b5e3 	.word	0x0800b5e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d4:	e00b      	b.n	800b5ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5da:	e008      	b.n	800b5ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e0:	e005      	b.n	800b5ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e6:	e002      	b.n	800b5ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5e8:	2302      	movs	r3, #2
 800b5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ec:	bf00      	nop
  }
  return usb_status;
 800b5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b088      	sub	sp, #32
 800b600:	af04      	add	r7, sp, #16
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800b60e:	2300      	movs	r3, #0
 800b610:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800b61a:	7b7b      	ldrb	r3, [r7, #13]
 800b61c:	b299      	uxth	r1, r3
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	b29a      	uxth	r2, r3
 800b622:	2364      	movs	r3, #100	@ 0x64
 800b624:	9302      	str	r3, [sp, #8]
 800b626:	2301      	movs	r3, #1
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	f107 030b 	add.w	r3, r7, #11
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	2301      	movs	r3, #1
 800b632:	480f      	ldr	r0, [pc, #60]	@ (800b670 <MX_DriverVbusFS+0x74>)
 800b634:	f7f9 fd56 	bl	80050e4 <HAL_I2C_Mem_Read>
 800b638:	4603      	mov	r3, r0
 800b63a:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800b63c:	7b3a      	ldrb	r2, [r7, #12]
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	4313      	orrs	r3, r2
 800b642:	b2db      	uxtb	r3, r3
 800b644:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800b646:	7b7b      	ldrb	r3, [r7, #13]
 800b648:	b299      	uxth	r1, r3
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	2364      	movs	r3, #100	@ 0x64
 800b650:	9302      	str	r3, [sp, #8]
 800b652:	2301      	movs	r3, #1
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	f107 030c 	add.w	r3, r7, #12
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2301      	movs	r3, #1
 800b65e:	4804      	ldr	r0, [pc, #16]	@ (800b670 <MX_DriverVbusFS+0x74>)
 800b660:	f7f9 fc46 	bl	8004ef0 <HAL_I2C_Mem_Write>
 800b664:	4603      	mov	r3, r0
 800b666:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000098 	.word	0x20000098

0800b674 <malloc>:
 800b674:	4b02      	ldr	r3, [pc, #8]	@ (800b680 <malloc+0xc>)
 800b676:	4601      	mov	r1, r0
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	f000 b82d 	b.w	800b6d8 <_malloc_r>
 800b67e:	bf00      	nop
 800b680:	2000002c 	.word	0x2000002c

0800b684 <free>:
 800b684:	4b02      	ldr	r3, [pc, #8]	@ (800b690 <free+0xc>)
 800b686:	4601      	mov	r1, r0
 800b688:	6818      	ldr	r0, [r3, #0]
 800b68a:	f000 b8f5 	b.w	800b878 <_free_r>
 800b68e:	bf00      	nop
 800b690:	2000002c 	.word	0x2000002c

0800b694 <sbrk_aligned>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	4e0f      	ldr	r6, [pc, #60]	@ (800b6d4 <sbrk_aligned+0x40>)
 800b698:	460c      	mov	r4, r1
 800b69a:	6831      	ldr	r1, [r6, #0]
 800b69c:	4605      	mov	r5, r0
 800b69e:	b911      	cbnz	r1, 800b6a6 <sbrk_aligned+0x12>
 800b6a0:	f000 f8ae 	bl	800b800 <_sbrk_r>
 800b6a4:	6030      	str	r0, [r6, #0]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f8a9 	bl	800b800 <_sbrk_r>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	d103      	bne.n	800b6ba <sbrk_aligned+0x26>
 800b6b2:	f04f 34ff 	mov.w	r4, #4294967295
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ba:	1cc4      	adds	r4, r0, #3
 800b6bc:	f024 0403 	bic.w	r4, r4, #3
 800b6c0:	42a0      	cmp	r0, r4
 800b6c2:	d0f8      	beq.n	800b6b6 <sbrk_aligned+0x22>
 800b6c4:	1a21      	subs	r1, r4, r0
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f89a 	bl	800b800 <_sbrk_r>
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d1f2      	bne.n	800b6b6 <sbrk_aligned+0x22>
 800b6d0:	e7ef      	b.n	800b6b2 <sbrk_aligned+0x1e>
 800b6d2:	bf00      	nop
 800b6d4:	20002ac0 	.word	0x20002ac0

0800b6d8 <_malloc_r>:
 800b6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6dc:	1ccd      	adds	r5, r1, #3
 800b6de:	f025 0503 	bic.w	r5, r5, #3
 800b6e2:	3508      	adds	r5, #8
 800b6e4:	2d0c      	cmp	r5, #12
 800b6e6:	bf38      	it	cc
 800b6e8:	250c      	movcc	r5, #12
 800b6ea:	2d00      	cmp	r5, #0
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	db01      	blt.n	800b6f4 <_malloc_r+0x1c>
 800b6f0:	42a9      	cmp	r1, r5
 800b6f2:	d904      	bls.n	800b6fe <_malloc_r+0x26>
 800b6f4:	230c      	movs	r3, #12
 800b6f6:	6033      	str	r3, [r6, #0]
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7d4 <_malloc_r+0xfc>
 800b702:	f000 f869 	bl	800b7d8 <__malloc_lock>
 800b706:	f8d8 3000 	ldr.w	r3, [r8]
 800b70a:	461c      	mov	r4, r3
 800b70c:	bb44      	cbnz	r4, 800b760 <_malloc_r+0x88>
 800b70e:	4629      	mov	r1, r5
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff ffbf 	bl	800b694 <sbrk_aligned>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	4604      	mov	r4, r0
 800b71a:	d158      	bne.n	800b7ce <_malloc_r+0xf6>
 800b71c:	f8d8 4000 	ldr.w	r4, [r8]
 800b720:	4627      	mov	r7, r4
 800b722:	2f00      	cmp	r7, #0
 800b724:	d143      	bne.n	800b7ae <_malloc_r+0xd6>
 800b726:	2c00      	cmp	r4, #0
 800b728:	d04b      	beq.n	800b7c2 <_malloc_r+0xea>
 800b72a:	6823      	ldr	r3, [r4, #0]
 800b72c:	4639      	mov	r1, r7
 800b72e:	4630      	mov	r0, r6
 800b730:	eb04 0903 	add.w	r9, r4, r3
 800b734:	f000 f864 	bl	800b800 <_sbrk_r>
 800b738:	4581      	cmp	r9, r0
 800b73a:	d142      	bne.n	800b7c2 <_malloc_r+0xea>
 800b73c:	6821      	ldr	r1, [r4, #0]
 800b73e:	1a6d      	subs	r5, r5, r1
 800b740:	4629      	mov	r1, r5
 800b742:	4630      	mov	r0, r6
 800b744:	f7ff ffa6 	bl	800b694 <sbrk_aligned>
 800b748:	3001      	adds	r0, #1
 800b74a:	d03a      	beq.n	800b7c2 <_malloc_r+0xea>
 800b74c:	6823      	ldr	r3, [r4, #0]
 800b74e:	442b      	add	r3, r5
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	f8d8 3000 	ldr.w	r3, [r8]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	bb62      	cbnz	r2, 800b7b4 <_malloc_r+0xdc>
 800b75a:	f8c8 7000 	str.w	r7, [r8]
 800b75e:	e00f      	b.n	800b780 <_malloc_r+0xa8>
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	1b52      	subs	r2, r2, r5
 800b764:	d420      	bmi.n	800b7a8 <_malloc_r+0xd0>
 800b766:	2a0b      	cmp	r2, #11
 800b768:	d917      	bls.n	800b79a <_malloc_r+0xc2>
 800b76a:	1961      	adds	r1, r4, r5
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	6025      	str	r5, [r4, #0]
 800b770:	bf18      	it	ne
 800b772:	6059      	strne	r1, [r3, #4]
 800b774:	6863      	ldr	r3, [r4, #4]
 800b776:	bf08      	it	eq
 800b778:	f8c8 1000 	streq.w	r1, [r8]
 800b77c:	5162      	str	r2, [r4, r5]
 800b77e:	604b      	str	r3, [r1, #4]
 800b780:	4630      	mov	r0, r6
 800b782:	f000 f82f 	bl	800b7e4 <__malloc_unlock>
 800b786:	f104 000b 	add.w	r0, r4, #11
 800b78a:	1d23      	adds	r3, r4, #4
 800b78c:	f020 0007 	bic.w	r0, r0, #7
 800b790:	1ac2      	subs	r2, r0, r3
 800b792:	bf1c      	itt	ne
 800b794:	1a1b      	subne	r3, r3, r0
 800b796:	50a3      	strne	r3, [r4, r2]
 800b798:	e7af      	b.n	800b6fa <_malloc_r+0x22>
 800b79a:	6862      	ldr	r2, [r4, #4]
 800b79c:	42a3      	cmp	r3, r4
 800b79e:	bf0c      	ite	eq
 800b7a0:	f8c8 2000 	streq.w	r2, [r8]
 800b7a4:	605a      	strne	r2, [r3, #4]
 800b7a6:	e7eb      	b.n	800b780 <_malloc_r+0xa8>
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	6864      	ldr	r4, [r4, #4]
 800b7ac:	e7ae      	b.n	800b70c <_malloc_r+0x34>
 800b7ae:	463c      	mov	r4, r7
 800b7b0:	687f      	ldr	r7, [r7, #4]
 800b7b2:	e7b6      	b.n	800b722 <_malloc_r+0x4a>
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	d1fb      	bne.n	800b7b4 <_malloc_r+0xdc>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6053      	str	r3, [r2, #4]
 800b7c0:	e7de      	b.n	800b780 <_malloc_r+0xa8>
 800b7c2:	230c      	movs	r3, #12
 800b7c4:	6033      	str	r3, [r6, #0]
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	f000 f80c 	bl	800b7e4 <__malloc_unlock>
 800b7cc:	e794      	b.n	800b6f8 <_malloc_r+0x20>
 800b7ce:	6005      	str	r5, [r0, #0]
 800b7d0:	e7d6      	b.n	800b780 <_malloc_r+0xa8>
 800b7d2:	bf00      	nop
 800b7d4:	20002ac4 	.word	0x20002ac4

0800b7d8 <__malloc_lock>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	@ (800b7e0 <__malloc_lock+0x8>)
 800b7da:	f000 b84b 	b.w	800b874 <__retarget_lock_acquire_recursive>
 800b7de:	bf00      	nop
 800b7e0:	20002c04 	.word	0x20002c04

0800b7e4 <__malloc_unlock>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	@ (800b7ec <__malloc_unlock+0x8>)
 800b7e6:	f000 b846 	b.w	800b876 <__retarget_lock_release_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	20002c04 	.word	0x20002c04

0800b7f0 <memset>:
 800b7f0:	4402      	add	r2, r0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d100      	bne.n	800b7fa <memset+0xa>
 800b7f8:	4770      	bx	lr
 800b7fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b7fe:	e7f9      	b.n	800b7f4 <memset+0x4>

0800b800 <_sbrk_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d06      	ldr	r5, [pc, #24]	@ (800b81c <_sbrk_r+0x1c>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f6 f810 	bl	8001830 <_sbrk>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_sbrk_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_sbrk_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	20002c00 	.word	0x20002c00

0800b820 <__errno>:
 800b820:	4b01      	ldr	r3, [pc, #4]	@ (800b828 <__errno+0x8>)
 800b822:	6818      	ldr	r0, [r3, #0]
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	2000002c 	.word	0x2000002c

0800b82c <__libc_init_array>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4d0d      	ldr	r5, [pc, #52]	@ (800b864 <__libc_init_array+0x38>)
 800b830:	4c0d      	ldr	r4, [pc, #52]	@ (800b868 <__libc_init_array+0x3c>)
 800b832:	1b64      	subs	r4, r4, r5
 800b834:	10a4      	asrs	r4, r4, #2
 800b836:	2600      	movs	r6, #0
 800b838:	42a6      	cmp	r6, r4
 800b83a:	d109      	bne.n	800b850 <__libc_init_array+0x24>
 800b83c:	4d0b      	ldr	r5, [pc, #44]	@ (800b86c <__libc_init_array+0x40>)
 800b83e:	4c0c      	ldr	r4, [pc, #48]	@ (800b870 <__libc_init_array+0x44>)
 800b840:	f000 fd94 	bl	800c36c <_init>
 800b844:	1b64      	subs	r4, r4, r5
 800b846:	10a4      	asrs	r4, r4, #2
 800b848:	2600      	movs	r6, #0
 800b84a:	42a6      	cmp	r6, r4
 800b84c:	d105      	bne.n	800b85a <__libc_init_array+0x2e>
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
 800b850:	f855 3b04 	ldr.w	r3, [r5], #4
 800b854:	4798      	blx	r3
 800b856:	3601      	adds	r6, #1
 800b858:	e7ee      	b.n	800b838 <__libc_init_array+0xc>
 800b85a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b85e:	4798      	blx	r3
 800b860:	3601      	adds	r6, #1
 800b862:	e7f2      	b.n	800b84a <__libc_init_array+0x1e>
 800b864:	0800c780 	.word	0x0800c780
 800b868:	0800c780 	.word	0x0800c780
 800b86c:	0800c780 	.word	0x0800c780
 800b870:	0800c784 	.word	0x0800c784

0800b874 <__retarget_lock_acquire_recursive>:
 800b874:	4770      	bx	lr

0800b876 <__retarget_lock_release_recursive>:
 800b876:	4770      	bx	lr

0800b878 <_free_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	4605      	mov	r5, r0
 800b87c:	2900      	cmp	r1, #0
 800b87e:	d041      	beq.n	800b904 <_free_r+0x8c>
 800b880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b884:	1f0c      	subs	r4, r1, #4
 800b886:	2b00      	cmp	r3, #0
 800b888:	bfb8      	it	lt
 800b88a:	18e4      	addlt	r4, r4, r3
 800b88c:	f7ff ffa4 	bl	800b7d8 <__malloc_lock>
 800b890:	4a1d      	ldr	r2, [pc, #116]	@ (800b908 <_free_r+0x90>)
 800b892:	6813      	ldr	r3, [r2, #0]
 800b894:	b933      	cbnz	r3, 800b8a4 <_free_r+0x2c>
 800b896:	6063      	str	r3, [r4, #4]
 800b898:	6014      	str	r4, [r2, #0]
 800b89a:	4628      	mov	r0, r5
 800b89c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a0:	f7ff bfa0 	b.w	800b7e4 <__malloc_unlock>
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	d908      	bls.n	800b8ba <_free_r+0x42>
 800b8a8:	6820      	ldr	r0, [r4, #0]
 800b8aa:	1821      	adds	r1, r4, r0
 800b8ac:	428b      	cmp	r3, r1
 800b8ae:	bf01      	itttt	eq
 800b8b0:	6819      	ldreq	r1, [r3, #0]
 800b8b2:	685b      	ldreq	r3, [r3, #4]
 800b8b4:	1809      	addeq	r1, r1, r0
 800b8b6:	6021      	streq	r1, [r4, #0]
 800b8b8:	e7ed      	b.n	800b896 <_free_r+0x1e>
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	b10b      	cbz	r3, 800b8c4 <_free_r+0x4c>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d9fa      	bls.n	800b8ba <_free_r+0x42>
 800b8c4:	6811      	ldr	r1, [r2, #0]
 800b8c6:	1850      	adds	r0, r2, r1
 800b8c8:	42a0      	cmp	r0, r4
 800b8ca:	d10b      	bne.n	800b8e4 <_free_r+0x6c>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	4401      	add	r1, r0
 800b8d0:	1850      	adds	r0, r2, r1
 800b8d2:	4283      	cmp	r3, r0
 800b8d4:	6011      	str	r1, [r2, #0]
 800b8d6:	d1e0      	bne.n	800b89a <_free_r+0x22>
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	6053      	str	r3, [r2, #4]
 800b8de:	4408      	add	r0, r1
 800b8e0:	6010      	str	r0, [r2, #0]
 800b8e2:	e7da      	b.n	800b89a <_free_r+0x22>
 800b8e4:	d902      	bls.n	800b8ec <_free_r+0x74>
 800b8e6:	230c      	movs	r3, #12
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	e7d6      	b.n	800b89a <_free_r+0x22>
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	1821      	adds	r1, r4, r0
 800b8f0:	428b      	cmp	r3, r1
 800b8f2:	bf04      	itt	eq
 800b8f4:	6819      	ldreq	r1, [r3, #0]
 800b8f6:	685b      	ldreq	r3, [r3, #4]
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	bf04      	itt	eq
 800b8fc:	1809      	addeq	r1, r1, r0
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	6054      	str	r4, [r2, #4]
 800b902:	e7ca      	b.n	800b89a <_free_r+0x22>
 800b904:	bd38      	pop	{r3, r4, r5, pc}
 800b906:	bf00      	nop
 800b908:	20002ac4 	.word	0x20002ac4

0800b90c <sinf>:
 800b90c:	ee10 3a10 	vmov	r3, s0
 800b910:	b507      	push	{r0, r1, r2, lr}
 800b912:	4a1f      	ldr	r2, [pc, #124]	@ (800b990 <sinf+0x84>)
 800b914:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b918:	4293      	cmp	r3, r2
 800b91a:	d807      	bhi.n	800b92c <sinf+0x20>
 800b91c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b994 <sinf+0x88>
 800b920:	2000      	movs	r0, #0
 800b922:	b003      	add	sp, #12
 800b924:	f85d eb04 	ldr.w	lr, [sp], #4
 800b928:	f000 b88e 	b.w	800ba48 <__kernel_sinf>
 800b92c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b930:	d304      	bcc.n	800b93c <sinf+0x30>
 800b932:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b936:	b003      	add	sp, #12
 800b938:	f85d fb04 	ldr.w	pc, [sp], #4
 800b93c:	4668      	mov	r0, sp
 800b93e:	f000 f8cb 	bl	800bad8 <__ieee754_rem_pio2f>
 800b942:	f000 0003 	and.w	r0, r0, #3
 800b946:	2801      	cmp	r0, #1
 800b948:	d00a      	beq.n	800b960 <sinf+0x54>
 800b94a:	2802      	cmp	r0, #2
 800b94c:	d00f      	beq.n	800b96e <sinf+0x62>
 800b94e:	b9c0      	cbnz	r0, 800b982 <sinf+0x76>
 800b950:	eddd 0a01 	vldr	s1, [sp, #4]
 800b954:	ed9d 0a00 	vldr	s0, [sp]
 800b958:	2001      	movs	r0, #1
 800b95a:	f000 f875 	bl	800ba48 <__kernel_sinf>
 800b95e:	e7ea      	b.n	800b936 <sinf+0x2a>
 800b960:	eddd 0a01 	vldr	s1, [sp, #4]
 800b964:	ed9d 0a00 	vldr	s0, [sp]
 800b968:	f000 f816 	bl	800b998 <__kernel_cosf>
 800b96c:	e7e3      	b.n	800b936 <sinf+0x2a>
 800b96e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b972:	ed9d 0a00 	vldr	s0, [sp]
 800b976:	2001      	movs	r0, #1
 800b978:	f000 f866 	bl	800ba48 <__kernel_sinf>
 800b97c:	eeb1 0a40 	vneg.f32	s0, s0
 800b980:	e7d9      	b.n	800b936 <sinf+0x2a>
 800b982:	eddd 0a01 	vldr	s1, [sp, #4]
 800b986:	ed9d 0a00 	vldr	s0, [sp]
 800b98a:	f000 f805 	bl	800b998 <__kernel_cosf>
 800b98e:	e7f5      	b.n	800b97c <sinf+0x70>
 800b990:	3f490fd8 	.word	0x3f490fd8
 800b994:	00000000 	.word	0x00000000

0800b998 <__kernel_cosf>:
 800b998:	ee10 3a10 	vmov	r3, s0
 800b99c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9a0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b9a4:	eef0 6a40 	vmov.f32	s13, s0
 800b9a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b9ac:	d204      	bcs.n	800b9b8 <__kernel_cosf+0x20>
 800b9ae:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b9b2:	ee17 2a90 	vmov	r2, s15
 800b9b6:	b342      	cbz	r2, 800ba0a <__kernel_cosf+0x72>
 800b9b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b9bc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ba28 <__kernel_cosf+0x90>
 800b9c0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ba2c <__kernel_cosf+0x94>
 800b9c4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba30 <__kernel_cosf+0x98>)
 800b9c6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ba34 <__kernel_cosf+0x9c>
 800b9d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9d4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ba38 <__kernel_cosf+0xa0>
 800b9d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b9dc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ba3c <__kernel_cosf+0xa4>
 800b9e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b9e4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ba40 <__kernel_cosf+0xa8>
 800b9e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b9ec:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b9f0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b9f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b9f8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b9fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba00:	d804      	bhi.n	800ba0c <__kernel_cosf+0x74>
 800ba02:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ba06:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba0a:	4770      	bx	lr
 800ba0c:	4a0d      	ldr	r2, [pc, #52]	@ (800ba44 <__kernel_cosf+0xac>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	bf9a      	itte	ls
 800ba12:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ba16:	ee07 3a10 	vmovls	s14, r3
 800ba1a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ba1e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba26:	e7ec      	b.n	800ba02 <__kernel_cosf+0x6a>
 800ba28:	ad47d74e 	.word	0xad47d74e
 800ba2c:	310f74f6 	.word	0x310f74f6
 800ba30:	3e999999 	.word	0x3e999999
 800ba34:	b493f27c 	.word	0xb493f27c
 800ba38:	37d00d01 	.word	0x37d00d01
 800ba3c:	bab60b61 	.word	0xbab60b61
 800ba40:	3d2aaaab 	.word	0x3d2aaaab
 800ba44:	3f480000 	.word	0x3f480000

0800ba48 <__kernel_sinf>:
 800ba48:	ee10 3a10 	vmov	r3, s0
 800ba4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba50:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ba54:	d204      	bcs.n	800ba60 <__kernel_sinf+0x18>
 800ba56:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ba5a:	ee17 3a90 	vmov	r3, s15
 800ba5e:	b35b      	cbz	r3, 800bab8 <__kernel_sinf+0x70>
 800ba60:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ba64:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800babc <__kernel_sinf+0x74>
 800ba68:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bac0 <__kernel_sinf+0x78>
 800ba6c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba70:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bac4 <__kernel_sinf+0x7c>
 800ba74:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba78:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bac8 <__kernel_sinf+0x80>
 800ba7c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ba80:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bacc <__kernel_sinf+0x84>
 800ba84:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ba88:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba8c:	b930      	cbnz	r0, 800ba9c <__kernel_sinf+0x54>
 800ba8e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bad0 <__kernel_sinf+0x88>
 800ba92:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba96:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ba9a:	4770      	bx	lr
 800ba9c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800baa0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800baa4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800baa8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800baac:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bad4 <__kernel_sinf+0x8c>
 800bab0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bab4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	2f2ec9d3 	.word	0x2f2ec9d3
 800bac0:	b2d72f34 	.word	0xb2d72f34
 800bac4:	3638ef1b 	.word	0x3638ef1b
 800bac8:	b9500d01 	.word	0xb9500d01
 800bacc:	3c088889 	.word	0x3c088889
 800bad0:	be2aaaab 	.word	0xbe2aaaab
 800bad4:	3e2aaaab 	.word	0x3e2aaaab

0800bad8 <__ieee754_rem_pio2f>:
 800bad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bada:	ee10 6a10 	vmov	r6, s0
 800bade:	4b88      	ldr	r3, [pc, #544]	@ (800bd00 <__ieee754_rem_pio2f+0x228>)
 800bae0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bae4:	429d      	cmp	r5, r3
 800bae6:	b087      	sub	sp, #28
 800bae8:	4604      	mov	r4, r0
 800baea:	d805      	bhi.n	800baf8 <__ieee754_rem_pio2f+0x20>
 800baec:	2300      	movs	r3, #0
 800baee:	ed80 0a00 	vstr	s0, [r0]
 800baf2:	6043      	str	r3, [r0, #4]
 800baf4:	2000      	movs	r0, #0
 800baf6:	e022      	b.n	800bb3e <__ieee754_rem_pio2f+0x66>
 800baf8:	4b82      	ldr	r3, [pc, #520]	@ (800bd04 <__ieee754_rem_pio2f+0x22c>)
 800bafa:	429d      	cmp	r5, r3
 800bafc:	d83a      	bhi.n	800bb74 <__ieee754_rem_pio2f+0x9c>
 800bafe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bb02:	2e00      	cmp	r6, #0
 800bb04:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bd08 <__ieee754_rem_pio2f+0x230>
 800bb08:	4a80      	ldr	r2, [pc, #512]	@ (800bd0c <__ieee754_rem_pio2f+0x234>)
 800bb0a:	f023 030f 	bic.w	r3, r3, #15
 800bb0e:	dd18      	ble.n	800bb42 <__ieee754_rem_pio2f+0x6a>
 800bb10:	4293      	cmp	r3, r2
 800bb12:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bb16:	bf09      	itett	eq
 800bb18:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bd10 <__ieee754_rem_pio2f+0x238>
 800bb1c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bd14 <__ieee754_rem_pio2f+0x23c>
 800bb20:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bd18 <__ieee754_rem_pio2f+0x240>
 800bb24:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bb28:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bb2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb30:	ed80 7a00 	vstr	s14, [r0]
 800bb34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb38:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb3c:	2001      	movs	r0, #1
 800bb3e:	b007      	add	sp, #28
 800bb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb42:	4293      	cmp	r3, r2
 800bb44:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bb48:	bf09      	itett	eq
 800bb4a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bd10 <__ieee754_rem_pio2f+0x238>
 800bb4e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bd14 <__ieee754_rem_pio2f+0x23c>
 800bb52:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bd18 <__ieee754_rem_pio2f+0x240>
 800bb56:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bb5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb62:	ed80 7a00 	vstr	s14, [r0]
 800bb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6a:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb72:	e7e4      	b.n	800bb3e <__ieee754_rem_pio2f+0x66>
 800bb74:	4b69      	ldr	r3, [pc, #420]	@ (800bd1c <__ieee754_rem_pio2f+0x244>)
 800bb76:	429d      	cmp	r5, r3
 800bb78:	d873      	bhi.n	800bc62 <__ieee754_rem_pio2f+0x18a>
 800bb7a:	f000 f8dd 	bl	800bd38 <fabsf>
 800bb7e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bd20 <__ieee754_rem_pio2f+0x248>
 800bb82:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bb86:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb92:	ee17 0a90 	vmov	r0, s15
 800bb96:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bd08 <__ieee754_rem_pio2f+0x230>
 800bb9a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bb9e:	281f      	cmp	r0, #31
 800bba0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bd14 <__ieee754_rem_pio2f+0x23c>
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	eeb1 6a47 	vneg.f32	s12, s14
 800bbac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bbb0:	ee16 1a90 	vmov	r1, s13
 800bbb4:	dc09      	bgt.n	800bbca <__ieee754_rem_pio2f+0xf2>
 800bbb6:	4a5b      	ldr	r2, [pc, #364]	@ (800bd24 <__ieee754_rem_pio2f+0x24c>)
 800bbb8:	1e47      	subs	r7, r0, #1
 800bbba:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bbbe:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bbc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d107      	bne.n	800bbda <__ieee754_rem_pio2f+0x102>
 800bbca:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bbce:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bbd2:	2a08      	cmp	r2, #8
 800bbd4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bbd8:	dc14      	bgt.n	800bc04 <__ieee754_rem_pio2f+0x12c>
 800bbda:	6021      	str	r1, [r4, #0]
 800bbdc:	ed94 7a00 	vldr	s14, [r4]
 800bbe0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bbe4:	2e00      	cmp	r6, #0
 800bbe6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bbea:	ed84 0a01 	vstr	s0, [r4, #4]
 800bbee:	daa6      	bge.n	800bb3e <__ieee754_rem_pio2f+0x66>
 800bbf0:	eeb1 7a47 	vneg.f32	s14, s14
 800bbf4:	eeb1 0a40 	vneg.f32	s0, s0
 800bbf8:	ed84 7a00 	vstr	s14, [r4]
 800bbfc:	ed84 0a01 	vstr	s0, [r4, #4]
 800bc00:	4240      	negs	r0, r0
 800bc02:	e79c      	b.n	800bb3e <__ieee754_rem_pio2f+0x66>
 800bc04:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bd10 <__ieee754_rem_pio2f+0x238>
 800bc08:	eef0 6a40 	vmov.f32	s13, s0
 800bc0c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bc10:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bc14:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc18:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bd18 <__ieee754_rem_pio2f+0x240>
 800bc1c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bc20:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bc24:	ee15 2a90 	vmov	r2, s11
 800bc28:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bc2c:	1a5b      	subs	r3, r3, r1
 800bc2e:	2b19      	cmp	r3, #25
 800bc30:	dc04      	bgt.n	800bc3c <__ieee754_rem_pio2f+0x164>
 800bc32:	edc4 5a00 	vstr	s11, [r4]
 800bc36:	eeb0 0a66 	vmov.f32	s0, s13
 800bc3a:	e7cf      	b.n	800bbdc <__ieee754_rem_pio2f+0x104>
 800bc3c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bd28 <__ieee754_rem_pio2f+0x250>
 800bc40:	eeb0 0a66 	vmov.f32	s0, s13
 800bc44:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bc48:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bc4c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bd2c <__ieee754_rem_pio2f+0x254>
 800bc50:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc54:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bc58:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bc5c:	ed84 7a00 	vstr	s14, [r4]
 800bc60:	e7bc      	b.n	800bbdc <__ieee754_rem_pio2f+0x104>
 800bc62:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bc66:	d306      	bcc.n	800bc76 <__ieee754_rem_pio2f+0x19e>
 800bc68:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bc6c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bc70:	edc0 7a00 	vstr	s15, [r0]
 800bc74:	e73e      	b.n	800baf4 <__ieee754_rem_pio2f+0x1c>
 800bc76:	15ea      	asrs	r2, r5, #23
 800bc78:	3a86      	subs	r2, #134	@ 0x86
 800bc7a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc86:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bd30 <__ieee754_rem_pio2f+0x258>
 800bc8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc92:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bc9a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bc9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bca2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bca6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bcaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcb6:	edcd 7a05 	vstr	s15, [sp, #20]
 800bcba:	d11e      	bne.n	800bcfa <__ieee754_rem_pio2f+0x222>
 800bcbc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	bf0c      	ite	eq
 800bcc6:	2301      	moveq	r3, #1
 800bcc8:	2302      	movne	r3, #2
 800bcca:	491a      	ldr	r1, [pc, #104]	@ (800bd34 <__ieee754_rem_pio2f+0x25c>)
 800bccc:	9101      	str	r1, [sp, #4]
 800bcce:	2102      	movs	r1, #2
 800bcd0:	9100      	str	r1, [sp, #0]
 800bcd2:	a803      	add	r0, sp, #12
 800bcd4:	4621      	mov	r1, r4
 800bcd6:	f000 f837 	bl	800bd48 <__kernel_rem_pio2f>
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	f6bf af2f 	bge.w	800bb3e <__ieee754_rem_pio2f+0x66>
 800bce0:	edd4 7a00 	vldr	s15, [r4]
 800bce4:	eef1 7a67 	vneg.f32	s15, s15
 800bce8:	edc4 7a00 	vstr	s15, [r4]
 800bcec:	edd4 7a01 	vldr	s15, [r4, #4]
 800bcf0:	eef1 7a67 	vneg.f32	s15, s15
 800bcf4:	edc4 7a01 	vstr	s15, [r4, #4]
 800bcf8:	e782      	b.n	800bc00 <__ieee754_rem_pio2f+0x128>
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e7e5      	b.n	800bcca <__ieee754_rem_pio2f+0x1f2>
 800bcfe:	bf00      	nop
 800bd00:	3f490fd8 	.word	0x3f490fd8
 800bd04:	4016cbe3 	.word	0x4016cbe3
 800bd08:	3fc90f80 	.word	0x3fc90f80
 800bd0c:	3fc90fd0 	.word	0x3fc90fd0
 800bd10:	37354400 	.word	0x37354400
 800bd14:	37354443 	.word	0x37354443
 800bd18:	2e85a308 	.word	0x2e85a308
 800bd1c:	43490f80 	.word	0x43490f80
 800bd20:	3f22f984 	.word	0x3f22f984
 800bd24:	0800c3a8 	.word	0x0800c3a8
 800bd28:	2e85a300 	.word	0x2e85a300
 800bd2c:	248d3132 	.word	0x248d3132
 800bd30:	43800000 	.word	0x43800000
 800bd34:	0800c428 	.word	0x0800c428

0800bd38 <fabsf>:
 800bd38:	ee10 3a10 	vmov	r3, s0
 800bd3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd40:	ee00 3a10 	vmov	s0, r3
 800bd44:	4770      	bx	lr
	...

0800bd48 <__kernel_rem_pio2f>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ed2d 8b04 	vpush	{d8-d9}
 800bd50:	b0d9      	sub	sp, #356	@ 0x164
 800bd52:	4690      	mov	r8, r2
 800bd54:	9001      	str	r0, [sp, #4]
 800bd56:	4ab6      	ldr	r2, [pc, #728]	@ (800c030 <__kernel_rem_pio2f+0x2e8>)
 800bd58:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bd5a:	f118 0f04 	cmn.w	r8, #4
 800bd5e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bd62:	460f      	mov	r7, r1
 800bd64:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd68:	db26      	blt.n	800bdb8 <__kernel_rem_pio2f+0x70>
 800bd6a:	f1b8 0203 	subs.w	r2, r8, #3
 800bd6e:	bf48      	it	mi
 800bd70:	f108 0204 	addmi.w	r2, r8, #4
 800bd74:	10d2      	asrs	r2, r2, #3
 800bd76:	1c55      	adds	r5, r2, #1
 800bd78:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd7a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800bd7e:	00e8      	lsls	r0, r5, #3
 800bd80:	eba2 060b 	sub.w	r6, r2, fp
 800bd84:	9002      	str	r0, [sp, #8]
 800bd86:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bd8a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bd8e:	ac1c      	add	r4, sp, #112	@ 0x70
 800bd90:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bd94:	2000      	movs	r0, #0
 800bd96:	4560      	cmp	r0, ip
 800bd98:	dd10      	ble.n	800bdbc <__kernel_rem_pio2f+0x74>
 800bd9a:	a91c      	add	r1, sp, #112	@ 0x70
 800bd9c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bda0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bda4:	2600      	movs	r6, #0
 800bda6:	4556      	cmp	r6, sl
 800bda8:	dc24      	bgt.n	800bdf4 <__kernel_rem_pio2f+0xac>
 800bdaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bdae:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800bdb2:	4684      	mov	ip, r0
 800bdb4:	2400      	movs	r4, #0
 800bdb6:	e016      	b.n	800bde6 <__kernel_rem_pio2f+0x9e>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	e7dc      	b.n	800bd76 <__kernel_rem_pio2f+0x2e>
 800bdbc:	42c6      	cmn	r6, r0
 800bdbe:	bf5d      	ittte	pl
 800bdc0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bdc4:	ee07 1a90 	vmovpl	s15, r1
 800bdc8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bdcc:	eef0 7a47 	vmovmi.f32	s15, s14
 800bdd0:	ece4 7a01 	vstmia	r4!, {s15}
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	e7de      	b.n	800bd96 <__kernel_rem_pio2f+0x4e>
 800bdd8:	ecfe 6a01 	vldmia	lr!, {s13}
 800bddc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bde0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bde4:	3401      	adds	r4, #1
 800bde6:	455c      	cmp	r4, fp
 800bde8:	ddf6      	ble.n	800bdd8 <__kernel_rem_pio2f+0x90>
 800bdea:	ece9 7a01 	vstmia	r9!, {s15}
 800bdee:	3601      	adds	r6, #1
 800bdf0:	3004      	adds	r0, #4
 800bdf2:	e7d8      	b.n	800bda6 <__kernel_rem_pio2f+0x5e>
 800bdf4:	a908      	add	r1, sp, #32
 800bdf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdfa:	9104      	str	r1, [sp, #16]
 800bdfc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bdfe:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c03c <__kernel_rem_pio2f+0x2f4>
 800be02:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c038 <__kernel_rem_pio2f+0x2f0>
 800be06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800be0a:	9203      	str	r2, [sp, #12]
 800be0c:	4654      	mov	r4, sl
 800be0e:	00a2      	lsls	r2, r4, #2
 800be10:	9205      	str	r2, [sp, #20]
 800be12:	aa58      	add	r2, sp, #352	@ 0x160
 800be14:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800be18:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800be1c:	a944      	add	r1, sp, #272	@ 0x110
 800be1e:	aa08      	add	r2, sp, #32
 800be20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800be24:	4694      	mov	ip, r2
 800be26:	4626      	mov	r6, r4
 800be28:	2e00      	cmp	r6, #0
 800be2a:	dc4c      	bgt.n	800bec6 <__kernel_rem_pio2f+0x17e>
 800be2c:	4628      	mov	r0, r5
 800be2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be32:	f000 f9f1 	bl	800c218 <scalbnf>
 800be36:	eeb0 8a40 	vmov.f32	s16, s0
 800be3a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800be3e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800be42:	f000 fa4f 	bl	800c2e4 <floorf>
 800be46:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800be4a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800be4e:	2d00      	cmp	r5, #0
 800be50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be54:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800be58:	ee17 9a90 	vmov	r9, s15
 800be5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be60:	ee38 8a67 	vsub.f32	s16, s16, s15
 800be64:	dd41      	ble.n	800beea <__kernel_rem_pio2f+0x1a2>
 800be66:	f104 3cff 	add.w	ip, r4, #4294967295
 800be6a:	a908      	add	r1, sp, #32
 800be6c:	f1c5 0e08 	rsb	lr, r5, #8
 800be70:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800be74:	fa46 f00e 	asr.w	r0, r6, lr
 800be78:	4481      	add	r9, r0
 800be7a:	fa00 f00e 	lsl.w	r0, r0, lr
 800be7e:	1a36      	subs	r6, r6, r0
 800be80:	f1c5 0007 	rsb	r0, r5, #7
 800be84:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800be88:	4106      	asrs	r6, r0
 800be8a:	2e00      	cmp	r6, #0
 800be8c:	dd3c      	ble.n	800bf08 <__kernel_rem_pio2f+0x1c0>
 800be8e:	f04f 0e00 	mov.w	lr, #0
 800be92:	f109 0901 	add.w	r9, r9, #1
 800be96:	4670      	mov	r0, lr
 800be98:	4574      	cmp	r4, lr
 800be9a:	dc68      	bgt.n	800bf6e <__kernel_rem_pio2f+0x226>
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	dd03      	ble.n	800bea8 <__kernel_rem_pio2f+0x160>
 800bea0:	2d01      	cmp	r5, #1
 800bea2:	d074      	beq.n	800bf8e <__kernel_rem_pio2f+0x246>
 800bea4:	2d02      	cmp	r5, #2
 800bea6:	d07d      	beq.n	800bfa4 <__kernel_rem_pio2f+0x25c>
 800bea8:	2e02      	cmp	r6, #2
 800beaa:	d12d      	bne.n	800bf08 <__kernel_rem_pio2f+0x1c0>
 800beac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800beb0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800beb4:	b340      	cbz	r0, 800bf08 <__kernel_rem_pio2f+0x1c0>
 800beb6:	4628      	mov	r0, r5
 800beb8:	9306      	str	r3, [sp, #24]
 800beba:	f000 f9ad 	bl	800c218 <scalbnf>
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bec4:	e020      	b.n	800bf08 <__kernel_rem_pio2f+0x1c0>
 800bec6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800beca:	3e01      	subs	r6, #1
 800becc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bed4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bed8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bedc:	ecac 0a01 	vstmia	ip!, {s0}
 800bee0:	ed30 0a01 	vldmdb	r0!, {s0}
 800bee4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bee8:	e79e      	b.n	800be28 <__kernel_rem_pio2f+0xe0>
 800beea:	d105      	bne.n	800bef8 <__kernel_rem_pio2f+0x1b0>
 800beec:	1e60      	subs	r0, r4, #1
 800beee:	a908      	add	r1, sp, #32
 800bef0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bef4:	11f6      	asrs	r6, r6, #7
 800bef6:	e7c8      	b.n	800be8a <__kernel_rem_pio2f+0x142>
 800bef8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800befc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf04:	da31      	bge.n	800bf6a <__kernel_rem_pio2f+0x222>
 800bf06:	2600      	movs	r6, #0
 800bf08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf10:	f040 8098 	bne.w	800c044 <__kernel_rem_pio2f+0x2fc>
 800bf14:	1e60      	subs	r0, r4, #1
 800bf16:	2200      	movs	r2, #0
 800bf18:	4550      	cmp	r0, sl
 800bf1a:	da4b      	bge.n	800bfb4 <__kernel_rem_pio2f+0x26c>
 800bf1c:	2a00      	cmp	r2, #0
 800bf1e:	d065      	beq.n	800bfec <__kernel_rem_pio2f+0x2a4>
 800bf20:	3c01      	subs	r4, #1
 800bf22:	ab08      	add	r3, sp, #32
 800bf24:	3d08      	subs	r5, #8
 800bf26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0f8      	beq.n	800bf20 <__kernel_rem_pio2f+0x1d8>
 800bf2e:	4628      	mov	r0, r5
 800bf30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf34:	f000 f970 	bl	800c218 <scalbnf>
 800bf38:	1c63      	adds	r3, r4, #1
 800bf3a:	aa44      	add	r2, sp, #272	@ 0x110
 800bf3c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c03c <__kernel_rem_pio2f+0x2f4>
 800bf40:	0099      	lsls	r1, r3, #2
 800bf42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf46:	4623      	mov	r3, r4
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f280 80a9 	bge.w	800c0a0 <__kernel_rem_pio2f+0x358>
 800bf4e:	4623      	mov	r3, r4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f2c0 80c7 	blt.w	800c0e4 <__kernel_rem_pio2f+0x39c>
 800bf56:	aa44      	add	r2, sp, #272	@ 0x110
 800bf58:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bf5c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c034 <__kernel_rem_pio2f+0x2ec>
 800bf60:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800bf64:	2000      	movs	r0, #0
 800bf66:	1ae2      	subs	r2, r4, r3
 800bf68:	e0b1      	b.n	800c0ce <__kernel_rem_pio2f+0x386>
 800bf6a:	2602      	movs	r6, #2
 800bf6c:	e78f      	b.n	800be8e <__kernel_rem_pio2f+0x146>
 800bf6e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf72:	b948      	cbnz	r0, 800bf88 <__kernel_rem_pio2f+0x240>
 800bf74:	b121      	cbz	r1, 800bf80 <__kernel_rem_pio2f+0x238>
 800bf76:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bf7a:	f842 1c04 	str.w	r1, [r2, #-4]
 800bf7e:	2101      	movs	r1, #1
 800bf80:	f10e 0e01 	add.w	lr, lr, #1
 800bf84:	4608      	mov	r0, r1
 800bf86:	e787      	b.n	800be98 <__kernel_rem_pio2f+0x150>
 800bf88:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bf8c:	e7f5      	b.n	800bf7a <__kernel_rem_pio2f+0x232>
 800bf8e:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf92:	aa08      	add	r2, sp, #32
 800bf94:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf9c:	a908      	add	r1, sp, #32
 800bf9e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bfa2:	e781      	b.n	800bea8 <__kernel_rem_pio2f+0x160>
 800bfa4:	f104 3cff 	add.w	ip, r4, #4294967295
 800bfa8:	aa08      	add	r2, sp, #32
 800bfaa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bfae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bfb2:	e7f3      	b.n	800bf9c <__kernel_rem_pio2f+0x254>
 800bfb4:	a908      	add	r1, sp, #32
 800bfb6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bfba:	3801      	subs	r0, #1
 800bfbc:	430a      	orrs	r2, r1
 800bfbe:	e7ab      	b.n	800bf18 <__kernel_rem_pio2f+0x1d0>
 800bfc0:	3201      	adds	r2, #1
 800bfc2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bfc6:	2e00      	cmp	r6, #0
 800bfc8:	d0fa      	beq.n	800bfc0 <__kernel_rem_pio2f+0x278>
 800bfca:	9905      	ldr	r1, [sp, #20]
 800bfcc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bfd0:	eb0d 0001 	add.w	r0, sp, r1
 800bfd4:	18e6      	adds	r6, r4, r3
 800bfd6:	a91c      	add	r1, sp, #112	@ 0x70
 800bfd8:	f104 0c01 	add.w	ip, r4, #1
 800bfdc:	384c      	subs	r0, #76	@ 0x4c
 800bfde:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bfe2:	4422      	add	r2, r4
 800bfe4:	4562      	cmp	r2, ip
 800bfe6:	da04      	bge.n	800bff2 <__kernel_rem_pio2f+0x2aa>
 800bfe8:	4614      	mov	r4, r2
 800bfea:	e710      	b.n	800be0e <__kernel_rem_pio2f+0xc6>
 800bfec:	9804      	ldr	r0, [sp, #16]
 800bfee:	2201      	movs	r2, #1
 800bff0:	e7e7      	b.n	800bfc2 <__kernel_rem_pio2f+0x27a>
 800bff2:	9903      	ldr	r1, [sp, #12]
 800bff4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bff8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bffc:	9105      	str	r1, [sp, #20]
 800bffe:	ee07 1a90 	vmov	s15, r1
 800c002:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c006:	2400      	movs	r4, #0
 800c008:	ece6 7a01 	vstmia	r6!, {s15}
 800c00c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800c010:	46b1      	mov	r9, r6
 800c012:	455c      	cmp	r4, fp
 800c014:	dd04      	ble.n	800c020 <__kernel_rem_pio2f+0x2d8>
 800c016:	ece0 7a01 	vstmia	r0!, {s15}
 800c01a:	f10c 0c01 	add.w	ip, ip, #1
 800c01e:	e7e1      	b.n	800bfe4 <__kernel_rem_pio2f+0x29c>
 800c020:	ecfe 6a01 	vldmia	lr!, {s13}
 800c024:	ed39 7a01 	vldmdb	r9!, {s14}
 800c028:	3401      	adds	r4, #1
 800c02a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c02e:	e7f0      	b.n	800c012 <__kernel_rem_pio2f+0x2ca>
 800c030:	0800c76c 	.word	0x0800c76c
 800c034:	0800c740 	.word	0x0800c740
 800c038:	43800000 	.word	0x43800000
 800c03c:	3b800000 	.word	0x3b800000
 800c040:	00000000 	.word	0x00000000
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	eeb0 0a48 	vmov.f32	s0, s16
 800c04a:	eba3 0008 	sub.w	r0, r3, r8
 800c04e:	f000 f8e3 	bl	800c218 <scalbnf>
 800c052:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c038 <__kernel_rem_pio2f+0x2f0>
 800c056:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	db19      	blt.n	800c094 <__kernel_rem_pio2f+0x34c>
 800c060:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c03c <__kernel_rem_pio2f+0x2f4>
 800c064:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c068:	aa08      	add	r2, sp, #32
 800c06a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c06e:	3508      	adds	r5, #8
 800c070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c074:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c07c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c080:	ee10 3a10 	vmov	r3, s0
 800c084:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c088:	ee17 3a90 	vmov	r3, s15
 800c08c:	3401      	adds	r4, #1
 800c08e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c092:	e74c      	b.n	800bf2e <__kernel_rem_pio2f+0x1e6>
 800c094:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c098:	aa08      	add	r2, sp, #32
 800c09a:	ee10 3a10 	vmov	r3, s0
 800c09e:	e7f6      	b.n	800c08e <__kernel_rem_pio2f+0x346>
 800c0a0:	a808      	add	r0, sp, #32
 800c0a2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c0a6:	9001      	str	r0, [sp, #4]
 800c0a8:	ee07 0a90 	vmov	s15, r0
 800c0ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0b0:	3b01      	subs	r3, #1
 800c0b2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c0b6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c0ba:	ed62 7a01 	vstmdb	r2!, {s15}
 800c0be:	e743      	b.n	800bf48 <__kernel_rem_pio2f+0x200>
 800c0c0:	ecfc 6a01 	vldmia	ip!, {s13}
 800c0c4:	ecb5 7a01 	vldmia	r5!, {s14}
 800c0c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	4550      	cmp	r0, sl
 800c0d0:	dc01      	bgt.n	800c0d6 <__kernel_rem_pio2f+0x38e>
 800c0d2:	4290      	cmp	r0, r2
 800c0d4:	ddf4      	ble.n	800c0c0 <__kernel_rem_pio2f+0x378>
 800c0d6:	a858      	add	r0, sp, #352	@ 0x160
 800c0d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c0dc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	e735      	b.n	800bf50 <__kernel_rem_pio2f+0x208>
 800c0e4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	dc09      	bgt.n	800c0fe <__kernel_rem_pio2f+0x3b6>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dc27      	bgt.n	800c13e <__kernel_rem_pio2f+0x3f6>
 800c0ee:	d040      	beq.n	800c172 <__kernel_rem_pio2f+0x42a>
 800c0f0:	f009 0007 	and.w	r0, r9, #7
 800c0f4:	b059      	add	sp, #356	@ 0x164
 800c0f6:	ecbd 8b04 	vpop	{d8-d9}
 800c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c100:	2b03      	cmp	r3, #3
 800c102:	d1f5      	bne.n	800c0f0 <__kernel_rem_pio2f+0x3a8>
 800c104:	aa30      	add	r2, sp, #192	@ 0xc0
 800c106:	1f0b      	subs	r3, r1, #4
 800c108:	4413      	add	r3, r2
 800c10a:	461a      	mov	r2, r3
 800c10c:	4620      	mov	r0, r4
 800c10e:	2800      	cmp	r0, #0
 800c110:	dc50      	bgt.n	800c1b4 <__kernel_rem_pio2f+0x46c>
 800c112:	4622      	mov	r2, r4
 800c114:	2a01      	cmp	r2, #1
 800c116:	dc5d      	bgt.n	800c1d4 <__kernel_rem_pio2f+0x48c>
 800c118:	ab30      	add	r3, sp, #192	@ 0xc0
 800c11a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800c11e:	440b      	add	r3, r1
 800c120:	2c01      	cmp	r4, #1
 800c122:	dc67      	bgt.n	800c1f4 <__kernel_rem_pio2f+0x4ac>
 800c124:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c128:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c12c:	2e00      	cmp	r6, #0
 800c12e:	d167      	bne.n	800c200 <__kernel_rem_pio2f+0x4b8>
 800c130:	edc7 6a00 	vstr	s13, [r7]
 800c134:	ed87 7a01 	vstr	s14, [r7, #4]
 800c138:	edc7 7a02 	vstr	s15, [r7, #8]
 800c13c:	e7d8      	b.n	800c0f0 <__kernel_rem_pio2f+0x3a8>
 800c13e:	ab30      	add	r3, sp, #192	@ 0xc0
 800c140:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800c144:	440b      	add	r3, r1
 800c146:	4622      	mov	r2, r4
 800c148:	2a00      	cmp	r2, #0
 800c14a:	da24      	bge.n	800c196 <__kernel_rem_pio2f+0x44e>
 800c14c:	b34e      	cbz	r6, 800c1a2 <__kernel_rem_pio2f+0x45a>
 800c14e:	eef1 7a47 	vneg.f32	s15, s14
 800c152:	edc7 7a00 	vstr	s15, [r7]
 800c156:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c15e:	aa31      	add	r2, sp, #196	@ 0xc4
 800c160:	2301      	movs	r3, #1
 800c162:	429c      	cmp	r4, r3
 800c164:	da20      	bge.n	800c1a8 <__kernel_rem_pio2f+0x460>
 800c166:	b10e      	cbz	r6, 800c16c <__kernel_rem_pio2f+0x424>
 800c168:	eef1 7a67 	vneg.f32	s15, s15
 800c16c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c170:	e7be      	b.n	800c0f0 <__kernel_rem_pio2f+0x3a8>
 800c172:	ab30      	add	r3, sp, #192	@ 0xc0
 800c174:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c040 <__kernel_rem_pio2f+0x2f8>
 800c178:	440b      	add	r3, r1
 800c17a:	2c00      	cmp	r4, #0
 800c17c:	da05      	bge.n	800c18a <__kernel_rem_pio2f+0x442>
 800c17e:	b10e      	cbz	r6, 800c184 <__kernel_rem_pio2f+0x43c>
 800c180:	eef1 7a67 	vneg.f32	s15, s15
 800c184:	edc7 7a00 	vstr	s15, [r7]
 800c188:	e7b2      	b.n	800c0f0 <__kernel_rem_pio2f+0x3a8>
 800c18a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c18e:	3c01      	subs	r4, #1
 800c190:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c194:	e7f1      	b.n	800c17a <__kernel_rem_pio2f+0x432>
 800c196:	ed73 7a01 	vldmdb	r3!, {s15}
 800c19a:	3a01      	subs	r2, #1
 800c19c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1a0:	e7d2      	b.n	800c148 <__kernel_rem_pio2f+0x400>
 800c1a2:	eef0 7a47 	vmov.f32	s15, s14
 800c1a6:	e7d4      	b.n	800c152 <__kernel_rem_pio2f+0x40a>
 800c1a8:	ecb2 7a01 	vldmia	r2!, {s14}
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1b2:	e7d6      	b.n	800c162 <__kernel_rem_pio2f+0x41a>
 800c1b4:	ed72 7a01 	vldmdb	r2!, {s15}
 800c1b8:	edd2 6a01 	vldr	s13, [r2, #4]
 800c1bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c1c0:	3801      	subs	r0, #1
 800c1c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1c6:	ed82 7a00 	vstr	s14, [r2]
 800c1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ce:	edc2 7a01 	vstr	s15, [r2, #4]
 800c1d2:	e79c      	b.n	800c10e <__kernel_rem_pio2f+0x3c6>
 800c1d4:	ed73 7a01 	vldmdb	r3!, {s15}
 800c1d8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c1dc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c1e0:	3a01      	subs	r2, #1
 800c1e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1e6:	ed83 7a00 	vstr	s14, [r3]
 800c1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ee:	edc3 7a01 	vstr	s15, [r3, #4]
 800c1f2:	e78f      	b.n	800c114 <__kernel_rem_pio2f+0x3cc>
 800c1f4:	ed33 7a01 	vldmdb	r3!, {s14}
 800c1f8:	3c01      	subs	r4, #1
 800c1fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1fe:	e78f      	b.n	800c120 <__kernel_rem_pio2f+0x3d8>
 800c200:	eef1 6a66 	vneg.f32	s13, s13
 800c204:	eeb1 7a47 	vneg.f32	s14, s14
 800c208:	edc7 6a00 	vstr	s13, [r7]
 800c20c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c210:	eef1 7a67 	vneg.f32	s15, s15
 800c214:	e790      	b.n	800c138 <__kernel_rem_pio2f+0x3f0>
 800c216:	bf00      	nop

0800c218 <scalbnf>:
 800c218:	ee10 3a10 	vmov	r3, s0
 800c21c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c220:	d02b      	beq.n	800c27a <scalbnf+0x62>
 800c222:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c226:	d302      	bcc.n	800c22e <scalbnf+0x16>
 800c228:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c22c:	4770      	bx	lr
 800c22e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c232:	d123      	bne.n	800c27c <scalbnf+0x64>
 800c234:	4b24      	ldr	r3, [pc, #144]	@ (800c2c8 <scalbnf+0xb0>)
 800c236:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c2cc <scalbnf+0xb4>
 800c23a:	4298      	cmp	r0, r3
 800c23c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c240:	db17      	blt.n	800c272 <scalbnf+0x5a>
 800c242:	ee10 3a10 	vmov	r3, s0
 800c246:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c24a:	3a19      	subs	r2, #25
 800c24c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c250:	4288      	cmp	r0, r1
 800c252:	dd15      	ble.n	800c280 <scalbnf+0x68>
 800c254:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c2d0 <scalbnf+0xb8>
 800c258:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c2d4 <scalbnf+0xbc>
 800c25c:	ee10 3a10 	vmov	r3, s0
 800c260:	eeb0 7a67 	vmov.f32	s14, s15
 800c264:	2b00      	cmp	r3, #0
 800c266:	bfb8      	it	lt
 800c268:	eef0 7a66 	vmovlt.f32	s15, s13
 800c26c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c270:	4770      	bx	lr
 800c272:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2d8 <scalbnf+0xc0>
 800c276:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c27a:	4770      	bx	lr
 800c27c:	0dd2      	lsrs	r2, r2, #23
 800c27e:	e7e5      	b.n	800c24c <scalbnf+0x34>
 800c280:	4410      	add	r0, r2
 800c282:	28fe      	cmp	r0, #254	@ 0xfe
 800c284:	dce6      	bgt.n	800c254 <scalbnf+0x3c>
 800c286:	2800      	cmp	r0, #0
 800c288:	dd06      	ble.n	800c298 <scalbnf+0x80>
 800c28a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c28e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c292:	ee00 3a10 	vmov	s0, r3
 800c296:	4770      	bx	lr
 800c298:	f110 0f16 	cmn.w	r0, #22
 800c29c:	da09      	bge.n	800c2b2 <scalbnf+0x9a>
 800c29e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c2d8 <scalbnf+0xc0>
 800c2a2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c2dc <scalbnf+0xc4>
 800c2a6:	ee10 3a10 	vmov	r3, s0
 800c2aa:	eeb0 7a67 	vmov.f32	s14, s15
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	e7d9      	b.n	800c266 <scalbnf+0x4e>
 800c2b2:	3019      	adds	r0, #25
 800c2b4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c2b8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c2bc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c2e0 <scalbnf+0xc8>
 800c2c0:	ee07 3a90 	vmov	s15, r3
 800c2c4:	e7d7      	b.n	800c276 <scalbnf+0x5e>
 800c2c6:	bf00      	nop
 800c2c8:	ffff3cb0 	.word	0xffff3cb0
 800c2cc:	4c000000 	.word	0x4c000000
 800c2d0:	7149f2ca 	.word	0x7149f2ca
 800c2d4:	f149f2ca 	.word	0xf149f2ca
 800c2d8:	0da24260 	.word	0x0da24260
 800c2dc:	8da24260 	.word	0x8da24260
 800c2e0:	33000000 	.word	0x33000000

0800c2e4 <floorf>:
 800c2e4:	ee10 3a10 	vmov	r3, s0
 800c2e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c2ec:	3a7f      	subs	r2, #127	@ 0x7f
 800c2ee:	2a16      	cmp	r2, #22
 800c2f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2f4:	dc2b      	bgt.n	800c34e <floorf+0x6a>
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	da12      	bge.n	800c320 <floorf+0x3c>
 800c2fa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c360 <floorf+0x7c>
 800c2fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30a:	dd06      	ble.n	800c31a <floorf+0x36>
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	da24      	bge.n	800c35a <floorf+0x76>
 800c310:	2900      	cmp	r1, #0
 800c312:	4b14      	ldr	r3, [pc, #80]	@ (800c364 <floorf+0x80>)
 800c314:	bf08      	it	eq
 800c316:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c31a:	ee00 3a10 	vmov	s0, r3
 800c31e:	4770      	bx	lr
 800c320:	4911      	ldr	r1, [pc, #68]	@ (800c368 <floorf+0x84>)
 800c322:	4111      	asrs	r1, r2
 800c324:	420b      	tst	r3, r1
 800c326:	d0fa      	beq.n	800c31e <floorf+0x3a>
 800c328:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c360 <floorf+0x7c>
 800c32c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c330:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c338:	ddef      	ble.n	800c31a <floorf+0x36>
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfbe      	ittt	lt
 800c33e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c342:	fa40 f202 	asrlt.w	r2, r0, r2
 800c346:	189b      	addlt	r3, r3, r2
 800c348:	ea23 0301 	bic.w	r3, r3, r1
 800c34c:	e7e5      	b.n	800c31a <floorf+0x36>
 800c34e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c352:	d3e4      	bcc.n	800c31e <floorf+0x3a>
 800c354:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c358:	4770      	bx	lr
 800c35a:	2300      	movs	r3, #0
 800c35c:	e7dd      	b.n	800c31a <floorf+0x36>
 800c35e:	bf00      	nop
 800c360:	7149f2ca 	.word	0x7149f2ca
 800c364:	bf800000 	.word	0xbf800000
 800c368:	007fffff 	.word	0x007fffff

0800c36c <_init>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	bf00      	nop
 800c370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c372:	bc08      	pop	{r3}
 800c374:	469e      	mov	lr, r3
 800c376:	4770      	bx	lr

0800c378 <_fini>:
 800c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37a:	bf00      	nop
 800c37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37e:	bc08      	pop	{r3}
 800c380:	469e      	mov	lr, r3
 800c382:	4770      	bx	lr
