
pedal_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e71c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800e8ac  0800e8ac  0000f8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ece4  0800ece4  00010088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ece4  0800ece4  0000fce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecec  0800ecec  00010088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecec  0800ecec  0000fcec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ecf0  0800ecf0  0000fcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800ecf4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010088  2**0
                  CONTENTS
 10 .bss          00002c80  20000088  20000088  00010088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002d08  20002d08  00010088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002384e  00000000  00000000  000100b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005af1  00000000  00000000  00033906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d70  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ac  00000000  00000000  0003b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002985c  00000000  00000000  0003c814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029995  00000000  00000000  00066070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7f2d  00000000  00000000  0008fa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00177932  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008464  00000000  00000000  00177978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0017fddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e894 	.word	0x0800e894

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800e894 	.word	0x0800e894

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b988 	b.w	8000c04 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	468e      	mov	lr, r1
 8000914:	4604      	mov	r4, r0
 8000916:	4688      	mov	r8, r1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d14a      	bne.n	80009b2 <__udivmoddi4+0xa6>
 800091c:	428a      	cmp	r2, r1
 800091e:	4617      	mov	r7, r2
 8000920:	d962      	bls.n	80009e8 <__udivmoddi4+0xdc>
 8000922:	fab2 f682 	clz	r6, r2
 8000926:	b14e      	cbz	r6, 800093c <__udivmoddi4+0x30>
 8000928:	f1c6 0320 	rsb	r3, r6, #32
 800092c:	fa01 f806 	lsl.w	r8, r1, r6
 8000930:	fa20 f303 	lsr.w	r3, r0, r3
 8000934:	40b7      	lsls	r7, r6
 8000936:	ea43 0808 	orr.w	r8, r3, r8
 800093a:	40b4      	lsls	r4, r6
 800093c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000940:	fa1f fc87 	uxth.w	ip, r7
 8000944:	fbb8 f1fe 	udiv	r1, r8, lr
 8000948:	0c23      	lsrs	r3, r4, #16
 800094a:	fb0e 8811 	mls	r8, lr, r1, r8
 800094e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000952:	fb01 f20c 	mul.w	r2, r1, ip
 8000956:	429a      	cmp	r2, r3
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0x62>
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000960:	f080 80ea 	bcs.w	8000b38 <__udivmoddi4+0x22c>
 8000964:	429a      	cmp	r2, r3
 8000966:	f240 80e7 	bls.w	8000b38 <__udivmoddi4+0x22c>
 800096a:	3902      	subs	r1, #2
 800096c:	443b      	add	r3, r7
 800096e:	1a9a      	subs	r2, r3, r2
 8000970:	b2a3      	uxth	r3, r4
 8000972:	fbb2 f0fe 	udiv	r0, r2, lr
 8000976:	fb0e 2210 	mls	r2, lr, r0, r2
 800097a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800097e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000982:	459c      	cmp	ip, r3
 8000984:	d909      	bls.n	800099a <__udivmoddi4+0x8e>
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	f100 32ff 	add.w	r2, r0, #4294967295
 800098c:	f080 80d6 	bcs.w	8000b3c <__udivmoddi4+0x230>
 8000990:	459c      	cmp	ip, r3
 8000992:	f240 80d3 	bls.w	8000b3c <__udivmoddi4+0x230>
 8000996:	443b      	add	r3, r7
 8000998:	3802      	subs	r0, #2
 800099a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800099e:	eba3 030c 	sub.w	r3, r3, ip
 80009a2:	2100      	movs	r1, #0
 80009a4:	b11d      	cbz	r5, 80009ae <__udivmoddi4+0xa2>
 80009a6:	40f3      	lsrs	r3, r6
 80009a8:	2200      	movs	r2, #0
 80009aa:	e9c5 3200 	strd	r3, r2, [r5]
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d905      	bls.n	80009c2 <__udivmoddi4+0xb6>
 80009b6:	b10d      	cbz	r5, 80009bc <__udivmoddi4+0xb0>
 80009b8:	e9c5 0100 	strd	r0, r1, [r5]
 80009bc:	2100      	movs	r1, #0
 80009be:	4608      	mov	r0, r1
 80009c0:	e7f5      	b.n	80009ae <__udivmoddi4+0xa2>
 80009c2:	fab3 f183 	clz	r1, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d146      	bne.n	8000a58 <__udivmoddi4+0x14c>
 80009ca:	4573      	cmp	r3, lr
 80009cc:	d302      	bcc.n	80009d4 <__udivmoddi4+0xc8>
 80009ce:	4282      	cmp	r2, r0
 80009d0:	f200 8105 	bhi.w	8000bde <__udivmoddi4+0x2d2>
 80009d4:	1a84      	subs	r4, r0, r2
 80009d6:	eb6e 0203 	sbc.w	r2, lr, r3
 80009da:	2001      	movs	r0, #1
 80009dc:	4690      	mov	r8, r2
 80009de:	2d00      	cmp	r5, #0
 80009e0:	d0e5      	beq.n	80009ae <__udivmoddi4+0xa2>
 80009e2:	e9c5 4800 	strd	r4, r8, [r5]
 80009e6:	e7e2      	b.n	80009ae <__udivmoddi4+0xa2>
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	f000 8090 	beq.w	8000b0e <__udivmoddi4+0x202>
 80009ee:	fab2 f682 	clz	r6, r2
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	f040 80a4 	bne.w	8000b40 <__udivmoddi4+0x234>
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	0c03      	lsrs	r3, r0, #16
 80009fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a00:	b280      	uxth	r0, r0
 8000a02:	b2bc      	uxth	r4, r7
 8000a04:	2101      	movs	r1, #1
 8000a06:	fbb2 fcfe 	udiv	ip, r2, lr
 8000a0a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a12:	fb04 f20c 	mul.w	r2, r4, ip
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d907      	bls.n	8000a2a <__udivmoddi4+0x11e>
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x11c>
 8000a22:	429a      	cmp	r2, r3
 8000a24:	f200 80e0 	bhi.w	8000be8 <__udivmoddi4+0x2dc>
 8000a28:	46c4      	mov	ip, r8
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a30:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a34:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a38:	fb02 f404 	mul.w	r4, r2, r4
 8000a3c:	429c      	cmp	r4, r3
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0x144>
 8000a40:	18fb      	adds	r3, r7, r3
 8000a42:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x142>
 8000a48:	429c      	cmp	r4, r3
 8000a4a:	f200 80ca 	bhi.w	8000be2 <__udivmoddi4+0x2d6>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	1b1b      	subs	r3, r3, r4
 8000a52:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a56:	e7a5      	b.n	80009a4 <__udivmoddi4+0x98>
 8000a58:	f1c1 0620 	rsb	r6, r1, #32
 8000a5c:	408b      	lsls	r3, r1
 8000a5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a62:	431f      	orrs	r7, r3
 8000a64:	fa0e f401 	lsl.w	r4, lr, r1
 8000a68:	fa20 f306 	lsr.w	r3, r0, r6
 8000a6c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a70:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a74:	4323      	orrs	r3, r4
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	fa1f fc87 	uxth.w	ip, r7
 8000a7e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a82:	0c1c      	lsrs	r4, r3, #16
 8000a84:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a88:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a8c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	fa02 f201 	lsl.w	r2, r2, r1
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x1a0>
 8000a98:	193c      	adds	r4, r7, r4
 8000a9a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a9e:	f080 809c 	bcs.w	8000bda <__udivmoddi4+0x2ce>
 8000aa2:	45a6      	cmp	lr, r4
 8000aa4:	f240 8099 	bls.w	8000bda <__udivmoddi4+0x2ce>
 8000aa8:	3802      	subs	r0, #2
 8000aaa:	443c      	add	r4, r7
 8000aac:	eba4 040e 	sub.w	r4, r4, lr
 8000ab0:	fa1f fe83 	uxth.w	lr, r3
 8000ab4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ab8:	fb09 4413 	mls	r4, r9, r3, r4
 8000abc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ac0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ac4:	45a4      	cmp	ip, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x1ce>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ace:	f080 8082 	bcs.w	8000bd6 <__udivmoddi4+0x2ca>
 8000ad2:	45a4      	cmp	ip, r4
 8000ad4:	d97f      	bls.n	8000bd6 <__udivmoddi4+0x2ca>
 8000ad6:	3b02      	subs	r3, #2
 8000ad8:	443c      	add	r4, r7
 8000ada:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ade:	eba4 040c 	sub.w	r4, r4, ip
 8000ae2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ae6:	4564      	cmp	r4, ip
 8000ae8:	4673      	mov	r3, lr
 8000aea:	46e1      	mov	r9, ip
 8000aec:	d362      	bcc.n	8000bb4 <__udivmoddi4+0x2a8>
 8000aee:	d05f      	beq.n	8000bb0 <__udivmoddi4+0x2a4>
 8000af0:	b15d      	cbz	r5, 8000b0a <__udivmoddi4+0x1fe>
 8000af2:	ebb8 0203 	subs.w	r2, r8, r3
 8000af6:	eb64 0409 	sbc.w	r4, r4, r9
 8000afa:	fa04 f606 	lsl.w	r6, r4, r6
 8000afe:	fa22 f301 	lsr.w	r3, r2, r1
 8000b02:	431e      	orrs	r6, r3
 8000b04:	40cc      	lsrs	r4, r1
 8000b06:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e74f      	b.n	80009ae <__udivmoddi4+0xa2>
 8000b0e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b12:	0c01      	lsrs	r1, r0, #16
 8000b14:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b18:	b280      	uxth	r0, r0
 8000b1a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b1e:	463b      	mov	r3, r7
 8000b20:	4638      	mov	r0, r7
 8000b22:	463c      	mov	r4, r7
 8000b24:	46b8      	mov	r8, r7
 8000b26:	46be      	mov	lr, r7
 8000b28:	2620      	movs	r6, #32
 8000b2a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b2e:	eba2 0208 	sub.w	r2, r2, r8
 8000b32:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b36:	e766      	b.n	8000a06 <__udivmoddi4+0xfa>
 8000b38:	4601      	mov	r1, r0
 8000b3a:	e718      	b.n	800096e <__udivmoddi4+0x62>
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	e72c      	b.n	800099a <__udivmoddi4+0x8e>
 8000b40:	f1c6 0220 	rsb	r2, r6, #32
 8000b44:	fa2e f302 	lsr.w	r3, lr, r2
 8000b48:	40b7      	lsls	r7, r6
 8000b4a:	40b1      	lsls	r1, r6
 8000b4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b54:	430a      	orrs	r2, r1
 8000b56:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b5a:	b2bc      	uxth	r4, r7
 8000b5c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b66:	fb08 f904 	mul.w	r9, r8, r4
 8000b6a:	40b0      	lsls	r0, r6
 8000b6c:	4589      	cmp	r9, r1
 8000b6e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b72:	b280      	uxth	r0, r0
 8000b74:	d93e      	bls.n	8000bf4 <__udivmoddi4+0x2e8>
 8000b76:	1879      	adds	r1, r7, r1
 8000b78:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b7c:	d201      	bcs.n	8000b82 <__udivmoddi4+0x276>
 8000b7e:	4589      	cmp	r9, r1
 8000b80:	d81f      	bhi.n	8000bc2 <__udivmoddi4+0x2b6>
 8000b82:	eba1 0109 	sub.w	r1, r1, r9
 8000b86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b8a:	fb09 f804 	mul.w	r8, r9, r4
 8000b8e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b92:	b292      	uxth	r2, r2
 8000b94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b98:	4542      	cmp	r2, r8
 8000b9a:	d229      	bcs.n	8000bf0 <__udivmoddi4+0x2e4>
 8000b9c:	18ba      	adds	r2, r7, r2
 8000b9e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ba2:	d2c4      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba4:	4542      	cmp	r2, r8
 8000ba6:	d2c2      	bcs.n	8000b2e <__udivmoddi4+0x222>
 8000ba8:	f1a9 0102 	sub.w	r1, r9, #2
 8000bac:	443a      	add	r2, r7
 8000bae:	e7be      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bb0:	45f0      	cmp	r8, lr
 8000bb2:	d29d      	bcs.n	8000af0 <__udivmoddi4+0x1e4>
 8000bb4:	ebbe 0302 	subs.w	r3, lr, r2
 8000bb8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000bbc:	3801      	subs	r0, #1
 8000bbe:	46e1      	mov	r9, ip
 8000bc0:	e796      	b.n	8000af0 <__udivmoddi4+0x1e4>
 8000bc2:	eba7 0909 	sub.w	r9, r7, r9
 8000bc6:	4449      	add	r1, r9
 8000bc8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bcc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd0:	fb09 f804 	mul.w	r8, r9, r4
 8000bd4:	e7db      	b.n	8000b8e <__udivmoddi4+0x282>
 8000bd6:	4673      	mov	r3, lr
 8000bd8:	e77f      	b.n	8000ada <__udivmoddi4+0x1ce>
 8000bda:	4650      	mov	r0, sl
 8000bdc:	e766      	b.n	8000aac <__udivmoddi4+0x1a0>
 8000bde:	4608      	mov	r0, r1
 8000be0:	e6fd      	b.n	80009de <__udivmoddi4+0xd2>
 8000be2:	443b      	add	r3, r7
 8000be4:	3a02      	subs	r2, #2
 8000be6:	e733      	b.n	8000a50 <__udivmoddi4+0x144>
 8000be8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bec:	443b      	add	r3, r7
 8000bee:	e71c      	b.n	8000a2a <__udivmoddi4+0x11e>
 8000bf0:	4649      	mov	r1, r9
 8000bf2:	e79c      	b.n	8000b2e <__udivmoddi4+0x222>
 8000bf4:	eba1 0109 	sub.w	r1, r1, r9
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bfe:	fb09 f804 	mul.w	r8, r9, r4
 8000c02:	e7c4      	b.n	8000b8e <__udivmoddi4+0x282>

08000c04 <__aeabi_idiv0>:
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c1c:	4a22      	ldr	r2, [pc, #136]	@ (8000ca8 <MX_ADC1_Init+0xa0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c20:	4b20      	ldr	r3, [pc, #128]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c4a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6a:	480e      	ldr	r0, [pc, #56]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c6c:	f001 fafa 	bl	8002264 <HAL_ADC_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c76:	f000 fde7 	bl	8001848 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000c82:	2306      	movs	r3, #6
 8000c84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	@ (8000ca4 <MX_ADC1_Init+0x9c>)
 8000c8c:	f001 fc5c 	bl	8002548 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c96:	f000 fdd7 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a4 	.word	0x200000a4
 8000ca8:	40012000 	.word	0x40012000

08000cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8000d88 <HAL_ADC_MspInit+0xdc>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d157      	bne.n	8000d7e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a26      	ldr	r2, [pc, #152]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_ADC_MspInit+0xe0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d06:	2302      	movs	r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	481d      	ldr	r0, [pc, #116]	@ (8000d90 <HAL_ADC_MspInit+0xe4>)
 8000d1a:	f002 fb37 	bl	800338c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d20:	4a1d      	ldr	r2, [pc, #116]	@ (8000d98 <HAL_ADC_MspInit+0xec>)
 8000d22:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d62:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d64:	f001 ffa2 	bl	8002cac <HAL_DMA_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d6e:	f000 fd6b 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a07      	ldr	r2, [pc, #28]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d76:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <HAL_ADC_MspInit+0xe8>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40012000 	.word	0x40012000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	200000ec 	.word	0x200000ec
 8000d98:	40026410 	.word	0x40026410

08000d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a1a      	ldr	r2, [pc, #104]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000dac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a13      	ldr	r2, [pc, #76]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000dc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_DMA_Init+0x78>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	200e      	movs	r0, #14
 8000de0:	f001 ff2d 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de4:	200e      	movs	r0, #14
 8000de6:	f001 ff46 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	200f      	movs	r0, #15
 8000df0:	f001 ff25 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000df4:	200f      	movs	r0, #15
 8000df6:	f001 ff3e 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2038      	movs	r0, #56	@ 0x38
 8000e00:	f001 ff1d 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e04:	2038      	movs	r0, #56	@ 0x38
 8000e06:	f001 ff36 	bl	8002c76 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b78      	ldr	r3, [pc, #480]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a77      	ldr	r2, [pc, #476]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b75      	ldr	r3, [pc, #468]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	4b71      	ldr	r3, [pc, #452]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a70      	ldr	r2, [pc, #448]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a69      	ldr	r2, [pc, #420]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b67      	ldr	r3, [pc, #412]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b63      	ldr	r3, [pc, #396]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a62      	ldr	r2, [pc, #392]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b60      	ldr	r3, [pc, #384]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b59      	ldr	r3, [pc, #356]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b55      	ldr	r3, [pc, #340]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a54      	ldr	r2, [pc, #336]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b52      	ldr	r3, [pc, #328]	@ (8001014 <MX_GPIO_Init+0x1fc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2108      	movs	r1, #8
 8000eda:	484f      	ldr	r0, [pc, #316]	@ (8001018 <MX_GPIO_Init+0x200>)
 8000edc:	f002 fbf2 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	484d      	ldr	r0, [pc, #308]	@ (800101c <MX_GPIO_Init+0x204>)
 8000ee6:	f002 fbed 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eea:	2200      	movs	r2, #0
 8000eec:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ef0:	484b      	ldr	r0, [pc, #300]	@ (8001020 <MX_GPIO_Init+0x208>)
 8000ef2:	f002 fbe7 	bl	80036c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4842      	ldr	r0, [pc, #264]	@ (8001018 <MX_GPIO_Init+0x200>)
 8000f0e:	f002 fa3d 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f12:	2301      	movs	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	483c      	ldr	r0, [pc, #240]	@ (800101c <MX_GPIO_Init+0x204>)
 8000f2a:	f002 fa2f 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f32:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4838      	ldr	r0, [pc, #224]	@ (8001024 <MX_GPIO_Init+0x20c>)
 8000f44:	f002 fa22 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4832      	ldr	r0, [pc, #200]	@ (8001024 <MX_GPIO_Init+0x20c>)
 8000f5c:	f002 fa16 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f60:	2304      	movs	r3, #4
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	482d      	ldr	r0, [pc, #180]	@ (8001028 <MX_GPIO_Init+0x210>)
 8000f74:	f002 fa0a 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f78:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000f7c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4823      	ldr	r0, [pc, #140]	@ (8001020 <MX_GPIO_Init+0x208>)
 8000f92:	f002 f9fb 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f96:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa8:	2306      	movs	r3, #6
 8000faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481a      	ldr	r0, [pc, #104]	@ (800101c <MX_GPIO_Init+0x204>)
 8000fb4:	f002 f9ea 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4815      	ldr	r0, [pc, #84]	@ (8001020 <MX_GPIO_Init+0x208>)
 8000fcc:	f002 f9de 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fd0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fd6:	2312      	movs	r3, #18
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	4619      	mov	r1, r3
 8000fec:	480e      	ldr	r0, [pc, #56]	@ (8001028 <MX_GPIO_Init+0x210>)
 8000fee:	f002 f9cd 	bl	800338c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ff6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4804      	ldr	r0, [pc, #16]	@ (8001018 <MX_GPIO_Init+0x200>)
 8001008:	f002 f9c0 	bl	800338c <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	@ 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40021000 	.word	0x40021000
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400

0800102c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_I2C3_Init+0x50>)
 8001032:	4a13      	ldr	r2, [pc, #76]	@ (8001080 <MX_I2C3_Init+0x54>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_I2C3_Init+0x50>)
 8001038:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <MX_I2C3_Init+0x58>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_I2C3_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_I2C3_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_I2C3_Init+0x50>)
 800104a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800104e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_I2C3_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001056:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_I2C3_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <MX_I2C3_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001062:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_I2C3_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	@ (800107c <MX_I2C3_Init+0x50>)
 800106a:	f004 fc93 	bl	8005994 <HAL_I2C_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001074:	f000 fbe8 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000014c 	.word	0x2000014c
 8001080:	40005c00 	.word	0x40005c00
 8001084:	000186a0 	.word	0x000186a0

08001088 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	@ 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a29      	ldr	r2, [pc, #164]	@ (800114c <HAL_I2C_MspInit+0xc4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d14b      	bne.n	8001142 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a27      	ldr	r2, [pc, #156]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a20      	ldr	r2, [pc, #128]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e8:	2312      	movs	r3, #18
 80010ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f0:	2303      	movs	r3, #3
 80010f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010f4:	2304      	movs	r3, #4
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4815      	ldr	r0, [pc, #84]	@ (8001154 <HAL_I2C_MspInit+0xcc>)
 8001100:	f002 f944 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001116:	2304      	movs	r3, #4
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	480d      	ldr	r0, [pc, #52]	@ (8001158 <HAL_I2C_MspInit+0xd0>)
 8001122:	f002 f933 	bl	800338c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112e:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 8001130:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_I2C_MspInit+0xc8>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	@ 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40005c00 	.word	0x40005c00
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000

0800115c <MX_I2S2_Init>:
DMA_HandleTypeDef hdma_i2s2_ext_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001160:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001162:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <MX_I2S2_Init+0x58>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800116c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001174:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001176:	2203      	movs	r2, #3
 8001178:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <MX_I2S2_Init+0x54>)
 800117c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001180:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001184:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001188:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_I2S2_Init+0x54>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_I2S2_Init+0x54>)
 8001198:	2201      	movs	r2, #1
 800119a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_I2S2_Init+0x54>)
 800119e:	f005 fc1d 	bl	80069dc <HAL_I2S_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80011a8:	f000 fb4e 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200001a0 	.word	0x200001a0
 80011b4:	40003800 	.word	0x40003800

080011b8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08e      	sub	sp, #56	@ 0x38
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a6f      	ldr	r2, [pc, #444]	@ (80013a0 <HAL_I2S_MspInit+0x1e8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	f040 80d7 	bne.w	8001398 <HAL_I2S_MspInit+0x1e0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 80011ee:	2360      	movs	r3, #96	@ 0x60
 80011f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4618      	mov	r0, r3
 80011fc:	f006 ff2a 	bl	8008054 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001206:	f000 fb1f 	bl	8001848 <Error_Handler>
    }

    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	4b65      	ldr	r3, [pc, #404]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	4a64      	ldr	r2, [pc, #400]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001218:	6413      	str	r3, [r2, #64]	@ 0x40
 800121a:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b5e      	ldr	r3, [pc, #376]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a5d      	ldr	r2, [pc, #372]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b5b      	ldr	r3, [pc, #364]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a56      	ldr	r2, [pc, #344]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <HAL_I2S_MspInit+0x1ec>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S2_WS
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|GPIO_PIN_15;
 800125e:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001270:	2305      	movs	r3, #5
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	484b      	ldr	r0, [pc, #300]	@ (80013a8 <HAL_I2S_MspInit+0x1f0>)
 800127c:	f002 f886 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001280:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001292:	2306      	movs	r3, #6
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4842      	ldr	r0, [pc, #264]	@ (80013a8 <HAL_I2S_MspInit+0x1f0>)
 800129e:	f002 f875 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012a2:	2340      	movs	r3, #64	@ 0x40
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b2:	2305      	movs	r3, #5
 80012b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	483b      	ldr	r0, [pc, #236]	@ (80013ac <HAL_I2S_MspInit+0x1f4>)
 80012be:	f002 f865 	bl	800338c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80012c2:	4b3b      	ldr	r3, [pc, #236]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012c4:	4a3b      	ldr	r2, [pc, #236]	@ (80013b4 <HAL_I2S_MspInit+0x1fc>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80012c8:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012ca:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80012ce:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012d0:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d6:	4b36      	ldr	r3, [pc, #216]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012dc:	4b34      	ldr	r3, [pc, #208]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e4:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ec:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 80012fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001302:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800130a:	4829      	ldr	r0, [pc, #164]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 800130c:	f001 fcce 	bl	8002cac <HAL_DMA_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001316:	f000 fa97 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_i2s2_ext_rx);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 800131e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001320:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <HAL_I2S_MspInit+0x1f8>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001328:	4a24      	ldr	r2, [pc, #144]	@ (80013bc <HAL_I2S_MspInit+0x204>)
 800132a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001334:	2240      	movs	r2, #64	@ 0x40
 8001336:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001340:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800134c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800135c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001360:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001364:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800136c:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 800136e:	f001 fc9d 	bl	8002cac <HAL_DMA_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001378:	f000 fa66 	bl	8001848 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001380:	639a      	str	r2, [r3, #56]	@ 0x38
 8001382:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_I2S_MspInit+0x200>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2024      	movs	r0, #36	@ 0x24
 800138e:	f001 fc56 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001392:	2024      	movs	r0, #36	@ 0x24
 8001394:	f001 fc6f 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001398:	bf00      	nop
 800139a:	3738      	adds	r7, #56	@ 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40003800 	.word	0x40003800
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	200001e8 	.word	0x200001e8
 80013b4:	40026058 	.word	0x40026058
 80013b8:	20000248 	.word	0x20000248
 80013bc:	40026070 	.word	0x40026070

080013c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80013e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013e8:	e000      	b.n	80013ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80013ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f9      	beq.n	80013ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001400:	687b      	ldr	r3, [r7, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE BEGIN 0 */
// === DMA callbacks ===

// FOR DOUBLE BUFFERING
// Half complete buffer
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8001418:	4b04      	ldr	r3, [pc, #16]	@ (800142c <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	200002a8 	.word	0x200002a8

08001430 <HAL_I2SEx_TxRxCpltCallback>:

// Fully complete buffer
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	200002a8 	.word	0x200002a8

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001456:	f000 fe6f 	bl	8002138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145a:	f000 f96f 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145e:	f7ff fcdb 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8001462:	f7ff fc9b 	bl	8000d9c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001466:	f000 fd71 	bl	8001f4c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800146a:	f000 fa77 	bl	800195c <MX_SPI1_Init>
  MX_I2C3_Init();
 800146e:	f7ff fddd 	bl	800102c <MX_I2C3_Init>
  MX_USB_HOST_Init();
 8001472:	f00b fa77 	bl	800c964 <MX_USB_HOST_Init>
  MX_I2S2_Init();
 8001476:	f7ff fe71 	bl	800115c <MX_I2S2_Init>
  MX_ADC1_Init();
 800147a:	f7ff fbc5 	bl	8000c08 <MX_ADC1_Init>
  MX_TIM2_Init();
 800147e:	f000 fc0f 	bl	8001ca0 <MX_TIM2_Init>
  // Initialize overdrive
  // 41.6kHz Fs
  // 800Hz HPF input stage
  // 4000Hz LPF output stage
  // See OD_GAIN defined in user defines
  Overdrive_Init(&od, 41666.0f, 800.0f, 4000.0f, OD_GAIN);
 8001482:	eddf 1a9a 	vldr	s3, [pc, #616]	@ 80016ec <main+0x29c>
 8001486:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 80016f0 <main+0x2a0>
 800148a:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 80016f4 <main+0x2a4>
 800148e:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80016f8 <main+0x2a8>
 8001492:	489a      	ldr	r0, [pc, #616]	@ (80016fc <main+0x2ac>)
 8001494:	f000 f9e0 	bl	8001858 <Overdrive_Init>

  // Initialize Tremolo
  Tremolo_Init(&tr, 41666.0f, TR_RATE, TR_DEPTH);
 8001498:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800149c:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80014a0:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80016f8 <main+0x2a8>
 80014a4:	4896      	ldr	r0, [pc, #600]	@ (8001700 <main+0x2b0>)
 80014a6:	f000 fc8d 	bl	8001dc4 <Tremolo_Init>

  // Initialize I2S DMA
  HAL_I2SEx_TransmitReceive_DMA (&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 80014aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014ae:	4a95      	ldr	r2, [pc, #596]	@ (8001704 <main+0x2b4>)
 80014b0:	4995      	ldr	r1, [pc, #596]	@ (8001708 <main+0x2b8>)
 80014b2:	4896      	ldr	r0, [pc, #600]	@ (800170c <main+0x2bc>)
 80014b4:	f005 fcd0 	bl	8006e58 <HAL_I2SEx_TransmitReceive_DMA>
  int offset_r_ptr;
  int offset_w_ptr, w_ptr;

  // Initialize pot ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcControlData, 1);
 80014b8:	4b95      	ldr	r3, [pc, #596]	@ (8001710 <main+0x2c0>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4619      	mov	r1, r3
 80014c0:	4894      	ldr	r0, [pc, #592]	@ (8001714 <main+0x2c4>)
 80014c2:	f000 ff13 	bl	80022ec <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 80014c6:	4894      	ldr	r0, [pc, #592]	@ (8001718 <main+0x2c8>)
 80014c8:	f006 ffdc 	bl	8008484 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("ADC data: %d\n", adcControlData);
 80014cc:	4b90      	ldr	r3, [pc, #576]	@ (8001710 <main+0x2c0>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	4892      	ldr	r0, [pc, #584]	@ (800171c <main+0x2cc>)
 80014d4:	f00b fef0 	bl	800d2b8 <iprintf>
	  if (callback_state != 0) {
 80014d8:	4b91      	ldr	r3, [pc, #580]	@ (8001720 <main+0x2d0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8101 	beq.w	80016e4 <main+0x294>

		  // decide if it was half or cplt callback
		  if (callback_state == 1)   {
 80014e2:	4b8f      	ldr	r3, [pc, #572]	@ (8001720 <main+0x2d0>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d106      	bne.n	80014f8 <main+0xa8>
			  	  offset_r_ptr = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  	  offset_w_ptr = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			  	  w_ptr = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f6:	e00a      	b.n	800150e <main+0xbe>
			  	  // Set pointer to first half of DMA
			  }

		  else if (callback_state == 2) {
 80014f8:	4b89      	ldr	r3, [pc, #548]	@ (8001720 <main+0x2d0>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d106      	bne.n	800150e <main+0xbe>
			  offset_r_ptr = BLOCK_SIZE_U16;
 8001500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			  offset_w_ptr = BLOCK_SIZE_FLOAT;
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
			  w_ptr = BLOCK_SIZE_FLOAT;
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
			  // Set pointer to second half of DMA
		  }


		  //restore input sample buffer to float array
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	623b      	str	r3, [r7, #32]
 8001512:	e061      	b.n	80015d8 <main+0x188>

			  // Rebuild signed 24-bit sample from 16-bit rxBuf
			  int32_t sample_l = ((int32_t)(rxBuf[i] << 16) | (rxBuf[i + 1]));
 8001514:	4a7b      	ldr	r2, [pc, #492]	@ (8001704 <main+0x2b4>)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	3201      	adds	r2, #1
 8001522:	4978      	ldr	r1, [pc, #480]	@ (8001704 <main+0x2b4>)
 8001524:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

			  // Convert to float in range [-1.0f, 1.0f] for easier DSP
			  float sample_f_l = sample_l / 2147483648.0f;  // 2^31
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001536:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001724 <main+0x2d4>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc7 7a02 	vstr	s15, [r7, #8]

			  // Light up debug LED if this is somehow outside of range
			  if (sample_f_l > 1.0f | sample_f_l < -1.0f) {
 8001542:	edd7 7a02 	vldr	s15, [r7, #8]
 8001546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800154a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001552:	bfcc      	ite	gt
 8001554:	2301      	movgt	r3, #1
 8001556:	2300      	movle	r3, #0
 8001558:	b2da      	uxtb	r2, r3
 800155a:	edd7 7a02 	vldr	s15, [r7, #8]
 800155e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156a:	bf4c      	ite	mi
 800156c:	2301      	movmi	r3, #1
 800156e:	2300      	movpl	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d004      	beq.n	8001584 <main+0x134>
				  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800157a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800157e:	486a      	ldr	r0, [pc, #424]	@ (8001728 <main+0x2d8>)
 8001580:	f002 f8b9 	bl	80036f6 <HAL_GPIO_TogglePin>
			  }
			  l_buf_in[w_ptr] = sample_f_l;
 8001584:	4a69      	ldr	r2, [pc, #420]	@ (800172c <main+0x2dc>)
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	601a      	str	r2, [r3, #0]

			  // Repeat for right channel
			  int32_t sample_r = ((int32_t)(rxBuf[i + 2] << 16) | (rxBuf[i + 3]));
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	3302      	adds	r3, #2
 8001594:	4a5b      	ldr	r2, [pc, #364]	@ (8001704 <main+0x2b4>)
 8001596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159a:	041b      	lsls	r3, r3, #16
 800159c:	6a3a      	ldr	r2, [r7, #32]
 800159e:	3203      	adds	r2, #3
 80015a0:	4958      	ldr	r1, [pc, #352]	@ (8001704 <main+0x2b4>)
 80015a2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	607b      	str	r3, [r7, #4]
			  float sample_f_r = sample_r / 2147483648.0f;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b4:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001724 <main+0x2d4>
 80015b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015bc:	edc7 7a00 	vstr	s15, [r7]
			  r_buf_in[w_ptr] = sample_f_r;
 80015c0:	4a5b      	ldr	r2, [pc, #364]	@ (8001730 <main+0x2e0>)
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	601a      	str	r2, [r3, #0]


			  w_ptr++;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	3301      	adds	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	3304      	adds	r3, #4
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015da:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80015de:	6a3a      	ldr	r2, [r7, #32]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	dd97      	ble.n	8001514 <main+0xc4>
		  }


		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 80015e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	e028      	b.n	800163c <main+0x1ec>
//			  // Populate output buffer with overdrive-processed input buffer data
//			  l_buf_out[i] = Overdrive_Update(&od, l_buf_in[i])/32.0f; // 1/16 for appropriate amp-level volume
//			  r_buf_out[i] = Overdrive_Update(&od, r_buf_in[i])/32.0f;

			  // Populate output buffer with tremolo-processed input buffer data
			  l_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]); // 1/16 for appropriate amp-level volume
 80015ea:	4a50      	ldr	r2, [pc, #320]	@ (800172c <main+0x2dc>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	4841      	ldr	r0, [pc, #260]	@ (8001700 <main+0x2b0>)
 80015fc:	f000 fc0c 	bl	8001e18 <Tremolo_Update>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <main+0x2e4>)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	edc3 7a00 	vstr	s15, [r3]
			  r_buf_out[i] = Tremolo_Update(&tr, l_buf_in[i]);
 8001610:	4a46      	ldr	r2, [pc, #280]	@ (800172c <main+0x2dc>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	4837      	ldr	r0, [pc, #220]	@ (8001700 <main+0x2b0>)
 8001622:	f000 fbf9 	bl	8001e18 <Tremolo_Update>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	4a43      	ldr	r2, [pc, #268]	@ (8001738 <main+0x2e8>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=offset_w_ptr; i<offset_w_ptr+BLOCK_SIZE_FLOAT; i++) {
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3301      	adds	r3, #1
 800163a:	61fb      	str	r3, [r7, #28]
 800163c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163e:	337f      	adds	r3, #127	@ 0x7f
 8001640:	69fa      	ldr	r2, [r7, #28]
 8001642:	429a      	cmp	r2, r3
 8001644:	ddd1      	ble.n	80015ea <main+0x19a>
		  }

		  //restore processed float-array to output sample-buffer
		  w_ptr = offset_w_ptr;
 8001646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24

		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 800164a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	e040      	b.n	80016d2 <main+0x282>
			  int sample_out_l = (int)(l_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 8001650:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <main+0x2e4>)
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001724 <main+0x2d4>
 8001660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001668:	ee17 3a90 	vmov	r3, s15
 800166c:	617b      	str	r3, [r7, #20]
			  txBuf[i]   = (sample_out_l >> 16) & 0xFFFF;  // upper 16 bits
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	b299      	uxth	r1, r3
 8001674:	4a24      	ldr	r2, [pc, #144]	@ (8001708 <main+0x2b8>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+1] = sample_out_l & 0xFFFF;          // lower 16 bits
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	3301      	adds	r3, #1
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	b291      	uxth	r1, r2
 8001684:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <main+0x2b8>)
 8001686:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  int sample_out_r = (int)(r_buf_out[w_ptr] * 2147483648.0f);  // back to 24-bit signed
 800168a:	4a2b      	ldr	r2, [pc, #172]	@ (8001738 <main+0x2e8>)
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001724 <main+0x2d4>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a2:	ee17 3a90 	vmov	r3, s15
 80016a6:	613b      	str	r3, [r7, #16]
			  txBuf[i+2]   = (sample_out_r >> 16) & 0xFFFF;  // upper 16 bits
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	0c1a      	lsrs	r2, r3, #16
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	3302      	adds	r3, #2
 80016b0:	b291      	uxth	r1, r2
 80016b2:	4a15      	ldr	r2, [pc, #84]	@ (8001708 <main+0x2b8>)
 80016b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf[i+3] = sample_out_r & 0xFFFF;          // lower 16 bits
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	3303      	adds	r3, #3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	b291      	uxth	r1, r2
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <main+0x2b8>)
 80016c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  w_ptr++;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	3301      	adds	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
		  for (int i=offset_r_ptr; i<offset_r_ptr+BLOCK_SIZE_U16; i=i+4) {
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	3304      	adds	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d4:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	429a      	cmp	r2, r3
 80016dc:	ddb8      	ble.n	8001650 <main+0x200>
		  }

		  callback_state = 0;
 80016de:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <main+0x2d0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80016e4:	f00b f964 	bl	800c9b0 <MX_USB_HOST_Process>
	  printf("ADC data: %d\n", adcControlData);
 80016e8:	e6f0      	b.n	80014cc <main+0x7c>
 80016ea:	bf00      	nop
 80016ec:	42c80000 	.word	0x42c80000
 80016f0:	457a0000 	.word	0x457a0000
 80016f4:	44480000 	.word	0x44480000
 80016f8:	4722c200 	.word	0x4722c200
 80016fc:	200022ac 	.word	0x200022ac
 8001700:	200022fc 	.word	0x200022fc
 8001704:	200002ac 	.word	0x200002ac
 8001708:	20000aac 	.word	0x20000aac
 800170c:	200001a0 	.word	0x200001a0
 8001710:	200002aa 	.word	0x200002aa
 8001714:	200000a4 	.word	0x200000a4
 8001718:	2000236c 	.word	0x2000236c
 800171c:	0800e8ac 	.word	0x0800e8ac
 8001720:	200002a8 	.word	0x200002a8
 8001724:	4f000000 	.word	0x4f000000
 8001728:	40020c00 	.word	0x40020c00
 800172c:	200012ac 	.word	0x200012ac
 8001730:	200016ac 	.word	0x200016ac
 8001734:	20001aac 	.word	0x20001aac
 8001738:	20001eac 	.word	0x20001eac

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	@ 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00b fe09 	bl	800d362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a27      	ldr	r2, [pc, #156]	@ (8001808 <SystemClock_Config+0xcc>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <SystemClock_Config+0xcc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b22      	ldr	r3, [pc, #136]	@ (800180c <SystemClock_Config+0xd0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1f      	ldr	r3, [pc, #124]	@ (800180c <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017ac:	2308      	movs	r3, #8
 80017ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017b0:	2348      	movs	r3, #72	@ 0x48
 80017b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017b8:	2303      	movs	r3, #3
 80017ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f005 ffb1 	bl	8007728 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017cc:	f000 f83c 	bl	8001848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2102      	movs	r1, #2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 fa12 	bl	8007c18 <HAL_RCC_ClockConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017fa:	f000 f825 	bl	8001848 <Error_Handler>
  }
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	@ 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40007000 	.word	0x40007000

08001810 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e009      	b.n	8001836 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	60ba      	str	r2, [r7, #8]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdc8 	bl	80013c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	dbf1      	blt.n	8001822 <_write+0x12>
  }
  return len;
 800183e:	687b      	ldr	r3, [r7, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800184c:	b672      	cpsid	i
}
 800184e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <Error_Handler+0x8>
 8001854:	0000      	movs	r0, r0
	...

08001858 <Overdrive_Init>:
#include "overdrive.h"
#include <stdint.h>

void Overdrive_Init(Overdrive *od, float samplingFreqHz, float hpfCutoffFreqHz, float lpfCutoffFreqHz, float odPreGain) {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6178      	str	r0, [r7, #20]
 8001860:	ed87 0a04 	vstr	s0, [r7, #16]
 8001864:	edc7 0a03 	vstr	s1, [r7, #12]
 8001868:	ed87 1a02 	vstr	s2, [r7, #8]
 800186c:	edc7 1a01 	vstr	s3, [r7, #4]
    od->T = 1.0f / samplingFreqHz;
 8001870:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001874:	ed97 7a04 	vldr	s14, [r7, #16]
 8001878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	edc3 7a00 	vstr	s15, [r3]
    od->preGain = odPreGain;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	61da      	str	r2, [r3, #28]
    od->threshold = 1.0f/3.0f;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4a33      	ldr	r2, [pc, #204]	@ (8001958 <Overdrive_Init+0x100>)
 800188c:	621a      	str	r2, [r3, #32]
    // Input lpf
    od->hpfInpBufIn[0] = 0.0f; od->hpfInpBufIn[1] = 0.0f;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    od->hpfInpBufOut[0] = 0.0f; od->hpfInpBufOut[1] = 0.0f;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
    od->hpfInpWcT = 2.0f * M_PI * hpfCutoffFreqHz * od->T;
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7fe ff6c 	bl	800078c <__aeabi_f2d>
 80018b4:	a326      	add	r3, pc, #152	@ (adr r3, 8001950 <Overdrive_Init+0xf8>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fcd9 	bl	8000270 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4614      	mov	r4, r2
 80018c4:	461d      	mov	r5, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe ff5e 	bl	800078c <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcca 	bl	8000270 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7fe ffaa 	bl	800083c <__aeabi_d2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	615a      	str	r2, [r3, #20]
    od->hpfInpOut = 0.0f;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]

    // Output lpf
    od->lpfOutWcT = 2.0f * M_PI * lpfCutoffFreqHz * od->T;
 80018f6:	68b8      	ldr	r0, [r7, #8]
 80018f8:	f7fe ff48 	bl	800078c <__aeabi_f2d>
 80018fc:	a314      	add	r3, pc, #80	@ (adr r3, 8001950 <Overdrive_Init+0xf8>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fcb5 	bl	8000270 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4614      	mov	r4, r2
 800190c:	461d      	mov	r5, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe ff3a 	bl	800078c <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4620      	mov	r0, r4
 800191e:	4629      	mov	r1, r5
 8001920:	f7fe fca6 	bl	8000270 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7fe ff86 	bl	800083c <__aeabi_d2f>
 8001930:	4602      	mov	r2, r0
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40
    od->lpfOutDamp = 1.0f;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800193c:	645a      	str	r2, [r3, #68]	@ 0x44

    od->Q = -0.5;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001944:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bdb0      	pop	{r4, r5, r7, pc}
 800194e:	bf00      	nop
 8001950:	54442d18 	.word	0x54442d18
 8001954:	401921fb 	.word	0x401921fb
 8001958:	3eaaaaab 	.word	0x3eaaaaab

0800195c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001962:	4a18      	ldr	r2, [pc, #96]	@ (80019c4 <MX_SPI1_Init+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001968:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800196c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_SPI1_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001980:	4b0f      	ldr	r3, [pc, #60]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001994:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <MX_SPI1_Init+0x64>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_SPI1_Init+0x64>)
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019a0:	4b07      	ldr	r3, [pc, #28]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019a8:	220a      	movs	r2, #10
 80019aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	@ (80019c0 <MX_SPI1_Init+0x64>)
 80019ae:	f006 fc91 	bl	80082d4 <HAL_SPI_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b8:	f7ff ff46 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20002310 	.word	0x20002310
 80019c4:	40013000 	.word	0x40013000

080019c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <HAL_SPI_MspInit+0x84>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d12b      	bne.n	8001a42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b18      	ldr	r3, [pc, #96]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 80019f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a10      	ldr	r2, [pc, #64]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_SPI_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001a22:	23e0      	movs	r3, #224	@ 0xe0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a32:	2305      	movs	r3, #5
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <HAL_SPI_MspInit+0x8c>)
 8001a3e:	f001 fca5 	bl	800338c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40013000 	.word	0x40013000
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a96:	2007      	movs	r0, #7
 8001a98:	f001 f8c6 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40023800 	.word	0x40023800

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 fb6d 	bl	80021dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <DMA1_Stream3_IRQHandler+0x10>)
 8001b0e:	f001 f9d3 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	200001e8 	.word	0x200001e8

08001b1c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <DMA1_Stream4_IRQHandler+0x10>)
 8001b22:	f001 f9c9 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000248 	.word	0x20000248

08001b30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <SPI2_IRQHandler+0x10>)
 8001b36:	f005 f891 	bl	8006c5c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001a0 	.word	0x200001a0

08001b44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b48:	4802      	ldr	r0, [pc, #8]	@ (8001b54 <DMA2_Stream0_IRQHandler+0x10>)
 8001b4a:	f001 f9b5 	bl	8002eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000ec 	.word	0x200000ec

08001b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b5c:	4802      	ldr	r0, [pc, #8]	@ (8001b68 <OTG_FS_IRQHandler+0x10>)
 8001b5e:	f002 f8c5 	bl	8003cec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200027dc 	.word	0x200027dc

08001b6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e00a      	b.n	8001b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7e:	f3af 8000 	nop.w
 8001b82:	4601      	mov	r1, r0
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	60ba      	str	r2, [r7, #8]
 8001b8a:	b2ca      	uxtb	r2, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	3301      	adds	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	dbf0      	blt.n	8001b7e <_read+0x12>
  }

  return len;
 8001b9c:	687b      	ldr	r3, [r7, #4]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_isatty>:

int _isatty(int file)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c18:	4a14      	ldr	r2, [pc, #80]	@ (8001c6c <_sbrk+0x5c>)
 8001c1a:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <_sbrk+0x60>)
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d102      	bne.n	8001c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <_sbrk+0x64>)
 8001c2e:	4a12      	ldr	r2, [pc, #72]	@ (8001c78 <_sbrk+0x68>)
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d207      	bcs.n	8001c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c40:	f00b fbee 	bl	800d420 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	220c      	movs	r2, #12
 8001c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4e:	e009      	b.n	8001c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c56:	4b07      	ldr	r3, [pc, #28]	@ (8001c74 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <_sbrk+0x64>)
 8001c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20020000 	.word	0x20020000
 8001c70:	00000400 	.word	0x00000400
 8001c74:	20002368 	.word	0x20002368
 8001c78:	20002d08 	.word	0x20002d08

08001c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <SystemInit+0x20>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <SystemInit+0x20>)
 8001c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	@ 0x38
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001cd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3600-1;
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001cda:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001ce6:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001ce8:	2263      	movs	r2, #99	@ 0x63
 8001cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cf8:	4821      	ldr	r0, [pc, #132]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001cfa:	f006 fb74 	bl	80083e6 <HAL_TIM_Base_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d04:	f7ff fda0 	bl	8001848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d12:	4619      	mov	r1, r3
 8001d14:	481a      	ldr	r0, [pc, #104]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001d16:	f006 fd39 	bl	800878c <HAL_TIM_ConfigClockSource>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d20:	f7ff fd92 	bl	8001848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d24:	4816      	ldr	r0, [pc, #88]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001d26:	f006 fc15 	bl	8008554 <HAL_TIM_PWM_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d30:	f7ff fd8a 	bl	8001848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d34:	2320      	movs	r3, #32
 8001d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	4619      	mov	r1, r3
 8001d42:	480f      	ldr	r0, [pc, #60]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001d44:	f007 f8e0 	bl	8008f08 <HAL_TIMEx_MasterConfigSynchronization>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d4e:	f7ff fd7b 	bl	8001848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2360      	movs	r3, #96	@ 0x60
 8001d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <MX_TIM2_Init+0xe0>)
 8001d6a:	f006 fc4d 	bl	8008608 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d74:	f7ff fd68 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	3738      	adds	r7, #56	@ 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000236c 	.word	0x2000236c

08001d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d94:	d10d      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_TIM_Base_MspInit+0x3c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800

08001dc4 <Tremolo_Init>:
#include "tremolo.h"
#include <stdint.h>

void Tremolo_Init(Tremolo *tr, float samplingFreqHz, float rate, float depth) {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dd0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001dd4:	ed87 1a00 	vstr	s2, [r7]
	tr->T = 1.0f / samplingFreqHz;
 8001dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ddc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
	tr->rate = rate;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]
	tr->depth = depth;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	609a      	str	r2, [r3, #8]
	tr->phase = 0.0f;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	60da      	str	r2, [r3, #12]
	tr->out = 0.0f;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]

//	for (int i = 0; i < LFO_TABLE_SIZE; i++) {
//		tr->lfo_table[i] = 0.5f * tr->depth * sinf(2.0f * M_PI * (float)i / LFO_TABLE_SIZE) + 0.5f;
//	}
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	0000      	movs	r0, r0
 8001e14:	0000      	movs	r0, r0
	...

08001e18 <Tremolo_Update>:



float Tremolo_Update(Tremolo *tr, float inp) {
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	ed2d 8b02 	vpush	{d8}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	ed87 0a00 	vstr	s0, [r7]
	float lfo = 0.5f*tr->depth*sinf(2.0f*M_PI*tr->rate*tr->phase) + (1.0f - 0.5f*tr->depth);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e2e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001e32:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fca6 	bl	800078c <__aeabi_f2d>
 8001e40:	a340      	add	r3, pc, #256	@ (adr r3, 8001f44 <Tremolo_Update+0x12c>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe fa13 	bl	8000270 <__aeabi_dmul>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4614      	mov	r4, r2
 8001e50:	461d      	mov	r5, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fc98 	bl	800078c <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4620      	mov	r0, r4
 8001e62:	4629      	mov	r1, r5
 8001e64:	f7fe fa04 	bl	8000270 <__aeabi_dmul>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f7fe fce4 	bl	800083c <__aeabi_d2f>
 8001e74:	4603      	mov	r3, r0
 8001e76:	ee00 3a10 	vmov	s0, r3
 8001e7a:	f00b ffdb 	bl	800de34 <sinf>
 8001e7e:	eef0 7a40 	vmov.f32	s15, s0
 8001e82:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e8c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea0:	edc7 7a03 	vstr	s15, [r7, #12]
	tr->out = inp*lfo;
 8001ea4:	ed97 7a00 	vldr	s14, [r7]
 8001ea8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a04 	vstr	s15, [r3, #16]
	tr->phase += tr->T;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edc3 7a03 	vstr	s15, [r3, #12]

	if (tr->phase*tr->rate >= 1.0f) {
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	db03      	blt.n	8001ef2 <Tremolo_Update+0xda>
		tr->phase = 0.0f;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
	}

	// Ensure the signal is within -1f to 1f range
	if (tr->out > 1.0f) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ef8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd04      	ble.n	8001f10 <Tremolo_Update+0xf8>
		tr->out = 1.0f;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	e00c      	b.n	8001f2a <Tremolo_Update+0x112>
	} else if (tr->out < -1.0f) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f16:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d502      	bpl.n	8001f2a <Tremolo_Update+0x112>
		tr->out = -1.0f;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a06      	ldr	r2, [pc, #24]	@ (8001f40 <Tremolo_Update+0x128>)
 8001f28:	611a      	str	r2, [r3, #16]
	}

	return tr->out;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	ee07 3a90 	vmov	s15, r3
}
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	ecbd 8b02 	vpop	{d8}
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f40:	bf800000 	.word	0xbf800000
 8001f44:	54442d18 	.word	0x54442d18
 8001f48:	401921fb 	.word	0x401921fb

08001f4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f52:	4a12      	ldr	r2, [pc, #72]	@ (8001f9c <MX_USART3_UART_Init+0x50>)
 8001f54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f72:	220c      	movs	r2, #12
 8001f74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f76:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f82:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_USART3_UART_Init+0x4c>)
 8001f84:	f007 f83c 	bl	8009000 <HAL_UART_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f8e:	f7ff fc5b 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200023b4 	.word	0x200023b4
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	@ (8002064 <HAL_UART_MspInit+0xc4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d14b      	bne.n	800205a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4a27      	ldr	r2, [pc, #156]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd2:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a19      	ldr	r2, [pc, #100]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 8002004:	f043 0308 	orr.w	r3, r3, #8
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_UART_MspInit+0xc8>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB11     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800201a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002028:	2307      	movs	r3, #7
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <HAL_UART_MspInit+0xcc>)
 8002034:	f001 f9aa 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800203c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002046:	2303      	movs	r3, #3
 8002048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800204a:	2307      	movs	r3, #7
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	4619      	mov	r1, r3
 8002054:	4806      	ldr	r0, [pc, #24]	@ (8002070 <HAL_UART_MspInit+0xd0>)
 8002056:	f001 f999 	bl	800338c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800205a:	bf00      	nop
 800205c:	3728      	adds	r7, #40	@ 0x28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40004800 	.word	0x40004800
 8002068:	40023800 	.word	0x40023800
 800206c:	40020400 	.word	0x40020400
 8002070:	40020c00 	.word	0x40020c00

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002078:	f7ff fe00 	bl	8001c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800207c:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207e:	490d      	ldr	r1, [pc, #52]	@ (80020b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002080:	4a0d      	ldr	r2, [pc, #52]	@ (80020b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002094:	4c0a      	ldr	r4, [pc, #40]	@ (80020c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020a2:	f00b f9c3 	bl	800d42c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7ff f9d3 	bl	8001450 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020b8:	0800ecf4 	.word	0x0800ecf4
  ldr r2, =_sbss
 80020bc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020c0:	20002d08 	.word	0x20002d08

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>

080020c6 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80020dc:	f000 f804 	bl	80020e8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <HAL_I2S_ErrorCallback+0x2c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002116:	f7ff ffd6 	bl	80020c6 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <HAL_I2S_ErrorCallback+0x30>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d101      	bne.n	8002128 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8002124:	f7ff ffe7 	bl	80020f6 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40003c00 	.word	0x40003c00
 8002134:	40003800 	.word	0x40003800

08002138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_Init+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_Init+0x40>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_Init+0x40>)
 800214e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_Init+0x40>)
 800215a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800215e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 fd61 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f808 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7ff fc74 	bl	8001a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x54>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x58>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002192:	fbb3 f3f1 	udiv	r3, r3, r1
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fd79 	bl	8002c92 <HAL_SYSTICK_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e00e      	b.n	80021c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d80a      	bhi.n	80021c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b0:	2200      	movs	r2, #0
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	f000 fd41 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021bc:	4a06      	ldr	r2, [pc, #24]	@ (80021d8 <HAL_InitTick+0x5c>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008
 8002200:	200023fc 	.word	0x200023fc

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	200023fc 	.word	0x200023fc

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff ffee 	bl	8002204 <HAL_GetTick>
 8002228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4413      	add	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002242:	bf00      	nop
 8002244:	f7ff ffde 	bl	8002204 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000008 	.word	0x20000008

08002264 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e033      	b.n	80022e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fd12 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022aa:	f023 0302 	bic.w	r3, r3, #2
 80022ae:	f043 0202 	orr.w	r2, r3, #2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fa68 	bl	800278c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	f023 0303 	bic.w	r3, r3, #3
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_Start_DMA+0x1e>
 8002306:	2302      	movs	r3, #2
 8002308:	e0e9      	b.n	80024de <HAL_ADC_Start_DMA+0x1f2>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d018      	beq.n	8002352 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002330:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <HAL_ADC_Start_DMA+0x1fc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6d      	ldr	r2, [pc, #436]	@ (80024ec <HAL_ADC_Start_DMA+0x200>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9a      	lsrs	r2, r3, #18
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002344:	e002      	b.n	800234c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3b01      	subs	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f9      	bne.n	8002346 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002360:	d107      	bne.n	8002372 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002370:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 80a1 	bne.w	80024c4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c0:	d106      	bne.n	80023d0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	f023 0206 	bic.w	r2, r3, #6
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80023ce:	e002      	b.n	80023d6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023de:	4b44      	ldr	r3, [pc, #272]	@ (80024f0 <HAL_ADC_Start_DMA+0x204>)
 80023e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e6:	4a43      	ldr	r2, [pc, #268]	@ (80024f4 <HAL_ADC_Start_DMA+0x208>)
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ee:	4a42      	ldr	r2, [pc, #264]	@ (80024f8 <HAL_ADC_Start_DMA+0x20c>)
 80023f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f6:	4a41      	ldr	r2, [pc, #260]	@ (80024fc <HAL_ADC_Start_DMA+0x210>)
 80023f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002402:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002412:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002422:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	334c      	adds	r3, #76	@ 0x4c
 800242e:	4619      	mov	r1, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f000 fce8 	bl	8002e08 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2b00      	cmp	r3, #0
 8002442:	d12a      	bne.n	800249a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a2d      	ldr	r2, [pc, #180]	@ (8002500 <HAL_ADC_Start_DMA+0x214>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d015      	beq.n	800247a <HAL_ADC_Start_DMA+0x18e>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2c      	ldr	r2, [pc, #176]	@ (8002504 <HAL_ADC_Start_DMA+0x218>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d105      	bne.n	8002464 <HAL_ADC_Start_DMA+0x178>
 8002458:	4b25      	ldr	r3, [pc, #148]	@ (80024f0 <HAL_ADC_Start_DMA+0x204>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a27      	ldr	r2, [pc, #156]	@ (8002508 <HAL_ADC_Start_DMA+0x21c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d136      	bne.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_ADC_Start_DMA+0x204>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d130      	bne.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d129      	bne.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	e020      	b.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a18      	ldr	r2, [pc, #96]	@ (8002500 <HAL_ADC_Start_DMA+0x214>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d11b      	bne.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d114      	bne.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	e00b      	b.n	80024dc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f043 0210 	orr.w	r2, r3, #16
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d4:	f043 0201 	orr.w	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000000 	.word	0x20000000
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	40012300 	.word	0x40012300
 80024f4:	08002985 	.word	0x08002985
 80024f8:	08002a3f 	.word	0x08002a3f
 80024fc:	08002a5b 	.word	0x08002a5b
 8002500:	40012000 	.word	0x40012000
 8002504:	40012100 	.word	0x40012100
 8002508:	40012200 	.word	0x40012200

0800250c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1c>
 8002560:	2302      	movs	r3, #2
 8002562:	e105      	b.n	8002770 <HAL_ADC_ConfigChannel+0x228>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b09      	cmp	r3, #9
 8002572:	d925      	bls.n	80025c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	3b1e      	subs	r3, #30
 800258a:	2207      	movs	r2, #7
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43da      	mvns	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	400a      	ands	r2, r1
 8002598:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68d9      	ldr	r1, [r3, #12]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	4603      	mov	r3, r0
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4403      	add	r3, r0
 80025b2:	3b1e      	subs	r3, #30
 80025b4:	409a      	lsls	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	e022      	b.n	8002606 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6919      	ldr	r1, [r3, #16]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	4613      	mov	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	2207      	movs	r2, #7
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	400a      	ands	r2, r1
 80025e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6919      	ldr	r1, [r3, #16]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4403      	add	r3, r0
 80025fc:	409a      	lsls	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d824      	bhi.n	8002658 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	3b05      	subs	r3, #5
 8002620:	221f      	movs	r2, #31
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	400a      	ands	r2, r1
 800262e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3b05      	subs	r3, #5
 800264a:	fa00 f203 	lsl.w	r2, r0, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	635a      	str	r2, [r3, #52]	@ 0x34
 8002656:	e04c      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2b0c      	cmp	r3, #12
 800265e:	d824      	bhi.n	80026aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b23      	subs	r3, #35	@ 0x23
 8002672:	221f      	movs	r2, #31
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43da      	mvns	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	400a      	ands	r2, r1
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4618      	mov	r0, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b23      	subs	r3, #35	@ 0x23
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80026a8:	e023      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	3b41      	subs	r3, #65	@ 0x41
 80026bc:	221f      	movs	r2, #31
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	400a      	ands	r2, r1
 80026ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b41      	subs	r3, #65	@ 0x41
 80026e6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <HAL_ADC_ConfigChannel+0x234>)
 80026f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_ADC_ConfigChannel+0x238>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1cc>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b12      	cmp	r3, #18
 8002706:	d105      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a19      	ldr	r2, [pc, #100]	@ (8002780 <HAL_ADC_ConfigChannel+0x238>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d123      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d003      	beq.n	800272e <HAL_ADC_ConfigChannel+0x1e6>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b11      	cmp	r3, #17
 800272c:	d11b      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d111      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <HAL_ADC_ConfigChannel+0x23c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	@ (8002788 <HAL_ADC_ConfigChannel+0x240>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9a      	lsrs	r2, r3, #18
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002758:	e002      	b.n	8002760 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f9      	bne.n	800275a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40012300 	.word	0x40012300
 8002780:	40012000 	.word	0x40012000
 8002784:	20000000 	.word	0x20000000
 8002788:	431bde83 	.word	0x431bde83

0800278c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002794:	4b79      	ldr	r3, [pc, #484]	@ (800297c <ADC_Init+0x1f0>)
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	021a      	lsls	r2, r3, #8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <ADC_Init+0x1f4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d022      	beq.n	800286a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002832:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002854:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6899      	ldr	r1, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e00f      	b.n	800288a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002888:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0202 	bic.w	r2, r2, #2
 8002898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6899      	ldr	r1, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
 80028a4:	005a      	lsls	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01b      	beq.n	80028f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	3b01      	subs	r3, #1
 80028e4:	035a      	lsls	r2, r3, #13
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e007      	b.n	8002900 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800290e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	3b01      	subs	r3, #1
 800291c:	051a      	lsls	r2, r3, #20
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002934:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002942:	025a      	lsls	r2, r3, #9
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800295a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	029a      	lsls	r2, r3, #10
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40012300 	.word	0x40012300
 8002980:	0f000001 	.word	0x0f000001

08002984 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002990:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800299a:	2b00      	cmp	r3, #0
 800299c:	d13c      	bne.n	8002a18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d12b      	bne.n	8002a10 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d127      	bne.n	8002a10 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d119      	bne.n	8002a10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0220 	bic.w	r2, r2, #32
 80029ea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f043 0201 	orr.w	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fd7b 	bl	800250c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a16:	e00e      	b.n	8002a36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fd85 	bl	8002534 <HAL_ADC_ErrorCallback>
}
 8002a2a:	e004      	b.n	8002a36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f7ff fd67 	bl	8002520 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a66:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	@ 0x40
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fd5a 	bl	8002534 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <__NVIC_SetPriorityGrouping>:
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4907      	ldr	r1, [pc, #28]	@ (8002b24 <__NVIC_EnableIRQ+0x38>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	@ (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	@ (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	@ 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	@ 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff29 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff3e 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff31 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffa2 	bl	8002be4 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff faa4 	bl	8002204 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e099      	b.n	8002dfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce8:	e00f      	b.n	8002d0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cea:	f7ff fa8b 	bl	8002204 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d908      	bls.n	8002d0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e078      	b.n	8002dfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e8      	bne.n	8002cea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <HAL_DMA_Init+0x158>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0307 	bic.w	r3, r3, #7
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d117      	bne.n	8002dce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 fa6f 	bl	8003294 <DMA_CheckFifoParam>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2240      	movs	r2, #64	@ 0x40
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e016      	b.n	8002dfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa26 	bl	8003228 <DMA_CalcBaseAndBitshift>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de4:	223f      	movs	r2, #63	@ 0x3f
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	f010803f 	.word	0xf010803f

08002e08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_DMA_Start_IT+0x26>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e040      	b.n	8002eb0 <HAL_DMA_Start_IT+0xa8>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d12f      	bne.n	8002ea2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f9b8 	bl	80031cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e60:	223f      	movs	r2, #63	@ 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0216 	orr.w	r2, r2, #22
 8002e76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e005      	b.n	8002eae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8003100 <HAL_DMA_IRQHandler+0x248>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8003104 <HAL_DMA_IRQHandler+0x24c>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0a9b      	lsrs	r3, r3, #10
 8002ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	409a      	lsls	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01a      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0204 	bic.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f10:	2208      	movs	r2, #8
 8002f12:	409a      	lsls	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	2201      	movs	r2, #1
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f5e:	2204      	movs	r2, #4
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	f043 0204 	orr.w	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f94:	2210      	movs	r2, #16
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d043      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03c      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	2210      	movs	r2, #16
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d024      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
 8002fe6:	e01f      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01b      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
 8002ff8:	e016      	b.n	8003028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0208 	bic.w	r2, r2, #8
 8003016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302c:	2220      	movs	r2, #32
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4013      	ands	r3, r2
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 808f 	beq.w	8003158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8087 	beq.w	8003158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304e:	2220      	movs	r2, #32
 8003050:	409a      	lsls	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b05      	cmp	r3, #5
 8003060:	d136      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0216 	bic.w	r2, r2, #22
 8003070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <HAL_DMA_IRQHandler+0x1da>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0208 	bic.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	223f      	movs	r2, #63	@ 0x3f
 80030a8:	409a      	lsls	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d07e      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	4798      	blx	r3
        }
        return;
 80030ce:	e079      	b.n	80031c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d031      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	4798      	blx	r3
 80030fc:	e02c      	b.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
 80030fe:	bf00      	nop
 8003100:	20000000 	.word	0x20000000
 8003104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d023      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
 8003118:	e01e      	b.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0210 	bic.w	r2, r2, #16
 8003136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	2b00      	cmp	r3, #0
 800315e:	d032      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d022      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2205      	movs	r2, #5
 8003170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0201 	bic.w	r2, r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3301      	adds	r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	d307      	bcc.n	80031a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f2      	bne.n	8003184 <HAL_DMA_IRQHandler+0x2cc>
 800319e:	e000      	b.n	80031a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
 80031c2:	e000      	b.n	80031c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031c4:	bf00      	nop
    }
  }
}
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d108      	bne.n	800320c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800320a:	e007      	b.n	800321c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	60da      	str	r2, [r3, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3b10      	subs	r3, #16
 8003238:	4a14      	ldr	r2, [pc, #80]	@ (800328c <DMA_CalcBaseAndBitshift+0x64>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003242:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <DMA_CalcBaseAndBitshift+0x68>)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d909      	bls.n	800326a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	659a      	str	r2, [r3, #88]	@ 0x58
 8003268:	e007      	b.n	800327a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003272:	f023 0303 	bic.w	r3, r3, #3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	aaaaaaab 	.word	0xaaaaaaab
 8003290:	0800e8d8 	.word	0x0800e8d8

08003294 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11f      	bne.n	80032ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d856      	bhi.n	8003362 <DMA_CheckFifoParam+0xce>
 80032b4:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <DMA_CheckFifoParam+0x28>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032df 	.word	0x080032df
 80032c4:	080032cd 	.word	0x080032cd
 80032c8:	08003363 	.word	0x08003363
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d046      	beq.n	8003366 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e043      	b.n	8003366 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032e6:	d140      	bne.n	800336a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e03d      	b.n	800336a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f6:	d121      	bne.n	800333c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d837      	bhi.n	800336e <DMA_CheckFifoParam+0xda>
 80032fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003304 <DMA_CheckFifoParam+0x70>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	0800331b 	.word	0x0800331b
 800330c:	08003315 	.word	0x08003315
 8003310:	0800332d 	.word	0x0800332d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      break;
 8003318:	e030      	b.n	800337c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d025      	beq.n	8003372 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800332a:	e022      	b.n	8003372 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003334:	d11f      	bne.n	8003376 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800333a:	e01c      	b.n	8003376 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d903      	bls.n	800334a <DMA_CheckFifoParam+0xb6>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d003      	beq.n	8003350 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003348:	e018      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      break;
 800334e:	e015      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e00b      	b.n	800337a <DMA_CheckFifoParam+0xe6>
      break;
 8003362:	bf00      	nop
 8003364:	e00a      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003366:	bf00      	nop
 8003368:	e008      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
 800336c:	e006      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 8003372:	bf00      	nop
 8003374:	e002      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;   
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <DMA_CheckFifoParam+0xe8>
      break;
 800337a:	bf00      	nop
    }
  } 
  
  return status; 
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	@ 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	e16b      	b.n	8003680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033a8:	2201      	movs	r2, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f040 815a 	bne.w	800367a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d005      	beq.n	80033de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d130      	bne.n	8003440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003414:	2201      	movs	r2, #1
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 0201 	and.w	r2, r3, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b03      	cmp	r3, #3
 800344a:	d017      	beq.n	800347c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d123      	bne.n	80034d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	220f      	movs	r2, #15
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4313      	orrs	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	08da      	lsrs	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3208      	adds	r2, #8
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80b4 	beq.w	800367a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b60      	ldr	r3, [pc, #384]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	4a5f      	ldr	r2, [pc, #380]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003520:	6453      	str	r3, [r2, #68]	@ 0x44
 8003522:	4b5d      	ldr	r3, [pc, #372]	@ (8003698 <HAL_GPIO_Init+0x30c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800352e:	4a5b      	ldr	r2, [pc, #364]	@ (800369c <HAL_GPIO_Init+0x310>)
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3302      	adds	r3, #2
 8003536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	220f      	movs	r2, #15
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a52      	ldr	r2, [pc, #328]	@ (80036a0 <HAL_GPIO_Init+0x314>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_Init+0x226>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a51      	ldr	r2, [pc, #324]	@ (80036a4 <HAL_GPIO_Init+0x318>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_Init+0x222>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a50      	ldr	r2, [pc, #320]	@ (80036a8 <HAL_GPIO_Init+0x31c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_Init+0x21e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4f      	ldr	r2, [pc, #316]	@ (80036ac <HAL_GPIO_Init+0x320>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x21a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a4e      	ldr	r2, [pc, #312]	@ (80036b0 <HAL_GPIO_Init+0x324>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x216>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4d      	ldr	r2, [pc, #308]	@ (80036b4 <HAL_GPIO_Init+0x328>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x212>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4c      	ldr	r2, [pc, #304]	@ (80036b8 <HAL_GPIO_Init+0x32c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x20e>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4b      	ldr	r2, [pc, #300]	@ (80036bc <HAL_GPIO_Init+0x330>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x20a>
 8003592:	2307      	movs	r3, #7
 8003594:	e00e      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 8003596:	2308      	movs	r3, #8
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 800359a:	2306      	movs	r3, #6
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x228>
 80035b2:	2300      	movs	r3, #0
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c4:	4935      	ldr	r1, [pc, #212]	@ (800369c <HAL_GPIO_Init+0x310>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d2:	4b3b      	ldr	r3, [pc, #236]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f6:	4a32      	ldr	r2, [pc, #200]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035fc:	4b30      	ldr	r3, [pc, #192]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003620:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003626:	4b26      	ldr	r3, [pc, #152]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364a:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003650:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003674:	4a12      	ldr	r2, [pc, #72]	@ (80036c0 <HAL_GPIO_Init+0x334>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	f67f ae90 	bls.w	80033a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	@ 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	041a      	lsls	r2, r3, #16
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43d9      	mvns	r1, r3
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	400b      	ands	r3, r1
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	619a      	str	r2, [r3, #24]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af02      	add	r7, sp, #8
 8003730:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e059      	b.n	80037f0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f009 f962 	bl	800ca20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376a:	d102      	bne.n	8003772 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f005 ff7b 	bl	8009672 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c1a      	ldrb	r2, [r3, #16]
 8003784:	f88d 2000 	strb.w	r2, [sp]
 8003788:	3304      	adds	r3, #4
 800378a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378c:	f005 fefc 	bl	8009588 <USB_CoreInit>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e026      	b.n	80037f0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	4618      	mov	r0, r3
 80037aa:	f005 ff73 	bl	8009694 <USB_SetCurrentMode>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e017      	b.n	80037f0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	7c1a      	ldrb	r2, [r3, #16]
 80037c8:	f88d 2000 	strb.w	r2, [sp]
 80037cc:	3304      	adds	r3, #4
 80037ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d0:	f006 f916 	bl	8009a00 <USB_HostInit>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2202      	movs	r2, #2
 80037de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e004      	b.n	80037f0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80037f8:	b590      	push	{r4, r7, lr}
 80037fa:	b08b      	sub	sp, #44	@ 0x2c
 80037fc:	af04      	add	r7, sp, #16
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	70fb      	strb	r3, [r7, #3]
 800380a:	460b      	mov	r3, r1
 800380c:	70bb      	strb	r3, [r7, #2]
 800380e:	4613      	mov	r3, r2
 8003810:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003812:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003814:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_HCD_HC_Init+0x2c>
 8003820:	2302      	movs	r3, #2
 8003822:	e09d      	b.n	8003960 <HAL_HCD_HC_Init+0x168>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3319      	adds	r3, #25
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3314      	adds	r3, #20
 8003850:	787a      	ldrb	r2, [r7, #1]
 8003852:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3315      	adds	r3, #21
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3326      	adds	r3, #38	@ 0x26
 8003878:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800387c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	78bb      	ldrb	r3, [r7, #2]
 8003882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003886:	b2d8      	uxtb	r0, r3
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3316      	adds	r3, #22
 8003896:	4602      	mov	r2, r0
 8003898:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fbc8 	bl	8004034 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80038a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da0a      	bge.n	80038c2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	3317      	adds	r3, #23
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e009      	b.n	80038d6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3317      	adds	r3, #23
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 f9f4 	bl	8009cc8 <USB_GetHostSpeed>
 80038e0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80038e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10b      	bne.n	8003902 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80038ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_HCD_HC_Init+0x10a>
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80038fc:	d901      	bls.n	8003902 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80038fe:	23bc      	movs	r3, #188	@ 0xbc
 8003900:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3318      	adds	r3, #24
 8003912:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003916:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	b298      	uxth	r0, r3
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3328      	adds	r3, #40	@ 0x28
 800392c:	4602      	mov	r2, r0
 800392e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	b29b      	uxth	r3, r3
 8003938:	787c      	ldrb	r4, [r7, #1]
 800393a:	78ba      	ldrb	r2, [r7, #2]
 800393c:	78f9      	ldrb	r1, [r7, #3]
 800393e:	9302      	str	r3, [sp, #8]
 8003940:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4623      	mov	r3, r4
 800394e:	f006 f9e3 	bl	8009d18 <USB_HC_Init>
 8003952:	4603      	mov	r3, r0
 8003954:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd90      	pop	{r4, r7, pc}

08003968 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_HCD_HC_Halt+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e00f      	b.n	80039a6 <HAL_HCD_HC_Halt+0x3e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f006 fd75 	bl	800a486 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	4608      	mov	r0, r1
 80039ba:	4611      	mov	r1, r2
 80039bc:	461a      	mov	r2, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	460b      	mov	r3, r1
 80039c4:	70bb      	strb	r3, [r7, #2]
 80039c6:	4613      	mov	r3, r2
 80039c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	3317      	adds	r3, #23
 80039da:	78ba      	ldrb	r2, [r7, #2]
 80039dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3326      	adds	r3, #38	@ 0x26
 80039ee:	787a      	ldrb	r2, [r7, #1]
 80039f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039f2:	7c3b      	ldrb	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d114      	bne.n	8003a22 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	332a      	adds	r3, #42	@ 0x2a
 8003a08:	2203      	movs	r2, #3
 8003a0a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3319      	adds	r3, #25
 8003a1c:	7f3a      	ldrb	r2, [r7, #28]
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e009      	b.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	332a      	adds	r3, #42	@ 0x2a
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a36:	787b      	ldrb	r3, [r7, #1]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	f200 8102 	bhi.w	8003c42 <HAL_HCD_HC_SubmitRequest+0x292>
 8003a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a44 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003c2d 	.word	0x08003c2d
 8003a4c:	08003b19 	.word	0x08003b19
 8003a50:	08003ba3 	.word	0x08003ba3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a54:	7c3b      	ldrb	r3, [r7, #16]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	f040 80f5 	bne.w	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003a5c:	78bb      	ldrb	r3, [r7, #2]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d12d      	bne.n	8003abe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a62:	8b3b      	ldrh	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	333d      	adds	r3, #61	@ 0x3d
 8003a78:	2201      	movs	r2, #1
 8003a7a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	333d      	adds	r3, #61	@ 0x3d
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	332a      	adds	r3, #42	@ 0x2a
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003aa6:	e0ce      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	332a      	adds	r3, #42	@ 0x2a
 8003ab8:	2202      	movs	r2, #2
 8003aba:	701a      	strb	r2, [r3, #0]
      break;
 8003abc:	e0c3      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	331a      	adds	r3, #26
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 80b8 	bne.w	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	333c      	adds	r3, #60	@ 0x3c
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	440b      	add	r3, r1
 8003afa:	332a      	adds	r3, #42	@ 0x2a
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
      break;
 8003b00:	e0a1      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	332a      	adds	r3, #42	@ 0x2a
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
      break;
 8003b16:	e096      	b.n	8003c46 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b18:	78bb      	ldrb	r3, [r7, #2]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d120      	bne.n	8003b60 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	333d      	adds	r3, #61	@ 0x3d
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	332a      	adds	r3, #42	@ 0x2a
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b48:	e07e      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	332a      	adds	r3, #42	@ 0x2a
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	701a      	strb	r2, [r3, #0]
      break;
 8003b5e:	e073      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	333c      	adds	r3, #60	@ 0x3c
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	332a      	adds	r3, #42	@ 0x2a
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
      break;
 8003b8a:	e05d      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	332a      	adds	r3, #42	@ 0x2a
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	701a      	strb	r2, [r3, #0]
      break;
 8003ba0:	e052      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003ba2:	78bb      	ldrb	r3, [r7, #2]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d120      	bne.n	8003bea <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333d      	adds	r3, #61	@ 0x3d
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	332a      	adds	r3, #42	@ 0x2a
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bd2:	e039      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	332a      	adds	r3, #42	@ 0x2a
 8003be4:	2202      	movs	r2, #2
 8003be6:	701a      	strb	r2, [r3, #0]
      break;
 8003be8:	e02e      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	333c      	adds	r3, #60	@ 0x3c
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	332a      	adds	r3, #42	@ 0x2a
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
      break;
 8003c14:	e018      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c16:	78fa      	ldrb	r2, [r7, #3]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	332a      	adds	r3, #42	@ 0x2a
 8003c26:	2202      	movs	r2, #2
 8003c28:	701a      	strb	r2, [r3, #0]
      break;
 8003c2a:	e00d      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	332a      	adds	r3, #42	@ 0x2a
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
      break;
 8003c40:	e002      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003c46:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	332c      	adds	r3, #44	@ 0x2c
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	8b39      	ldrh	r1, [r7, #24]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4403      	add	r3, r0
 8003c6c:	3334      	adds	r3, #52	@ 0x34
 8003c6e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	334c      	adds	r3, #76	@ 0x4c
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	3338      	adds	r3, #56	@ 0x38
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3315      	adds	r3, #21
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	334d      	adds	r3, #77	@ 0x4d
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3310      	adds	r3, #16
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	1d19      	adds	r1, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	799b      	ldrb	r3, [r3, #6]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f006 f948 	bl	8009f70 <USB_HC_StartXfer>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop

08003cec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f005 fe3c 	bl	8009980 <USB_GetMode>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	f040 80fb 	bne.w	8003f06 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f005 fdff 	bl	8009918 <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 80f1 	beq.w	8003f04 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 fdf6 	bl	8009918 <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d36:	d104      	bne.n	8003d42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f005 fde6 	bl	8009918 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d56:	d104      	bne.n	8003d62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f005 fdd6 	bl	8009918 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d76:	d104      	bne.n	8003d82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f005 fdc6 	bl	8009918 <USB_ReadInterrupts>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d103      	bne.n	8003d9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f005 fdb8 	bl	8009918 <USB_ReadInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003db2:	d120      	bne.n	8003df6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003dbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d113      	bne.n	8003df6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003dce:	2110      	movs	r1, #16
 8003dd0:	6938      	ldr	r0, [r7, #16]
 8003dd2:	f005 fcab 	bl	800972c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003dd6:	6938      	ldr	r0, [r7, #16]
 8003dd8:	f005 fcda 	bl	8009790 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	7a5b      	ldrb	r3, [r3, #9]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d105      	bne.n	8003df0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 fecc 	bl	8009b88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f008 fe93 	bl	800cb1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f005 fd8c 	bl	8009918 <USB_ReadInterrupts>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e0a:	d102      	bne.n	8003e12 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f001 fd4d 	bl	80058ac <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f005 fd7e 	bl	8009918 <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d106      	bne.n	8003e34 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f008 fe5c 	bl	800cae4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2208      	movs	r2, #8
 8003e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f005 fd6d 	bl	8009918 <USB_ReadInterrupts>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e48:	d139      	bne.n	8003ebe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 fb08 	bl	800a464 <USB_HC_ReadInterrupt>
 8003e54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e025      	b.n	8003ea8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d018      	beq.n	8003ea2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e86:	d106      	bne.n	8003e96 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f905 	bl	800409e <HCD_HC_IN_IRQHandler>
 8003e94:	e005      	b.n	8003ea2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 ff67 	bl	8004d70 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	795b      	ldrb	r3, [r3, #5]
 8003eac:	461a      	mov	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d3d3      	bcc.n	8003e5c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f005 fd28 	bl	8009918 <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d101      	bne.n	8003ed6 <HAL_HCD_IRQHandler+0x1ea>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_HCD_IRQHandler+0x1ec>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d014      	beq.n	8003f06 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0210 	bic.w	r2, r2, #16
 8003eea:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 fbfe 	bl	80056ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0210 	orr.w	r2, r2, #16
 8003f00:	619a      	str	r2, [r3, #24]
 8003f02:	e000      	b.n	8003f06 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f04:	bf00      	nop
    }
  }
}
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_HCD_Start+0x16>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e013      	b.n	8003f4a <HAL_HCD_Start+0x3e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2101      	movs	r1, #1
 8003f30:	4618      	mov	r0, r3
 8003f32:	f005 fe90 	bl	8009c56 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 fb88 	bl	8009650 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_HCD_Stop+0x16>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e00d      	b.n	8003f84 <HAL_HCD_Stop+0x32>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f006 fbe3 	bl	800a740 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fe32 	bl	8009c02 <USB_ResetPort>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	334c      	adds	r3, #76	@ 0x4c
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003fde:	78fa      	ldrb	r2, [r7, #3]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3338      	adds	r3, #56	@ 0x38
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f005 fe74 	bl	8009cf6 <USB_GetCurrentFrame>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f005 fe4f 	bl	8009cc8 <USB_GetHostSpeed>
 800402a:	4603      	mov	r3, r0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	331a      	adds	r3, #26
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	331b      	adds	r3, #27
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3325      	adds	r3, #37	@ 0x25
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3324      	adds	r3, #36	@ 0x24
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f005 fc3e 	bl	800993e <USB_ReadChInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d11a      	bne.n	8004102 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d8:	461a      	mov	r2, r3
 80040da:	2304      	movs	r3, #4
 80040dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	334d      	adds	r3, #77	@ 0x4d
 80040ee:	2207      	movs	r2, #7
 80040f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f006 f9c3 	bl	800a486 <USB_HC_Halt>
 8004100:	e09e      	b.n	8004240 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f005 fc17 	bl	800993e <USB_ReadChInterrupts>
 8004110:	4603      	mov	r3, r0
 8004112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411a:	d11b      	bne.n	8004154 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004128:	461a      	mov	r2, r3
 800412a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800412e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334d      	adds	r3, #77	@ 0x4d
 8004140:	2208      	movs	r2, #8
 8004142:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f006 f99a 	bl	800a486 <USB_HC_Halt>
 8004152:	e075      	b.n	8004240 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f005 fbee 	bl	800993e <USB_ReadChInterrupts>
 8004162:	4603      	mov	r3, r0
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b08      	cmp	r3, #8
 800416a:	d11a      	bne.n	80041a2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004178:	461a      	mov	r2, r3
 800417a:	2308      	movs	r3, #8
 800417c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	334d      	adds	r3, #77	@ 0x4d
 800418e:	2206      	movs	r2, #6
 8004190:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f006 f973 	bl	800a486 <USB_HC_Halt>
 80041a0:	e04e      	b.n	8004240 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f005 fbc7 	bl	800993e <USB_ReadChInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ba:	d11b      	bne.n	80041f4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	334d      	adds	r3, #77	@ 0x4d
 80041e0:	2209      	movs	r2, #9
 80041e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f006 f94a 	bl	800a486 <USB_HC_Halt>
 80041f2:	e025      	b.n	8004240 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f005 fb9e 	bl	800993e <USB_ReadChInterrupts>
 8004202:	4603      	mov	r3, r0
 8004204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004208:	2b80      	cmp	r3, #128	@ 0x80
 800420a:	d119      	bne.n	8004240 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004218:	461a      	mov	r2, r3
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	334d      	adds	r3, #77	@ 0x4d
 800422e:	2207      	movs	r2, #7
 8004230:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f006 f923 	bl	800a486 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f005 fb78 	bl	800993e <USB_ReadChInterrupts>
 800424e:	4603      	mov	r3, r0
 8004250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004258:	d112      	bne.n	8004280 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f006 f90f 	bl	800a486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800427a:	6093      	str	r3, [r2, #8]
 800427c:	f000 bd75 	b.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f005 fb58 	bl	800993e <USB_ReadChInterrupts>
 800428e:	4603      	mov	r3, r0
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	f040 8128 	bne.w	80044ea <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a6:	461a      	mov	r2, r3
 80042a8:	2320      	movs	r3, #32
 80042aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	331b      	adds	r3, #27
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d119      	bne.n	80042f6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	331b      	adds	r3, #27
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	799b      	ldrb	r3, [r3, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3330      	adds	r3, #48	@ 0x30
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	1ac9      	subs	r1, r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4403      	add	r3, r0
 8004332:	3338      	adds	r3, #56	@ 0x38
 8004334:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	334d      	adds	r3, #77	@ 0x4d
 8004346:	2201      	movs	r2, #1
 8004348:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3344      	adds	r3, #68	@ 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436a:	461a      	mov	r2, r3
 800436c:	2301      	movs	r3, #1
 800436e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3326      	adds	r3, #38	@ 0x26
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3326      	adds	r3, #38	@ 0x26
 8004396:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004398:	2b02      	cmp	r3, #2
 800439a:	d110      	bne.n	80043be <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f006 f86e 	bl	800a486 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	2310      	movs	r3, #16
 80043ba:	6093      	str	r3, [r2, #8]
 80043bc:	e03d      	b.n	800443a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3326      	adds	r3, #38	@ 0x26
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d00a      	beq.n	80043ea <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3326      	adds	r3, #38	@ 0x26
 80043e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d127      	bne.n	800443a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	0151      	lsls	r1, r2, #5
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	440a      	add	r2, r1
 8004400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004404:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004408:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	334c      	adds	r3, #76	@ 0x4c
 800441a:	2201      	movs	r2, #1
 800441c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	334c      	adds	r3, #76	@ 0x4c
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f008 fb7f 	bl	800cb38 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	799b      	ldrb	r3, [r3, #6]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d13b      	bne.n	80044ba <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3338      	adds	r3, #56	@ 0x38
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4403      	add	r3, r0
 8004462:	3328      	adds	r3, #40	@ 0x28
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	440b      	add	r3, r1
 8004468:	1e59      	subs	r1, r3, #1
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4403      	add	r3, r0
 8004478:	3328      	adds	r3, #40	@ 0x28
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 8470 	beq.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	333c      	adds	r3, #60	@ 0x3c
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	f083 0301 	eor.w	r3, r3, #1
 80044a2:	b2d8      	uxtb	r0, r3
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	333c      	adds	r3, #60	@ 0x3c
 80044b2:	4602      	mov	r2, r0
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	f000 bc58 	b.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80044ba:	78fa      	ldrb	r2, [r7, #3]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	333c      	adds	r3, #60	@ 0x3c
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2d8      	uxtb	r0, r3
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	333c      	adds	r3, #60	@ 0x3c
 80044e2:	4602      	mov	r2, r0
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	f000 bc40 	b.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f005 fa23 	bl	800993e <USB_ReadChInterrupts>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d131      	bne.n	8004566 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450e:	461a      	mov	r2, r3
 8004510:	2320      	movs	r3, #32
 8004512:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	331a      	adds	r3, #26
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b01      	cmp	r3, #1
 8004528:	f040 841f 	bne.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	331b      	adds	r3, #27
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	334d      	adds	r3, #77	@ 0x4d
 8004550:	2203      	movs	r2, #3
 8004552:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f005 ff92 	bl	800a486 <USB_HC_Halt>
 8004562:	f000 bc02 	b.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f005 f9e5 	bl	800993e <USB_ReadChInterrupts>
 8004574:	4603      	mov	r3, r0
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	f040 8305 	bne.w	8004b8a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458c:	461a      	mov	r2, r3
 800458e:	2302      	movs	r3, #2
 8004590:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	334d      	adds	r3, #77	@ 0x4d
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d114      	bne.n	80045d2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	@ 0x4d
 80045b8:	2202      	movs	r2, #2
 80045ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	334c      	adds	r3, #76	@ 0x4c
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e2cc      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	334d      	adds	r3, #77	@ 0x4d
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b06      	cmp	r3, #6
 80045e6:	d114      	bne.n	8004612 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	334d      	adds	r3, #77	@ 0x4d
 80045f8:	2202      	movs	r2, #2
 80045fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	334c      	adds	r3, #76	@ 0x4c
 800460c:	2205      	movs	r2, #5
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e2ac      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	334d      	adds	r3, #77	@ 0x4d
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b07      	cmp	r3, #7
 8004626:	d00b      	beq.n	8004640 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	334d      	adds	r3, #77	@ 0x4d
 8004638:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800463a:	2b09      	cmp	r3, #9
 800463c:	f040 80a6 	bne.w	800478c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334d      	adds	r3, #77	@ 0x4d
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3344      	adds	r3, #68	@ 0x44
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4403      	add	r3, r0
 8004674:	3344      	adds	r3, #68	@ 0x44
 8004676:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	3344      	adds	r3, #68	@ 0x44
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b02      	cmp	r3, #2
 800468c:	d943      	bls.n	8004716 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3344      	adds	r3, #68	@ 0x44
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	331a      	adds	r3, #26
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d123      	bne.n	8004700 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	331b      	adds	r3, #27
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	331c      	adds	r3, #28
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334c      	adds	r3, #76	@ 0x4c
 8004710:	2204      	movs	r2, #4
 8004712:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004714:	e229      	b.n	8004b6a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	334c      	adds	r3, #76	@ 0x4c
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3326      	adds	r3, #38	@ 0x26
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00b      	beq.n	8004758 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3326      	adds	r3, #38	@ 0x26
 8004750:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004752:	2b02      	cmp	r3, #2
 8004754:	f040 8209 	bne.w	8004b6a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800476e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004776:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	4413      	add	r3, r2
 8004780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004784:	461a      	mov	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800478a:	e1ee      	b.n	8004b6a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	334d      	adds	r3, #77	@ 0x4d
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b05      	cmp	r3, #5
 80047a0:	f040 80c8 	bne.w	8004934 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	334d      	adds	r3, #77	@ 0x4d
 80047b4:	2202      	movs	r2, #2
 80047b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	331b      	adds	r3, #27
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	f040 81ce 	bne.w	8004b6c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	3326      	adds	r3, #38	@ 0x26
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d16b      	bne.n	80048be <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3348      	adds	r3, #72	@ 0x48
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4403      	add	r3, r0
 8004806:	3348      	adds	r3, #72	@ 0x48
 8004808:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3348      	adds	r3, #72	@ 0x48
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b02      	cmp	r3, #2
 800481e:	d943      	bls.n	80048a8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3348      	adds	r3, #72	@ 0x48
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	331b      	adds	r3, #27
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3344      	adds	r3, #68	@ 0x44
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d809      	bhi.n	8004872 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	331c      	adds	r3, #28
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	0151      	lsls	r1, r2, #5
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	440a      	add	r2, r1
 8004888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800488c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004890:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	334c      	adds	r3, #76	@ 0x4c
 80048a2:	2204      	movs	r2, #4
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e014      	b.n	80048d2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	334c      	adds	r3, #76	@ 0x4c
 80048b8:	2202      	movs	r2, #2
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e009      	b.n	80048d2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	334c      	adds	r3, #76	@ 0x4c
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3326      	adds	r3, #38	@ 0x26
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	4613      	mov	r3, r2
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	3326      	adds	r3, #38	@ 0x26
 80048f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	f040 8136 	bne.w	8004b6c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004916:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800491e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e11b      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	334d      	adds	r3, #77	@ 0x4d
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	f040 8081 	bne.w	8004a4e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	334d      	adds	r3, #77	@ 0x4d
 800495c:	2202      	movs	r2, #2
 800495e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	331b      	adds	r3, #27
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b01      	cmp	r3, #1
 8004974:	f040 80fa 	bne.w	8004b6c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004978:	78fa      	ldrb	r2, [r7, #3]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	334c      	adds	r3, #76	@ 0x4c
 8004988:	2202      	movs	r2, #2
 800498a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049aa:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ca:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049e6:	f023 0320 	bic.w	r3, r3, #32
 80049ea:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	3326      	adds	r3, #38	@ 0x26
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3326      	adds	r3, #38	@ 0x26
 8004a12:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f040 80a9 	bne.w	8004b6c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a30:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a38:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e08e      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	334d      	adds	r3, #77	@ 0x4d
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d143      	bne.n	8004aec <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	011b      	lsls	r3, r3, #4
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	334d      	adds	r3, #77	@ 0x4d
 8004a74:	2202      	movs	r2, #2
 8004a76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	334c      	adds	r3, #76	@ 0x4c
 8004a88:	2202      	movs	r2, #2
 8004a8a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3326      	adds	r3, #38	@ 0x26
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	3326      	adds	r3, #38	@ 0x26
 8004ab2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d159      	bne.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ace:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ad6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e03f      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	334d      	adds	r3, #77	@ 0x4d
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d126      	bne.n	8004b50 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	334d      	adds	r3, #77	@ 0x4d
 8004b12:	2202      	movs	r2, #2
 8004b14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	@ 0x44
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c59      	adds	r1, r3, #1
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4403      	add	r3, r0
 8004b36:	3344      	adds	r3, #68	@ 0x44
 8004b38:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	334c      	adds	r3, #76	@ 0x4c
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e00d      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	334d      	adds	r3, #77	@ 0x4d
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	f000 8100 	beq.w	8004d68 <HCD_HC_IN_IRQHandler+0xcca>
 8004b68:	e000      	b.n	8004b6c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b6a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	334c      	adds	r3, #76	@ 0x4c
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f007 ffd8 	bl	800cb38 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b88:	e0ef      	b.n	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	4611      	mov	r1, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f004 fed3 	bl	800993e <USB_ReadChInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ba0:	d12f      	bne.n	8004c02 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2340      	movs	r3, #64	@ 0x40
 8004bb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334d      	adds	r3, #77	@ 0x4d
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	331a      	adds	r3, #26
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	3344      	adds	r3, #68	@ 0x44
 8004bee:	2200      	movs	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f005 fc43 	bl	800a486 <USB_HC_Halt>
 8004c00:	e0b3      	b.n	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f004 fe97 	bl	800993e <USB_ReadChInterrupts>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f003 0310 	and.w	r3, r3, #16
 8004c16:	2b10      	cmp	r3, #16
 8004c18:	f040 80a7 	bne.w	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	3326      	adds	r3, #38	@ 0x26
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d11b      	bne.n	8004c6a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3344      	adds	r3, #68	@ 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	334d      	adds	r3, #77	@ 0x4d
 8004c56:	2204      	movs	r2, #4
 8004c58:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 fc0f 	bl	800a486 <USB_HC_Halt>
 8004c68:	e03f      	b.n	8004cea <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3326      	adds	r3, #38	@ 0x26
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3326      	adds	r3, #38	@ 0x26
 8004c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d129      	bne.n	8004cea <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c96:	78fa      	ldrb	r2, [r7, #3]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3344      	adds	r3, #68	@ 0x44
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	799b      	ldrb	r3, [r3, #6]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HCD_HC_IN_IRQHandler+0xc2a>
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	1a9b      	subs	r3, r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	440b      	add	r3, r1
 8004cc0:	331b      	adds	r3, #27
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d110      	bne.n	8004cea <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	334d      	adds	r3, #77	@ 0x4d
 8004cd8:	2204      	movs	r2, #4
 8004cda:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f005 fbce 	bl	800a486 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	331b      	adds	r3, #27
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d129      	bne.n	8004d54 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	331b      	adds	r3, #27
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	78fa      	ldrb	r2, [r7, #3]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d32:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d4e:	f043 0320 	orr.w	r3, r3, #32
 8004d52:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d60:	461a      	mov	r2, r3
 8004d62:	2310      	movs	r3, #16
 8004d64:	6093      	str	r3, [r2, #8]
 8004d66:	e000      	b.n	8004d6a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d68:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f004 fdd5 	bl	800993e <USB_ReadChInterrupts>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d11b      	bne.n	8004dd6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004daa:	461a      	mov	r2, r3
 8004dac:	2304      	movs	r3, #4
 8004dae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334d      	adds	r3, #77	@ 0x4d
 8004dc0:	2207      	movs	r2, #7
 8004dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	4611      	mov	r1, r2
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f005 fb5a 	bl	800a486 <USB_HC_Halt>
 8004dd2:	f000 bc89 	b.w	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f004 fdad 	bl	800993e <USB_ReadChInterrupts>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	f040 8082 	bne.w	8004ef4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	2320      	movs	r3, #32
 8004e00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3319      	adds	r3, #25
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d124      	bne.n	8004e62 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	3319      	adds	r3, #25
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	334c      	adds	r3, #76	@ 0x4c
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	334d      	adds	r3, #77	@ 0x4d
 8004e50:	2203      	movs	r2, #3
 8004e52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f005 fb12 	bl	800a486 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	331a      	adds	r3, #26
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	f040 8437 	bne.w	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	331b      	adds	r3, #27
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 842b 	bne.w	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3326      	adds	r3, #38	@ 0x26
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d009      	beq.n	8004ebc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	2201      	movs	r2, #1
 8004eba:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334d      	adds	r3, #77	@ 0x4d
 8004ecc:	2203      	movs	r2, #3
 8004ece:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f005 fad4 	bl	800a486 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3344      	adds	r3, #68	@ 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	e3f9      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	4611      	mov	r1, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f004 fd1e 	bl	800993e <USB_ReadChInterrupts>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f0c:	d111      	bne.n	8004f32 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f005 faab 	bl	800a486 <USB_HC_Halt>
 8004f30:	e3da      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fcff 	bl	800993e <USB_ReadChInterrupts>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d168      	bne.n	800501c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3344      	adds	r3, #68	@ 0x44
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	4611      	mov	r1, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	f004 fce9 	bl	800993e <USB_ReadChInterrupts>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d112      	bne.n	8004f9c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	3319      	adds	r3, #25
 8004f86:	2201      	movs	r2, #1
 8004f88:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f96:	461a      	mov	r2, r3
 8004f98:	2340      	movs	r3, #64	@ 0x40
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	6879      	ldr	r1, [r7, #4]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	440b      	add	r3, r1
 8004faa:	331b      	adds	r3, #27
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d019      	beq.n	8004fe6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	331b      	adds	r3, #27
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334d      	adds	r3, #77	@ 0x4d
 8005008:	2201      	movs	r2, #1
 800500a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f005 fa36 	bl	800a486 <USB_HC_Halt>
 800501a:	e365      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	4611      	mov	r1, r2
 8005024:	4618      	mov	r0, r3
 8005026:	f004 fc8a 	bl	800993e <USB_ReadChInterrupts>
 800502a:	4603      	mov	r3, r0
 800502c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005030:	2b40      	cmp	r3, #64	@ 0x40
 8005032:	d139      	bne.n	80050a8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	334d      	adds	r3, #77	@ 0x4d
 8005044:	2205      	movs	r2, #5
 8005046:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	331a      	adds	r3, #26
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	1a9b      	subs	r3, r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	3319      	adds	r3, #25
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	3344      	adds	r3, #68	@ 0x44
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	4611      	mov	r1, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f005 f9f9 	bl	800a486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	2340      	movs	r3, #64	@ 0x40
 80050a4:	6093      	str	r3, [r2, #8]
 80050a6:	e31f      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f004 fc44 	bl	800993e <USB_ReadChInterrupts>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d11a      	bne.n	80050f6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	2308      	movs	r3, #8
 80050d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	334d      	adds	r3, #77	@ 0x4d
 80050e2:	2206      	movs	r2, #6
 80050e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 f9c9 	bl	800a486 <USB_HC_Halt>
 80050f4:	e2f8      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f004 fc1d 	bl	800993e <USB_ReadChInterrupts>
 8005104:	4603      	mov	r3, r0
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b10      	cmp	r3, #16
 800510c:	d144      	bne.n	8005198 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3344      	adds	r3, #68	@ 0x44
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	334d      	adds	r3, #77	@ 0x4d
 8005132:	2204      	movs	r2, #4
 8005134:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3319      	adds	r3, #25
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d114      	bne.n	8005176 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800514c:	78fa      	ldrb	r2, [r7, #3]
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3318      	adds	r3, #24
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	440b      	add	r3, r1
 8005170:	3319      	adds	r3, #25
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	4611      	mov	r1, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f005 f981 	bl	800a486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005190:	461a      	mov	r2, r3
 8005192:	2310      	movs	r3, #16
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	e2a7      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f004 fbcc 	bl	800993e <USB_ReadChInterrupts>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ac:	2b80      	cmp	r3, #128	@ 0x80
 80051ae:	f040 8083 	bne.w	80052b8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	799b      	ldrb	r3, [r3, #6]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d111      	bne.n	80051de <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	334d      	adds	r3, #77	@ 0x4d
 80051ca:	2207      	movs	r2, #7
 80051cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	4611      	mov	r1, r2
 80051d6:	4618      	mov	r0, r3
 80051d8:	f005 f955 	bl	800a486 <USB_HC_Halt>
 80051dc:	e062      	b.n	80052a4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3344      	adds	r3, #68	@ 0x44
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4403      	add	r3, r0
 80051fe:	3344      	adds	r3, #68	@ 0x44
 8005200:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	3344      	adds	r3, #68	@ 0x44
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d922      	bls.n	800525e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	440b      	add	r3, r1
 8005226:	3344      	adds	r3, #68	@ 0x44
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	334c      	adds	r3, #76	@ 0x4c
 800523c:	2204      	movs	r2, #4
 800523e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	334c      	adds	r3, #76	@ 0x4c
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f007 fc6e 	bl	800cb38 <HAL_HCD_HC_NotifyURBChange_Callback>
 800525c:	e022      	b.n	80052a4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	334c      	adds	r3, #76	@ 0x4c
 800526e:	2202      	movs	r2, #2
 8005270:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005288:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005290:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005292:	78fb      	ldrb	r3, [r7, #3]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800529e:	461a      	mov	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	e217      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	4611      	mov	r1, r2
 80052c0:	4618      	mov	r0, r3
 80052c2:	f004 fb3c 	bl	800993e <USB_ReadChInterrupts>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	d11b      	bne.n	800530a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	@ 0x4d
 80052e2:	2209      	movs	r2, #9
 80052e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f005 f8c9 	bl	800a486 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005300:	461a      	mov	r2, r3
 8005302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005306:	6093      	str	r3, [r2, #8]
 8005308:	e1ee      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	78fa      	ldrb	r2, [r7, #3]
 8005310:	4611      	mov	r1, r2
 8005312:	4618      	mov	r0, r3
 8005314:	f004 fb13 	bl	800993e <USB_ReadChInterrupts>
 8005318:	4603      	mov	r3, r0
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	f040 81df 	bne.w	80056e2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	2302      	movs	r3, #2
 8005334:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	334d      	adds	r3, #77	@ 0x4d
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	f040 8093 	bne.w	8005474 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	334d      	adds	r3, #77	@ 0x4d
 800535e:	2202      	movs	r2, #2
 8005360:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334c      	adds	r3, #76	@ 0x4c
 8005372:	2201      	movs	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	3326      	adds	r3, #38	@ 0x26
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d00b      	beq.n	80053a4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	3326      	adds	r3, #38	@ 0x26
 800539c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800539e:	2b03      	cmp	r3, #3
 80053a0:	f040 8190 	bne.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	799b      	ldrb	r3, [r3, #6]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d115      	bne.n	80053d8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	333d      	adds	r3, #61	@ 0x3d
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	78fa      	ldrb	r2, [r7, #3]
 80053c0:	f083 0301 	eor.w	r3, r3, #1
 80053c4:	b2d8      	uxtb	r0, r3
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	333d      	adds	r3, #61	@ 0x3d
 80053d4:	4602      	mov	r2, r0
 80053d6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	799b      	ldrb	r3, [r3, #6]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 8171 	bne.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	3334      	adds	r3, #52	@ 0x34
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8165 	beq.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80053fa:	78fa      	ldrb	r2, [r7, #3]
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	3334      	adds	r3, #52	@ 0x34
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4403      	add	r3, r0
 800541a:	3328      	adds	r3, #40	@ 0x28
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	440b      	add	r3, r1
 8005420:	1e59      	subs	r1, r3, #1
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4403      	add	r3, r0
 8005430:	3328      	adds	r3, #40	@ 0x28
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	fbb1 f3f3 	udiv	r3, r1, r3
 8005438:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 813f 	beq.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	333d      	adds	r3, #61	@ 0x3d
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	f083 0301 	eor.w	r3, r3, #1
 800545e:	b2d8      	uxtb	r0, r3
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	333d      	adds	r3, #61	@ 0x3d
 800546e:	4602      	mov	r2, r0
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e127      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	334d      	adds	r3, #77	@ 0x4d
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b03      	cmp	r3, #3
 8005488:	d120      	bne.n	80054cc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	334d      	adds	r3, #77	@ 0x4d
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	331b      	adds	r3, #27
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	f040 8107 	bne.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	440b      	add	r3, r1
 80054c4:	334c      	adds	r3, #76	@ 0x4c
 80054c6:	2202      	movs	r2, #2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e0fb      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	334d      	adds	r3, #77	@ 0x4d
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d13a      	bne.n	8005558 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054e2:	78fa      	ldrb	r2, [r7, #3]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	334d      	adds	r3, #77	@ 0x4d
 80054f2:	2202      	movs	r2, #2
 80054f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	4613      	mov	r3, r2
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	440b      	add	r3, r1
 8005504:	334c      	adds	r3, #76	@ 0x4c
 8005506:	2202      	movs	r2, #2
 8005508:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	331b      	adds	r3, #27
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	f040 80d1 	bne.w	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	1a9b      	subs	r3, r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	331b      	adds	r3, #27
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	e0b5      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005558:	78fa      	ldrb	r2, [r7, #3]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	334d      	adds	r3, #77	@ 0x4d
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b05      	cmp	r3, #5
 800556c:	d114      	bne.n	8005598 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	334d      	adds	r3, #77	@ 0x4d
 800557e:	2202      	movs	r2, #2
 8005580:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	334c      	adds	r3, #76	@ 0x4c
 8005592:	2202      	movs	r2, #2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e095      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	334d      	adds	r3, #77	@ 0x4d
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d114      	bne.n	80055d8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	1a9b      	subs	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	440b      	add	r3, r1
 80055bc:	334d      	adds	r3, #77	@ 0x4d
 80055be:	2202      	movs	r2, #2
 80055c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	334c      	adds	r3, #76	@ 0x4c
 80055d2:	2205      	movs	r2, #5
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e075      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334d      	adds	r3, #77	@ 0x4d
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b07      	cmp	r3, #7
 80055ec:	d00a      	beq.n	8005604 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	1a9b      	subs	r3, r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	334d      	adds	r3, #77	@ 0x4d
 80055fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005600:	2b09      	cmp	r3, #9
 8005602:	d170      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334d      	adds	r3, #77	@ 0x4d
 8005614:	2202      	movs	r2, #2
 8005616:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	3344      	adds	r3, #68	@ 0x44
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4403      	add	r3, r0
 8005638:	3344      	adds	r3, #68	@ 0x44
 800563a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	4613      	mov	r3, r2
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	3344      	adds	r3, #68	@ 0x44
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d914      	bls.n	800567c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	3344      	adds	r3, #68	@ 0x44
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005666:	78fa      	ldrb	r2, [r7, #3]
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	011b      	lsls	r3, r3, #4
 800566e:	1a9b      	subs	r3, r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	334c      	adds	r3, #76	@ 0x4c
 8005676:	2204      	movs	r2, #4
 8005678:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800567a:	e022      	b.n	80056c2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	334c      	adds	r3, #76	@ 0x4c
 800568c:	2202      	movs	r2, #2
 800568e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	4413      	add	r3, r2
 8005698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056a6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056ae:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056bc:	461a      	mov	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	334c      	adds	r3, #76	@ 0x4c
 80056d4:	781a      	ldrb	r2, [r3, #0]
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f007 fa2c 	bl	800cb38 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056e0:	e002      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80056e2:	bf00      	nop
 80056e4:	e000      	b.n	80056e8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80056e6:	bf00      	nop
  }
}
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08a      	sub	sp, #40	@ 0x28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	0c5b      	lsrs	r3, r3, #17
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005722:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d004      	beq.n	8005734 <HCD_RXQLVL_IRQHandler+0x46>
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b05      	cmp	r3, #5
 800572e:	f000 80b6 	beq.w	800589e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005732:	e0b7      	b.n	80058a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80b3 	beq.w	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	332c      	adds	r3, #44	@ 0x2c
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80a7 	beq.w	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	3338      	adds	r3, #56	@ 0x38
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	18d1      	adds	r1, r2, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4403      	add	r3, r0
 8005778:	3334      	adds	r3, #52	@ 0x34
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4299      	cmp	r1, r3
 800577e:	f200 8083 	bhi.w	8005888 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4613      	mov	r3, r2
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	332c      	adds	r3, #44	@ 0x2c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	b292      	uxth	r2, r2
 800579c:	4619      	mov	r1, r3
 800579e:	f004 f863 	bl	8009868 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	332c      	adds	r3, #44	@ 0x2c
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	18d1      	adds	r1, r2, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4613      	mov	r3, r2
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4403      	add	r3, r0
 80057c6:	332c      	adds	r3, #44	@ 0x2c
 80057c8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3338      	adds	r3, #56	@ 0x38
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	18d1      	adds	r1, r2, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4403      	add	r3, r0
 80057ee:	3338      	adds	r3, #56	@ 0x38
 80057f0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	0cdb      	lsrs	r3, r3, #19
 8005802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005806:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3328      	adds	r3, #40	@ 0x28
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4293      	cmp	r3, r2
 8005820:	d13f      	bne.n	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d03c      	beq.n	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800583e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005846:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005854:	461a      	mov	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4613      	mov	r3, r2
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	1a9b      	subs	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	333c      	adds	r3, #60	@ 0x3c
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	f083 0301 	eor.w	r3, r3, #1
 8005870:	b2d8      	uxtb	r0, r3
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	333c      	adds	r3, #60	@ 0x3c
 8005882:	4602      	mov	r2, r0
 8005884:	701a      	strb	r2, [r3, #0]
      break;
 8005886:	e00c      	b.n	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	334c      	adds	r3, #76	@ 0x4c
 8005898:	2204      	movs	r2, #4
 800589a:	701a      	strb	r2, [r3, #0]
      break;
 800589c:	e001      	b.n	80058a2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80058a2:	bf00      	nop
  }
}
 80058a4:	bf00      	nop
 80058a6:	3728      	adds	r7, #40	@ 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058d8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d10b      	bne.n	80058fc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d102      	bne.n	80058f4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f007 f906 	bl	800cb00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f043 0302 	orr.w	r3, r3, #2
 80058fa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b08      	cmp	r3, #8
 8005904:	d132      	bne.n	800596c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f043 0308 	orr.w	r3, r3, #8
 800590c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b04      	cmp	r3, #4
 8005916:	d126      	bne.n	8005966 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	7a5b      	ldrb	r3, [r3, #9]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d113      	bne.n	8005948 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005926:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800592a:	d106      	bne.n	800593a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2102      	movs	r1, #2
 8005932:	4618      	mov	r0, r3
 8005934:	f004 f928 	bl	8009b88 <USB_InitFSLSPClkSel>
 8005938:	e011      	b.n	800595e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2101      	movs	r1, #1
 8005940:	4618      	mov	r0, r3
 8005942:	f004 f921 	bl	8009b88 <USB_InitFSLSPClkSel>
 8005946:	e00a      	b.n	800595e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	79db      	ldrb	r3, [r3, #7]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005956:	461a      	mov	r2, r3
 8005958:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800595c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f007 f8f8 	bl	800cb54 <HAL_HCD_PortEnabled_Callback>
 8005964:	e002      	b.n	800596c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f007 f902 	bl	800cb70 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d103      	bne.n	800597e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f043 0320 	orr.w	r3, r3, #32
 800597c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005984:	461a      	mov	r2, r3
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6013      	str	r3, [r2, #0]
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e12b      	b.n	8005bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fb64 	bl	8001088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	@ 0x24
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059f8:	f002 fb04 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 80059fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4a81      	ldr	r2, [pc, #516]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d807      	bhi.n	8005a18 <HAL_I2C_Init+0x84>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a80      	ldr	r2, [pc, #512]	@ (8005c0c <HAL_I2C_Init+0x278>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	bf94      	ite	ls
 8005a10:	2301      	movls	r3, #1
 8005a12:	2300      	movhi	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	e006      	b.n	8005a26 <HAL_I2C_Init+0x92>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a7d      	ldr	r2, [pc, #500]	@ (8005c10 <HAL_I2C_Init+0x27c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	bf94      	ite	ls
 8005a20:	2301      	movls	r3, #1
 8005a22:	2300      	movhi	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0e7      	b.n	8005bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a78      	ldr	r2, [pc, #480]	@ (8005c14 <HAL_I2C_Init+0x280>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	0c9b      	lsrs	r3, r3, #18
 8005a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a6a      	ldr	r2, [pc, #424]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d802      	bhi.n	8005a68 <HAL_I2C_Init+0xd4>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	3301      	adds	r3, #1
 8005a66:	e009      	b.n	8005a7c <HAL_I2C_Init+0xe8>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	4a69      	ldr	r2, [pc, #420]	@ (8005c18 <HAL_I2C_Init+0x284>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	099b      	lsrs	r3, r3, #6
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	495c      	ldr	r1, [pc, #368]	@ (8005c08 <HAL_I2C_Init+0x274>)
 8005a98:	428b      	cmp	r3, r1
 8005a9a:	d819      	bhi.n	8005ad0 <HAL_I2C_Init+0x13c>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	1e59      	subs	r1, r3, #1
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aaa:	1c59      	adds	r1, r3, #1
 8005aac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ab0:	400b      	ands	r3, r1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_I2C_Init+0x138>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1e59      	subs	r1, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aca:	e051      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005acc:	2304      	movs	r3, #4
 8005ace:	e04f      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d111      	bne.n	8005afc <HAL_I2C_Init+0x168>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	1e58      	subs	r0, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6859      	ldr	r1, [r3, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	440b      	add	r3, r1
 8005ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e012      	b.n	8005b22 <HAL_I2C_Init+0x18e>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	1e58      	subs	r0, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6859      	ldr	r1, [r3, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	0099      	lsls	r1, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_I2C_Init+0x196>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e022      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10e      	bne.n	8005b50 <HAL_I2C_Init+0x1bc>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1e58      	subs	r0, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6859      	ldr	r1, [r3, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	440b      	add	r3, r1
 8005b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4e:	e00f      	b.n	8005b70 <HAL_I2C_Init+0x1dc>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1e58      	subs	r0, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	0099      	lsls	r1, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	6809      	ldr	r1, [r1, #0]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69da      	ldr	r2, [r3, #28]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6911      	ldr	r1, [r2, #16]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	68d2      	ldr	r2, [r2, #12]
 8005baa:	4311      	orrs	r1, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	000186a0 	.word	0x000186a0
 8005c0c:	001e847f 	.word	0x001e847f
 8005c10:	003d08ff 	.word	0x003d08ff
 8005c14:	431bde83 	.word	0x431bde83
 8005c18:	10624dd3 	.word	0x10624dd3

08005c1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b088      	sub	sp, #32
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	4608      	mov	r0, r1
 8005c26:	4611      	mov	r1, r2
 8005c28:	461a      	mov	r2, r3
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	817b      	strh	r3, [r7, #10]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	813b      	strh	r3, [r7, #8]
 8005c32:	4613      	mov	r3, r2
 8005c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c36:	f7fc fae5 	bl	8002204 <HAL_GetTick>
 8005c3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	f040 80d9 	bne.w	8005dfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	2319      	movs	r3, #25
 8005c50:	2201      	movs	r2, #1
 8005c52:	496d      	ldr	r1, [pc, #436]	@ (8005e08 <HAL_I2C_Mem_Write+0x1ec>)
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fc8b 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0cc      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_I2C_Mem_Write+0x56>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e0c5      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d007      	beq.n	8005c98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2221      	movs	r2, #33	@ 0x21
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2240      	movs	r2, #64	@ 0x40
 8005cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a4d      	ldr	r2, [pc, #308]	@ (8005e0c <HAL_I2C_Mem_Write+0x1f0>)
 8005cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cda:	88f8      	ldrh	r0, [r7, #6]
 8005cdc:	893a      	ldrh	r2, [r7, #8]
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	9301      	str	r3, [sp, #4]
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4603      	mov	r3, r0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fac2 	bl	8006274 <I2C_RequestMemoryWrite>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d052      	beq.n	8005d9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e081      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fd50 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0e:	2b04      	cmp	r3, #4
 8005d10:	d107      	bne.n	8005d22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e06b      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	781a      	ldrb	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d11b      	bne.n	8005d9c <HAL_I2C_Mem_Write+0x180>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d017      	beq.n	8005d9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1aa      	bne.n	8005cfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fd43 	bl	8006834 <I2C_WaitOnBTFFlagUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d107      	bne.n	8005dcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e016      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e000      	b.n	8005dfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	00100002 	.word	0x00100002
 8005e0c:	ffff0000 	.word	0xffff0000

08005e10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	@ 0x30
 8005e14:	af02      	add	r7, sp, #8
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	4608      	mov	r0, r1
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	817b      	strh	r3, [r7, #10]
 8005e22:	460b      	mov	r3, r1
 8005e24:	813b      	strh	r3, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e2a:	f7fc f9eb 	bl	8002204 <HAL_GetTick>
 8005e2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b20      	cmp	r3, #32
 8005e3a:	f040 8214 	bne.w	8006266 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2319      	movs	r3, #25
 8005e44:	2201      	movs	r2, #1
 8005e46:	497b      	ldr	r1, [pc, #492]	@ (8006034 <HAL_I2C_Mem_Read+0x224>)
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fb91 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e54:	2302      	movs	r3, #2
 8005e56:	e207      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_I2C_Mem_Read+0x56>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e200      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d007      	beq.n	8005e8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2222      	movs	r2, #34	@ 0x22
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2240      	movs	r2, #64	@ 0x40
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a5b      	ldr	r2, [pc, #364]	@ (8006038 <HAL_I2C_Mem_Read+0x228>)
 8005ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ece:	88f8      	ldrh	r0, [r7, #6]
 8005ed0:	893a      	ldrh	r2, [r7, #8]
 8005ed2:	8979      	ldrh	r1, [r7, #10]
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed6:	9301      	str	r3, [sp, #4]
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	4603      	mov	r3, r0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fa5e 	bl	80063a0 <I2C_RequestMemoryRead>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e1bc      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d113      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	623b      	str	r3, [r7, #32]
 8005f0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	e190      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d11b      	bne.n	8005f5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e170      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d11b      	bne.n	8005f9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	2300      	movs	r3, #0
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	e150      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fb4:	e144      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f200 80f1 	bhi.w	80061a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d123      	bne.n	8006010 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fc79 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e145      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800600e:	e117      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006014:	2b02      	cmp	r3, #2
 8006016:	d14e      	bne.n	80060b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	2200      	movs	r2, #0
 8006020:	4906      	ldr	r1, [pc, #24]	@ (800603c <HAL_I2C_Mem_Read+0x22c>)
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 faa4 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e11a      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
 8006032:	bf00      	nop
 8006034:	00100002 	.word	0x00100002
 8006038:	ffff0000 	.word	0xffff0000
 800603c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060b4:	e0c4      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060bc:	2200      	movs	r2, #0
 80060be:	496c      	ldr	r1, [pc, #432]	@ (8006270 <HAL_I2C_Mem_Read+0x460>)
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fa55 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0cb      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29a      	uxth	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006118:	2200      	movs	r2, #0
 800611a:	4955      	ldr	r1, [pc, #340]	@ (8006270 <HAL_I2C_Mem_Read+0x460>)
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fa27 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e09d      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80061a0:	e04e      	b.n	8006240 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fb8c 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e058      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d124      	bne.n	8006240 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061fa:	2b03      	cmp	r3, #3
 80061fc:	d107      	bne.n	800620e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f aeb6 	bne.w	8005fb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e000      	b.n	8006268 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006266:	2302      	movs	r3, #2
  }
}
 8006268:	4618      	mov	r0, r3
 800626a:	3728      	adds	r7, #40	@ 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	00010004 	.word	0x00010004

08006274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800629c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f960 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c4:	d103      	bne.n	80062ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e05f      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	492d      	ldr	r1, [pc, #180]	@ (800639c <I2C_RequestMemoryWrite+0x128>)
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f9bb 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e04c      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa46 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d107      	bne.n	8006336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02b      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d105      	bne.n	800634c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]
 800634a:	e021      	b.n	8006390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635c:	6a39      	ldr	r1, [r7, #32]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fa20 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	2b04      	cmp	r3, #4
 8006370:	d107      	bne.n	8006382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e005      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	00010002 	.word	0x00010002

080063a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f8c2 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00d      	beq.n	800640e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006400:	d103      	bne.n	800640a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e0aa      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800640e:	897b      	ldrh	r3, [r7, #10]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800641c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	4952      	ldr	r1, [pc, #328]	@ (800656c <I2C_RequestMemoryRead+0x1cc>)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f91d 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e097      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644c:	6a39      	ldr	r1, [r7, #32]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f9a8 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	2b04      	cmp	r3, #4
 8006460:	d107      	bne.n	8006472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e076      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d105      	bne.n	8006488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800647c:	893b      	ldrh	r3, [r7, #8]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	611a      	str	r2, [r3, #16]
 8006486:	e021      	b.n	80064cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006488:	893b      	ldrh	r3, [r7, #8]
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	b29b      	uxth	r3, r3
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006498:	6a39      	ldr	r1, [r7, #32]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f982 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00d      	beq.n	80064c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d107      	bne.n	80064be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e050      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ce:	6a39      	ldr	r1, [r7, #32]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f967 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d107      	bne.n	80064f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e035      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2200      	movs	r2, #0
 8006510:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f82b 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652e:	d103      	bne.n	8006538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e013      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800653c:	897b      	ldrh	r3, [r7, #10]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	4906      	ldr	r1, [pc, #24]	@ (800656c <I2C_RequestMemoryRead+0x1cc>)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f886 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	00010002 	.word	0x00010002

08006570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006580:	e048      	b.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d044      	beq.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7fb fe3b 	bl	8002204 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d139      	bne.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10d      	bne.n	80065c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	43da      	mvns	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	e00c      	b.n	80065e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d116      	bne.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e023      	b.n	800665c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	0c1b      	lsrs	r3, r3, #16
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10d      	bne.n	800663a <I2C_WaitOnFlagUntilTimeout+0xca>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	43da      	mvns	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	e00c      	b.n	8006654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	43da      	mvns	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4013      	ands	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	429a      	cmp	r2, r3
 8006658:	d093      	beq.n	8006582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006672:	e071      	b.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800667e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006682:	d123      	bne.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800669c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	f043 0204 	orr.w	r2, r3, #4
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e067      	b.n	800679c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d041      	beq.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fb fd96 	bl	8002204 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d136      	bne.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d10c      	bne.n	800670e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	43da      	mvns	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4013      	ands	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	bf14      	ite	ne
 8006706:	2301      	movne	r3, #1
 8006708:	2300      	moveq	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e00b      	b.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	43da      	mvns	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4013      	ands	r3, r2
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e021      	b.n	800679c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10c      	bne.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	43da      	mvns	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e00b      	b.n	8006794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f af6d 	bne.w	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b0:	e034      	b.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f8e3 	bl	800697e <I2C_IsAcknowledgeFailed>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e034      	b.n	800682c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d028      	beq.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fb fd1b 	bl	8002204 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11d      	bne.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ea:	2b80      	cmp	r3, #128	@ 0x80
 80067ec:	d016      	beq.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e007      	b.n	800682c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b80      	cmp	r3, #128	@ 0x80
 8006828:	d1c3      	bne.n	80067b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006840:	e034      	b.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f89b 	bl	800697e <I2C_IsAcknowledgeFailed>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e034      	b.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d028      	beq.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fb fcd3 	bl	8002204 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11d      	bne.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d016      	beq.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	f043 0220 	orr.w	r2, r3, #32
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e007      	b.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d1c3      	bne.n	8006842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d0:	e049      	b.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d119      	bne.n	8006914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e030      	b.n	8006976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006914:	f7fb fc76 	bl	8002204 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11d      	bne.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	d016      	beq.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e007      	b.n	8006976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	d1ae      	bne.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006994:	d11b      	bne.n	80069ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800699e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f043 0204 	orr.w	r2, r3, #4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e128      	b.n	8006c40 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a90      	ldr	r2, [pc, #576]	@ (8006c48 <HAL_I2S_Init+0x26c>)
 8006a06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fa fbd5 	bl	80011b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006a24:	f023 030f 	bic.w	r3, r3, #15
 8006a28:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d060      	beq.n	8006afc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d102      	bne.n	8006a48 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006a42:	2310      	movs	r3, #16
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e001      	b.n	8006a4c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006a48:	2320      	movs	r3, #32
 8006a4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d802      	bhi.n	8006a5a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	f001 fbdc 	bl	8008218 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a60:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a6a:	d125      	bne.n	8006ab8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d010      	beq.n	8006a96 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	461a      	mov	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	3305      	adds	r3, #5
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	e01f      	b.n	8006ad6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab2:	3305      	adds	r3, #5
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e00e      	b.n	8006ad6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad2:	3305      	adds	r3, #5
 8006ad4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4a5c      	ldr	r2, [pc, #368]	@ (8006c4c <HAL_I2S_Init+0x270>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	08db      	lsrs	r3, r3, #3
 8006ae0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e003      	b.n	8006b04 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006afc:	2302      	movs	r3, #2
 8006afe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d902      	bls.n	8006b10 <HAL_I2S_Init+0x134>
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	2bff      	cmp	r3, #255	@ 0xff
 8006b0e:	d907      	bls.n	8006b20 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b14:	f043 0210 	orr.w	r2, r3, #16
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e08f      	b.n	8006c40 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691a      	ldr	r2, [r3, #16]
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	ea42 0103 	orr.w	r1, r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69fa      	ldr	r2, [r7, #28]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006b3e:	f023 030f 	bic.w	r3, r3, #15
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	6851      	ldr	r1, [r2, #4]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6892      	ldr	r2, [r2, #8]
 8006b4a:	4311      	orrs	r1, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68d2      	ldr	r2, [r2, #12]
 8006b50:	4311      	orrs	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6992      	ldr	r2, [r2, #24]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d161      	bne.n	8006c30 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a38      	ldr	r2, [pc, #224]	@ (8006c50 <HAL_I2S_Init+0x274>)
 8006b70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a37      	ldr	r2, [pc, #220]	@ (8006c54 <HAL_I2S_Init+0x278>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d101      	bne.n	8006b80 <HAL_I2S_Init+0x1a4>
 8006b7c:	4b36      	ldr	r3, [pc, #216]	@ (8006c58 <HAL_I2S_Init+0x27c>)
 8006b7e:	e001      	b.n	8006b84 <HAL_I2S_Init+0x1a8>
 8006b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	4932      	ldr	r1, [pc, #200]	@ (8006c54 <HAL_I2S_Init+0x278>)
 8006b8c:	428a      	cmp	r2, r1
 8006b8e:	d101      	bne.n	8006b94 <HAL_I2S_Init+0x1b8>
 8006b90:	4a31      	ldr	r2, [pc, #196]	@ (8006c58 <HAL_I2S_Init+0x27c>)
 8006b92:	e001      	b.n	8006b98 <HAL_I2S_Init+0x1bc>
 8006b94:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006b98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006b9c:	f023 030f 	bic.w	r3, r3, #15
 8006ba0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8006c54 <HAL_I2S_Init+0x278>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d101      	bne.n	8006bb0 <HAL_I2S_Init+0x1d4>
 8006bac:	4b2a      	ldr	r3, [pc, #168]	@ (8006c58 <HAL_I2S_Init+0x27c>)
 8006bae:	e001      	b.n	8006bb4 <HAL_I2S_Init+0x1d8>
 8006bb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a25      	ldr	r2, [pc, #148]	@ (8006c54 <HAL_I2S_Init+0x278>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d101      	bne.n	8006bc6 <HAL_I2S_Init+0x1ea>
 8006bc2:	4b25      	ldr	r3, [pc, #148]	@ (8006c58 <HAL_I2S_Init+0x27c>)
 8006bc4:	e001      	b.n	8006bca <HAL_I2S_Init+0x1ee>
 8006bc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd6:	d003      	beq.n	8006be0 <HAL_I2S_Init+0x204>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	e001      	b.n	8006bec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699b      	ldr	r3, [r3, #24]
 8006c08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	897b      	ldrh	r3, [r7, #10]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006c18:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8006c54 <HAL_I2S_Init+0x278>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d101      	bne.n	8006c28 <HAL_I2S_Init+0x24c>
 8006c24:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <HAL_I2S_Init+0x27c>)
 8006c26:	e001      	b.n	8006c2c <HAL_I2S_Init+0x250>
 8006c28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c2c:	897a      	ldrh	r2, [r7, #10]
 8006c2e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	08006d43 	.word	0x08006d43
 8006c4c:	cccccccd 	.word	0xcccccccd
 8006c50:	08007115 	.word	0x08007115
 8006c54:	40003800 	.word	0x40003800
 8006c58:	40003400 	.word	0x40003400

08006c5c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
}
 8006c6c:	bf00      	nop
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c94:	881a      	ldrh	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca0:	1c9a      	adds	r2, r3, #2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10e      	bne.n	8006cdc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ccc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ffcc 	bl	8006c74 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	b292      	uxth	r2, r2
 8006cf8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	1c9a      	adds	r2, r3, #2
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10e      	bne.n	8006d3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7fb f9cd 	bl	80020d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b086      	sub	sp, #24
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d13a      	bne.n	8006dd4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d109      	bne.n	8006d7c <I2S_IRQHandler+0x3a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d72:	2b40      	cmp	r3, #64	@ 0x40
 8006d74:	d102      	bne.n	8006d7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ffb4 	bl	8006ce4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d82:	2b40      	cmp	r3, #64	@ 0x40
 8006d84:	d126      	bne.n	8006dd4 <I2S_IRQHandler+0x92>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d11f      	bne.n	8006dd4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006da2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc6:	f043 0202 	orr.w	r2, r3, #2
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fb f998 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b03      	cmp	r3, #3
 8006dde:	d136      	bne.n	8006e4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d109      	bne.n	8006dfe <I2S_IRQHandler+0xbc>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d102      	bne.n	8006dfe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff ff45 	bl	8006c88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d122      	bne.n	8006e4e <I2S_IRQHandler+0x10c>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d11b      	bne.n	8006e4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e40:	f043 0204 	orr.w	r2, r3, #4
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fb f95b 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d001      	beq.n	8006e7e <HAL_I2SEx_TransmitReceive_DMA+0x26>
  {
    return HAL_BUSY;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e13c      	b.n	80070f8 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_I2SEx_TransmitReceive_DMA+0x38>
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_I2SEx_TransmitReceive_DMA+0x3c>
  {
    return  HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e131      	b.n	80070f8 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_I2SEx_TransmitReceive_DMA+0x4c>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e129      	b.n	80070f8 <HAL_I2SEx_TransmitReceive_DMA+0x2a0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  hi2s->pTxBuffPtr = pTxData;
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->pRxBuffPtr = pRxData;
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f003 0307 	and.w	r3, r3, #7
 8006ec2:	61bb      	str	r3, [r7, #24]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d002      	beq.n	8006ed0 <HAL_I2SEx_TransmitReceive_DMA+0x78>
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b05      	cmp	r3, #5
 8006ece:	d114      	bne.n	8006efa <HAL_I2SEx_TransmitReceive_DMA+0xa2>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8006ed0:	887b      	ldrh	r3, [r7, #2]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8006eda:	887b      	ldrh	r3, [r7, #2]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8006ee4:	887b      	ldrh	r3, [r7, #2]
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	865a      	strh	r2, [r3, #50]	@ 0x32
 8006ef8:	e00b      	b.n	8006f12 <HAL_I2SEx_TransmitReceive_DMA+0xba>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->RxXferSize  = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	887a      	ldrh	r2, [r7, #2]
 8006f0a:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	887a      	ldrh	r2, [r7, #2]
 8006f10:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2205      	movs	r2, #5
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	4a76      	ldr	r2, [pc, #472]	@ (8007100 <HAL_I2SEx_TransmitReceive_DMA+0x2a8>)
 8006f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	4a75      	ldr	r2, [pc, #468]	@ (8007104 <HAL_I2SEx_TransmitReceive_DMA+0x2ac>)
 8006f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f34:	4a74      	ldr	r2, [pc, #464]	@ (8007108 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 8006f36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	2200      	movs	r2, #0
 8006f46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007108 <HAL_I2SEx_TransmitReceive_DMA+0x2b0>)
 8006f4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f5a:	61bb      	str	r3, [r7, #24]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f62:	d002      	beq.n	8006f6a <HAL_I2SEx_TransmitReceive_DMA+0x112>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d144      	bne.n	8006ff4 <HAL_I2SEx_TransmitReceive_DMA+0x19c>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8006f6a:	1d3b      	adds	r3, r7, #4
 8006f6c:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a65      	ldr	r2, [pc, #404]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <HAL_I2SEx_TransmitReceive_DMA+0x128>
 8006f7c:	4b64      	ldr	r3, [pc, #400]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006f7e:	e001      	b.n	8006f84 <HAL_I2SEx_TransmitReceive_DMA+0x12c>
 8006f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f84:	330c      	adds	r3, #12
 8006f86:	4619      	mov	r1, r3
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f7fb ff39 	bl	8002e08 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_I2SEx_TransmitReceive_DMA+0x14c>
 8006fa0:	4b5b      	ldr	r3, [pc, #364]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006fa2:	e001      	b.n	8006fa8 <HAL_I2SEx_TransmitReceive_DMA+0x150>
 8006fa4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4957      	ldr	r1, [pc, #348]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8006fb0:	428b      	cmp	r3, r1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_I2SEx_TransmitReceive_DMA+0x160>
 8006fb4:	4b56      	ldr	r3, [pc, #344]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8006fb6:	e001      	b.n	8006fbc <HAL_I2SEx_TransmitReceive_DMA+0x164>
 8006fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fbc:	f042 0201 	orr.w	r2, r2, #1
 8006fc0:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	330c      	adds	r3, #12
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	f7fb ff13 	bl	8002e08 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0202 	orr.w	r2, r2, #2
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e056      	b.n	80070a2 <HAL_I2SEx_TransmitReceive_DMA+0x24a>
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007002:	d10a      	bne.n	800701a <HAL_I2SEx_TransmitReceive_DMA+0x1c2>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007004:	2300      	movs	r3, #0
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	697b      	ldr	r3, [r7, #20]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	6819      	ldr	r1, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a37      	ldr	r2, [pc, #220]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_I2SEx_TransmitReceive_DMA+0x1de>
 8007032:	4b37      	ldr	r3, [pc, #220]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8007034:	e001      	b.n	800703a <HAL_I2SEx_TransmitReceive_DMA+0x1e2>
 8007036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800703a:	330c      	adds	r3, #12
 800703c:	461a      	mov	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007042:	b29b      	uxth	r3, r3
 8007044:	f7fb fee0 	bl	8002e08 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a2f      	ldr	r2, [pc, #188]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d101      	bne.n	8007056 <HAL_I2SEx_TransmitReceive_DMA+0x1fe>
 8007052:	4b2f      	ldr	r3, [pc, #188]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8007054:	e001      	b.n	800705a <HAL_I2SEx_TransmitReceive_DMA+0x202>
 8007056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	492a      	ldr	r1, [pc, #168]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 8007062:	428b      	cmp	r3, r1
 8007064:	d101      	bne.n	800706a <HAL_I2SEx_TransmitReceive_DMA+0x212>
 8007066:	4b2a      	ldr	r3, [pc, #168]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 8007068:	e001      	b.n	800706e <HAL_I2SEx_TransmitReceive_DMA+0x216>
 800706a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800706e:	f042 0202 	orr.w	r2, r2, #2
 8007072:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	61fb      	str	r3, [r7, #28]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	4619      	mov	r1, r3
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800708c:	b29b      	uxth	r3, r3
 800708e:	f7fb febb 	bl	8002e08 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070b8:	d01d      	beq.n	80070f6 <HAL_I2SEx_TransmitReceive_DMA+0x29e>
  {
    /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
    __HAL_I2SEXT_ENABLE(hi2s);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a13      	ldr	r2, [pc, #76]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d101      	bne.n	80070c8 <HAL_I2SEx_TransmitReceive_DMA+0x270>
 80070c4:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80070c6:	e001      	b.n	80070cc <HAL_I2SEx_TransmitReceive_DMA+0x274>
 80070c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070cc:	69da      	ldr	r2, [r3, #28]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	490e      	ldr	r1, [pc, #56]	@ (800710c <HAL_I2SEx_TransmitReceive_DMA+0x2b4>)
 80070d4:	428b      	cmp	r3, r1
 80070d6:	d101      	bne.n	80070dc <HAL_I2SEx_TransmitReceive_DMA+0x284>
 80070d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <HAL_I2SEx_TransmitReceive_DMA+0x2b8>)
 80070da:	e001      	b.n	80070e0 <HAL_I2SEx_TransmitReceive_DMA+0x288>
 80070dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070e4:	61da      	str	r2, [r3, #28]
    /* Enable I2S peripheral before the I2Sext */
    __HAL_I2S_ENABLE(hi2s);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070f4:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	080073bd 	.word	0x080073bd
 8007104:	080073d9 	.word	0x080073d9
 8007108:	080074b1 	.word	0x080074b1
 800710c:	40003800 	.word	0x40003800
 8007110:	40003400 	.word	0x40003400

08007114 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a92      	ldr	r2, [pc, #584]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d101      	bne.n	8007132 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800712e:	4b92      	ldr	r3, [pc, #584]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007130:	e001      	b.n	8007136 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8007132:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a8b      	ldr	r2, [pc, #556]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d101      	bne.n	8007150 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800714c:	4b8a      	ldr	r3, [pc, #552]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800714e:	e001      	b.n	8007154 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8007150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007160:	d004      	beq.n	800716c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f040 8099 	bne.w	800729e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b02      	cmp	r3, #2
 8007174:	d107      	bne.n	8007186 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f9d5 	bl	8007530 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b01      	cmp	r3, #1
 800718e:	d107      	bne.n	80071a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa78 	bl	8007690 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a6:	2b40      	cmp	r3, #64	@ 0x40
 80071a8:	d13a      	bne.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f003 0320 	and.w	r3, r3, #32
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d035      	beq.n	8007220 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d101      	bne.n	80071c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80071be:	4b6e      	ldr	r3, [pc, #440]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071c0:	e001      	b.n	80071c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80071c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4969      	ldr	r1, [pc, #420]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80071ce:	428b      	cmp	r3, r1
 80071d0:	d101      	bne.n	80071d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80071d2:	4b69      	ldr	r3, [pc, #420]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80071d4:	e001      	b.n	80071da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80071d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80071da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80071de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80071ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	f043 0202 	orr.w	r2, r3, #2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa ff72 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b08      	cmp	r3, #8
 8007228:	f040 80c3 	bne.w	80073b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 80bd 	beq.w	80073b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007246:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a49      	ldr	r2, [pc, #292]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d101      	bne.n	8007256 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8007252:	4b49      	ldr	r3, [pc, #292]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007254:	e001      	b.n	800725a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007256:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4944      	ldr	r1, [pc, #272]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007262:	428b      	cmp	r3, r1
 8007264:	d101      	bne.n	800726a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007266:	4b44      	ldr	r3, [pc, #272]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007268:	e001      	b.n	800726e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800726a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800726e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007272:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007274:	2300      	movs	r3, #0
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728e:	f043 0204 	orr.w	r2, r3, #4
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fa ff34 	bl	8002104 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800729c:	e089      	b.n	80073b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d107      	bne.n	80072b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f96e 	bl	8007594 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d107      	bne.n	80072d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d002      	beq.n	80072d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f9ad 	bl	800762c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d8:	2b40      	cmp	r3, #64	@ 0x40
 80072da:	d12f      	bne.n	800733c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d02a      	beq.n	800733c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80072f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d101      	bne.n	8007304 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007300:	4b1d      	ldr	r3, [pc, #116]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007302:	e001      	b.n	8007308 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8007304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4919      	ldr	r1, [pc, #100]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007310:	428b      	cmp	r3, r1
 8007312:	d101      	bne.n	8007318 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007314:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007316:	e001      	b.n	800731c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800731c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007320:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732e:	f043 0202 	orr.w	r2, r3, #2
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fee4 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b08      	cmp	r3, #8
 8007344:	d136      	bne.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d031      	beq.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a07      	ldr	r2, [pc, #28]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d101      	bne.n	800735e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800735a:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800735c:	e001      	b.n	8007362 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800735e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4902      	ldr	r1, [pc, #8]	@ (8007374 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800736a:	428b      	cmp	r3, r1
 800736c:	d106      	bne.n	800737c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800736e:	4b02      	ldr	r3, [pc, #8]	@ (8007378 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8007370:	e006      	b.n	8007380 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8007372:	bf00      	nop
 8007374:	40003800 	.word	0x40003800
 8007378:	40003400 	.word	0x40003400
 800737c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007380:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007384:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007394:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a2:	f043 0204 	orr.w	r2, r3, #4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7fa feaa 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073b0:	e000      	b.n	80073b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80073b2:	bf00      	nop
}
 80073b4:	bf00      	nop
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7fa f820 	bl	8001410 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d155      	bne.n	800749a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073fc:	d006      	beq.n	800740c <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69db      	ldr	r3, [r3, #28]
 8007404:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8007408:	2b00      	cmp	r3, #0
 800740a:	d11e      	bne.n	800744a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a25      	ldr	r2, [pc, #148]	@ (80074a8 <I2SEx_TxRxDMACplt+0xd0>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d101      	bne.n	800741a <I2SEx_TxRxDMACplt+0x42>
 8007416:	4b25      	ldr	r3, [pc, #148]	@ (80074ac <I2SEx_TxRxDMACplt+0xd4>)
 8007418:	e001      	b.n	800741e <I2SEx_TxRxDMACplt+0x46>
 800741a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4920      	ldr	r1, [pc, #128]	@ (80074a8 <I2SEx_TxRxDMACplt+0xd0>)
 8007426:	428b      	cmp	r3, r1
 8007428:	d101      	bne.n	800742e <I2SEx_TxRxDMACplt+0x56>
 800742a:	4b20      	ldr	r3, [pc, #128]	@ (80074ac <I2SEx_TxRxDMACplt+0xd4>)
 800742c:	e001      	b.n	8007432 <I2SEx_TxRxDMACplt+0x5a>
 800742e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0202 	bic.w	r2, r2, #2
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	e01d      	b.n	8007486 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0201 	bic.w	r2, r2, #1
 8007458:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a12      	ldr	r2, [pc, #72]	@ (80074a8 <I2SEx_TxRxDMACplt+0xd0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d101      	bne.n	8007468 <I2SEx_TxRxDMACplt+0x90>
 8007464:	4b11      	ldr	r3, [pc, #68]	@ (80074ac <I2SEx_TxRxDMACplt+0xd4>)
 8007466:	e001      	b.n	800746c <I2SEx_TxRxDMACplt+0x94>
 8007468:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	490d      	ldr	r1, [pc, #52]	@ (80074a8 <I2SEx_TxRxDMACplt+0xd0>)
 8007474:	428b      	cmp	r3, r1
 8007476:	d101      	bne.n	800747c <I2SEx_TxRxDMACplt+0xa4>
 8007478:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <I2SEx_TxRxDMACplt+0xd4>)
 800747a:	e001      	b.n	8007480 <I2SEx_TxRxDMACplt+0xa8>
 800747c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007480:	f022 0202 	bic.w	r2, r2, #2
 8007484:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->TxXferCount = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7f9 ffc8 	bl	8001430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40003800 	.word	0x40003800
 80074ac:	40003400 	.word	0x40003400

080074b0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0203 	bic.w	r2, r2, #3
 80074cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a15      	ldr	r2, [pc, #84]	@ (8007528 <I2SEx_TxRxDMAError+0x78>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d101      	bne.n	80074dc <I2SEx_TxRxDMAError+0x2c>
 80074d8:	4b14      	ldr	r3, [pc, #80]	@ (800752c <I2SEx_TxRxDMAError+0x7c>)
 80074da:	e001      	b.n	80074e0 <I2SEx_TxRxDMAError+0x30>
 80074dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4910      	ldr	r1, [pc, #64]	@ (8007528 <I2SEx_TxRxDMAError+0x78>)
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d101      	bne.n	80074f0 <I2SEx_TxRxDMAError+0x40>
 80074ec:	4b0f      	ldr	r3, [pc, #60]	@ (800752c <I2SEx_TxRxDMAError+0x7c>)
 80074ee:	e001      	b.n	80074f4 <I2SEx_TxRxDMAError+0x44>
 80074f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80074f4:	f022 0203 	bic.w	r2, r2, #3
 80074f8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007512:	f043 0208 	orr.w	r2, r3, #8
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7fa fdf2 	bl	8002104 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40003800 	.word	0x40003800
 800752c:	40003400 	.word	0x40003400

08007530 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	1c99      	adds	r1, r3, #2
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	6251      	str	r1, [r2, #36]	@ 0x24
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800755c:	b29b      	uxth	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d113      	bne.n	800758a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007570:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d106      	bne.n	800758a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7f9 ff53 	bl	8001430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	1c99      	adds	r1, r3, #2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80075a6:	8819      	ldrh	r1, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007624 <I2SEx_TxISR_I2SExt+0x90>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d101      	bne.n	80075b6 <I2SEx_TxISR_I2SExt+0x22>
 80075b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007628 <I2SEx_TxISR_I2SExt+0x94>)
 80075b4:	e001      	b.n	80075ba <I2SEx_TxISR_I2SExt+0x26>
 80075b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075ba:	460a      	mov	r2, r1
 80075bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d121      	bne.n	800761a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a12      	ldr	r2, [pc, #72]	@ (8007624 <I2SEx_TxISR_I2SExt+0x90>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d101      	bne.n	80075e4 <I2SEx_TxISR_I2SExt+0x50>
 80075e0:	4b11      	ldr	r3, [pc, #68]	@ (8007628 <I2SEx_TxISR_I2SExt+0x94>)
 80075e2:	e001      	b.n	80075e8 <I2SEx_TxISR_I2SExt+0x54>
 80075e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	490d      	ldr	r1, [pc, #52]	@ (8007624 <I2SEx_TxISR_I2SExt+0x90>)
 80075f0:	428b      	cmp	r3, r1
 80075f2:	d101      	bne.n	80075f8 <I2SEx_TxISR_I2SExt+0x64>
 80075f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007628 <I2SEx_TxISR_I2SExt+0x94>)
 80075f6:	e001      	b.n	80075fc <I2SEx_TxISR_I2SExt+0x68>
 80075f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80075fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007600:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7f9 ff0b 	bl	8001430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40003800 	.word	0x40003800
 8007628:	40003400 	.word	0x40003400

0800762c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68d8      	ldr	r0, [r3, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800763e:	1c99      	adds	r1, r3, #2
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007644:	b282      	uxth	r2, r0
 8007646:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d113      	bne.n	8007688 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800766e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007674:	b29b      	uxth	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7f9 fed4 	bl	8001430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a20      	ldr	r2, [pc, #128]	@ (8007720 <I2SEx_RxISR_I2SExt+0x90>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d101      	bne.n	80076a6 <I2SEx_RxISR_I2SExt+0x16>
 80076a2:	4b20      	ldr	r3, [pc, #128]	@ (8007724 <I2SEx_RxISR_I2SExt+0x94>)
 80076a4:	e001      	b.n	80076aa <I2SEx_RxISR_I2SExt+0x1a>
 80076a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076aa:	68d8      	ldr	r0, [r3, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	1c99      	adds	r1, r3, #2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80076b6:	b282      	uxth	r2, r0
 80076b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d121      	bne.n	8007716 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a12      	ldr	r2, [pc, #72]	@ (8007720 <I2SEx_RxISR_I2SExt+0x90>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d101      	bne.n	80076e0 <I2SEx_RxISR_I2SExt+0x50>
 80076dc:	4b11      	ldr	r3, [pc, #68]	@ (8007724 <I2SEx_RxISR_I2SExt+0x94>)
 80076de:	e001      	b.n	80076e4 <I2SEx_RxISR_I2SExt+0x54>
 80076e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	490d      	ldr	r1, [pc, #52]	@ (8007720 <I2SEx_RxISR_I2SExt+0x90>)
 80076ec:	428b      	cmp	r3, r1
 80076ee:	d101      	bne.n	80076f4 <I2SEx_RxISR_I2SExt+0x64>
 80076f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007724 <I2SEx_RxISR_I2SExt+0x94>)
 80076f2:	e001      	b.n	80076f8 <I2SEx_RxISR_I2SExt+0x68>
 80076f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80076f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80076fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7f9 fe8d 	bl	8001430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40003800 	.word	0x40003800
 8007724:	40003400 	.word	0x40003400

08007728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e267      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d075      	beq.n	8007832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007746:	4b88      	ldr	r3, [pc, #544]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 030c 	and.w	r3, r3, #12
 800774e:	2b04      	cmp	r3, #4
 8007750:	d00c      	beq.n	800776c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007752:	4b85      	ldr	r3, [pc, #532]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800775a:	2b08      	cmp	r3, #8
 800775c:	d112      	bne.n	8007784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775e:	4b82      	ldr	r3, [pc, #520]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800776a:	d10b      	bne.n	8007784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776c:	4b7e      	ldr	r3, [pc, #504]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d05b      	beq.n	8007830 <HAL_RCC_OscConfig+0x108>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d157      	bne.n	8007830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e242      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778c:	d106      	bne.n	800779c <HAL_RCC_OscConfig+0x74>
 800778e:	4b76      	ldr	r3, [pc, #472]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a75      	ldr	r2, [pc, #468]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	e01d      	b.n	80077d8 <HAL_RCC_OscConfig+0xb0>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077a4:	d10c      	bne.n	80077c0 <HAL_RCC_OscConfig+0x98>
 80077a6:	4b70      	ldr	r3, [pc, #448]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a6f      	ldr	r2, [pc, #444]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	e00b      	b.n	80077d8 <HAL_RCC_OscConfig+0xb0>
 80077c0:	4b69      	ldr	r3, [pc, #420]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a68      	ldr	r2, [pc, #416]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	4b66      	ldr	r3, [pc, #408]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a65      	ldr	r2, [pc, #404]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d013      	beq.n	8007808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e0:	f7fa fd10 	bl	8002204 <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e8:	f7fa fd0c 	bl	8002204 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b64      	cmp	r3, #100	@ 0x64
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e207      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f0      	beq.n	80077e8 <HAL_RCC_OscConfig+0xc0>
 8007806:	e014      	b.n	8007832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007808:	f7fa fcfc 	bl	8002204 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007810:	f7fa fcf8 	bl	8002204 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b64      	cmp	r3, #100	@ 0x64
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e1f3      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007822:	4b51      	ldr	r3, [pc, #324]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f0      	bne.n	8007810 <HAL_RCC_OscConfig+0xe8>
 800782e:	e000      	b.n	8007832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0302 	and.w	r3, r3, #2
 800783a:	2b00      	cmp	r3, #0
 800783c:	d063      	beq.n	8007906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800783e:	4b4a      	ldr	r3, [pc, #296]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 030c 	and.w	r3, r3, #12
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800784a:	4b47      	ldr	r3, [pc, #284]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007852:	2b08      	cmp	r3, #8
 8007854:	d11c      	bne.n	8007890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007856:	4b44      	ldr	r3, [pc, #272]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d116      	bne.n	8007890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007862:	4b41      	ldr	r3, [pc, #260]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <HAL_RCC_OscConfig+0x152>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d001      	beq.n	800787a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e1c7      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800787a:	4b3b      	ldr	r3, [pc, #236]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4937      	ldr	r1, [pc, #220]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 800788a:	4313      	orrs	r3, r2
 800788c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800788e:	e03a      	b.n	8007906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d020      	beq.n	80078da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007898:	4b34      	ldr	r3, [pc, #208]	@ (800796c <HAL_RCC_OscConfig+0x244>)
 800789a:	2201      	movs	r2, #1
 800789c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789e:	f7fa fcb1 	bl	8002204 <HAL_GetTick>
 80078a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a4:	e008      	b.n	80078b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078a6:	f7fa fcad 	bl	8002204 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e1a8      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0302 	and.w	r3, r3, #2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c4:	4b28      	ldr	r3, [pc, #160]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4925      	ldr	r1, [pc, #148]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	600b      	str	r3, [r1, #0]
 80078d8:	e015      	b.n	8007906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078da:	4b24      	ldr	r3, [pc, #144]	@ (800796c <HAL_RCC_OscConfig+0x244>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fa fc90 	bl	8002204 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078e8:	f7fa fc8c 	bl	8002204 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e187      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d036      	beq.n	8007980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d016      	beq.n	8007948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800791a:	4b15      	ldr	r3, [pc, #84]	@ (8007970 <HAL_RCC_OscConfig+0x248>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007920:	f7fa fc70 	bl	8002204 <HAL_GetTick>
 8007924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007926:	e008      	b.n	800793a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007928:	f7fa fc6c 	bl	8002204 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d901      	bls.n	800793a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	e167      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800793a:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <HAL_RCC_OscConfig+0x240>)
 800793c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f0      	beq.n	8007928 <HAL_RCC_OscConfig+0x200>
 8007946:	e01b      	b.n	8007980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007948:	4b09      	ldr	r3, [pc, #36]	@ (8007970 <HAL_RCC_OscConfig+0x248>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794e:	f7fa fc59 	bl	8002204 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007954:	e00e      	b.n	8007974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007956:	f7fa fc55 	bl	8002204 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	2b02      	cmp	r3, #2
 8007962:	d907      	bls.n	8007974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e150      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
 8007968:	40023800 	.word	0x40023800
 800796c:	42470000 	.word	0x42470000
 8007970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007974:	4b88      	ldr	r3, [pc, #544]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1ea      	bne.n	8007956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8097 	beq.w	8007abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007992:	4b81      	ldr	r3, [pc, #516]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10f      	bne.n	80079be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800799e:	2300      	movs	r3, #0
 80079a0:	60bb      	str	r3, [r7, #8]
 80079a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079ba:	2301      	movs	r3, #1
 80079bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079be:	4b77      	ldr	r3, [pc, #476]	@ (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d118      	bne.n	80079fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ca:	4b74      	ldr	r3, [pc, #464]	@ (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a73      	ldr	r2, [pc, #460]	@ (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079d6:	f7fa fc15 	bl	8002204 <HAL_GetTick>
 80079da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079de:	f7fa fc11 	bl	8002204 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e10c      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f0:	4b6a      	ldr	r3, [pc, #424]	@ (8007b9c <HAL_RCC_OscConfig+0x474>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d106      	bne.n	8007a12 <HAL_RCC_OscConfig+0x2ea>
 8007a04:	4b64      	ldr	r3, [pc, #400]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a08:	4a63      	ldr	r2, [pc, #396]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a0a:	f043 0301 	orr.w	r3, r3, #1
 8007a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a10:	e01c      	b.n	8007a4c <HAL_RCC_OscConfig+0x324>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d10c      	bne.n	8007a34 <HAL_RCC_OscConfig+0x30c>
 8007a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a20:	f043 0304 	orr.w	r3, r3, #4
 8007a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a26:	4b5c      	ldr	r3, [pc, #368]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a32:	e00b      	b.n	8007a4c <HAL_RCC_OscConfig+0x324>
 8007a34:	4b58      	ldr	r3, [pc, #352]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a38:	4a57      	ldr	r2, [pc, #348]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a40:	4b55      	ldr	r3, [pc, #340]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a44:	4a54      	ldr	r2, [pc, #336]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a46:	f023 0304 	bic.w	r3, r3, #4
 8007a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d015      	beq.n	8007a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a54:	f7fa fbd6 	bl	8002204 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5a:	e00a      	b.n	8007a72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5c:	f7fa fbd2 	bl	8002204 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e0cb      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a72:	4b49      	ldr	r3, [pc, #292]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0ee      	beq.n	8007a5c <HAL_RCC_OscConfig+0x334>
 8007a7e:	e014      	b.n	8007aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a80:	f7fa fbc0 	bl	8002204 <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a86:	e00a      	b.n	8007a9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a88:	f7fa fbbc 	bl	8002204 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e0b5      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ee      	bne.n	8007a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d105      	bne.n	8007abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab0:	4b39      	ldr	r3, [pc, #228]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	4a38      	ldr	r2, [pc, #224]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 80a1 	beq.w	8007c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ac6:	4b34      	ldr	r3, [pc, #208]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d05c      	beq.n	8007b8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d141      	bne.n	8007b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ada:	4b31      	ldr	r3, [pc, #196]	@ (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae0:	f7fa fb90 	bl	8002204 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fa fb8c 	bl	8002204 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e087      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007afa:	4b27      	ldr	r3, [pc, #156]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f0      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	69da      	ldr	r2, [r3, #28]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b14:	019b      	lsls	r3, r3, #6
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	491b      	ldr	r1, [pc, #108]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b30:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b36:	f7fa fb65 	bl	8002204 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b3c:	e008      	b.n	8007b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b3e:	f7fa fb61 	bl	8002204 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d901      	bls.n	8007b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e05c      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b50:	4b11      	ldr	r3, [pc, #68]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0f0      	beq.n	8007b3e <HAL_RCC_OscConfig+0x416>
 8007b5c:	e054      	b.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ba0 <HAL_RCC_OscConfig+0x478>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b64:	f7fa fb4e 	bl	8002204 <HAL_GetTick>
 8007b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b6c:	f7fa fb4a 	bl	8002204 <HAL_GetTick>
 8007b70:	4602      	mov	r2, r0
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e045      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b7e:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <HAL_RCC_OscConfig+0x470>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1f0      	bne.n	8007b6c <HAL_RCC_OscConfig+0x444>
 8007b8a:	e03d      	b.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d107      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e038      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	40007000 	.word	0x40007000
 8007ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8007c14 <HAL_RCC_OscConfig+0x4ec>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d028      	beq.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d121      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d11a      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d111      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bea:	085b      	lsrs	r3, r3, #1
 8007bec:	3b01      	subs	r3, #1
 8007bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d107      	bne.n	8007c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d001      	beq.n	8007c08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40023800 	.word	0x40023800

08007c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e0cc      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c2c:	4b68      	ldr	r3, [pc, #416]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d90c      	bls.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c3a:	4b65      	ldr	r3, [pc, #404]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c42:	4b63      	ldr	r3, [pc, #396]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0b8      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c6c:	4b59      	ldr	r3, [pc, #356]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4a58      	ldr	r2, [pc, #352]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c84:	4b53      	ldr	r3, [pc, #332]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a52      	ldr	r2, [pc, #328]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c90:	4b50      	ldr	r3, [pc, #320]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	494d      	ldr	r1, [pc, #308]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d044      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb6:	4b47      	ldr	r3, [pc, #284]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d119      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e07f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d003      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d109      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e06f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e067      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cf6:	4b37      	ldr	r3, [pc, #220]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f023 0203 	bic.w	r2, r3, #3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	4934      	ldr	r1, [pc, #208]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d08:	f7fa fa7c 	bl	8002204 <HAL_GetTick>
 8007d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d10:	f7fa fa78 	bl	8002204 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e04f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d26:	4b2b      	ldr	r3, [pc, #172]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 020c 	and.w	r2, r3, #12
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d1eb      	bne.n	8007d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d38:	4b25      	ldr	r3, [pc, #148]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d20c      	bcs.n	8007d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d46:	4b22      	ldr	r3, [pc, #136]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	@ (8007dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e032      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d6c:	4b19      	ldr	r3, [pc, #100]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4916      	ldr	r1, [pc, #88]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d8a:	4b12      	ldr	r3, [pc, #72]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	490e      	ldr	r1, [pc, #56]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d9e:	f000 f821 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	490a      	ldr	r1, [pc, #40]	@ (8007dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8007db0:	5ccb      	ldrb	r3, [r1, r3]
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a09      	ldr	r2, [pc, #36]	@ (8007ddc <HAL_RCC_ClockConfig+0x1c4>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007dba:	4b09      	ldr	r3, [pc, #36]	@ (8007de0 <HAL_RCC_ClockConfig+0x1c8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fa f9dc 	bl	800217c <HAL_InitTick>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40023c00 	.word	0x40023c00
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	0800e8c0 	.word	0x0800e8c0
 8007ddc:	20000000 	.word	0x20000000
 8007de0:	20000004 	.word	0x20000004

08007de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b094      	sub	sp, #80	@ 0x50
 8007dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007dec:	2300      	movs	r3, #0
 8007dee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007df0:	2300      	movs	r3, #0
 8007df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dfc:	4b79      	ldr	r3, [pc, #484]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d00d      	beq.n	8007e24 <HAL_RCC_GetSysClockFreq+0x40>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	f200 80e1 	bhi.w	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x34>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d003      	beq.n	8007e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e16:	e0db      	b.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e18:	4b73      	ldr	r3, [pc, #460]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e1c:	e0db      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e1e:	4b72      	ldr	r3, [pc, #456]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007e22:	e0d8      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e24:	4b6f      	ldr	r3, [pc, #444]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d063      	beq.n	8007f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	099b      	lsrs	r3, r3, #6
 8007e40:	2200      	movs	r2, #0
 8007e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e4e:	2300      	movs	r3, #0
 8007e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007e56:	4622      	mov	r2, r4
 8007e58:	462b      	mov	r3, r5
 8007e5a:	f04f 0000 	mov.w	r0, #0
 8007e5e:	f04f 0100 	mov.w	r1, #0
 8007e62:	0159      	lsls	r1, r3, #5
 8007e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e68:	0150      	lsls	r0, r2, #5
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4621      	mov	r1, r4
 8007e70:	1a51      	subs	r1, r2, r1
 8007e72:	6139      	str	r1, [r7, #16]
 8007e74:	4629      	mov	r1, r5
 8007e76:	eb63 0301 	sbc.w	r3, r3, r1
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e88:	4659      	mov	r1, fp
 8007e8a:	018b      	lsls	r3, r1, #6
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e92:	4651      	mov	r1, sl
 8007e94:	018a      	lsls	r2, r1, #6
 8007e96:	4651      	mov	r1, sl
 8007e98:	ebb2 0801 	subs.w	r8, r2, r1
 8007e9c:	4659      	mov	r1, fp
 8007e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007eb6:	4690      	mov	r8, r2
 8007eb8:	4699      	mov	r9, r3
 8007eba:	4623      	mov	r3, r4
 8007ebc:	eb18 0303 	adds.w	r3, r8, r3
 8007ec0:	60bb      	str	r3, [r7, #8]
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	eb49 0303 	adc.w	r3, r9, r3
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	028b      	lsls	r3, r1, #10
 8007eda:	4621      	mov	r1, r4
 8007edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	028a      	lsls	r2, r1, #10
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eea:	2200      	movs	r2, #0
 8007eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ef4:	f7f8 fcf2 	bl	80008dc <__aeabi_uldivmod>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4613      	mov	r3, r2
 8007efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f00:	e058      	b.n	8007fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f02:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	099b      	lsrs	r3, r3, #6
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f12:	623b      	str	r3, [r7, #32]
 8007f14:	2300      	movs	r3, #0
 8007f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	f04f 0000 	mov.w	r0, #0
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	0159      	lsls	r1, r3, #5
 8007f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f2e:	0150      	lsls	r0, r2, #5
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4641      	mov	r1, r8
 8007f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f40:	f04f 0200 	mov.w	r2, #0
 8007f44:	f04f 0300 	mov.w	r3, #0
 8007f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f54:	ebb2 040a 	subs.w	r4, r2, sl
 8007f58:	eb63 050b 	sbc.w	r5, r3, fp
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	00eb      	lsls	r3, r5, #3
 8007f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f6a:	00e2      	lsls	r2, r4, #3
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	461d      	mov	r5, r3
 8007f70:	4643      	mov	r3, r8
 8007f72:	18e3      	adds	r3, r4, r3
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	464b      	mov	r3, r9
 8007f78:	eb45 0303 	adc.w	r3, r5, r3
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	028b      	lsls	r3, r1, #10
 8007f8e:	4621      	mov	r1, r4
 8007f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f94:	4621      	mov	r1, r4
 8007f96:	028a      	lsls	r2, r1, #10
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	61fa      	str	r2, [r7, #28]
 8007fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa8:	f7f8 fc98 	bl	80008dc <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	0c1b      	lsrs	r3, r3, #16
 8007fba:	f003 0303 	and.w	r3, r3, #3
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007fc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007fce:	e002      	b.n	8007fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd0:	4b05      	ldr	r3, [pc, #20]	@ (8007fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3750      	adds	r7, #80	@ 0x50
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	00f42400 	.word	0x00f42400

08007fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ff0:	4b03      	ldr	r3, [pc, #12]	@ (8008000 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000000 	.word	0x20000000

08008004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008008:	f7ff fff0 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 800800c:	4602      	mov	r2, r0
 800800e:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	0a9b      	lsrs	r3, r3, #10
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	4903      	ldr	r1, [pc, #12]	@ (8008028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800801a:	5ccb      	ldrb	r3, [r1, r3]
 800801c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	40023800 	.word	0x40023800
 8008028:	0800e8d0 	.word	0x0800e8d0

0800802c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008030:	f7ff ffdc 	bl	8007fec <HAL_RCC_GetHCLKFreq>
 8008034:	4602      	mov	r2, r0
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	0b5b      	lsrs	r3, r3, #13
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	4903      	ldr	r1, [pc, #12]	@ (8008050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008042:	5ccb      	ldrb	r3, [r1, r3]
 8008044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008048:	4618      	mov	r0, r3
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40023800 	.word	0x40023800
 8008050:	0800e8d0 	.word	0x0800e8d0

08008054 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008078:	2b00      	cmp	r3, #0
 800807a:	d035      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800807c:	4b62      	ldr	r3, [pc, #392]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008082:	f7fa f8bf 	bl	8002204 <HAL_GetTick>
 8008086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008088:	e008      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800808a:	f7fa f8bb 	bl	8002204 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	d901      	bls.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e0b0      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800809c:	4b5b      	ldr	r3, [pc, #364]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1f0      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	019a      	lsls	r2, r3, #6
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	071b      	lsls	r3, r3, #28
 80080b4:	4955      	ldr	r1, [pc, #340]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080bc:	4b52      	ldr	r3, [pc, #328]	@ (8008208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80080be:	2201      	movs	r2, #1
 80080c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080c2:	f7fa f89f 	bl	8002204 <HAL_GetTick>
 80080c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080c8:	e008      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080ca:	f7fa f89b 	bl	8002204 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e090      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080dc:	4b4b      	ldr	r3, [pc, #300]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0f0      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8083 	beq.w	80081fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080f6:	2300      	movs	r3, #0
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	4b44      	ldr	r3, [pc, #272]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80080fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fe:	4a43      	ldr	r2, [pc, #268]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008104:	6413      	str	r3, [r2, #64]	@ 0x40
 8008106:	4b41      	ldr	r3, [pc, #260]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008112:	4b3f      	ldr	r3, [pc, #252]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a3e      	ldr	r2, [pc, #248]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800811c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800811e:	f7fa f871 	bl	8002204 <HAL_GetTick>
 8008122:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008124:	e008      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008126:	f7fa f86d 	bl	8002204 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	2b02      	cmp	r3, #2
 8008132:	d901      	bls.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e062      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008138:	4b35      	ldr	r3, [pc, #212]	@ (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0f0      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008144:	4b31      	ldr	r3, [pc, #196]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02f      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d028      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008162:	4b2a      	ldr	r3, [pc, #168]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800816a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800816c:	4b29      	ldr	r3, [pc, #164]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800816e:	2201      	movs	r2, #1
 8008170:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008172:	4b28      	ldr	r3, [pc, #160]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008178:	4a24      	ldr	r2, [pc, #144]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800817e:	4b23      	ldr	r3, [pc, #140]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b01      	cmp	r3, #1
 8008188:	d114      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800818a:	f7fa f83b 	bl	8002204 <HAL_GetTick>
 800818e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008190:	e00a      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008192:	f7fa f837 	bl	8002204 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e02a      	b.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081a8:	4b18      	ldr	r3, [pc, #96]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0ee      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081c0:	d10d      	bne.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80081c2:	4b12      	ldr	r3, [pc, #72]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80081d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081d6:	490d      	ldr	r1, [pc, #52]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	608b      	str	r3, [r1, #8]
 80081dc:	e005      	b.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80081de:	4b0b      	ldr	r3, [pc, #44]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081e4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80081e8:	6093      	str	r3, [r2, #8]
 80081ea:	4b08      	ldr	r3, [pc, #32]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081f6:	4905      	ldr	r1, [pc, #20]	@ (800820c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	42470068 	.word	0x42470068
 800820c:	40023800 	.word	0x40023800
 8008210:	40007000 	.word	0x40007000
 8008214:	42470e40 	.word	0x42470e40

08008218 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008228:	2300      	movs	r3, #0
 800822a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d13f      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008236:	4b24      	ldr	r3, [pc, #144]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800823e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800824c:	d12f      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800824e:	4b1f      	ldr	r3, [pc, #124]	@ (80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008250:	617b      	str	r3, [r7, #20]
          break;
 8008252:	e02f      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008254:	4b1c      	ldr	r3, [pc, #112]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800825c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008260:	d108      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008262:	4b19      	ldr	r3, [pc, #100]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800826a:	4a19      	ldr	r2, [pc, #100]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800826c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	e007      	b.n	8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008274:	4b14      	ldr	r3, [pc, #80]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800827c:	4a14      	ldr	r2, [pc, #80]	@ (80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800827e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008282:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008284:	4b10      	ldr	r3, [pc, #64]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008286:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800828a:	099b      	lsrs	r3, r3, #6
 800828c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008298:	4b0b      	ldr	r3, [pc, #44]	@ (80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800829a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800829e:	0f1b      	lsrs	r3, r3, #28
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082aa:	617b      	str	r3, [r7, #20]
          break;
 80082ac:	e002      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
          break;
 80082b2:	bf00      	nop
        }
      }
      break;
 80082b4:	e000      	b.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80082b6:	bf00      	nop
    }
  }
  return frequency;
 80082b8:	697b      	ldr	r3, [r7, #20]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40023800 	.word	0x40023800
 80082cc:	00bb8000 	.word	0x00bb8000
 80082d0:	00f42400 	.word	0x00f42400

080082d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e07b      	b.n	80083de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d108      	bne.n	8008300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082f6:	d009      	beq.n	800830c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	61da      	str	r2, [r3, #28]
 80082fe:	e005      	b.n	800830c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d106      	bne.n	800832c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7f9 fb4e 	bl	80019c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008354:	431a      	orrs	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008386:	431a      	orrs	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008390:	ea42 0103 	orr.w	r1, r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	0c1b      	lsrs	r3, r3, #16
 80083aa:	f003 0104 	and.w	r1, r3, #4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	f003 0210 	and.w	r2, r3, #16
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69da      	ldr	r2, [r3, #28]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80083cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e041      	b.n	800847c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d106      	bne.n	8008412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7f9 fcb9 	bl	8001d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2202      	movs	r2, #2
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	3304      	adds	r3, #4
 8008422:	4619      	mov	r1, r3
 8008424:	4610      	mov	r0, r2
 8008426:	f000 fa79 	bl	800891c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b01      	cmp	r3, #1
 8008496:	d001      	beq.n	800849c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e046      	b.n	800852a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a23      	ldr	r2, [pc, #140]	@ (8008538 <HAL_TIM_Base_Start+0xb4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d022      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b6:	d01d      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1f      	ldr	r2, [pc, #124]	@ (800853c <HAL_TIM_Base_Start+0xb8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d018      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008540 <HAL_TIM_Base_Start+0xbc>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d013      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008544 <HAL_TIM_Base_Start+0xc0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d00e      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a1b      	ldr	r2, [pc, #108]	@ (8008548 <HAL_TIM_Base_Start+0xc4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d009      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a19      	ldr	r2, [pc, #100]	@ (800854c <HAL_TIM_Base_Start+0xc8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d004      	beq.n	80084f4 <HAL_TIM_Base_Start+0x70>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a18      	ldr	r2, [pc, #96]	@ (8008550 <HAL_TIM_Base_Start+0xcc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d111      	bne.n	8008518 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b06      	cmp	r3, #6
 8008504:	d010      	beq.n	8008528 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008516:	e007      	b.n	8008528 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	40010000 	.word	0x40010000
 800853c:	40000400 	.word	0x40000400
 8008540:	40000800 	.word	0x40000800
 8008544:	40000c00 	.word	0x40000c00
 8008548:	40010400 	.word	0x40010400
 800854c:	40014000 	.word	0x40014000
 8008550:	40001800 	.word	0x40001800

08008554 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e041      	b.n	80085ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f839 	bl	80085f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f000 f9c2 	bl	800891c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3708      	adds	r7, #8
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085f2:	b480      	push	{r7}
 80085f4:	b083      	sub	sp, #12
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008614:	2300      	movs	r3, #0
 8008616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d101      	bne.n	8008626 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008622:	2302      	movs	r3, #2
 8008624:	e0ae      	b.n	8008784 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b0c      	cmp	r3, #12
 8008632:	f200 809f 	bhi.w	8008774 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	08008671 	.word	0x08008671
 8008640:	08008775 	.word	0x08008775
 8008644:	08008775 	.word	0x08008775
 8008648:	08008775 	.word	0x08008775
 800864c:	080086b1 	.word	0x080086b1
 8008650:	08008775 	.word	0x08008775
 8008654:	08008775 	.word	0x08008775
 8008658:	08008775 	.word	0x08008775
 800865c:	080086f3 	.word	0x080086f3
 8008660:	08008775 	.word	0x08008775
 8008664:	08008775 	.word	0x08008775
 8008668:	08008775 	.word	0x08008775
 800866c:	08008733 	.word	0x08008733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f9fc 	bl	8008a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0208 	orr.w	r2, r2, #8
 800868a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	699a      	ldr	r2, [r3, #24]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0204 	bic.w	r2, r2, #4
 800869a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6999      	ldr	r1, [r3, #24]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	691a      	ldr	r2, [r3, #16]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	619a      	str	r2, [r3, #24]
      break;
 80086ae:	e064      	b.n	800877a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fa4c 	bl	8008b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	6999      	ldr	r1, [r3, #24]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	021a      	lsls	r2, r3, #8
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	619a      	str	r2, [r3, #24]
      break;
 80086f0:	e043      	b.n	800877a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 faa1 	bl	8008c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	69da      	ldr	r2, [r3, #28]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0208 	orr.w	r2, r2, #8
 800870c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	69da      	ldr	r2, [r3, #28]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0204 	bic.w	r2, r2, #4
 800871c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	69d9      	ldr	r1, [r3, #28]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	691a      	ldr	r2, [r3, #16]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	61da      	str	r2, [r3, #28]
      break;
 8008730:	e023      	b.n	800877a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 faf5 	bl	8008d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69da      	ldr	r2, [r3, #28]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800874c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	69da      	ldr	r2, [r3, #28]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800875c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69d9      	ldr	r1, [r3, #28]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	021a      	lsls	r2, r3, #8
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	430a      	orrs	r2, r1
 8008770:	61da      	str	r2, [r3, #28]
      break;
 8008772:	e002      	b.n	800877a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
      break;
 8008778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_TIM_ConfigClockSource+0x1c>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e0b4      	b.n	8008912 <HAL_TIM_ConfigClockSource+0x186>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e0:	d03e      	beq.n	8008860 <HAL_TIM_ConfigClockSource+0xd4>
 80087e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e6:	f200 8087 	bhi.w	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ee:	f000 8086 	beq.w	80088fe <HAL_TIM_ConfigClockSource+0x172>
 80087f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087f6:	d87f      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 80087f8:	2b70      	cmp	r3, #112	@ 0x70
 80087fa:	d01a      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0xa6>
 80087fc:	2b70      	cmp	r3, #112	@ 0x70
 80087fe:	d87b      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008800:	2b60      	cmp	r3, #96	@ 0x60
 8008802:	d050      	beq.n	80088a6 <HAL_TIM_ConfigClockSource+0x11a>
 8008804:	2b60      	cmp	r3, #96	@ 0x60
 8008806:	d877      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008808:	2b50      	cmp	r3, #80	@ 0x50
 800880a:	d03c      	beq.n	8008886 <HAL_TIM_ConfigClockSource+0xfa>
 800880c:	2b50      	cmp	r3, #80	@ 0x50
 800880e:	d873      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008810:	2b40      	cmp	r3, #64	@ 0x40
 8008812:	d058      	beq.n	80088c6 <HAL_TIM_ConfigClockSource+0x13a>
 8008814:	2b40      	cmp	r3, #64	@ 0x40
 8008816:	d86f      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008818:	2b30      	cmp	r3, #48	@ 0x30
 800881a:	d064      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0x15a>
 800881c:	2b30      	cmp	r3, #48	@ 0x30
 800881e:	d86b      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008820:	2b20      	cmp	r3, #32
 8008822:	d060      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008824:	2b20      	cmp	r3, #32
 8008826:	d867      	bhi.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d05c      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0x15a>
 800882c:	2b10      	cmp	r3, #16
 800882e:	d05a      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0x15a>
 8008830:	e062      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008842:	f000 fb41 	bl	8008ec8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	609a      	str	r2, [r3, #8]
      break;
 800885e:	e04f      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008870:	f000 fb2a 	bl	8008ec8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689a      	ldr	r2, [r3, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008882:	609a      	str	r2, [r3, #8]
      break;
 8008884:	e03c      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008892:	461a      	mov	r2, r3
 8008894:	f000 fa9e 	bl	8008dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2150      	movs	r1, #80	@ 0x50
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 faf7 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80088a4:	e02c      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088b2:	461a      	mov	r2, r3
 80088b4:	f000 fabd 	bl	8008e32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2160      	movs	r1, #96	@ 0x60
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fae7 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80088c4:	e01c      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088d2:	461a      	mov	r2, r3
 80088d4:	f000 fa7e 	bl	8008dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2140      	movs	r1, #64	@ 0x40
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fad7 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80088e4:	e00c      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f000 face 	bl	8008e92 <TIM_ITRx_SetConfig>
      break;
 80088f6:	e003      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
      break;
 80088fc:	e000      	b.n	8008900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a46      	ldr	r2, [pc, #280]	@ (8008a48 <TIM_Base_SetConfig+0x12c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d013      	beq.n	800895c <TIM_Base_SetConfig+0x40>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800893a:	d00f      	beq.n	800895c <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a43      	ldr	r2, [pc, #268]	@ (8008a4c <TIM_Base_SetConfig+0x130>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d00b      	beq.n	800895c <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a42      	ldr	r2, [pc, #264]	@ (8008a50 <TIM_Base_SetConfig+0x134>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d007      	beq.n	800895c <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a41      	ldr	r2, [pc, #260]	@ (8008a54 <TIM_Base_SetConfig+0x138>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d003      	beq.n	800895c <TIM_Base_SetConfig+0x40>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a40      	ldr	r2, [pc, #256]	@ (8008a58 <TIM_Base_SetConfig+0x13c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d108      	bne.n	800896e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a35      	ldr	r2, [pc, #212]	@ (8008a48 <TIM_Base_SetConfig+0x12c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d02b      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800897c:	d027      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a32      	ldr	r2, [pc, #200]	@ (8008a4c <TIM_Base_SetConfig+0x130>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d023      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a31      	ldr	r2, [pc, #196]	@ (8008a50 <TIM_Base_SetConfig+0x134>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d01f      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a30      	ldr	r2, [pc, #192]	@ (8008a54 <TIM_Base_SetConfig+0x138>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d01b      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2f      	ldr	r2, [pc, #188]	@ (8008a58 <TIM_Base_SetConfig+0x13c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d017      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a2e      	ldr	r2, [pc, #184]	@ (8008a5c <TIM_Base_SetConfig+0x140>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d013      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008a60 <TIM_Base_SetConfig+0x144>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00f      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a64 <TIM_Base_SetConfig+0x148>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00b      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a2b      	ldr	r2, [pc, #172]	@ (8008a68 <TIM_Base_SetConfig+0x14c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d007      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a2a      	ldr	r2, [pc, #168]	@ (8008a6c <TIM_Base_SetConfig+0x150>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d003      	beq.n	80089ce <TIM_Base_SetConfig+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a29      	ldr	r2, [pc, #164]	@ (8008a70 <TIM_Base_SetConfig+0x154>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d108      	bne.n	80089e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	689a      	ldr	r2, [r3, #8]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a10      	ldr	r2, [pc, #64]	@ (8008a48 <TIM_Base_SetConfig+0x12c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_Base_SetConfig+0xf8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a12      	ldr	r2, [pc, #72]	@ (8008a58 <TIM_Base_SetConfig+0x13c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d103      	bne.n	8008a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f023 0201 	bic.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	611a      	str	r2, [r3, #16]
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40000400 	.word	0x40000400
 8008a50:	40000800 	.word	0x40000800
 8008a54:	40000c00 	.word	0x40000c00
 8008a58:	40010400 	.word	0x40010400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40014400 	.word	0x40014400
 8008a64:	40014800 	.word	0x40014800
 8008a68:	40001800 	.word	0x40001800
 8008a6c:	40001c00 	.word	0x40001c00
 8008a70:	40002000 	.word	0x40002000

08008a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	f023 0201 	bic.w	r2, r3, #1
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f023 0302 	bic.w	r3, r3, #2
 8008abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a20      	ldr	r2, [pc, #128]	@ (8008b4c <TIM_OC1_SetConfig+0xd8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d003      	beq.n	8008ad8 <TIM_OC1_SetConfig+0x64>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8008b50 <TIM_OC1_SetConfig+0xdc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d10c      	bne.n	8008af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f023 0308 	bic.w	r3, r3, #8
 8008ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f023 0304 	bic.w	r3, r3, #4
 8008af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <TIM_OC1_SetConfig+0xd8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC1_SetConfig+0x8e>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a14      	ldr	r2, [pc, #80]	@ (8008b50 <TIM_OC1_SetConfig+0xdc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d111      	bne.n	8008b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	621a      	str	r2, [r3, #32]
}
 8008b40:	bf00      	nop
 8008b42:	371c      	adds	r7, #28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	40010000 	.word	0x40010000
 8008b50:	40010400 	.word	0x40010400

08008b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f023 0210 	bic.w	r2, r3, #16
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	021b      	lsls	r3, r3, #8
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0320 	bic.w	r3, r3, #32
 8008b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	011b      	lsls	r3, r3, #4
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a22      	ldr	r2, [pc, #136]	@ (8008c38 <TIM_OC2_SetConfig+0xe4>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_OC2_SetConfig+0x68>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a21      	ldr	r2, [pc, #132]	@ (8008c3c <TIM_OC2_SetConfig+0xe8>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d10d      	bne.n	8008bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a17      	ldr	r2, [pc, #92]	@ (8008c38 <TIM_OC2_SetConfig+0xe4>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC2_SetConfig+0x94>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a16      	ldr	r2, [pc, #88]	@ (8008c3c <TIM_OC2_SetConfig+0xe8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d113      	bne.n	8008c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40010000 	.word	0x40010000
 8008c3c:	40010400 	.word	0x40010400

08008c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	021b      	lsls	r3, r3, #8
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a21      	ldr	r2, [pc, #132]	@ (8008d20 <TIM_OC3_SetConfig+0xe0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d003      	beq.n	8008ca6 <TIM_OC3_SetConfig+0x66>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a20      	ldr	r2, [pc, #128]	@ (8008d24 <TIM_OC3_SetConfig+0xe4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d10d      	bne.n	8008cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a16      	ldr	r2, [pc, #88]	@ (8008d20 <TIM_OC3_SetConfig+0xe0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_OC3_SetConfig+0x92>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a15      	ldr	r2, [pc, #84]	@ (8008d24 <TIM_OC3_SetConfig+0xe4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d113      	bne.n	8008cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40010000 	.word	0x40010000
 8008d24:	40010400 	.word	0x40010400

08008d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	031b      	lsls	r3, r3, #12
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a12      	ldr	r2, [pc, #72]	@ (8008dcc <TIM_OC4_SetConfig+0xa4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d003      	beq.n	8008d90 <TIM_OC4_SetConfig+0x68>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a11      	ldr	r2, [pc, #68]	@ (8008dd0 <TIM_OC4_SetConfig+0xa8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d109      	bne.n	8008da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	695b      	ldr	r3, [r3, #20]
 8008d9c:	019b      	lsls	r3, r3, #6
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	697a      	ldr	r2, [r7, #20]
 8008da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	621a      	str	r2, [r3, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	371c      	adds	r7, #28
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000
 8008dd0:	40010400 	.word	0x40010400

08008dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0201 	bic.w	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	011b      	lsls	r3, r3, #4
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f023 030a 	bic.w	r3, r3, #10
 8008e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a1b      	ldr	r3, [r3, #32]
 8008e48:	f023 0210 	bic.w	r2, r3, #16
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	699b      	ldr	r3, [r3, #24]
 8008e54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	031b      	lsls	r3, r3, #12
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4313      	orrs	r3, r2
 8008e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr

08008e92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e92:	b480      	push	{r7}
 8008e94:	b085      	sub	sp, #20
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f043 0307 	orr.w	r3, r3, #7
 8008eb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	609a      	str	r2, [r3, #8]
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b087      	sub	sp, #28
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ee2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	609a      	str	r2, [r3, #8]
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e05a      	b.n	8008fd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a21      	ldr	r2, [pc, #132]	@ (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d022      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f6c:	d01d      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a1d      	ldr	r2, [pc, #116]	@ (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d018      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d013      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00e      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a18      	ldr	r2, [pc, #96]	@ (8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d009      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a17      	ldr	r2, [pc, #92]	@ (8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d004      	beq.n	8008faa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a15      	ldr	r2, [pc, #84]	@ (8008ffc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d10c      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40010000 	.word	0x40010000
 8008fe8:	40000400 	.word	0x40000400
 8008fec:	40000800 	.word	0x40000800
 8008ff0:	40000c00 	.word	0x40000c00
 8008ff4:	40010400 	.word	0x40010400
 8008ff8:	40014000 	.word	0x40014000
 8008ffc:	40001800 	.word	0x40001800

08009000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e042      	b.n	8009098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7f8 ffba 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	@ 0x24
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f82b 	bl	80090a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	695a      	ldr	r2, [r3, #20]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68da      	ldr	r2, [r3, #12]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2220      	movs	r2, #32
 800908c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090a4:	b0c0      	sub	sp, #256	@ 0x100
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	68d9      	ldr	r1, [r3, #12]
 80090be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	ea40 0301 	orr.w	r3, r0, r1
 80090c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	431a      	orrs	r2, r3
 80090d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	431a      	orrs	r2, r3
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090f8:	f021 010c 	bic.w	r1, r1, #12
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009106:	430b      	orrs	r3, r1
 8009108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800910a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911a:	6999      	ldr	r1, [r3, #24]
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	ea40 0301 	orr.w	r3, r0, r1
 8009126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b8f      	ldr	r3, [pc, #572]	@ (800936c <UART_SetConfig+0x2cc>)
 8009130:	429a      	cmp	r2, r3
 8009132:	d005      	beq.n	8009140 <UART_SetConfig+0xa0>
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	4b8d      	ldr	r3, [pc, #564]	@ (8009370 <UART_SetConfig+0x2d0>)
 800913c:	429a      	cmp	r2, r3
 800913e:	d104      	bne.n	800914a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009140:	f7fe ff74 	bl	800802c <HAL_RCC_GetPCLK2Freq>
 8009144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009148:	e003      	b.n	8009152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800914a:	f7fe ff5b 	bl	8008004 <HAL_RCC_GetPCLK1Freq>
 800914e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800915c:	f040 810c 	bne.w	8009378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009164:	2200      	movs	r2, #0
 8009166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800916a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800916e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	1891      	adds	r1, r2, r2
 8009178:	65b9      	str	r1, [r7, #88]	@ 0x58
 800917a:	415b      	adcs	r3, r3
 800917c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800917e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009182:	4621      	mov	r1, r4
 8009184:	eb12 0801 	adds.w	r8, r2, r1
 8009188:	4629      	mov	r1, r5
 800918a:	eb43 0901 	adc.w	r9, r3, r1
 800918e:	f04f 0200 	mov.w	r2, #0
 8009192:	f04f 0300 	mov.w	r3, #0
 8009196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800919a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800919e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091a2:	4690      	mov	r8, r2
 80091a4:	4699      	mov	r9, r3
 80091a6:	4623      	mov	r3, r4
 80091a8:	eb18 0303 	adds.w	r3, r8, r3
 80091ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091b0:	462b      	mov	r3, r5
 80091b2:	eb49 0303 	adc.w	r3, r9, r3
 80091b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80091ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091ce:	460b      	mov	r3, r1
 80091d0:	18db      	adds	r3, r3, r3
 80091d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80091d4:	4613      	mov	r3, r2
 80091d6:	eb42 0303 	adc.w	r3, r2, r3
 80091da:	657b      	str	r3, [r7, #84]	@ 0x54
 80091dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091e4:	f7f7 fb7a 	bl	80008dc <__aeabi_uldivmod>
 80091e8:	4602      	mov	r2, r0
 80091ea:	460b      	mov	r3, r1
 80091ec:	4b61      	ldr	r3, [pc, #388]	@ (8009374 <UART_SetConfig+0x2d4>)
 80091ee:	fba3 2302 	umull	r2, r3, r3, r2
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	011c      	lsls	r4, r3, #4
 80091f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	1891      	adds	r1, r2, r2
 800920e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009210:	415b      	adcs	r3, r3
 8009212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009218:	4641      	mov	r1, r8
 800921a:	eb12 0a01 	adds.w	sl, r2, r1
 800921e:	4649      	mov	r1, r9
 8009220:	eb43 0b01 	adc.w	fp, r3, r1
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	f04f 0300 	mov.w	r3, #0
 800922c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009238:	4692      	mov	sl, r2
 800923a:	469b      	mov	fp, r3
 800923c:	4643      	mov	r3, r8
 800923e:	eb1a 0303 	adds.w	r3, sl, r3
 8009242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009246:	464b      	mov	r3, r9
 8009248:	eb4b 0303 	adc.w	r3, fp, r3
 800924c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800925c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009264:	460b      	mov	r3, r1
 8009266:	18db      	adds	r3, r3, r3
 8009268:	643b      	str	r3, [r7, #64]	@ 0x40
 800926a:	4613      	mov	r3, r2
 800926c:	eb42 0303 	adc.w	r3, r2, r3
 8009270:	647b      	str	r3, [r7, #68]	@ 0x44
 8009272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800927a:	f7f7 fb2f 	bl	80008dc <__aeabi_uldivmod>
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	4611      	mov	r1, r2
 8009284:	4b3b      	ldr	r3, [pc, #236]	@ (8009374 <UART_SetConfig+0x2d4>)
 8009286:	fba3 2301 	umull	r2, r3, r3, r1
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	2264      	movs	r2, #100	@ 0x64
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	1acb      	subs	r3, r1, r3
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800929a:	4b36      	ldr	r3, [pc, #216]	@ (8009374 <UART_SetConfig+0x2d4>)
 800929c:	fba3 2302 	umull	r2, r3, r3, r2
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	005b      	lsls	r3, r3, #1
 80092a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092a8:	441c      	add	r4, r3
 80092aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80092b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80092bc:	4642      	mov	r2, r8
 80092be:	464b      	mov	r3, r9
 80092c0:	1891      	adds	r1, r2, r2
 80092c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80092c4:	415b      	adcs	r3, r3
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092cc:	4641      	mov	r1, r8
 80092ce:	1851      	adds	r1, r2, r1
 80092d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80092d2:	4649      	mov	r1, r9
 80092d4:	414b      	adcs	r3, r1
 80092d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d8:	f04f 0200 	mov.w	r2, #0
 80092dc:	f04f 0300 	mov.w	r3, #0
 80092e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092e4:	4659      	mov	r1, fp
 80092e6:	00cb      	lsls	r3, r1, #3
 80092e8:	4651      	mov	r1, sl
 80092ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ee:	4651      	mov	r1, sl
 80092f0:	00ca      	lsls	r2, r1, #3
 80092f2:	4610      	mov	r0, r2
 80092f4:	4619      	mov	r1, r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	4642      	mov	r2, r8
 80092fa:	189b      	adds	r3, r3, r2
 80092fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009300:	464b      	mov	r3, r9
 8009302:	460a      	mov	r2, r1
 8009304:	eb42 0303 	adc.w	r3, r2, r3
 8009308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800930c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800931c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009320:	460b      	mov	r3, r1
 8009322:	18db      	adds	r3, r3, r3
 8009324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009326:	4613      	mov	r3, r2
 8009328:	eb42 0303 	adc.w	r3, r2, r3
 800932c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800932e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009336:	f7f7 fad1 	bl	80008dc <__aeabi_uldivmod>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4b0d      	ldr	r3, [pc, #52]	@ (8009374 <UART_SetConfig+0x2d4>)
 8009340:	fba3 1302 	umull	r1, r3, r3, r2
 8009344:	095b      	lsrs	r3, r3, #5
 8009346:	2164      	movs	r1, #100	@ 0x64
 8009348:	fb01 f303 	mul.w	r3, r1, r3
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	3332      	adds	r3, #50	@ 0x32
 8009352:	4a08      	ldr	r2, [pc, #32]	@ (8009374 <UART_SetConfig+0x2d4>)
 8009354:	fba2 2303 	umull	r2, r3, r2, r3
 8009358:	095b      	lsrs	r3, r3, #5
 800935a:	f003 0207 	and.w	r2, r3, #7
 800935e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4422      	add	r2, r4
 8009366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009368:	e106      	b.n	8009578 <UART_SetConfig+0x4d8>
 800936a:	bf00      	nop
 800936c:	40011000 	.word	0x40011000
 8009370:	40011400 	.word	0x40011400
 8009374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800937c:	2200      	movs	r2, #0
 800937e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800938a:	4642      	mov	r2, r8
 800938c:	464b      	mov	r3, r9
 800938e:	1891      	adds	r1, r2, r2
 8009390:	6239      	str	r1, [r7, #32]
 8009392:	415b      	adcs	r3, r3
 8009394:	627b      	str	r3, [r7, #36]	@ 0x24
 8009396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800939a:	4641      	mov	r1, r8
 800939c:	1854      	adds	r4, r2, r1
 800939e:	4649      	mov	r1, r9
 80093a0:	eb43 0501 	adc.w	r5, r3, r1
 80093a4:	f04f 0200 	mov.w	r2, #0
 80093a8:	f04f 0300 	mov.w	r3, #0
 80093ac:	00eb      	lsls	r3, r5, #3
 80093ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093b2:	00e2      	lsls	r2, r4, #3
 80093b4:	4614      	mov	r4, r2
 80093b6:	461d      	mov	r5, r3
 80093b8:	4643      	mov	r3, r8
 80093ba:	18e3      	adds	r3, r4, r3
 80093bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093c0:	464b      	mov	r3, r9
 80093c2:	eb45 0303 	adc.w	r3, r5, r3
 80093c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093e6:	4629      	mov	r1, r5
 80093e8:	008b      	lsls	r3, r1, #2
 80093ea:	4621      	mov	r1, r4
 80093ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093f0:	4621      	mov	r1, r4
 80093f2:	008a      	lsls	r2, r1, #2
 80093f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093f8:	f7f7 fa70 	bl	80008dc <__aeabi_uldivmod>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4b60      	ldr	r3, [pc, #384]	@ (8009584 <UART_SetConfig+0x4e4>)
 8009402:	fba3 2302 	umull	r2, r3, r3, r2
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	011c      	lsls	r4, r3, #4
 800940a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800940e:	2200      	movs	r2, #0
 8009410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800941c:	4642      	mov	r2, r8
 800941e:	464b      	mov	r3, r9
 8009420:	1891      	adds	r1, r2, r2
 8009422:	61b9      	str	r1, [r7, #24]
 8009424:	415b      	adcs	r3, r3
 8009426:	61fb      	str	r3, [r7, #28]
 8009428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800942c:	4641      	mov	r1, r8
 800942e:	1851      	adds	r1, r2, r1
 8009430:	6139      	str	r1, [r7, #16]
 8009432:	4649      	mov	r1, r9
 8009434:	414b      	adcs	r3, r1
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009444:	4659      	mov	r1, fp
 8009446:	00cb      	lsls	r3, r1, #3
 8009448:	4651      	mov	r1, sl
 800944a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800944e:	4651      	mov	r1, sl
 8009450:	00ca      	lsls	r2, r1, #3
 8009452:	4610      	mov	r0, r2
 8009454:	4619      	mov	r1, r3
 8009456:	4603      	mov	r3, r0
 8009458:	4642      	mov	r2, r8
 800945a:	189b      	adds	r3, r3, r2
 800945c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009460:	464b      	mov	r3, r9
 8009462:	460a      	mov	r2, r1
 8009464:	eb42 0303 	adc.w	r3, r2, r3
 8009468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800946c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009484:	4649      	mov	r1, r9
 8009486:	008b      	lsls	r3, r1, #2
 8009488:	4641      	mov	r1, r8
 800948a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800948e:	4641      	mov	r1, r8
 8009490:	008a      	lsls	r2, r1, #2
 8009492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009496:	f7f7 fa21 	bl	80008dc <__aeabi_uldivmod>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4611      	mov	r1, r2
 80094a0:	4b38      	ldr	r3, [pc, #224]	@ (8009584 <UART_SetConfig+0x4e4>)
 80094a2:	fba3 2301 	umull	r2, r3, r3, r1
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	2264      	movs	r2, #100	@ 0x64
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	1acb      	subs	r3, r1, r3
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	3332      	adds	r3, #50	@ 0x32
 80094b4:	4a33      	ldr	r2, [pc, #204]	@ (8009584 <UART_SetConfig+0x4e4>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094c0:	441c      	add	r4, r3
 80094c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094c6:	2200      	movs	r2, #0
 80094c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80094ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80094cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80094d0:	4642      	mov	r2, r8
 80094d2:	464b      	mov	r3, r9
 80094d4:	1891      	adds	r1, r2, r2
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	415b      	adcs	r3, r3
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094e0:	4641      	mov	r1, r8
 80094e2:	1851      	adds	r1, r2, r1
 80094e4:	6039      	str	r1, [r7, #0]
 80094e6:	4649      	mov	r1, r9
 80094e8:	414b      	adcs	r3, r1
 80094ea:	607b      	str	r3, [r7, #4]
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094f8:	4659      	mov	r1, fp
 80094fa:	00cb      	lsls	r3, r1, #3
 80094fc:	4651      	mov	r1, sl
 80094fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009502:	4651      	mov	r1, sl
 8009504:	00ca      	lsls	r2, r1, #3
 8009506:	4610      	mov	r0, r2
 8009508:	4619      	mov	r1, r3
 800950a:	4603      	mov	r3, r0
 800950c:	4642      	mov	r2, r8
 800950e:	189b      	adds	r3, r3, r2
 8009510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009512:	464b      	mov	r3, r9
 8009514:	460a      	mov	r2, r1
 8009516:	eb42 0303 	adc.w	r3, r2, r3
 800951a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	663b      	str	r3, [r7, #96]	@ 0x60
 8009526:	667a      	str	r2, [r7, #100]	@ 0x64
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009534:	4649      	mov	r1, r9
 8009536:	008b      	lsls	r3, r1, #2
 8009538:	4641      	mov	r1, r8
 800953a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800953e:	4641      	mov	r1, r8
 8009540:	008a      	lsls	r2, r1, #2
 8009542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009546:	f7f7 f9c9 	bl	80008dc <__aeabi_uldivmod>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <UART_SetConfig+0x4e4>)
 8009550:	fba3 1302 	umull	r1, r3, r3, r2
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	2164      	movs	r1, #100	@ 0x64
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	3332      	adds	r3, #50	@ 0x32
 8009562:	4a08      	ldr	r2, [pc, #32]	@ (8009584 <UART_SetConfig+0x4e4>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	f003 020f 	and.w	r2, r3, #15
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4422      	add	r2, r4
 8009576:	609a      	str	r2, [r3, #8]
}
 8009578:	bf00      	nop
 800957a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800957e:	46bd      	mov	sp, r7
 8009580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009584:	51eb851f 	.word	0x51eb851f

08009588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009588:	b084      	sub	sp, #16
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	f107 001c 	add.w	r0, r7, #28
 8009596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800959a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d123      	bne.n	80095ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80095b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d105      	bne.n	80095de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f9dc 	bl	800999c <USB_CoreReset>
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
 80095e8:	e01b      	b.n	8009622 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f9d0 	bl	800999c <USB_CoreReset>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009600:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	639a      	str	r2, [r3, #56]	@ 0x38
 8009614:	e005      	b.n	8009622 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009622:	7fbb      	ldrb	r3, [r7, #30]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d10b      	bne.n	8009640 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f043 0206 	orr.w	r2, r3, #6
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f043 0220 	orr.w	r2, r3, #32
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800964c:	b004      	add	sp, #16
 800964e:	4770      	bx	lr

08009650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f043 0201 	orr.w	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f023 0201 	bic.w	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d115      	bne.n	80096e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096c2:	200a      	movs	r0, #10
 80096c4:	f7f8 fdaa 	bl	800221c <HAL_Delay>
      ms += 10U;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	330a      	adds	r3, #10
 80096cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 f956 	bl	8009980 <USB_GetMode>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d01e      	beq.n	8009718 <USB_SetCurrentMode+0x84>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80096de:	d9f0      	bls.n	80096c2 <USB_SetCurrentMode+0x2e>
 80096e0:	e01a      	b.n	8009718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096e2:	78fb      	ldrb	r3, [r7, #3]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d115      	bne.n	8009714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80096f4:	200a      	movs	r0, #10
 80096f6:	f7f8 fd91 	bl	800221c <HAL_Delay>
      ms += 10U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	330a      	adds	r3, #10
 80096fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f93d 	bl	8009980 <USB_GetMode>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <USB_SetCurrentMode+0x84>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009710:	d9f0      	bls.n	80096f4 <USB_SetCurrentMode+0x60>
 8009712:	e001      	b.n	8009718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e005      	b.n	8009724 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2bc8      	cmp	r3, #200	@ 0xc8
 800971c:	d101      	bne.n	8009722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e000      	b.n	8009724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800972c:	b480      	push	{r7}
 800972e:	b085      	sub	sp, #20
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009746:	d901      	bls.n	800974c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e01b      	b.n	8009784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	daf2      	bge.n	800973a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	019b      	lsls	r3, r3, #6
 800975c:	f043 0220 	orr.w	r2, r3, #32
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009770:	d901      	bls.n	8009776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e006      	b.n	8009784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b20      	cmp	r3, #32
 8009780:	d0f0      	beq.n	8009764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3301      	adds	r3, #1
 80097a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097a8:	d901      	bls.n	80097ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	e018      	b.n	80097e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	daf2      	bge.n	800979c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2210      	movs	r2, #16
 80097be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097cc:	d901      	bls.n	80097d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e006      	b.n	80097e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d0f0      	beq.n	80097c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b089      	sub	sp, #36	@ 0x24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4611      	mov	r1, r2
 80097f8:	461a      	mov	r2, r3
 80097fa:	460b      	mov	r3, r1
 80097fc:	71fb      	strb	r3, [r7, #7]
 80097fe:	4613      	mov	r3, r2
 8009800:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800980a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d123      	bne.n	800985a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009812:	88bb      	ldrh	r3, [r7, #4]
 8009814:	3303      	adds	r3, #3
 8009816:	089b      	lsrs	r3, r3, #2
 8009818:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e018      	b.n	8009852 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009820:	79fb      	ldrb	r3, [r7, #7]
 8009822:	031a      	lsls	r2, r3, #12
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	4413      	add	r3, r2
 8009828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800982c:	461a      	mov	r2, r3
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3301      	adds	r3, #1
 800983e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	3301      	adds	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	3301      	adds	r3, #1
 800984a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	3301      	adds	r3, #1
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	429a      	cmp	r2, r3
 8009858:	d3e2      	bcc.n	8009820 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3724      	adds	r7, #36	@ 0x24
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009868:	b480      	push	{r7}
 800986a:	b08b      	sub	sp, #44	@ 0x2c
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800987e:	88fb      	ldrh	r3, [r7, #6]
 8009880:	089b      	lsrs	r3, r3, #2
 8009882:	b29b      	uxth	r3, r3
 8009884:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800988e:	2300      	movs	r3, #0
 8009890:	623b      	str	r3, [r7, #32]
 8009892:	e014      	b.n	80098be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989e:	601a      	str	r2, [r3, #0]
    pDest++;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	3301      	adds	r3, #1
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	3301      	adds	r3, #1
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	3301      	adds	r3, #1
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	3301      	adds	r3, #1
 80098b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	3301      	adds	r3, #1
 80098bc:	623b      	str	r3, [r7, #32]
 80098be:	6a3a      	ldr	r2, [r7, #32]
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d3e6      	bcc.n	8009894 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098c6:	8bfb      	ldrh	r3, [r7, #30]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01e      	beq.n	800990a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098d6:	461a      	mov	r2, r3
 80098d8:	f107 0310 	add.w	r3, r7, #16
 80098dc:	6812      	ldr	r2, [r2, #0]
 80098de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	701a      	strb	r2, [r3, #0]
      i++;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	3301      	adds	r3, #1
 80098f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	3301      	adds	r3, #1
 80098fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80098fe:	8bfb      	ldrh	r3, [r7, #30]
 8009900:	3b01      	subs	r3, #1
 8009902:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009904:	8bfb      	ldrh	r3, [r7, #30]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1ea      	bne.n	80098e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800990c:	4618      	mov	r0, r3
 800990e:	372c      	adds	r7, #44	@ 0x2c
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	4013      	ands	r3, r2
 800992e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009930:	68fb      	ldr	r3, [r7, #12]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	460b      	mov	r3, r1
 8009948:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800994e:	78fb      	ldrb	r3, [r7, #3]
 8009950:	015a      	lsls	r2, r3, #5
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800995e:	78fb      	ldrb	r3, [r7, #3]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	4013      	ands	r3, r2
 8009970:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009972:	68bb      	ldr	r3, [r7, #8]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	f003 0301 	and.w	r3, r3, #1
}
 8009990:	4618      	mov	r0, r3
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	3301      	adds	r3, #1
 80099ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099b4:	d901      	bls.n	80099ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e01b      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	daf2      	bge.n	80099a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f043 0201 	orr.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099de:	d901      	bls.n	80099e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e006      	b.n	80099f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d0f0      	beq.n	80099d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3714      	adds	r7, #20
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
	...

08009a00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a00:	b084      	sub	sp, #16
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a20:	461a      	mov	r2, r3
 8009a22:	2300      	movs	r3, #0
 8009a24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a36:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a42:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d119      	bne.n	8009a8a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d10a      	bne.n	8009a74 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a6c:	f043 0304 	orr.w	r3, r3, #4
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e014      	b.n	8009a9e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a82:	f023 0304 	bic.w	r3, r3, #4
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	e009      	b.n	8009a9e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a98:	f023 0304 	bic.w	r3, r3, #4
 8009a9c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a9e:	2110      	movs	r1, #16
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff fe43 	bl	800972c <USB_FlushTxFifo>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff fe6d 	bl	8009790 <USB_FlushRxFifo>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	613b      	str	r3, [r7, #16]
 8009ac4:	e015      	b.n	8009af2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	3301      	adds	r3, #1
 8009af0:	613b      	str	r3, [r7, #16]
 8009af2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009af6:	461a      	mov	r2, r3
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d3e3      	bcc.n	8009ac6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a18      	ldr	r2, [pc, #96]	@ (8009b70 <USB_HostInit+0x170>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d10b      	bne.n	8009b2c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4a15      	ldr	r2, [pc, #84]	@ (8009b74 <USB_HostInit+0x174>)
 8009b20:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a14      	ldr	r2, [pc, #80]	@ (8009b78 <USB_HostInit+0x178>)
 8009b26:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009b2a:	e009      	b.n	8009b40 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2280      	movs	r2, #128	@ 0x80
 8009b30:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a11      	ldr	r2, [pc, #68]	@ (8009b7c <USB_HostInit+0x17c>)
 8009b36:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a11      	ldr	r2, [pc, #68]	@ (8009b80 <USB_HostInit+0x180>)
 8009b3c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d105      	bne.n	8009b54 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	f043 0210 	orr.w	r2, r3, #16
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699a      	ldr	r2, [r3, #24]
 8009b58:	4b0a      	ldr	r3, [pc, #40]	@ (8009b84 <USB_HostInit+0x184>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b6c:	b004      	add	sp, #16
 8009b6e:	4770      	bx	lr
 8009b70:	40040000 	.word	0x40040000
 8009b74:	01000200 	.word	0x01000200
 8009b78:	00e00300 	.word	0x00e00300
 8009b7c:	00600080 	.word	0x00600080
 8009b80:	004000e0 	.word	0x004000e0
 8009b84:	a3200008 	.word	0xa3200008

08009b88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ba6:	f023 0303 	bic.w	r3, r3, #3
 8009baa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d107      	bne.n	8009bda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009bd6:	6053      	str	r3, [r2, #4]
 8009bd8:	e00c      	b.n	8009bf4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d107      	bne.n	8009bf0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009be6:	461a      	mov	r2, r3
 8009be8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009bec:	6053      	str	r3, [r2, #4]
 8009bee:	e001      	b.n	8009bf4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e000      	b.n	8009bf6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009c22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c30:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c32:	2064      	movs	r0, #100	@ 0x64
 8009c34:	f7f8 faf2 	bl	800221c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c44:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009c46:	200a      	movs	r0, #10
 8009c48:	f7f8 fae8 	bl	800221c <HAL_Delay>

  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b085      	sub	sp, #20
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009c7a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <USB_DriveVbus+0x44>
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d106      	bne.n	8009c9a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c98:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ca4:	d109      	bne.n	8009cba <USB_DriveVbus+0x64>
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d106      	bne.n	8009cba <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009cb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009cb8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	0c5b      	lsrs	r3, r3, #17
 8009ce6:	f003 0303 	and.w	r3, r3, #3
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	b29b      	uxth	r3, r3
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b088      	sub	sp, #32
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	4608      	mov	r0, r1
 8009d22:	4611      	mov	r1, r2
 8009d24:	461a      	mov	r2, r3
 8009d26:	4603      	mov	r3, r0
 8009d28:	70fb      	strb	r3, [r7, #3]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	70bb      	strb	r3, [r7, #2]
 8009d2e:	4613      	mov	r3, r2
 8009d30:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	015a      	lsls	r2, r3, #5
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4413      	add	r3, r2
 8009d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d46:	461a      	mov	r2, r3
 8009d48:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009d52:	2b03      	cmp	r3, #3
 8009d54:	d87c      	bhi.n	8009e50 <USB_HC_Init+0x138>
 8009d56:	a201      	add	r2, pc, #4	@ (adr r2, 8009d5c <USB_HC_Init+0x44>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d6d 	.word	0x08009d6d
 8009d60:	08009e13 	.word	0x08009e13
 8009d64:	08009d6d 	.word	0x08009d6d
 8009d68:	08009dd5 	.word	0x08009dd5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	015a      	lsls	r2, r3, #5
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4413      	add	r3, r2
 8009d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009d7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009d80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	da10      	bge.n	8009daa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009d88:	78fb      	ldrb	r3, [r7, #3]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d94:	68db      	ldr	r3, [r3, #12]
 8009d96:	78fa      	ldrb	r2, [r7, #3]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009da6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009da8:	e055      	b.n	8009e56 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a6f      	ldr	r2, [pc, #444]	@ (8009f6c <USB_HC_Init+0x254>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d151      	bne.n	8009e56 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dcc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009dd0:	60d3      	str	r3, [r2, #12]
      break;
 8009dd2:	e040      	b.n	8009e56 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009de0:	461a      	mov	r2, r3
 8009de2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009de6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009de8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da34      	bge.n	8009e5a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	78fa      	ldrb	r2, [r7, #3]
 8009e00:	0151      	lsls	r1, r2, #5
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	440a      	add	r2, r1
 8009e06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e0e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e10:	e023      	b.n	8009e5a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e12:	78fb      	ldrb	r3, [r7, #3]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f240 2325 	movw	r3, #549	@ 0x225
 8009e24:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	da17      	bge.n	8009e5e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e2e:	78fb      	ldrb	r3, [r7, #3]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	78fa      	ldrb	r2, [r7, #3]
 8009e3e:	0151      	lsls	r1, r2, #5
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	440a      	add	r2, r1
 8009e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e48:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009e4c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009e4e:	e006      	b.n	8009e5e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	77fb      	strb	r3, [r7, #31]
      break;
 8009e54:	e004      	b.n	8009e60 <USB_HC_Init+0x148>
      break;
 8009e56:	bf00      	nop
 8009e58:	e002      	b.n	8009e60 <USB_HC_Init+0x148>
      break;
 8009e5a:	bf00      	nop
 8009e5c:	e000      	b.n	8009e60 <USB_HC_Init+0x148>
      break;
 8009e5e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009e60:	78fb      	ldrb	r3, [r7, #3]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009e72:	78fb      	ldrb	r3, [r7, #3]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	78fa      	ldrb	r2, [r7, #3]
 8009e82:	0151      	lsls	r1, r2, #5
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	440a      	add	r2, r1
 8009e88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e8c:	f043 0302 	orr.w	r3, r3, #2
 8009e90:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009e98:	699a      	ldr	r2, [r3, #24]
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	f003 030f 	and.w	r3, r3, #15
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea6:	6939      	ldr	r1, [r7, #16]
 8009ea8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009eac:	4313      	orrs	r3, r2
 8009eae:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009ebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	da03      	bge.n	8009ecc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	e001      	b.n	8009ed0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff fef9 	bl	8009cc8 <USB_GetHostSpeed>
 8009ed6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009ed8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d106      	bne.n	8009eee <USB_HC_Init+0x1d6>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d003      	beq.n	8009eee <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e001      	b.n	8009ef2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ef2:	787b      	ldrb	r3, [r7, #1]
 8009ef4:	059b      	lsls	r3, r3, #22
 8009ef6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009efa:	78bb      	ldrb	r3, [r7, #2]
 8009efc:	02db      	lsls	r3, r3, #11
 8009efe:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f02:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f08:	049b      	lsls	r3, r3, #18
 8009f0a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f0e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009f10:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f16:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	0151      	lsls	r1, r2, #5
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	440a      	add	r2, r1
 8009f28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f30:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009f32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d003      	beq.n	8009f42 <USB_HC_Init+0x22a>
 8009f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d10f      	bne.n	8009f62 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	78fa      	ldrb	r2, [r7, #3]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f60:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3720      	adds	r7, #32
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	40040000 	.word	0x40040000

08009f70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	@ 0x30
 8009f74:	af02      	add	r7, sp, #8
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f8c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4a5d      	ldr	r2, [pc, #372]	@ (800a108 <USB_HC_StartXfer+0x198>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d12f      	bne.n	8009ff6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d11c      	bne.n	8009fd6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	7c9b      	ldrb	r3, [r3, #18]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <USB_HC_StartXfer+0x3c>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	7c9b      	ldrb	r3, [r3, #18]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d124      	bne.n	8009ff6 <USB_HC_StartXfer+0x86>
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	799b      	ldrb	r3, [r3, #6]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d120      	bne.n	8009ff6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	015a      	lsls	r2, r3, #5
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	0151      	lsls	r1, r2, #5
 8009fc6:	6a3a      	ldr	r2, [r7, #32]
 8009fc8:	440a      	add	r2, r1
 8009fca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fd2:	60d3      	str	r3, [r2, #12]
 8009fd4:	e00f      	b.n	8009ff6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	791b      	ldrb	r3, [r3, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <USB_HC_StartXfer+0x86>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	795b      	ldrb	r3, [r3, #5]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d107      	bne.n	8009ff6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	4619      	mov	r1, r3
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fb6b 	bl	800a6c8 <USB_DoPing>
        return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e232      	b.n	800a45c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	799b      	ldrb	r3, [r3, #6]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d158      	bne.n	800a0b0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009ffe:	2301      	movs	r3, #1
 800a000:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	78db      	ldrb	r3, [r3, #3]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d007      	beq.n	800a01a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a00a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	8a92      	ldrh	r2, [r2, #20]
 800a010:	fb03 f202 	mul.w	r2, r3, r2
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61da      	str	r2, [r3, #28]
 800a018:	e07c      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	7c9b      	ldrb	r3, [r3, #18]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d130      	bne.n	800a084 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	2bbc      	cmp	r3, #188	@ 0xbc
 800a028:	d918      	bls.n	800a05c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	8a9b      	ldrh	r3, [r3, #20]
 800a02e:	461a      	mov	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	69da      	ldr	r2, [r3, #28]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d003      	beq.n	800a04c <USB_HC_StartXfer+0xdc>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d103      	bne.n	800a054 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2202      	movs	r2, #2
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	e05f      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2201      	movs	r2, #1
 800a058:	60da      	str	r2, [r3, #12]
 800a05a:	e05b      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6a1a      	ldr	r2, [r3, #32]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d007      	beq.n	800a07c <USB_HC_StartXfer+0x10c>
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d003      	beq.n	800a07c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2204      	movs	r2, #4
 800a078:	60da      	str	r2, [r3, #12]
 800a07a:	e04b      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2203      	movs	r2, #3
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	e047      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d10d      	bne.n	800a0a6 <USB_HC_StartXfer+0x136>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	8a92      	ldrh	r2, [r2, #20]
 800a092:	4293      	cmp	r3, r2
 800a094:	d907      	bls.n	800a0a6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a096:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	8a92      	ldrh	r2, [r2, #20]
 800a09c:	fb03 f202 	mul.w	r2, r3, r2
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	61da      	str	r2, [r3, #28]
 800a0a4:	e036      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	61da      	str	r2, [r3, #28]
 800a0ae:	e031      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d018      	beq.n	800a0ea <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	8a92      	ldrh	r2, [r2, #20]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	8a92      	ldrh	r2, [r2, #20]
 800a0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a0ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a0d0:	8b7b      	ldrh	r3, [r7, #26]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d90b      	bls.n	800a0ee <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a0d6:	8b7b      	ldrh	r3, [r7, #26]
 800a0d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0dc:	68ba      	ldr	r2, [r7, #8]
 800a0de:	8a92      	ldrh	r2, [r2, #20]
 800a0e0:	fb03 f202 	mul.w	r2, r3, r2
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	61da      	str	r2, [r3, #28]
 800a0e8:	e001      	b.n	800a0ee <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	78db      	ldrb	r3, [r3, #3]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d00a      	beq.n	800a10c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	8a92      	ldrh	r2, [r2, #20]
 800a0fc:	fb03 f202 	mul.w	r2, r3, r2
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61da      	str	r2, [r3, #28]
 800a104:	e006      	b.n	800a114 <USB_HC_StartXfer+0x1a4>
 800a106:	bf00      	nop
 800a108:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6a1a      	ldr	r2, [r3, #32]
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a11c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a11e:	04d9      	lsls	r1, r3, #19
 800a120:	4ba3      	ldr	r3, [pc, #652]	@ (800a3b0 <USB_HC_StartXfer+0x440>)
 800a122:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a124:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	7d9b      	ldrb	r3, [r3, #22]
 800a12a:	075b      	lsls	r3, r3, #29
 800a12c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a130:	69f9      	ldr	r1, [r7, #28]
 800a132:	0148      	lsls	r0, r1, #5
 800a134:	6a39      	ldr	r1, [r7, #32]
 800a136:	4401      	add	r1, r0
 800a138:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a13c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a13e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	6999      	ldr	r1, [r3, #24]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	4413      	add	r3, r2
 800a152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a156:	460a      	mov	r2, r1
 800a158:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 0301 	and.w	r3, r3, #1
 800a166:	2b00      	cmp	r3, #0
 800a168:	bf0c      	ite	eq
 800a16a:	2301      	moveq	r3, #1
 800a16c:	2300      	movne	r3, #0
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	6a3a      	ldr	r2, [r7, #32]
 800a186:	440a      	add	r2, r1
 800a188:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a18c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a190:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	7e7b      	ldrb	r3, [r7, #25]
 800a1a2:	075b      	lsls	r3, r3, #29
 800a1a4:	69f9      	ldr	r1, [r7, #28]
 800a1a6:	0148      	lsls	r0, r1, #5
 800a1a8:	6a39      	ldr	r1, [r7, #32]
 800a1aa:	4401      	add	r1, r0
 800a1ac:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	799b      	ldrb	r3, [r3, #6]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	f040 80c3 	bne.w	800a344 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	7c5b      	ldrb	r3, [r3, #17]
 800a1c2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a1c4:	68ba      	ldr	r2, [r7, #8]
 800a1c6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	0151      	lsls	r1, r2, #5
 800a1ce:	6a3a      	ldr	r2, [r7, #32]
 800a1d0:	440a      	add	r2, r1
 800a1d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a1d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a1da:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	69fa      	ldr	r2, [r7, #28]
 800a1ec:	0151      	lsls	r1, r2, #5
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	440a      	add	r2, r1
 800a1f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a1fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	79db      	ldrb	r3, [r3, #7]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d123      	bne.n	800a24c <USB_HC_StartXfer+0x2dc>
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	78db      	ldrb	r3, [r3, #3]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11f      	bne.n	800a24c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	4413      	add	r3, r2
 800a214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	6a3a      	ldr	r2, [r7, #32]
 800a220:	440a      	add	r2, r1
 800a222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a22a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	4413      	add	r3, r2
 800a234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	6a3a      	ldr	r2, [r7, #32]
 800a240:	440a      	add	r2, r1
 800a242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a24a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	7c9b      	ldrb	r3, [r3, #18]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d003      	beq.n	800a25c <USB_HC_StartXfer+0x2ec>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	7c9b      	ldrb	r3, [r3, #18]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d117      	bne.n	800a28c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a260:	2b01      	cmp	r3, #1
 800a262:	d113      	bne.n	800a28c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d10f      	bne.n	800a28c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	6a3b      	ldr	r3, [r7, #32]
 800a272:	4413      	add	r3, r2
 800a274:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	6a3a      	ldr	r2, [r7, #32]
 800a280:	440a      	add	r2, r1
 800a282:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a28a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	7c9b      	ldrb	r3, [r3, #18]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d162      	bne.n	800a35a <USB_HC_StartXfer+0x3ea>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	78db      	ldrb	r3, [r3, #3]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d15e      	bne.n	800a35a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d858      	bhi.n	800a358 <USB_HC_StartXfer+0x3e8>
 800a2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2ac <USB_HC_StartXfer+0x33c>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a2df 	.word	0x0800a2df
 800a2b4:	0800a301 	.word	0x0800a301
 800a2b8:	0800a323 	.word	0x0800a323
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	6a3a      	ldr	r2, [r7, #32]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2da:	6053      	str	r3, [r2, #4]
          break;
 800a2dc:	e03d      	b.n	800a35a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	6a3a      	ldr	r2, [r7, #32]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2f8:	f043 030e 	orr.w	r3, r3, #14
 800a2fc:	6053      	str	r3, [r2, #4]
          break;
 800a2fe:	e02c      	b.n	800a35a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	015a      	lsls	r2, r3, #5
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	4413      	add	r3, r2
 800a308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	0151      	lsls	r1, r2, #5
 800a312:	6a3a      	ldr	r2, [r7, #32]
 800a314:	440a      	add	r2, r1
 800a316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a31a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a31e:	6053      	str	r3, [r2, #4]
          break;
 800a320:	e01b      	b.n	800a35a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	015a      	lsls	r2, r3, #5
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	4413      	add	r3, r2
 800a32a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	69fa      	ldr	r2, [r7, #28]
 800a332:	0151      	lsls	r1, r2, #5
 800a334:	6a3a      	ldr	r2, [r7, #32]
 800a336:	440a      	add	r2, r1
 800a338:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a33c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a340:	6053      	str	r3, [r2, #4]
          break;
 800a342:	e00a      	b.n	800a35a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a350:	461a      	mov	r2, r3
 800a352:	2300      	movs	r3, #0
 800a354:	6053      	str	r3, [r2, #4]
 800a356:	e000      	b.n	800a35a <USB_HC_StartXfer+0x3ea>
          break;
 800a358:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	015a      	lsls	r2, r3, #5
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	4413      	add	r3, r2
 800a362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a370:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	78db      	ldrb	r3, [r3, #3]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	e003      	b.n	800a38c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a38a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a392:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	4413      	add	r3, r2
 800a39c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e055      	b.n	800a45c <USB_HC_StartXfer+0x4ec>
 800a3b0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	78db      	ldrb	r3, [r3, #3]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d14e      	bne.n	800a45a <USB_HC_StartXfer+0x4ea>
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d04a      	beq.n	800a45a <USB_HC_StartXfer+0x4ea>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	79db      	ldrb	r3, [r3, #7]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d146      	bne.n	800a45a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	7c9b      	ldrb	r3, [r3, #18]
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d831      	bhi.n	800a438 <USB_HC_StartXfer+0x4c8>
 800a3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3dc <USB_HC_StartXfer+0x46c>)
 800a3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3da:	bf00      	nop
 800a3dc:	0800a3ed 	.word	0x0800a3ed
 800a3e0:	0800a411 	.word	0x0800a411
 800a3e4:	0800a3ed 	.word	0x0800a3ed
 800a3e8:	0800a411 	.word	0x0800a411
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	3303      	adds	r3, #3
 800a3f2:	089b      	lsrs	r3, r3, #2
 800a3f4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a3f6:	8afa      	ldrh	r2, [r7, #22]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d91c      	bls.n	800a43c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	f043 0220 	orr.w	r2, r3, #32
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a40e:	e015      	b.n	800a43c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	3303      	adds	r3, #3
 800a416:	089b      	lsrs	r3, r3, #2
 800a418:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a41a:	8afa      	ldrh	r2, [r7, #22]
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	b29b      	uxth	r3, r3
 800a426:	429a      	cmp	r2, r3
 800a428:	d90a      	bls.n	800a440 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	619a      	str	r2, [r3, #24]
        }
        break;
 800a436:	e003      	b.n	800a440 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a438:	bf00      	nop
 800a43a:	e002      	b.n	800a442 <USB_HC_StartXfer+0x4d2>
        break;
 800a43c:	bf00      	nop
 800a43e:	e000      	b.n	800a442 <USB_HC_StartXfer+0x4d2>
        break;
 800a440:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6999      	ldr	r1, [r3, #24]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	785a      	ldrb	r2, [r3, #1]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6a1b      	ldr	r3, [r3, #32]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	2000      	movs	r0, #0
 800a452:	9000      	str	r0, [sp, #0]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff f9c9 	bl	80097ec <USB_WritePacket>
  }

  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3728      	adds	r7, #40	@ 0x28
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	b29b      	uxth	r3, r3
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a486:	b480      	push	{r7}
 800a488:	b089      	sub	sp, #36	@ 0x24
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	460b      	mov	r3, r1
 800a490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a496:	78fb      	ldrb	r3, [r7, #3]
 800a498:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	69fb      	ldr	r3, [r7, #28]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	0c9b      	lsrs	r3, r3, #18
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	0fdb      	lsrs	r3, r3, #31
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	0fdb      	lsrs	r3, r3, #31
 800a4da:	f003 0301 	and.w	r3, r3, #1
 800a4de:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 0320 	and.w	r3, r3, #32
 800a4e8:	2b20      	cmp	r3, #32
 800a4ea:	d10d      	bne.n	800a508 <USB_HC_Halt+0x82>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d10a      	bne.n	800a508 <USB_HC_Halt+0x82>
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d005      	beq.n	800a504 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d002      	beq.n	800a504 <USB_HC_Halt+0x7e>
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d101      	bne.n	800a508 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	e0d8      	b.n	800a6ba <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <USB_HC_Halt+0x8e>
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d173      	bne.n	800a5fc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	015a      	lsls	r2, r3, #5
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	4413      	add	r3, r2
 800a51c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	0151      	lsls	r1, r2, #5
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	440a      	add	r2, r1
 800a52a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a52e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a532:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d14a      	bne.n	800a5d6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d133      	bne.n	800a5b4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	4413      	add	r3, r2
 800a554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	0151      	lsls	r1, r2, #5
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	440a      	add	r2, r1
 800a562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a566:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a56a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	0151      	lsls	r1, r2, #5
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	440a      	add	r2, r1
 800a582:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a586:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a58a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3301      	adds	r3, #1
 800a590:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a598:	d82e      	bhi.n	800a5f8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5b0:	d0ec      	beq.n	800a58c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5b2:	e081      	b.n	800a6b8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	015a      	lsls	r2, r3, #5
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	4413      	add	r3, r2
 800a5bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	69ba      	ldr	r2, [r7, #24]
 800a5c4:	0151      	lsls	r1, r2, #5
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	440a      	add	r2, r1
 800a5ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5d4:	e070      	b.n	800a6b8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5f4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5f6:	e05f      	b.n	800a6b8 <USB_HC_Halt+0x232>
            break;
 800a5f8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a5fa:	e05d      	b.n	800a6b8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	015a      	lsls	r2, r3, #5
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	4413      	add	r3, r2
 800a604:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	69ba      	ldr	r2, [r7, #24]
 800a60c:	0151      	lsls	r1, r2, #5
 800a60e:	69fa      	ldr	r2, [r7, #28]
 800a610:	440a      	add	r2, r1
 800a612:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a616:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a61a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d133      	bne.n	800a694 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	4413      	add	r3, r2
 800a634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	69ba      	ldr	r2, [r7, #24]
 800a63c:	0151      	lsls	r1, r2, #5
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	440a      	add	r2, r1
 800a642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a646:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a64a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	4413      	add	r3, r2
 800a654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	0151      	lsls	r1, r2, #5
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	440a      	add	r2, r1
 800a662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a666:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a66a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	3301      	adds	r3, #1
 800a670:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a678:	d81d      	bhi.n	800a6b6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	4413      	add	r3, r2
 800a682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a68c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a690:	d0ec      	beq.n	800a66c <USB_HC_Halt+0x1e6>
 800a692:	e011      	b.n	800a6b8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	015a      	lsls	r2, r3, #5
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	0151      	lsls	r1, r2, #5
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6b2:	6013      	str	r3, [r2, #0]
 800a6b4:	e000      	b.n	800a6b8 <USB_HC_Halt+0x232>
          break;
 800a6b6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3724      	adds	r7, #36	@ 0x24
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b087      	sub	sp, #28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a6d8:	78fb      	ldrb	r3, [r7, #3]
 800a6da:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	04da      	lsls	r2, r3, #19
 800a6e4:	4b15      	ldr	r3, [pc, #84]	@ (800a73c <USB_DoPing+0x74>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	0151      	lsls	r1, r2, #5
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	440a      	add	r2, r1
 800a6f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6f8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	015a      	lsls	r2, r3, #5
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	4413      	add	r3, r2
 800a702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a710:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a718:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	4413      	add	r3, r2
 800a722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a726:	461a      	mov	r2, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	371c      	adds	r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	1ff80000 	.word	0x1ff80000

0800a740 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7fe ff8c 	bl	8009672 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a75a:	2110      	movs	r1, #16
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7fe ffe5 	bl	800972c <USB_FlushTxFifo>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d001      	beq.n	800a76c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff f80f 	bl	8009790 <USB_FlushRxFifo>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	61bb      	str	r3, [r7, #24]
 800a780:	e01f      	b.n	800a7c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a798:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a7a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	015a      	lsls	r2, r3, #5
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	61bb      	str	r3, [r7, #24]
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	2b0f      	cmp	r3, #15
 800a7c6:	d9dc      	bls.n	800a782 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
 800a7cc:	e034      	b.n	800a838 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a7f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a802:	461a      	mov	r2, r3
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	3301      	adds	r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a814:	d80c      	bhi.n	800a830 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a828:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a82c:	d0ec      	beq.n	800a808 <USB_StopHost+0xc8>
 800a82e:	e000      	b.n	800a832 <USB_StopHost+0xf2>
        break;
 800a830:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	3301      	adds	r3, #1
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	2b0f      	cmp	r3, #15
 800a83c:	d9c7      	bls.n	800a7ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a844:	461a      	mov	r2, r3
 800a846:	f04f 33ff 	mov.w	r3, #4294967295
 800a84a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f04f 32ff 	mov.w	r2, #4294967295
 800a852:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7fe fefb 	bl	8009650 <USB_EnableGlobalInt>

  return ret;
 800a85a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b089      	sub	sp, #36	@ 0x24
 800a868:	af04      	add	r7, sp, #16
 800a86a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a86c:	2301      	movs	r3, #1
 800a86e:	2202      	movs	r2, #2
 800a870:	2102      	movs	r1, #2
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fc85 	bl	800b182 <USBH_FindInterface>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
 800a87e:	2bff      	cmp	r3, #255	@ 0xff
 800a880:	d002      	beq.n	800a888 <USBH_CDC_InterfaceInit+0x24>
 800a882:	7bfb      	ldrb	r3, [r7, #15]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d901      	bls.n	800a88c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a888:	2302      	movs	r3, #2
 800a88a:	e13d      	b.n	800ab08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	4619      	mov	r1, r3
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fc5a 	bl	800b14a <USBH_SelectInterface>
 800a896:	4603      	mov	r3, r0
 800a898:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a89a:	7bbb      	ldrb	r3, [r7, #14]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a8a0:	2302      	movs	r3, #2
 800a8a2:	e131      	b.n	800ab08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a8aa:	2050      	movs	r0, #80	@ 0x50
 800a8ac:	f002 fb84 	bl	800cfb8 <malloc>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a8ba:	69db      	ldr	r3, [r3, #28]
 800a8bc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a8c4:	2302      	movs	r3, #2
 800a8c6:	e11f      	b.n	800ab08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a8c8:	2250      	movs	r2, #80	@ 0x50
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f002 fd48 	bl	800d362 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	211a      	movs	r1, #26
 800a8d8:	fb01 f303 	mul.w	r3, r1, r3
 800a8dc:	4413      	add	r3, r2
 800a8de:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	b25b      	sxtb	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	da15      	bge.n	800a916 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	211a      	movs	r1, #26
 800a8f0:	fb01 f303 	mul.w	r3, r1, r3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	211a      	movs	r1, #26
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a910:	881a      	ldrh	r2, [r3, #0]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 ffbe 	bl	800c89e <USBH_AllocPipe>
 800a922:	4603      	mov	r3, r0
 800a924:	461a      	mov	r2, r3
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	7819      	ldrb	r1, [r3, #0]
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	7858      	ldrb	r0, [r3, #1]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	8952      	ldrh	r2, [r2, #10]
 800a942:	9202      	str	r2, [sp, #8]
 800a944:	2203      	movs	r2, #3
 800a946:	9201      	str	r2, [sp, #4]
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	4623      	mov	r3, r4
 800a94c:	4602      	mov	r2, r0
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 ff76 	bl	800c840 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2200      	movs	r2, #0
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f002 fa85 	bl	800ce6c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a962:	2300      	movs	r3, #0
 800a964:	2200      	movs	r2, #0
 800a966:	210a      	movs	r1, #10
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fc0a 	bl	800b182 <USBH_FindInterface>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a972:	7bfb      	ldrb	r3, [r7, #15]
 800a974:	2bff      	cmp	r3, #255	@ 0xff
 800a976:	d002      	beq.n	800a97e <USBH_CDC_InterfaceInit+0x11a>
 800a978:	7bfb      	ldrb	r3, [r7, #15]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d901      	bls.n	800a982 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a97e:	2302      	movs	r3, #2
 800a980:	e0c2      	b.n	800ab08 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	211a      	movs	r1, #26
 800a988:	fb01 f303 	mul.w	r3, r1, r3
 800a98c:	4413      	add	r3, r2
 800a98e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b25b      	sxtb	r3, r3
 800a996:	2b00      	cmp	r3, #0
 800a998:	da16      	bge.n	800a9c8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	211a      	movs	r1, #26
 800a9a0:	fb01 f303 	mul.w	r3, r1, r3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	211a      	movs	r1, #26
 800a9b6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ba:	4413      	add	r3, r2
 800a9bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a9c0:	881a      	ldrh	r2, [r3, #0]
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	835a      	strh	r2, [r3, #26]
 800a9c6:	e015      	b.n	800a9f4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	211a      	movs	r1, #26
 800a9ce:	fb01 f303 	mul.w	r3, r1, r3
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a9d8:	781a      	ldrb	r2, [r3, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	211a      	movs	r1, #26
 800a9e4:	fb01 f303 	mul.w	r3, r1, r3
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a9ee:	881a      	ldrh	r2, [r3, #0]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	211a      	movs	r1, #26
 800a9fa:	fb01 f303 	mul.w	r3, r1, r3
 800a9fe:	4413      	add	r3, r2
 800aa00:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	b25b      	sxtb	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	da16      	bge.n	800aa3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	211a      	movs	r1, #26
 800aa12:	fb01 f303 	mul.w	r3, r1, r3
 800aa16:	4413      	add	r3, r2
 800aa18:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa1c:	781a      	ldrb	r2, [r3, #0]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	211a      	movs	r1, #26
 800aa28:	fb01 f303 	mul.w	r3, r1, r3
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800aa32:	881a      	ldrh	r2, [r3, #0]
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	835a      	strh	r2, [r3, #26]
 800aa38:	e015      	b.n	800aa66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	211a      	movs	r1, #26
 800aa40:	fb01 f303 	mul.w	r3, r1, r3
 800aa44:	4413      	add	r3, r2
 800aa46:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	211a      	movs	r1, #26
 800aa56:	fb01 f303 	mul.w	r3, r1, r3
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800aa60:	881a      	ldrh	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	7b9b      	ldrb	r3, [r3, #14]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 ff16 	bl	800c89e <USBH_AllocPipe>
 800aa72:	4603      	mov	r3, r0
 800aa74:	461a      	mov	r2, r3
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	7bdb      	ldrb	r3, [r3, #15]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 ff0c 	bl	800c89e <USBH_AllocPipe>
 800aa86:	4603      	mov	r3, r0
 800aa88:	461a      	mov	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	7b59      	ldrb	r1, [r3, #13]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	7b98      	ldrb	r0, [r3, #14]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	8b12      	ldrh	r2, [r2, #24]
 800aaa6:	9202      	str	r2, [sp, #8]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	9201      	str	r2, [sp, #4]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	4623      	mov	r3, r4
 800aab0:	4602      	mov	r2, r0
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f001 fec4 	bl	800c840 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	7b19      	ldrb	r1, [r3, #12]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	7bd8      	ldrb	r0, [r3, #15]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	8b52      	ldrh	r2, [r2, #26]
 800aad0:	9202      	str	r2, [sp, #8]
 800aad2:	2202      	movs	r2, #2
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	4623      	mov	r3, r4
 800aada:	4602      	mov	r2, r0
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 feaf 	bl	800c840 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	7b5b      	ldrb	r3, [r3, #13]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f002 f9ba 	bl	800ce6c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	7b1b      	ldrb	r3, [r3, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f002 f9b3 	bl	800ce6c <USBH_LL_SetToggle>

  return USBH_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd90      	pop	{r4, r7, pc}

0800ab10 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00e      	beq.n	800ab48 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 fea4 	bl	800c87e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f001 fecf 	bl	800c8e0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	7b1b      	ldrb	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00e      	beq.n	800ab6e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	7b1b      	ldrb	r3, [r3, #12]
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f001 fe91 	bl	800c87e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	7b1b      	ldrb	r3, [r3, #12]
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 febc 	bl	800c8e0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	7b5b      	ldrb	r3, [r3, #13]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	7b5b      	ldrb	r3, [r3, #13]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f001 fe7e 	bl	800c87e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7b5b      	ldrb	r3, [r3, #13]
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 fea9 	bl	800c8e0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab9a:	69db      	ldr	r3, [r3, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f002 fa0d 	bl	800cfc8 <free>
    phost->pActiveClass->pData = 0U;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abb4:	2200      	movs	r2, #0
 800abb6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b084      	sub	sp, #16
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3340      	adds	r3, #64	@ 0x40
 800abd8:	4619      	mov	r1, r3
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f8b1 	bl	800ad42 <GetLineCoding>
 800abe0:	4603      	mov	r3, r0
 800abe2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d105      	bne.n	800abf6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800abf0:	2102      	movs	r1, #2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800abf6:	7afb      	ldrb	r3, [r7, #11]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac16:	69db      	ldr	r3, [r3, #28]
 800ac18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d877      	bhi.n	800ad14 <USBH_CDC_Process+0x114>
 800ac24:	a201      	add	r2, pc, #4	@ (adr r2, 800ac2c <USBH_CDC_Process+0x2c>)
 800ac26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac2a:	bf00      	nop
 800ac2c:	0800ac41 	.word	0x0800ac41
 800ac30:	0800ac47 	.word	0x0800ac47
 800ac34:	0800ac77 	.word	0x0800ac77
 800ac38:	0800aceb 	.word	0x0800aceb
 800ac3c:	0800acf9 	.word	0x0800acf9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
      break;
 800ac44:	e06d      	b.n	800ad22 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f897 	bl	800ad80 <SetLineCoding>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ac64:	e058      	b.n	800ad18 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d055      	beq.n	800ad18 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	2204      	movs	r2, #4
 800ac70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ac74:	e050      	b.n	800ad18 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	3340      	adds	r3, #64	@ 0x40
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f860 	bl	800ad42 <GetLineCoding>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ac86:	7bbb      	ldrb	r3, [r7, #14]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d126      	bne.n	800acda <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d13b      	bne.n	800ad1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d133      	bne.n	800ad1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acbe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d12b      	bne.n	800ad1c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800accc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800acce:	429a      	cmp	r2, r3
 800acd0:	d124      	bne.n	800ad1c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f958 	bl	800af88 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800acd8:	e020      	b.n	800ad1c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d01d      	beq.n	800ad1c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2204      	movs	r2, #4
 800ace4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ace8:	e018      	b.n	800ad1c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f867 	bl	800adbe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f8da 	bl	800aeaa <CDC_ProcessReception>
      break;
 800acf6:	e014      	b.n	800ad22 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800acf8:	2100      	movs	r1, #0
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f001 f81a 	bl	800bd34 <USBH_ClrFeature>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ad12:	e005      	b.n	800ad20 <USBH_CDC_Process+0x120>

    default:
      break;
 800ad14:	bf00      	nop
 800ad16:	e004      	b.n	800ad22 <USBH_CDC_Process+0x122>
      break;
 800ad18:	bf00      	nop
 800ad1a:	e002      	b.n	800ad22 <USBH_CDC_Process+0x122>
      break;
 800ad1c:	bf00      	nop
 800ad1e:	e000      	b.n	800ad22 <USBH_CDC_Process+0x122>
      break;
 800ad20:	bf00      	nop

  }

  return status;
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr

0800ad42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
 800ad4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	22a1      	movs	r2, #161	@ 0xa1
 800ad50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2221      	movs	r2, #33	@ 0x21
 800ad56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2207      	movs	r2, #7
 800ad68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	2207      	movs	r2, #7
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fb14 	bl	800c39e <USBH_CtlReq>
 800ad76:	4603      	mov	r3, r0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2221      	movs	r2, #33	@ 0x21
 800ad8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2207      	movs	r2, #7
 800ada6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2207      	movs	r2, #7
 800adac:	4619      	mov	r1, r3
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f001 faf5 	bl	800c39e <USBH_CtlReq>
 800adb4:	4603      	mov	r3, r0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3708      	adds	r7, #8
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af02      	add	r7, sp, #8
 800adc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800add0:	2300      	movs	r3, #0
 800add2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800adda:	2b01      	cmp	r3, #1
 800addc:	d002      	beq.n	800ade4 <CDC_ProcessTransmission+0x26>
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d023      	beq.n	800ae2a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ade2:	e05e      	b.n	800aea2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	8b12      	ldrh	r2, [r2, #24]
 800adec:	4293      	cmp	r3, r2
 800adee:	d90b      	bls.n	800ae08 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	69d9      	ldr	r1, [r3, #28]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8b1a      	ldrh	r2, [r3, #24]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	7b5b      	ldrb	r3, [r3, #13]
 800adfc:	2001      	movs	r0, #1
 800adfe:	9000      	str	r0, [sp, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 fcda 	bl	800c7ba <USBH_BulkSendData>
 800ae06:	e00b      	b.n	800ae20 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	7b5b      	ldrb	r3, [r3, #13]
 800ae16:	2001      	movs	r0, #1
 800ae18:	9000      	str	r0, [sp, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f001 fccd 	bl	800c7ba <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ae28:	e03b      	b.n	800aea2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	7b5b      	ldrb	r3, [r3, #13]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f001 fff1 	bl	800ce18 <USBH_LL_GetURBState>
 800ae36:	4603      	mov	r3, r0
 800ae38:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d128      	bne.n	800ae92 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	68fa      	ldr	r2, [r7, #12]
 800ae46:	8b12      	ldrh	r2, [r2, #24]
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d90e      	bls.n	800ae6a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	8b12      	ldrh	r2, [r2, #24]
 800ae54:	1a9a      	subs	r2, r3, r2
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	8b12      	ldrh	r2, [r2, #24]
 800ae62:	441a      	add	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	61da      	str	r2, [r3, #28]
 800ae68:	e002      	b.n	800ae70 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ae80:	e00e      	b.n	800aea0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f868 	bl	800af60 <USBH_CDC_TransmitCallback>
      break;
 800ae90:	e006      	b.n	800aea0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ae92:	7afb      	ldrb	r3, [r7, #11]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d103      	bne.n	800aea0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800aea0:	bf00      	nop
  }
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b086      	sub	sp, #24
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d002      	beq.n	800aed0 <CDC_ProcessReception+0x26>
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d00e      	beq.n	800aeec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800aece:	e043      	b.n	800af58 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	6a19      	ldr	r1, [r3, #32]
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	8b5a      	ldrh	r2, [r3, #26]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	7b1b      	ldrb	r3, [r3, #12]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 fc91 	bl	800c804 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2204      	movs	r2, #4
 800aee6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800aeea:	e035      	b.n	800af58 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	7b1b      	ldrb	r3, [r3, #12]
 800aef0:	4619      	mov	r1, r3
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 ff90 	bl	800ce18 <USBH_LL_GetURBState>
 800aef8:	4603      	mov	r3, r0
 800aefa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800aefc:	7cfb      	ldrb	r3, [r7, #19]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d129      	bne.n	800af56 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	7b1b      	ldrb	r3, [r3, #12]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f001 fef3 	bl	800ccf4 <USBH_LL_GetLastXferSize>
 800af0e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af14:	68fa      	ldr	r2, [r7, #12]
 800af16:	429a      	cmp	r2, r3
 800af18:	d016      	beq.n	800af48 <CDC_ProcessReception+0x9e>
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	8b5b      	ldrh	r3, [r3, #26]
 800af1e:	461a      	mov	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4293      	cmp	r3, r2
 800af24:	d110      	bne.n	800af48 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	1ad2      	subs	r2, r2, r3
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	6a1a      	ldr	r2, [r3, #32]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	441a      	add	r2, r3
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2203      	movs	r2, #3
 800af42:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800af46:	e006      	b.n	800af56 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f80f 	bl	800af74 <USBH_CDC_ReceiveCallback>
      break;
 800af56:	bf00      	nop
  }
}
 800af58:	bf00      	nop
 800af5a:	3718      	adds	r7, #24
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	4613      	mov	r3, r2
 800afa8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d101      	bne.n	800afb4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800afb0:	2302      	movs	r3, #2
 800afb2:	e029      	b.n	800b008 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	79fa      	ldrb	r2, [r7, #7]
 800afb8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	f000 f81f 	bl	800b010 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d003      	beq.n	800b000 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f001 fdc3 	bl	800cb8c <USBH_LL_Init>

  return USBH_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e009      	b.n	800b036 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	33e0      	adds	r3, #224	@ 0xe0
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	2200      	movs	r2, #0
 800b02e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b0f      	cmp	r3, #15
 800b03a:	d9f2      	bls.n	800b022 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	e009      	b.n	800b056 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b04c:	2200      	movs	r2, #0
 800b04e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b05c:	d3f1      	bcc.n	800b042 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2240      	movs	r2, #64	@ 0x40
 800b082:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	331c      	adds	r3, #28
 800b0ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 f954 	bl	800d362 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b0c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f002 f94b 	bl	800d362 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b0d2:	2212      	movs	r2, #18
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f002 f943 	bl	800d362 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0e2:	223e      	movs	r2, #62	@ 0x3e
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f002 f93b 	bl	800d362 <memset>

  return USBH_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10e      	bne.n	800b132 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b11a:	1c59      	adds	r1, r3, #1
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	33de      	adds	r3, #222	@ 0xde
 800b126:	6839      	ldr	r1, [r7, #0]
 800b128:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	e004      	b.n	800b13c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b132:	2302      	movs	r3, #2
 800b134:	73fb      	strb	r3, [r7, #15]
 800b136:	e001      	b.n	800b13c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b138:	2302      	movs	r3, #2
 800b13a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b160:	78fa      	ldrb	r2, [r7, #3]
 800b162:	429a      	cmp	r2, r3
 800b164:	d204      	bcs.n	800b170 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	78fa      	ldrb	r2, [r7, #3]
 800b16a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b16e:	e001      	b.n	800b174 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b170:	2302      	movs	r3, #2
 800b172:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b182:	b480      	push	{r7}
 800b184:	b087      	sub	sp, #28
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	4608      	mov	r0, r1
 800b18c:	4611      	mov	r1, r2
 800b18e:	461a      	mov	r2, r3
 800b190:	4603      	mov	r3, r0
 800b192:	70fb      	strb	r3, [r7, #3]
 800b194:	460b      	mov	r3, r1
 800b196:	70bb      	strb	r3, [r7, #2]
 800b198:	4613      	mov	r3, r2
 800b19a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b19c:	2300      	movs	r3, #0
 800b19e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b1aa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1ac:	e025      	b.n	800b1fa <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b1ae:	7dfb      	ldrb	r3, [r7, #23]
 800b1b0:	221a      	movs	r2, #26
 800b1b2:	fb02 f303 	mul.w	r3, r2, r3
 800b1b6:	3308      	adds	r3, #8
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3302      	adds	r3, #2
 800b1be:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	795b      	ldrb	r3, [r3, #5]
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d002      	beq.n	800b1d0 <USBH_FindInterface+0x4e>
 800b1ca:	78fb      	ldrb	r3, [r7, #3]
 800b1cc:	2bff      	cmp	r3, #255	@ 0xff
 800b1ce:	d111      	bne.n	800b1f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b1d4:	78ba      	ldrb	r2, [r7, #2]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d002      	beq.n	800b1e0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1da:	78bb      	ldrb	r3, [r7, #2]
 800b1dc:	2bff      	cmp	r3, #255	@ 0xff
 800b1de:	d109      	bne.n	800b1f4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b1e4:	787a      	ldrb	r2, [r7, #1]
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d002      	beq.n	800b1f0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b1ea:	787b      	ldrb	r3, [r7, #1]
 800b1ec:	2bff      	cmp	r3, #255	@ 0xff
 800b1ee:	d101      	bne.n	800b1f4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	e006      	b.n	800b202 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d9d6      	bls.n	800b1ae <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b200:	23ff      	movs	r3, #255	@ 0xff
}
 800b202:	4618      	mov	r0, r3
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 fcf4 	bl	800cc04 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b21c:	2101      	movs	r1, #1
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f001 fe0d 	bl	800ce3e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b088      	sub	sp, #32
 800b234:	af04      	add	r7, sp, #16
 800b236:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b238:	2302      	movs	r3, #2
 800b23a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b246:	b2db      	uxtb	r3, r3
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d102      	bne.n	800b252 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2203      	movs	r2, #3
 800b250:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	f200 81bb 	bhi.w	800b5d4 <USBH_Process+0x3a4>
 800b25e:	a201      	add	r2, pc, #4	@ (adr r2, 800b264 <USBH_Process+0x34>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b295 	.word	0x0800b295
 800b268:	0800b2c7 	.word	0x0800b2c7
 800b26c:	0800b32f 	.word	0x0800b32f
 800b270:	0800b56f 	.word	0x0800b56f
 800b274:	0800b5d5 	.word	0x0800b5d5
 800b278:	0800b3cf 	.word	0x0800b3cf
 800b27c:	0800b515 	.word	0x0800b515
 800b280:	0800b405 	.word	0x0800b405
 800b284:	0800b425 	.word	0x0800b425
 800b288:	0800b443 	.word	0x0800b443
 800b28c:	0800b487 	.word	0x0800b487
 800b290:	0800b557 	.word	0x0800b557
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 819b 	beq.w	800b5d8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b2a8:	20c8      	movs	r0, #200	@ 0xc8
 800b2aa:	f001 fe12 	bl	800ced2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f001 fd05 	bl	800ccbe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b2c4:	e188      	b.n	800b5d8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d107      	bne.n	800b2e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2202      	movs	r2, #2
 800b2dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b2de:	e18a      	b.n	800b5f6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b2e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b2ea:	d914      	bls.n	800b316 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b302:	2b03      	cmp	r3, #3
 800b304:	d903      	bls.n	800b30e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	220d      	movs	r2, #13
 800b30a:	701a      	strb	r2, [r3, #0]
      break;
 800b30c:	e173      	b.n	800b5f6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	701a      	strb	r2, [r3, #0]
      break;
 800b314:	e16f      	b.n	800b5f6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b31c:	f103 020a 	add.w	r2, r3, #10
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b326:	200a      	movs	r0, #10
 800b328:	f001 fdd3 	bl	800ced2 <USBH_Delay>
      break;
 800b32c:	e163      	b.n	800b5f6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b33e:	2104      	movs	r1, #4
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b344:	2064      	movs	r0, #100	@ 0x64
 800b346:	f001 fdc4 	bl	800ced2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f001 fc90 	bl	800cc70 <USBH_LL_GetSpeed>
 800b350:	4603      	mov	r3, r0
 800b352:	461a      	mov	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2205      	movs	r2, #5
 800b35e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b360:	2100      	movs	r1, #0
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f001 fa9b 	bl	800c89e <USBH_AllocPipe>
 800b368:	4603      	mov	r3, r0
 800b36a:	461a      	mov	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b370:	2180      	movs	r1, #128	@ 0x80
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fa93 	bl	800c89e <USBH_AllocPipe>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7919      	ldrb	r1, [r3, #4]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b394:	9202      	str	r2, [sp, #8]
 800b396:	2200      	movs	r2, #0
 800b398:	9201      	str	r2, [sp, #4]
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	4603      	mov	r3, r0
 800b39e:	2280      	movs	r2, #128	@ 0x80
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fa4d 	bl	800c840 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	7959      	ldrb	r1, [r3, #5]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3ba:	9202      	str	r2, [sp, #8]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	9201      	str	r2, [sp, #4]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f001 fa3a 	bl	800c840 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b3cc:	e113      	b.n	800b5f6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 f916 	bl	800b600 <USBH_HandleEnum>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b3d8:	7bbb      	ldrb	r3, [r7, #14]
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f040 80fd 	bne.w	800b5dc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d103      	bne.n	800b3fc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2208      	movs	r2, #8
 800b3f8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b3fa:	e0ef      	b.n	800b5dc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2207      	movs	r2, #7
 800b400:	701a      	strb	r2, [r3, #0]
      break;
 800b402:	e0eb      	b.n	800b5dc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 80e8 	beq.w	800b5e0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b416:	2101      	movs	r1, #1
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2208      	movs	r2, #8
 800b420:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b422:	e0dd      	b.n	800b5e0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fc3a 	bl	800bca6 <USBH_SetCfg>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 80d5 	bne.w	800b5e4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2209      	movs	r2, #9
 800b43e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b440:	e0d0      	b.n	800b5e4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b448:	f003 0320 	and.w	r3, r3, #32
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d016      	beq.n	800b47e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b450:	2101      	movs	r1, #1
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fc4a 	bl	800bcec <USBH_SetFeature>
 800b458:	4603      	mov	r3, r0
 800b45a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d103      	bne.n	800b46c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	220a      	movs	r2, #10
 800b468:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b46a:	e0bd      	b.n	800b5e8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800b46c:	7bbb      	ldrb	r3, [r7, #14]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b03      	cmp	r3, #3
 800b472:	f040 80b9 	bne.w	800b5e8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	220a      	movs	r2, #10
 800b47a:	701a      	strb	r2, [r3, #0]
      break;
 800b47c:	e0b4      	b.n	800b5e8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	220a      	movs	r2, #10
 800b482:	701a      	strb	r2, [r3, #0]
      break;
 800b484:	e0b0      	b.n	800b5e8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 80ad 	beq.w	800b5ec <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]
 800b49e:	e016      	b.n	800b4ce <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b4a0:	7bfa      	ldrb	r2, [r7, #15]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	32de      	adds	r2, #222	@ 0xde
 800b4a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4aa:	791a      	ldrb	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d108      	bne.n	800b4c8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b4b6:	7bfa      	ldrb	r2, [r7, #15]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	32de      	adds	r2, #222	@ 0xde
 800b4bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b4c6:	e005      	b.n	800b4d4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	73fb      	strb	r3, [r7, #15]
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0e5      	beq.n	800b4a0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d016      	beq.n	800b50c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4e4:	689b      	ldr	r3, [r3, #8]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	4798      	blx	r3
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d109      	bne.n	800b504 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2206      	movs	r2, #6
 800b4f4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4fc:	2103      	movs	r1, #3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b502:	e073      	b.n	800b5ec <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	220d      	movs	r2, #13
 800b508:	701a      	strb	r2, [r3, #0]
      break;
 800b50a:	e06f      	b.n	800b5ec <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	220d      	movs	r2, #13
 800b510:	701a      	strb	r2, [r3, #0]
      break;
 800b512:	e06b      	b.n	800b5ec <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d017      	beq.n	800b54e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	4798      	blx	r3
 800b52a:	4603      	mov	r3, r0
 800b52c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d103      	bne.n	800b53e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	220b      	movs	r2, #11
 800b53a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b53c:	e058      	b.n	800b5f0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b02      	cmp	r3, #2
 800b544:	d154      	bne.n	800b5f0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	220d      	movs	r2, #13
 800b54a:	701a      	strb	r2, [r3, #0]
      break;
 800b54c:	e050      	b.n	800b5f0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	220d      	movs	r2, #13
 800b552:	701a      	strb	r2, [r3, #0]
      break;
 800b554:	e04c      	b.n	800b5f0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d049      	beq.n	800b5f4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	4798      	blx	r3
      }
      break;
 800b56c:	e042      	b.n	800b5f4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7ff fd4a 	bl	800b010 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b582:	2b00      	cmp	r3, #0
 800b584:	d009      	beq.n	800b59a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d005      	beq.n	800b5b0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b5aa:	2105      	movs	r1, #5
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d107      	bne.n	800b5cc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fe22 	bl	800b20e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5ca:	e014      	b.n	800b5f6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 fb19 	bl	800cc04 <USBH_LL_Start>
      break;
 800b5d2:	e010      	b.n	800b5f6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b5d4:	bf00      	nop
 800b5d6:	e00e      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5d8:	bf00      	nop
 800b5da:	e00c      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5dc:	bf00      	nop
 800b5de:	e00a      	b.n	800b5f6 <USBH_Process+0x3c6>
    break;
 800b5e0:	bf00      	nop
 800b5e2:	e008      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5e4:	bf00      	nop
 800b5e6:	e006      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5e8:	bf00      	nop
 800b5ea:	e004      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5ec:	bf00      	nop
 800b5ee:	e002      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5f0:	bf00      	nop
 800b5f2:	e000      	b.n	800b5f6 <USBH_Process+0x3c6>
      break;
 800b5f4:	bf00      	nop
  }
  return USBH_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af04      	add	r7, sp, #16
 800b606:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b608:	2301      	movs	r3, #1
 800b60a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b60c:	2301      	movs	r3, #1
 800b60e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b07      	cmp	r3, #7
 800b616:	f200 81bd 	bhi.w	800b994 <USBH_HandleEnum+0x394>
 800b61a:	a201      	add	r2, pc, #4	@ (adr r2, 800b620 <USBH_HandleEnum+0x20>)
 800b61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b620:	0800b641 	.word	0x0800b641
 800b624:	0800b6fb 	.word	0x0800b6fb
 800b628:	0800b765 	.word	0x0800b765
 800b62c:	0800b7ef 	.word	0x0800b7ef
 800b630:	0800b859 	.word	0x0800b859
 800b634:	0800b8c9 	.word	0x0800b8c9
 800b638:	0800b90f 	.word	0x0800b90f
 800b63c:	0800b955 	.word	0x0800b955
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b640:	2108      	movs	r1, #8
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fa4c 	bl	800bae0 <USBH_Get_DevDesc>
 800b648:	4603      	mov	r3, r0
 800b64a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b64c:	7bbb      	ldrb	r3, [r7, #14]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d12e      	bne.n	800b6b0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	7919      	ldrb	r1, [r3, #4]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b676:	9202      	str	r2, [sp, #8]
 800b678:	2200      	movs	r2, #0
 800b67a:	9201      	str	r2, [sp, #4]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	4603      	mov	r3, r0
 800b680:	2280      	movs	r2, #128	@ 0x80
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f001 f8dc 	bl	800c840 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7959      	ldrb	r1, [r3, #5]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b69c:	9202      	str	r2, [sp, #8]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	9201      	str	r2, [sp, #4]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f8c9 	bl	800c840 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b6ae:	e173      	b.n	800b998 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6b0:	7bbb      	ldrb	r3, [r7, #14]
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	f040 8170 	bne.w	800b998 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b6be:	3301      	adds	r3, #1
 800b6c0:	b2da      	uxtb	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d903      	bls.n	800b6da <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	220d      	movs	r2, #13
 800b6d6:	701a      	strb	r2, [r3, #0]
      break;
 800b6d8:	e15e      	b.n	800b998 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	795b      	ldrb	r3, [r3, #5]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 f8fd 	bl	800c8e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	791b      	ldrb	r3, [r3, #4]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f001 f8f7 	bl	800c8e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
      break;
 800b6f8:	e14e      	b.n	800b998 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b6fa:	2112      	movs	r1, #18
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f9ef 	bl	800bae0 <USBH_Get_DevDesc>
 800b702:	4603      	mov	r3, r0
 800b704:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b706:	7bbb      	ldrb	r3, [r7, #14]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d103      	bne.n	800b714 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b712:	e143      	b.n	800b99c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	2b03      	cmp	r3, #3
 800b718:	f040 8140 	bne.w	800b99c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b722:	3301      	adds	r3, #1
 800b724:	b2da      	uxtb	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b732:	2b03      	cmp	r3, #3
 800b734:	d903      	bls.n	800b73e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	220d      	movs	r2, #13
 800b73a:	701a      	strb	r2, [r3, #0]
      break;
 800b73c:	e12e      	b.n	800b99c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	795b      	ldrb	r3, [r3, #5]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 f8cb 	bl	800c8e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	791b      	ldrb	r3, [r3, #4]
 800b74e:	4619      	mov	r1, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f001 f8c5 	bl	800c8e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	701a      	strb	r2, [r3, #0]
      break;
 800b762:	e11b      	b.n	800b99c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b764:	2101      	movs	r1, #1
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fa79 	bl	800bc5e <USBH_SetAddress>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d130      	bne.n	800b7d8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b776:	2002      	movs	r0, #2
 800b778:	f001 fbab 	bl	800ced2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2203      	movs	r2, #3
 800b788:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7919      	ldrb	r1, [r3, #4]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b79e:	9202      	str	r2, [sp, #8]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	9201      	str	r2, [sp, #4]
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2280      	movs	r2, #128	@ 0x80
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f001 f848 	bl	800c840 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	7959      	ldrb	r1, [r3, #5]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b7c4:	9202      	str	r2, [sp, #8]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	9201      	str	r2, [sp, #4]
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f001 f835 	bl	800c840 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b7d6:	e0e3      	b.n	800b9a0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	f040 80e0 	bne.w	800b9a0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	220d      	movs	r2, #13
 800b7e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	705a      	strb	r2, [r3, #1]
      break;
 800b7ec:	e0d8      	b.n	800b9a0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b7ee:	2109      	movs	r1, #9
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f9a1 	bl	800bb38 <USBH_Get_CfgDesc>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2204      	movs	r2, #4
 800b804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b806:	e0cd      	b.n	800b9a4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b808:	7bbb      	ldrb	r3, [r7, #14]
 800b80a:	2b03      	cmp	r3, #3
 800b80c:	f040 80ca 	bne.w	800b9a4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b816:	3301      	adds	r3, #1
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b826:	2b03      	cmp	r3, #3
 800b828:	d903      	bls.n	800b832 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	220d      	movs	r2, #13
 800b82e:	701a      	strb	r2, [r3, #0]
      break;
 800b830:	e0b8      	b.n	800b9a4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	795b      	ldrb	r3, [r3, #5]
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f001 f851 	bl	800c8e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	791b      	ldrb	r3, [r3, #4]
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 f84b 	bl	800c8e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
      break;
 800b856:	e0a5      	b.n	800b9a4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f969 	bl	800bb38 <USBH_Get_CfgDesc>
 800b866:	4603      	mov	r3, r0
 800b868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d103      	bne.n	800b878 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2205      	movs	r2, #5
 800b874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b876:	e097      	b.n	800b9a8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b878:	7bbb      	ldrb	r3, [r7, #14]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	f040 8094 	bne.w	800b9a8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b886:	3301      	adds	r3, #1
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b896:	2b03      	cmp	r3, #3
 800b898:	d903      	bls.n	800b8a2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	220d      	movs	r2, #13
 800b89e:	701a      	strb	r2, [r3, #0]
      break;
 800b8a0:	e082      	b.n	800b9a8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	795b      	ldrb	r3, [r3, #5]
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f001 f819 	bl	800c8e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	791b      	ldrb	r3, [r3, #4]
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 f813 	bl	800c8e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
      break;
 800b8c6:	e06f      	b.n	800b9a8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d019      	beq.n	800b906 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b8de:	23ff      	movs	r3, #255	@ 0xff
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f953 	bl	800bb8c <USBH_Get_StringDesc>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d103      	bne.n	800b8f8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2206      	movs	r2, #6
 800b8f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b8f6:	e059      	b.n	800b9ac <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8f8:	7bbb      	ldrb	r3, [r7, #14]
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d156      	bne.n	800b9ac <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2206      	movs	r2, #6
 800b902:	705a      	strb	r2, [r3, #1]
      break;
 800b904:	e052      	b.n	800b9ac <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2206      	movs	r2, #6
 800b90a:	705a      	strb	r2, [r3, #1]
      break;
 800b90c:	e04e      	b.n	800b9ac <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b914:	2b00      	cmp	r3, #0
 800b916:	d019      	beq.n	800b94c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b924:	23ff      	movs	r3, #255	@ 0xff
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f930 	bl	800bb8c <USBH_Get_StringDesc>
 800b92c:	4603      	mov	r3, r0
 800b92e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b930:	7bbb      	ldrb	r3, [r7, #14]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2207      	movs	r2, #7
 800b93a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b93c:	e038      	b.n	800b9b0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	2b03      	cmp	r3, #3
 800b942:	d135      	bne.n	800b9b0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2207      	movs	r2, #7
 800b948:	705a      	strb	r2, [r3, #1]
      break;
 800b94a:	e031      	b.n	800b9b0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2207      	movs	r2, #7
 800b950:	705a      	strb	r2, [r3, #1]
      break;
 800b952:	e02d      	b.n	800b9b0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d017      	beq.n	800b98e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b96a:	23ff      	movs	r3, #255	@ 0xff
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f90d 	bl	800bb8c <USBH_Get_StringDesc>
 800b972:	4603      	mov	r3, r0
 800b974:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d102      	bne.n	800b982 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b980:	e018      	b.n	800b9b4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b982:	7bbb      	ldrb	r3, [r7, #14]
 800b984:	2b03      	cmp	r3, #3
 800b986:	d115      	bne.n	800b9b4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
      break;
 800b98c:	e012      	b.n	800b9b4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b98e:	2300      	movs	r3, #0
 800b990:	73fb      	strb	r3, [r7, #15]
      break;
 800b992:	e00f      	b.n	800b9b4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b994:	bf00      	nop
 800b996:	e00e      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b998:	bf00      	nop
 800b99a:	e00c      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b99c:	bf00      	nop
 800b99e:	e00a      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9a0:	bf00      	nop
 800b9a2:	e008      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9a4:	bf00      	nop
 800b9a6:	e006      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9a8:	bf00      	nop
 800b9aa:	e004      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9ac:	bf00      	nop
 800b9ae:	e002      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9b0:	bf00      	nop
 800b9b2:	e000      	b.n	800b9b6 <USBH_HandleEnum+0x3b6>
      break;
 800b9b4:	bf00      	nop
  }
  return Status;
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 f804 	bl	800ba02 <USBH_HandleSof>
}
 800b9fa:	bf00      	nop
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	2b0b      	cmp	r3, #11
 800ba12:	d10a      	bne.n	800ba2a <USBH_HandleSof+0x28>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ba42:	bf00      	nop
}
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800ba5e:	bf00      	nop
}
 800ba60:	370c      	adds	r7, #12
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b083      	sub	sp, #12
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f001 f8be 	bl	800cc3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	791b      	ldrb	r3, [r3, #4]
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 ff0b 	bl	800c8e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	795b      	ldrb	r3, [r3, #5]
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 ff05 	bl	800c8e0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af02      	add	r7, sp, #8
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	460b      	mov	r3, r1
 800baea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800baec:	887b      	ldrh	r3, [r7, #2]
 800baee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baf2:	d901      	bls.n	800baf8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e01b      	b.n	800bb30 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bafe:	887b      	ldrh	r3, [r7, #2]
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4613      	mov	r3, r2
 800bb04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f872 	bl	800bbf4 <USBH_GetDescriptor>
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d109      	bne.n	800bb2e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb20:	887a      	ldrh	r2, [r7, #2]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f929 	bl	800bd7c <USBH_ParseDevDesc>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b086      	sub	sp, #24
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	331c      	adds	r3, #28
 800bb48:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bb4a:	887b      	ldrh	r3, [r7, #2]
 800bb4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb50:	d901      	bls.n	800bb56 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e016      	b.n	800bb84 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bb56:	887b      	ldrh	r3, [r7, #2]
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb60:	2100      	movs	r1, #0
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f846 	bl	800bbf4 <USBH_GetDescriptor>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d107      	bne.n	800bb82 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bb72:	887b      	ldrh	r3, [r7, #2]
 800bb74:	461a      	mov	r2, r3
 800bb76:	68b9      	ldr	r1, [r7, #8]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f9af 	bl	800bedc <USBH_ParseCfgDesc>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b088      	sub	sp, #32
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	461a      	mov	r2, r3
 800bb98:	460b      	mov	r3, r1
 800bb9a:	72fb      	strb	r3, [r7, #11]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bba0:	893b      	ldrh	r3, [r7, #8]
 800bba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bba6:	d802      	bhi.n	800bbae <USBH_Get_StringDesc+0x22>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e01c      	b.n	800bbec <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bbb2:	7afb      	ldrb	r3, [r7, #11]
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bbba:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bbc2:	893b      	ldrh	r3, [r7, #8]
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	2100      	movs	r1, #0
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f812 	bl	800bbf4 <USBH_GetDescriptor>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d107      	bne.n	800bbea <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bbe0:	893a      	ldrh	r2, [r7, #8]
 800bbe2:	6879      	ldr	r1, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 fb8d 	bl	800c304 <USBH_ParseStringDesc>
  }

  return status;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	607b      	str	r3, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	72fb      	strb	r3, [r7, #11]
 800bc02:	4613      	mov	r3, r2
 800bc04:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	789b      	ldrb	r3, [r3, #2]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d11c      	bne.n	800bc48 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc0e:	7afb      	ldrb	r3, [r7, #11]
 800bc10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2206      	movs	r2, #6
 800bc1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	893a      	ldrh	r2, [r7, #8]
 800bc24:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc26:	893b      	ldrh	r3, [r7, #8]
 800bc28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc30:	d104      	bne.n	800bc3c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f240 4209 	movw	r2, #1033	@ 0x409
 800bc38:	829a      	strh	r2, [r3, #20]
 800bc3a:	e002      	b.n	800bc42 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	8b3a      	ldrh	r2, [r7, #24]
 800bc46:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bc48:	8b3b      	ldrh	r3, [r7, #24]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	6879      	ldr	r1, [r7, #4]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 fba5 	bl	800c39e <USBH_CtlReq>
 800bc54:	4603      	mov	r3, r0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	789b      	ldrb	r3, [r3, #2]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d10f      	bne.n	800bc92 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2205      	movs	r2, #5
 800bc7c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bc7e:	78fb      	ldrb	r3, [r7, #3]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bc92:	2200      	movs	r2, #0
 800bc94:	2100      	movs	r1, #0
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 fb81 	bl	800c39e <USBH_CtlReq>
 800bc9c:	4603      	mov	r3, r0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	789b      	ldrb	r3, [r3, #2]
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d10e      	bne.n	800bcd8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2209      	movs	r2, #9
 800bcc4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	887a      	ldrh	r2, [r7, #2]
 800bcca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2100      	movs	r1, #0
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fb5e 	bl	800c39e <USBH_CtlReq>
 800bce2:	4603      	mov	r3, r0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	789b      	ldrb	r3, [r3, #2]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d10f      	bne.n	800bd20 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd20:	2200      	movs	r2, #0
 800bd22:	2100      	movs	r1, #0
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fb3a 	bl	800c39e <USBH_CtlReq>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d10f      	bne.n	800bd68 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2201      	movs	r2, #1
 800bd52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fb16 	bl	800c39e <USBH_CtlReq>
 800bd72:	4603      	mov	r3, r0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	4613      	mov	r3, r2
 800bd88:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bd90:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bd9c:	2302      	movs	r3, #2
 800bd9e:	e094      	b.n	800beca <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	785a      	ldrb	r2, [r3, #1]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	3303      	adds	r3, #3
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	791a      	ldrb	r2, [r3, #4]
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	795a      	ldrb	r2, [r3, #5]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	799a      	ldrb	r2, [r3, #6]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	79da      	ldrb	r2, [r3, #7]
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d004      	beq.n	800bdfe <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d11b      	bne.n	800be36 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	79db      	ldrb	r3, [r3, #7]
 800be02:	2b20      	cmp	r3, #32
 800be04:	dc0f      	bgt.n	800be26 <USBH_ParseDevDesc+0xaa>
 800be06:	2b08      	cmp	r3, #8
 800be08:	db0f      	blt.n	800be2a <USBH_ParseDevDesc+0xae>
 800be0a:	3b08      	subs	r3, #8
 800be0c:	4a32      	ldr	r2, [pc, #200]	@ (800bed8 <USBH_ParseDevDesc+0x15c>)
 800be0e:	fa22 f303 	lsr.w	r3, r2, r3
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b00      	cmp	r3, #0
 800be18:	bf14      	ite	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	2300      	moveq	r3, #0
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <USBH_ParseDevDesc+0xb6>
 800be24:	e001      	b.n	800be2a <USBH_ParseDevDesc+0xae>
 800be26:	2b40      	cmp	r3, #64	@ 0x40
 800be28:	d003      	beq.n	800be32 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2208      	movs	r2, #8
 800be2e:	71da      	strb	r2, [r3, #7]
        break;
 800be30:	e000      	b.n	800be34 <USBH_ParseDevDesc+0xb8>
        break;
 800be32:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800be34:	e00e      	b.n	800be54 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d107      	bne.n	800be50 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	79db      	ldrb	r3, [r3, #7]
 800be44:	2b08      	cmp	r3, #8
 800be46:	d005      	beq.n	800be54 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	2208      	movs	r2, #8
 800be4c:	71da      	strb	r2, [r3, #7]
 800be4e:	e001      	b.n	800be54 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800be50:	2303      	movs	r3, #3
 800be52:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800be54:	88fb      	ldrh	r3, [r7, #6]
 800be56:	2b08      	cmp	r3, #8
 800be58:	d936      	bls.n	800bec8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3308      	adds	r3, #8
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	3309      	adds	r3, #9
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	021b      	lsls	r3, r3, #8
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b29a      	uxth	r2, r3
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	330a      	adds	r3, #10
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	461a      	mov	r2, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	330b      	adds	r3, #11
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	b29b      	uxth	r3, r3
 800be86:	4313      	orrs	r3, r2
 800be88:	b29a      	uxth	r2, r3
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	330c      	adds	r3, #12
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	330d      	adds	r3, #13
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	021b      	lsls	r3, r3, #8
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	4313      	orrs	r3, r2
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	7b9a      	ldrb	r2, [r3, #14]
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	7bda      	ldrb	r2, [r3, #15]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	7c1a      	ldrb	r2, [r3, #16]
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	7c5a      	ldrb	r2, [r3, #17]
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beca:	4618      	mov	r0, r3
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	01000101 	.word	0x01000101

0800bedc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b08c      	sub	sp, #48	@ 0x30
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	60f8      	str	r0, [r7, #12]
 800bee4:	60b9      	str	r1, [r7, #8]
 800bee6:	4613      	mov	r3, r2
 800bee8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bef0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bef8:	2300      	movs	r3, #0
 800befa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800befe:	2300      	movs	r3, #0
 800bf00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e0da      	b.n	800c0c4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b09      	cmp	r3, #9
 800bf18:	d002      	beq.n	800bf20 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1c:	2209      	movs	r2, #9
 800bf1e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	781a      	ldrb	r2, [r3, #0]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	785a      	ldrb	r2, [r3, #1]
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3302      	adds	r3, #2
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	3303      	adds	r3, #3
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf4a:	bf28      	it	cs
 800bf4c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	6a3b      	ldr	r3, [r7, #32]
 800bf54:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	791a      	ldrb	r2, [r3, #4]
 800bf5a:	6a3b      	ldr	r3, [r7, #32]
 800bf5c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	795a      	ldrb	r2, [r3, #5]
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	799a      	ldrb	r2, [r3, #6]
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	79da      	ldrb	r2, [r3, #7]
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	7a1a      	ldrb	r2, [r3, #8]
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	2b09      	cmp	r3, #9
 800bf82:	f240 809d 	bls.w	800c0c0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800bf86:	2309      	movs	r3, #9
 800bf88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf8e:	e081      	b.n	800c094 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf90:	f107 0316 	add.w	r3, r7, #22
 800bf94:	4619      	mov	r1, r3
 800bf96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf98:	f000 f9e7 	bl	800c36a <USBH_GetNextDesc>
 800bf9c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d176      	bne.n	800c094 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bfa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b09      	cmp	r3, #9
 800bfac:	d002      	beq.n	800bfb4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb0:	2209      	movs	r2, #9
 800bfb2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfb8:	221a      	movs	r2, #26
 800bfba:	fb02 f303 	mul.w	r3, r2, r3
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	6a3a      	ldr	r2, [r7, #32]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	3302      	adds	r3, #2
 800bfc6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bfc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bfca:	69f8      	ldr	r0, [r7, #28]
 800bfcc:	f000 f87e 	bl	800c0cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bfda:	e043      	b.n	800c064 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfdc:	f107 0316 	add.w	r3, r7, #22
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfe4:	f000 f9c1 	bl	800c36a <USBH_GetNextDesc>
 800bfe8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bfea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	2b05      	cmp	r3, #5
 800bff0:	d138      	bne.n	800c064 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	795b      	ldrb	r3, [r3, #5]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d113      	bne.n	800c022 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d003      	beq.n	800c00a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	799b      	ldrb	r3, [r3, #6]
 800c006:	2b03      	cmp	r3, #3
 800c008:	d10b      	bne.n	800c022 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	79db      	ldrb	r3, [r3, #7]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <USBH_ParseCfgDesc+0x14e>
 800c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b09      	cmp	r3, #9
 800c018:	d007      	beq.n	800c02a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	2209      	movs	r2, #9
 800c01e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c020:	e003      	b.n	800c02a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	2207      	movs	r2, #7
 800c026:	701a      	strb	r2, [r3, #0]
 800c028:	e000      	b.n	800c02c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c02a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c030:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c034:	3201      	adds	r2, #1
 800c036:	00d2      	lsls	r2, r2, #3
 800c038:	211a      	movs	r1, #26
 800c03a:	fb01 f303 	mul.w	r3, r1, r3
 800c03e:	4413      	add	r3, r2
 800c040:	3308      	adds	r3, #8
 800c042:	6a3a      	ldr	r2, [r7, #32]
 800c044:	4413      	add	r3, r2
 800c046:	3304      	adds	r3, #4
 800c048:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c04a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c04c:	69b9      	ldr	r1, [r7, #24]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 f870 	bl	800c134 <USBH_ParseEPDesc>
 800c054:	4603      	mov	r3, r0
 800c056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c05a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c05e:	3301      	adds	r3, #1
 800c060:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	791b      	ldrb	r3, [r3, #4]
 800c068:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d204      	bcs.n	800c07a <USBH_ParseCfgDesc+0x19e>
 800c070:	6a3b      	ldr	r3, [r7, #32]
 800c072:	885a      	ldrh	r2, [r3, #2]
 800c074:	8afb      	ldrh	r3, [r7, #22]
 800c076:	429a      	cmp	r2, r3
 800c078:	d8b0      	bhi.n	800bfdc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	791b      	ldrb	r3, [r3, #4]
 800c07e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c082:	429a      	cmp	r2, r3
 800c084:	d201      	bcs.n	800c08a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c086:	2303      	movs	r3, #3
 800c088:	e01c      	b.n	800c0c4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c08a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c08e:	3301      	adds	r3, #1
 800c090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d805      	bhi.n	800c0a8 <USBH_ParseCfgDesc+0x1cc>
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	885a      	ldrh	r2, [r3, #2]
 800c0a0:	8afb      	ldrh	r3, [r7, #22]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	f63f af74 	bhi.w	800bf90 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c0a8:	6a3b      	ldr	r3, [r7, #32]
 800c0aa:	791b      	ldrb	r3, [r3, #4]
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	bf28      	it	cs
 800c0b0:	2302      	movcs	r3, #2
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d201      	bcs.n	800c0c0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c0bc:	2303      	movs	r3, #3
 800c0be:	e001      	b.n	800c0c4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c0c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3730      	adds	r7, #48	@ 0x30
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781a      	ldrb	r2, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	785a      	ldrb	r2, [r3, #1]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	789a      	ldrb	r2, [r3, #2]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	78da      	ldrb	r2, [r3, #3]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	bf28      	it	cs
 800c100:	2302      	movcs	r3, #2
 800c102:	b2da      	uxtb	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	795a      	ldrb	r2, [r3, #5]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	799a      	ldrb	r2, [r3, #6]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	79da      	ldrb	r2, [r3, #7]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	7a1a      	ldrb	r2, [r3, #8]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	721a      	strb	r2, [r3, #8]
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	781a      	ldrb	r2, [r3, #0]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	785a      	ldrb	r2, [r3, #1]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	789a      	ldrb	r2, [r3, #2]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	78da      	ldrb	r2, [r3, #3]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	3304      	adds	r3, #4
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3305      	adds	r3, #5
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	021b      	lsls	r3, r3, #8
 800c174:	b29b      	uxth	r3, r3
 800c176:	4313      	orrs	r3, r2
 800c178:	b29a      	uxth	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	799a      	ldrb	r2, [r3, #6]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	889b      	ldrh	r3, [r3, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d009      	beq.n	800c1a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c196:	d804      	bhi.n	800c1a2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a0:	d901      	bls.n	800c1a6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d136      	bne.n	800c21e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	78db      	ldrb	r3, [r3, #3]
 800c1b4:	f003 0303 	and.w	r3, r3, #3
 800c1b8:	2b02      	cmp	r3, #2
 800c1ba:	d108      	bne.n	800c1ce <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	889b      	ldrh	r3, [r3, #4]
 800c1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1c4:	f240 8097 	bls.w	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	75fb      	strb	r3, [r7, #23]
 800c1cc:	e093      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	78db      	ldrb	r3, [r3, #3]
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d107      	bne.n	800c1ea <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	889b      	ldrh	r3, [r3, #4]
 800c1de:	2b40      	cmp	r3, #64	@ 0x40
 800c1e0:	f240 8089 	bls.w	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	75fb      	strb	r3, [r7, #23]
 800c1e8:	e085      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	78db      	ldrb	r3, [r3, #3]
 800c1ee:	f003 0303 	and.w	r3, r3, #3
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d005      	beq.n	800c202 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	78db      	ldrb	r3, [r3, #3]
 800c1fa:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	d10a      	bne.n	800c218 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	799b      	ldrb	r3, [r3, #6]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <USBH_ParseEPDesc+0xde>
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	799b      	ldrb	r3, [r3, #6]
 800c20e:	2b10      	cmp	r3, #16
 800c210:	d970      	bls.n	800c2f4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c212:	2303      	movs	r3, #3
 800c214:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c216:	e06d      	b.n	800c2f4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c218:	2303      	movs	r3, #3
 800c21a:	75fb      	strb	r3, [r7, #23]
 800c21c:	e06b      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c224:	2b01      	cmp	r3, #1
 800c226:	d13c      	bne.n	800c2a2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	78db      	ldrb	r3, [r3, #3]
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	2b02      	cmp	r3, #2
 800c232:	d005      	beq.n	800c240 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	78db      	ldrb	r3, [r3, #3]
 800c238:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d106      	bne.n	800c24e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	889b      	ldrh	r3, [r3, #4]
 800c244:	2b40      	cmp	r3, #64	@ 0x40
 800c246:	d956      	bls.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c248:	2303      	movs	r3, #3
 800c24a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c24c:	e053      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	78db      	ldrb	r3, [r3, #3]
 800c252:	f003 0303 	and.w	r3, r3, #3
 800c256:	2b01      	cmp	r3, #1
 800c258:	d10e      	bne.n	800c278 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	799b      	ldrb	r3, [r3, #6]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d007      	beq.n	800c272 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c266:	2b10      	cmp	r3, #16
 800c268:	d803      	bhi.n	800c272 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c26e:	2b40      	cmp	r3, #64	@ 0x40
 800c270:	d941      	bls.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c272:	2303      	movs	r3, #3
 800c274:	75fb      	strb	r3, [r7, #23]
 800c276:	e03e      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	78db      	ldrb	r3, [r3, #3]
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	2b03      	cmp	r3, #3
 800c282:	d10b      	bne.n	800c29c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	799b      	ldrb	r3, [r3, #6]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d004      	beq.n	800c296 <USBH_ParseEPDesc+0x162>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	889b      	ldrh	r3, [r3, #4]
 800c290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c294:	d32f      	bcc.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c296:	2303      	movs	r3, #3
 800c298:	75fb      	strb	r3, [r7, #23]
 800c29a:	e02c      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c29c:	2303      	movs	r3, #3
 800c29e:	75fb      	strb	r3, [r7, #23]
 800c2a0:	e029      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d120      	bne.n	800c2ee <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	78db      	ldrb	r3, [r3, #3]
 800c2b0:	f003 0303 	and.w	r3, r3, #3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	889b      	ldrh	r3, [r3, #4]
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d01a      	beq.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	75fb      	strb	r3, [r7, #23]
 800c2c4:	e017      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	78db      	ldrb	r3, [r3, #3]
 800c2ca:	f003 0303 	and.w	r3, r3, #3
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d10a      	bne.n	800c2e8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	799b      	ldrb	r3, [r3, #6]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d003      	beq.n	800c2e2 <USBH_ParseEPDesc+0x1ae>
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	889b      	ldrh	r3, [r3, #4]
 800c2de:	2b08      	cmp	r3, #8
 800c2e0:	d909      	bls.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2e2:	2303      	movs	r3, #3
 800c2e4:	75fb      	strb	r3, [r7, #23]
 800c2e6:	e006      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
 800c2ec:	e003      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	75fb      	strb	r3, [r7, #23]
 800c2f2:	e000      	b.n	800c2f6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c2f4:	bf00      	nop
  }

  return status;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	371c      	adds	r7, #28
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3301      	adds	r3, #1
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b03      	cmp	r3, #3
 800c31a:	d120      	bne.n	800c35e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	1e9a      	subs	r2, r3, #2
 800c322:	88fb      	ldrh	r3, [r7, #6]
 800c324:	4293      	cmp	r3, r2
 800c326:	bf28      	it	cs
 800c328:	4613      	movcs	r3, r2
 800c32a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3302      	adds	r3, #2
 800c330:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c332:	2300      	movs	r3, #0
 800c334:	82fb      	strh	r3, [r7, #22]
 800c336:	e00b      	b.n	800c350 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c338:	8afb      	ldrh	r3, [r7, #22]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	4413      	add	r3, r2
 800c33e:	781a      	ldrb	r2, [r3, #0]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3301      	adds	r3, #1
 800c348:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c34a:	8afb      	ldrh	r3, [r7, #22]
 800c34c:	3302      	adds	r3, #2
 800c34e:	82fb      	strh	r3, [r7, #22]
 800c350:	8afa      	ldrh	r2, [r7, #22]
 800c352:	8abb      	ldrh	r3, [r7, #20]
 800c354:	429a      	cmp	r2, r3
 800c356:	d3ef      	bcc.n	800c338 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2200      	movs	r2, #0
 800c35c:	701a      	strb	r2, [r3, #0]
  }
}
 800c35e:	bf00      	nop
 800c360:	371c      	adds	r7, #28
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c36a:	b480      	push	{r7}
 800c36c:	b085      	sub	sp, #20
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6078      	str	r0, [r7, #4]
 800c372:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7812      	ldrb	r2, [r2, #0]
 800c37c:	4413      	add	r3, r2
 800c37e:	b29a      	uxth	r2, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c390:	68fb      	ldr	r3, [r7, #12]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3714      	adds	r7, #20
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr

0800c39e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b086      	sub	sp, #24
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	60f8      	str	r0, [r7, #12]
 800c3a6:	60b9      	str	r1, [r7, #8]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d002      	beq.n	800c3be <USBH_CtlReq+0x20>
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d00f      	beq.n	800c3dc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c3bc:	e027      	b.n	800c40e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68ba      	ldr	r2, [r7, #8]
 800c3c2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	88fa      	ldrh	r2, [r7, #6]
 800c3c8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c3da:	e018      	b.n	800c40e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 f81b 	bl	800c418 <USBH_HandleControl>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <USBH_CtlReq+0x54>
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d106      	bne.n	800c400 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	761a      	strb	r2, [r3, #24]
      break;
 800c3fe:	e005      	b.n	800c40c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d102      	bne.n	800c40c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2201      	movs	r2, #1
 800c40a:	709a      	strb	r2, [r3, #2]
      break;
 800c40c:	bf00      	nop
  }
  return status;
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3718      	adds	r7, #24
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c420:	2301      	movs	r3, #1
 800c422:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c424:	2300      	movs	r3, #0
 800c426:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7e1b      	ldrb	r3, [r3, #24]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	2b0a      	cmp	r3, #10
 800c430:	f200 8156 	bhi.w	800c6e0 <USBH_HandleControl+0x2c8>
 800c434:	a201      	add	r2, pc, #4	@ (adr r2, 800c43c <USBH_HandleControl+0x24>)
 800c436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43a:	bf00      	nop
 800c43c:	0800c469 	.word	0x0800c469
 800c440:	0800c483 	.word	0x0800c483
 800c444:	0800c4ed 	.word	0x0800c4ed
 800c448:	0800c513 	.word	0x0800c513
 800c44c:	0800c54b 	.word	0x0800c54b
 800c450:	0800c575 	.word	0x0800c575
 800c454:	0800c5c7 	.word	0x0800c5c7
 800c458:	0800c5e9 	.word	0x0800c5e9
 800c45c:	0800c625 	.word	0x0800c625
 800c460:	0800c64b 	.word	0x0800c64b
 800c464:	0800c689 	.word	0x0800c689
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f103 0110 	add.w	r1, r3, #16
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	795b      	ldrb	r3, [r3, #5]
 800c472:	461a      	mov	r2, r3
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f943 	bl	800c700 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2202      	movs	r2, #2
 800c47e:	761a      	strb	r2, [r3, #24]
      break;
 800c480:	e139      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	795b      	ldrb	r3, [r3, #5]
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fcc5 	bl	800ce18 <USBH_LL_GetURBState>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d11e      	bne.n	800c4d6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	7c1b      	ldrb	r3, [r3, #16]
 800c49c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c4a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	8adb      	ldrh	r3, [r3, #22]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c4aa:	7b7b      	ldrb	r3, [r7, #13]
 800c4ac:	2b80      	cmp	r3, #128	@ 0x80
 800c4ae:	d103      	bne.n	800c4b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2203      	movs	r2, #3
 800c4b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4b6:	e115      	b.n	800c6e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2205      	movs	r2, #5
 800c4bc:	761a      	strb	r2, [r3, #24]
      break;
 800c4be:	e111      	b.n	800c6e4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c4c0:	7b7b      	ldrb	r3, [r7, #13]
 800c4c2:	2b80      	cmp	r3, #128	@ 0x80
 800c4c4:	d103      	bne.n	800c4ce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2209      	movs	r2, #9
 800c4ca:	761a      	strb	r2, [r3, #24]
      break;
 800c4cc:	e10a      	b.n	800c6e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2207      	movs	r2, #7
 800c4d2:	761a      	strb	r2, [r3, #24]
      break;
 800c4d4:	e106      	b.n	800c6e4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c4d6:	7bbb      	ldrb	r3, [r7, #14]
 800c4d8:	2b04      	cmp	r3, #4
 800c4da:	d003      	beq.n	800c4e4 <USBH_HandleControl+0xcc>
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	f040 8100 	bne.w	800c6e4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	220b      	movs	r2, #11
 800c4e8:	761a      	strb	r2, [r3, #24]
      break;
 800c4ea:	e0fb      	b.n	800c6e4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6899      	ldr	r1, [r3, #8]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	899a      	ldrh	r2, [r3, #12]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	791b      	ldrb	r3, [r3, #4]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f93a 	bl	800c77e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2204      	movs	r2, #4
 800c50e:	761a      	strb	r2, [r3, #24]
      break;
 800c510:	e0f1      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	791b      	ldrb	r3, [r3, #4]
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fc7d 	bl	800ce18 <USBH_LL_GetURBState>
 800c51e:	4603      	mov	r3, r0
 800c520:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c522:	7bbb      	ldrb	r3, [r7, #14]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d102      	bne.n	800c52e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2209      	movs	r2, #9
 800c52c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	2b05      	cmp	r3, #5
 800c532:	d102      	bne.n	800c53a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c534:	2303      	movs	r3, #3
 800c536:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c538:	e0d6      	b.n	800c6e8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c53a:	7bbb      	ldrb	r3, [r7, #14]
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	f040 80d3 	bne.w	800c6e8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	220b      	movs	r2, #11
 800c546:	761a      	strb	r2, [r3, #24]
      break;
 800c548:	e0ce      	b.n	800c6e8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6899      	ldr	r1, [r3, #8]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	899a      	ldrh	r2, [r3, #12]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	795b      	ldrb	r3, [r3, #5]
 800c556:	2001      	movs	r0, #1
 800c558:	9000      	str	r0, [sp, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f8ea 	bl	800c734 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c566:	b29a      	uxth	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2206      	movs	r2, #6
 800c570:	761a      	strb	r2, [r3, #24]
      break;
 800c572:	e0c0      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	795b      	ldrb	r3, [r3, #5]
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fc4c 	bl	800ce18 <USBH_LL_GetURBState>
 800c580:	4603      	mov	r3, r0
 800c582:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d103      	bne.n	800c592 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2207      	movs	r2, #7
 800c58e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c590:	e0ac      	b.n	800c6ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c592:	7bbb      	ldrb	r3, [r7, #14]
 800c594:	2b05      	cmp	r3, #5
 800c596:	d105      	bne.n	800c5a4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	220c      	movs	r2, #12
 800c59c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5a2:	e0a3      	b.n	800c6ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d103      	bne.n	800c5b2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2205      	movs	r2, #5
 800c5ae:	761a      	strb	r2, [r3, #24]
      break;
 800c5b0:	e09c      	b.n	800c6ec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c5b2:	7bbb      	ldrb	r3, [r7, #14]
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	f040 8099 	bne.w	800c6ec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	220b      	movs	r2, #11
 800c5be:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5c4:	e092      	b.n	800c6ec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	791b      	ldrb	r3, [r3, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f8d5 	bl	800c77e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2208      	movs	r2, #8
 800c5e4:	761a      	strb	r2, [r3, #24]

      break;
 800c5e6:	e086      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	791b      	ldrb	r3, [r3, #4]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fc12 	bl	800ce18 <USBH_LL_GetURBState>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d105      	bne.n	800c60a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	220d      	movs	r2, #13
 800c602:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c608:	e072      	b.n	800c6f0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	d103      	bne.n	800c618 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	220b      	movs	r2, #11
 800c614:	761a      	strb	r2, [r3, #24]
      break;
 800c616:	e06b      	b.n	800c6f0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c618:	7bbb      	ldrb	r3, [r7, #14]
 800c61a:	2b05      	cmp	r3, #5
 800c61c:	d168      	bne.n	800c6f0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c61e:	2303      	movs	r3, #3
 800c620:	73fb      	strb	r3, [r7, #15]
      break;
 800c622:	e065      	b.n	800c6f0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	795b      	ldrb	r3, [r3, #5]
 800c628:	2201      	movs	r2, #1
 800c62a:	9200      	str	r2, [sp, #0]
 800c62c:	2200      	movs	r2, #0
 800c62e:	2100      	movs	r1, #0
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f87f 	bl	800c734 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	220a      	movs	r2, #10
 800c646:	761a      	strb	r2, [r3, #24]
      break;
 800c648:	e055      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	795b      	ldrb	r3, [r3, #5]
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 fbe1 	bl	800ce18 <USBH_LL_GetURBState>
 800c656:	4603      	mov	r3, r0
 800c658:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d105      	bne.n	800c66c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c660:	2300      	movs	r3, #0
 800c662:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	220d      	movs	r2, #13
 800c668:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c66a:	e043      	b.n	800c6f4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c66c:	7bbb      	ldrb	r3, [r7, #14]
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d103      	bne.n	800c67a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2209      	movs	r2, #9
 800c676:	761a      	strb	r2, [r3, #24]
      break;
 800c678:	e03c      	b.n	800c6f4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c67a:	7bbb      	ldrb	r3, [r7, #14]
 800c67c:	2b04      	cmp	r3, #4
 800c67e:	d139      	bne.n	800c6f4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	220b      	movs	r2, #11
 800c684:	761a      	strb	r2, [r3, #24]
      break;
 800c686:	e035      	b.n	800c6f4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7e5b      	ldrb	r3, [r3, #25]
 800c68c:	3301      	adds	r3, #1
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	765a      	strb	r2, [r3, #25]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	7e5b      	ldrb	r3, [r3, #25]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d806      	bhi.n	800c6aa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c6a8:	e025      	b.n	800c6f6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c6b0:	2106      	movs	r1, #6
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	795b      	ldrb	r3, [r3, #5]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f90c 	bl	800c8e0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	791b      	ldrb	r3, [r3, #4]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f906 	bl	800c8e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c6da:	2302      	movs	r3, #2
 800c6dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c6de:	e00a      	b.n	800c6f6 <USBH_HandleControl+0x2de>

    default:
      break;
 800c6e0:	bf00      	nop
 800c6e2:	e008      	b.n	800c6f6 <USBH_HandleControl+0x2de>
      break;
 800c6e4:	bf00      	nop
 800c6e6:	e006      	b.n	800c6f6 <USBH_HandleControl+0x2de>
      break;
 800c6e8:	bf00      	nop
 800c6ea:	e004      	b.n	800c6f6 <USBH_HandleControl+0x2de>
      break;
 800c6ec:	bf00      	nop
 800c6ee:	e002      	b.n	800c6f6 <USBH_HandleControl+0x2de>
      break;
 800c6f0:	bf00      	nop
 800c6f2:	e000      	b.n	800c6f6 <USBH_HandleControl+0x2de>
      break;
 800c6f4:	bf00      	nop
  }

  return status;
 800c6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af04      	add	r7, sp, #16
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	4613      	mov	r3, r2
 800c70c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c70e:	79f9      	ldrb	r1, [r7, #7]
 800c710:	2300      	movs	r3, #0
 800c712:	9303      	str	r3, [sp, #12]
 800c714:	2308      	movs	r3, #8
 800c716:	9302      	str	r3, [sp, #8]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	9301      	str	r3, [sp, #4]
 800c71c:	2300      	movs	r3, #0
 800c71e:	9300      	str	r3, [sp, #0]
 800c720:	2300      	movs	r3, #0
 800c722:	2200      	movs	r2, #0
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 fb46 	bl	800cdb6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af04      	add	r7, sp, #16
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	4611      	mov	r1, r2
 800c740:	461a      	mov	r2, r3
 800c742:	460b      	mov	r3, r1
 800c744:	80fb      	strh	r3, [r7, #6]
 800c746:	4613      	mov	r3, r2
 800c748:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c750:	2b00      	cmp	r3, #0
 800c752:	d001      	beq.n	800c758 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c754:	2300      	movs	r3, #0
 800c756:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c758:	7979      	ldrb	r1, [r7, #5]
 800c75a:	7e3b      	ldrb	r3, [r7, #24]
 800c75c:	9303      	str	r3, [sp, #12]
 800c75e:	88fb      	ldrh	r3, [r7, #6]
 800c760:	9302      	str	r3, [sp, #8]
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	9301      	str	r3, [sp, #4]
 800c766:	2301      	movs	r3, #1
 800c768:	9300      	str	r3, [sp, #0]
 800c76a:	2300      	movs	r3, #0
 800c76c:	2200      	movs	r2, #0
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 fb21 	bl	800cdb6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b088      	sub	sp, #32
 800c782:	af04      	add	r7, sp, #16
 800c784:	60f8      	str	r0, [r7, #12]
 800c786:	60b9      	str	r1, [r7, #8]
 800c788:	4611      	mov	r1, r2
 800c78a:	461a      	mov	r2, r3
 800c78c:	460b      	mov	r3, r1
 800c78e:	80fb      	strh	r3, [r7, #6]
 800c790:	4613      	mov	r3, r2
 800c792:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c794:	7979      	ldrb	r1, [r7, #5]
 800c796:	2300      	movs	r3, #0
 800c798:	9303      	str	r3, [sp, #12]
 800c79a:	88fb      	ldrh	r3, [r7, #6]
 800c79c:	9302      	str	r3, [sp, #8]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 fb03 	bl	800cdb6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c7b0:	2300      	movs	r3, #0

}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af04      	add	r7, sp, #16
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	4611      	mov	r1, r2
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	80fb      	strh	r3, [r7, #6]
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7de:	7979      	ldrb	r1, [r7, #5]
 800c7e0:	7e3b      	ldrb	r3, [r7, #24]
 800c7e2:	9303      	str	r3, [sp, #12]
 800c7e4:	88fb      	ldrh	r3, [r7, #6]
 800c7e6:	9302      	str	r3, [sp, #8]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 fade 	bl	800cdb6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af04      	add	r7, sp, #16
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4611      	mov	r1, r2
 800c810:	461a      	mov	r2, r3
 800c812:	460b      	mov	r3, r1
 800c814:	80fb      	strh	r3, [r7, #6]
 800c816:	4613      	mov	r3, r2
 800c818:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c81a:	7979      	ldrb	r1, [r7, #5]
 800c81c:	2300      	movs	r3, #0
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	88fb      	ldrh	r3, [r7, #6]
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	2301      	movs	r3, #1
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	2302      	movs	r3, #2
 800c82e:	2201      	movs	r2, #1
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 fac0 	bl	800cdb6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b086      	sub	sp, #24
 800c844:	af04      	add	r7, sp, #16
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	4608      	mov	r0, r1
 800c84a:	4611      	mov	r1, r2
 800c84c:	461a      	mov	r2, r3
 800c84e:	4603      	mov	r3, r0
 800c850:	70fb      	strb	r3, [r7, #3]
 800c852:	460b      	mov	r3, r1
 800c854:	70bb      	strb	r3, [r7, #2]
 800c856:	4613      	mov	r3, r2
 800c858:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c85a:	7878      	ldrb	r0, [r7, #1]
 800c85c:	78ba      	ldrb	r2, [r7, #2]
 800c85e:	78f9      	ldrb	r1, [r7, #3]
 800c860:	8b3b      	ldrh	r3, [r7, #24]
 800c862:	9302      	str	r3, [sp, #8]
 800c864:	7d3b      	ldrb	r3, [r7, #20]
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	7c3b      	ldrb	r3, [r7, #16]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	4603      	mov	r3, r0
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fa53 	bl	800cd1a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b082      	sub	sp, #8
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	460b      	mov	r3, r1
 800c888:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 fa72 	bl	800cd78 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3708      	adds	r7, #8
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}

0800c89e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 f836 	bl	800c91c <USBH_GetFreePipe>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d00a      	beq.n	800c8d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c8be:	78fa      	ldrb	r2, [r7, #3]
 800c8c0:	89fb      	ldrh	r3, [r7, #14]
 800c8c2:	f003 030f 	and.w	r3, r3, #15
 800c8c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c8ca:	6879      	ldr	r1, [r7, #4]
 800c8cc:	33e0      	adds	r3, #224	@ 0xe0
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c8d4:	89fb      	ldrh	r3, [r7, #14]
 800c8d6:	b2db      	uxtb	r3, r3
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3710      	adds	r7, #16
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	2b0f      	cmp	r3, #15
 800c8f0:	d80d      	bhi.n	800c90e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c8f2:	78fb      	ldrb	r3, [r7, #3]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	33e0      	adds	r3, #224	@ 0xe0
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	78fb      	ldrb	r3, [r7, #3]
 800c900:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c904:	6879      	ldr	r1, [r7, #4]
 800c906:	33e0      	adds	r3, #224	@ 0xe0
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	440b      	add	r3, r1
 800c90c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c924:	2300      	movs	r3, #0
 800c926:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c928:	2300      	movs	r3, #0
 800c92a:	73fb      	strb	r3, [r7, #15]
 800c92c:	e00f      	b.n	800c94e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	33e0      	adds	r3, #224	@ 0xe0
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d102      	bne.n	800c948 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	b29b      	uxth	r3, r3
 800c946:	e007      	b.n	800c958 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	3301      	adds	r3, #1
 800c94c:	73fb      	strb	r3, [r7, #15]
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	2b0f      	cmp	r3, #15
 800c952:	d9ec      	bls.n	800c92e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3714      	adds	r7, #20
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c968:	2201      	movs	r2, #1
 800c96a:	490e      	ldr	r1, [pc, #56]	@ (800c9a4 <MX_USB_HOST_Init+0x40>)
 800c96c:	480e      	ldr	r0, [pc, #56]	@ (800c9a8 <MX_USB_HOST_Init+0x44>)
 800c96e:	f7fe fb15 	bl	800af9c <USBH_Init>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c978:	f7f4 ff66 	bl	8001848 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c97c:	490b      	ldr	r1, [pc, #44]	@ (800c9ac <MX_USB_HOST_Init+0x48>)
 800c97e:	480a      	ldr	r0, [pc, #40]	@ (800c9a8 <MX_USB_HOST_Init+0x44>)
 800c980:	f7fe fbb9 	bl	800b0f6 <USBH_RegisterClass>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d001      	beq.n	800c98e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c98a:	f7f4 ff5d 	bl	8001848 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c98e:	4806      	ldr	r0, [pc, #24]	@ (800c9a8 <MX_USB_HOST_Init+0x44>)
 800c990:	f7fe fc3d 	bl	800b20e <USBH_Start>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c99a:	f7f4 ff55 	bl	8001848 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c99e:	bf00      	nop
 800c9a0:	bd80      	pop	{r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	0800c9c5 	.word	0x0800c9c5
 800c9a8:	20002400 	.word	0x20002400
 800c9ac:	2000000c 	.word	0x2000000c

0800c9b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c9b4:	4802      	ldr	r0, [pc, #8]	@ (800c9c0 <MX_USB_HOST_Process+0x10>)
 800c9b6:	f7fe fc3b 	bl	800b230 <USBH_Process>
}
 800c9ba:	bf00      	nop
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20002400 	.word	0x20002400

0800c9c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c9d0:	78fb      	ldrb	r3, [r7, #3]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	2b04      	cmp	r3, #4
 800c9d6:	d819      	bhi.n	800ca0c <USBH_UserProcess+0x48>
 800c9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <USBH_UserProcess+0x1c>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca0d 	.word	0x0800ca0d
 800c9e4:	0800c9fd 	.word	0x0800c9fd
 800c9e8:	0800ca0d 	.word	0x0800ca0d
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800c9f5 	.word	0x0800c9f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <USBH_UserProcess+0x58>)
 800c9f6:	2203      	movs	r2, #3
 800c9f8:	701a      	strb	r2, [r3, #0]
  break;
 800c9fa:	e008      	b.n	800ca0e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <USBH_UserProcess+0x58>)
 800c9fe:	2202      	movs	r2, #2
 800ca00:	701a      	strb	r2, [r3, #0]
  break;
 800ca02:	e004      	b.n	800ca0e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca04:	4b05      	ldr	r3, [pc, #20]	@ (800ca1c <USBH_UserProcess+0x58>)
 800ca06:	2201      	movs	r2, #1
 800ca08:	701a      	strb	r2, [r3, #0]
  break;
 800ca0a:	e000      	b.n	800ca0e <USBH_UserProcess+0x4a>

  default:
  break;
 800ca0c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	200027d8 	.word	0x200027d8

0800ca20 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b08a      	sub	sp, #40	@ 0x28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca28:	f107 0314 	add.w	r3, r7, #20
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	601a      	str	r2, [r3, #0]
 800ca30:	605a      	str	r2, [r3, #4]
 800ca32:	609a      	str	r2, [r3, #8]
 800ca34:	60da      	str	r2, [r3, #12]
 800ca36:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca40:	d147      	bne.n	800cad2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca42:	2300      	movs	r3, #0
 800ca44:	613b      	str	r3, [r7, #16]
 800ca46:	4b25      	ldr	r3, [pc, #148]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800ca48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca4a:	4a24      	ldr	r2, [pc, #144]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	6313      	str	r3, [r2, #48]	@ 0x30
 800ca52:	4b22      	ldr	r3, [pc, #136]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800ca54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	613b      	str	r3, [r7, #16]
 800ca5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ca5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ca64:	2300      	movs	r3, #0
 800ca66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ca6c:	f107 0314 	add.w	r3, r7, #20
 800ca70:	4619      	mov	r1, r3
 800ca72:	481b      	ldr	r0, [pc, #108]	@ (800cae0 <HAL_HCD_MspInit+0xc0>)
 800ca74:	f7f6 fc8a 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ca78:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ca7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca7e:	2302      	movs	r3, #2
 800ca80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca82:	2300      	movs	r3, #0
 800ca84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca86:	2300      	movs	r3, #0
 800ca88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ca8a:	230a      	movs	r3, #10
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca8e:	f107 0314 	add.w	r3, r7, #20
 800ca92:	4619      	mov	r1, r3
 800ca94:	4812      	ldr	r0, [pc, #72]	@ (800cae0 <HAL_HCD_MspInit+0xc0>)
 800ca96:	f7f6 fc79 	bl	800338c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ca9a:	4b10      	ldr	r3, [pc, #64]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800ca9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca9e:	4a0f      	ldr	r2, [pc, #60]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800caa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caa4:	6353      	str	r3, [r2, #52]	@ 0x34
 800caa6:	2300      	movs	r3, #0
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800caac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caae:	4a0b      	ldr	r2, [pc, #44]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800cab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cab4:	6453      	str	r3, [r2, #68]	@ 0x44
 800cab6:	4b09      	ldr	r3, [pc, #36]	@ (800cadc <HAL_HCD_MspInit+0xbc>)
 800cab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cac2:	2200      	movs	r2, #0
 800cac4:	2100      	movs	r1, #0
 800cac6:	2043      	movs	r0, #67	@ 0x43
 800cac8:	f7f6 f8b9 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cacc:	2043      	movs	r0, #67	@ 0x43
 800cace:	f7f6 f8d2 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cad2:	bf00      	nop
 800cad4:	3728      	adds	r7, #40	@ 0x28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	40023800 	.word	0x40023800
 800cae0:	40020000 	.word	0x40020000

0800cae4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe ff73 	bl	800b9de <USBH_LL_IncTimer>
}
 800caf8:	bf00      	nop
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fe ffab 	bl	800ba6a <USBH_LL_Connect>
}
 800cb14:	bf00      	nop
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fe ffb4 	bl	800ba98 <USBH_LL_Disconnect>
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	460b      	mov	r3, r1
 800cb42:	70fb      	strb	r3, [r7, #3]
 800cb44:	4613      	mov	r3, r2
 800cb46:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cb48:	bf00      	nop
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe ff65 	bl	800ba32 <USBH_LL_PortEnabled>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe ff65 	bl	800ba4e <USBH_LL_PortDisabled>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d12a      	bne.n	800cbf4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cb9e:	4a18      	ldr	r2, [pc, #96]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a15      	ldr	r2, [pc, #84]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbaa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cbae:	4b14      	ldr	r3, [pc, #80]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbb0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cbb4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cbb6:	4b12      	ldr	r3, [pc, #72]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbb8:	2208      	movs	r2, #8
 800cbba:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cbbc:	4b10      	ldr	r3, [pc, #64]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cbc2:	4b0f      	ldr	r3, [pc, #60]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cbc8:	4b0d      	ldr	r3, [pc, #52]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbca:	2202      	movs	r2, #2
 800cbcc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cbce:	4b0c      	ldr	r3, [pc, #48]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cbd4:	480a      	ldr	r0, [pc, #40]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbd6:	f7f6 fda8 	bl	800372a <HAL_HCD_Init>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cbe0:	f7f4 fe32 	bl	8001848 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cbe4:	4806      	ldr	r0, [pc, #24]	@ (800cc00 <USBH_LL_Init+0x74>)
 800cbe6:	f7f7 fa09 	bl	8003ffc <HAL_HCD_GetCurrentFrame>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4619      	mov	r1, r3
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f7fe fee6 	bl	800b9c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200027dc 	.word	0x200027dc

0800cc04 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc10:	2300      	movs	r3, #0
 800cc12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f7 f976 	bl	8003f0c <HAL_HCD_Start>
 800cc20:	4603      	mov	r3, r0
 800cc22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f000 f95e 	bl	800cee8 <USBH_Get_USB_Status>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc46:	2300      	movs	r3, #0
 800cc48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc50:	4618      	mov	r0, r3
 800cc52:	f7f7 f97e 	bl	8003f52 <HAL_HCD_Stop>
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f000 f943 	bl	800cee8 <USBH_Get_USB_Status>
 800cc62:	4603      	mov	r3, r0
 800cc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f7 f9c8 	bl	8004018 <HAL_HCD_GetCurrentSpeed>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d00c      	beq.n	800cca8 <USBH_LL_GetSpeed+0x38>
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d80d      	bhi.n	800ccae <USBH_LL_GetSpeed+0x3e>
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d002      	beq.n	800cc9c <USBH_LL_GetSpeed+0x2c>
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d003      	beq.n	800cca2 <USBH_LL_GetSpeed+0x32>
 800cc9a:	e008      	b.n	800ccae <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	73fb      	strb	r3, [r7, #15]
    break;
 800cca0:	e008      	b.n	800ccb4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cca2:	2301      	movs	r3, #1
 800cca4:	73fb      	strb	r3, [r7, #15]
    break;
 800cca6:	e005      	b.n	800ccb4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cca8:	2302      	movs	r3, #2
 800ccaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ccac:	e002      	b.n	800ccb4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb2:	bf00      	nop
  }
  return  speed;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7f7 f959 	bl	8003f8c <HAL_HCD_ResetPort>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 f901 	bl	800cee8 <USBH_Get_USB_Status>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	460b      	mov	r3, r1
 800ccfe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd06:	78fa      	ldrb	r2, [r7, #3]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7f7 f961 	bl	8003fd2 <HAL_HCD_HC_GetXferCount>
 800cd10:	4603      	mov	r3, r0
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd1a:	b590      	push	{r4, r7, lr}
 800cd1c:	b089      	sub	sp, #36	@ 0x24
 800cd1e:	af04      	add	r7, sp, #16
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	4608      	mov	r0, r1
 800cd24:	4611      	mov	r1, r2
 800cd26:	461a      	mov	r2, r3
 800cd28:	4603      	mov	r3, r0
 800cd2a:	70fb      	strb	r3, [r7, #3]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70bb      	strb	r3, [r7, #2]
 800cd30:	4613      	mov	r3, r2
 800cd32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cd42:	787c      	ldrb	r4, [r7, #1]
 800cd44:	78ba      	ldrb	r2, [r7, #2]
 800cd46:	78f9      	ldrb	r1, [r7, #3]
 800cd48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd4a:	9302      	str	r3, [sp, #8]
 800cd4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	4623      	mov	r3, r4
 800cd5a:	f7f6 fd4d 	bl	80037f8 <HAL_HCD_HC_Init>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f8bf 	bl	800cee8 <USBH_Get_USB_Status>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd90      	pop	{r4, r7, pc}

0800cd78 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd92:	78fa      	ldrb	r2, [r7, #3]
 800cd94:	4611      	mov	r1, r2
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7f6 fde6 	bl	8003968 <HAL_HCD_HC_Halt>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cda0:	7bfb      	ldrb	r3, [r7, #15]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 f8a0 	bl	800cee8 <USBH_Get_USB_Status>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdac:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cdb6:	b590      	push	{r4, r7, lr}
 800cdb8:	b089      	sub	sp, #36	@ 0x24
 800cdba:	af04      	add	r7, sp, #16
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	4608      	mov	r0, r1
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	70fb      	strb	r3, [r7, #3]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70bb      	strb	r3, [r7, #2]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cdde:	787c      	ldrb	r4, [r7, #1]
 800cde0:	78ba      	ldrb	r2, [r7, #2]
 800cde2:	78f9      	ldrb	r1, [r7, #3]
 800cde4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cde8:	9303      	str	r3, [sp, #12]
 800cdea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cdec:	9302      	str	r3, [sp, #8]
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdf6:	9300      	str	r3, [sp, #0]
 800cdf8:	4623      	mov	r3, r4
 800cdfa:	f7f6 fdd9 	bl	80039b0 <HAL_HCD_HC_SubmitRequest>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 f86f 	bl	800cee8 <USBH_Get_USB_Status>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3714      	adds	r7, #20
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd90      	pop	{r4, r7, pc}

0800ce18 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce2a:	78fa      	ldrb	r2, [r7, #3]
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f7 f8ba 	bl	8003fa8 <HAL_HCD_HC_GetURBState>
 800ce34:	4603      	mov	r3, r0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d103      	bne.n	800ce5c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ce54:	78fb      	ldrb	r3, [r7, #3]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 f872 	bl	800cf40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ce5c:	20c8      	movs	r0, #200	@ 0xc8
 800ce5e:	f7f5 f9dd 	bl	800221c <HAL_Delay>
  return USBH_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce82:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ce84:	78fa      	ldrb	r2, [r7, #3]
 800ce86:	68f9      	ldr	r1, [r7, #12]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	011b      	lsls	r3, r3, #4
 800ce8c:	1a9b      	subs	r3, r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	440b      	add	r3, r1
 800ce92:	3317      	adds	r3, #23
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ce9a:	78fa      	ldrb	r2, [r7, #3]
 800ce9c:	68f9      	ldr	r1, [r7, #12]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	011b      	lsls	r3, r3, #4
 800cea2:	1a9b      	subs	r3, r3, r2
 800cea4:	009b      	lsls	r3, r3, #2
 800cea6:	440b      	add	r3, r1
 800cea8:	333c      	adds	r3, #60	@ 0x3c
 800ceaa:	78ba      	ldrb	r2, [r7, #2]
 800ceac:	701a      	strb	r2, [r3, #0]
 800ceae:	e009      	b.n	800cec4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ceb0:	78fa      	ldrb	r2, [r7, #3]
 800ceb2:	68f9      	ldr	r1, [r7, #12]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	011b      	lsls	r3, r3, #4
 800ceb8:	1a9b      	subs	r3, r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	440b      	add	r3, r1
 800cebe:	333d      	adds	r3, #61	@ 0x3d
 800cec0:	78ba      	ldrb	r2, [r7, #2]
 800cec2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b082      	sub	sp, #8
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7f5 f99e 	bl	800221c <HAL_Delay>
}
 800cee0:	bf00      	nop
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b085      	sub	sp, #20
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	4603      	mov	r3, r0
 800cef0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d817      	bhi.n	800cf2c <USBH_Get_USB_Status+0x44>
 800cefc:	a201      	add	r2, pc, #4	@ (adr r2, 800cf04 <USBH_Get_USB_Status+0x1c>)
 800cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf02:	bf00      	nop
 800cf04:	0800cf15 	.word	0x0800cf15
 800cf08:	0800cf1b 	.word	0x0800cf1b
 800cf0c:	0800cf21 	.word	0x0800cf21
 800cf10:	0800cf27 	.word	0x0800cf27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]
    break;
 800cf18:	e00b      	b.n	800cf32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf1a:	2302      	movs	r3, #2
 800cf1c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf1e:	e008      	b.n	800cf32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf20:	2301      	movs	r3, #1
 800cf22:	73fb      	strb	r3, [r7, #15]
    break;
 800cf24:	e005      	b.n	800cf32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf26:	2302      	movs	r3, #2
 800cf28:	73fb      	strb	r3, [r7, #15]
    break;
 800cf2a:	e002      	b.n	800cf32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf30:	bf00      	nop
  }
  return usb_status;
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af04      	add	r7, sp, #16
 800cf46:	4603      	mov	r3, r0
 800cf48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73bb      	strb	r3, [r7, #14]
  /* USER CODE BEGIN PREPARE_I2C_ADDR_VBUS_FS */
  uint8_t Component_Addr = 0 << 1;
 800cf52:	2300      	movs	r3, #0
 800cf54:	737b      	strb	r3, [r7, #13]
  /* USER CODE END PREPARE_I2C_ADDR_VBUS_FS */
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c3, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 800cf5e:	7b7b      	ldrb	r3, [r7, #13]
 800cf60:	b299      	uxth	r1, r3
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	2364      	movs	r3, #100	@ 0x64
 800cf68:	9302      	str	r3, [sp, #8]
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	f107 030b 	add.w	r3, r7, #11
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	2301      	movs	r3, #1
 800cf76:	480f      	ldr	r0, [pc, #60]	@ (800cfb4 <MX_DriverVbusFS+0x74>)
 800cf78:	f7f8 ff4a 	bl	8005e10 <HAL_I2C_Mem_Read>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 800cf80:	7b3a      	ldrb	r2, [r7, #12]
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c3,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 800cf8a:	7b7b      	ldrb	r3, [r7, #13]
 800cf8c:	b299      	uxth	r1, r3
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	2364      	movs	r3, #100	@ 0x64
 800cf94:	9302      	str	r3, [sp, #8]
 800cf96:	2301      	movs	r3, #1
 800cf98:	9301      	str	r3, [sp, #4]
 800cf9a:	f107 030c 	add.w	r3, r7, #12
 800cf9e:	9300      	str	r3, [sp, #0]
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	4804      	ldr	r0, [pc, #16]	@ (800cfb4 <MX_DriverVbusFS+0x74>)
 800cfa4:	f7f8 fe3a 	bl	8005c1c <HAL_I2C_Mem_Write>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	2000014c 	.word	0x2000014c

0800cfb8 <malloc>:
 800cfb8:	4b02      	ldr	r3, [pc, #8]	@ (800cfc4 <malloc+0xc>)
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6818      	ldr	r0, [r3, #0]
 800cfbe:	f000 b82d 	b.w	800d01c <_malloc_r>
 800cfc2:	bf00      	nop
 800cfc4:	20000038 	.word	0x20000038

0800cfc8 <free>:
 800cfc8:	4b02      	ldr	r3, [pc, #8]	@ (800cfd4 <free+0xc>)
 800cfca:	4601      	mov	r1, r0
 800cfcc:	6818      	ldr	r0, [r3, #0]
 800cfce:	f000 ba55 	b.w	800d47c <_free_r>
 800cfd2:	bf00      	nop
 800cfd4:	20000038 	.word	0x20000038

0800cfd8 <sbrk_aligned>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	4e0f      	ldr	r6, [pc, #60]	@ (800d018 <sbrk_aligned+0x40>)
 800cfdc:	460c      	mov	r4, r1
 800cfde:	6831      	ldr	r1, [r6, #0]
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	b911      	cbnz	r1, 800cfea <sbrk_aligned+0x12>
 800cfe4:	f000 f9fa 	bl	800d3dc <_sbrk_r>
 800cfe8:	6030      	str	r0, [r6, #0]
 800cfea:	4621      	mov	r1, r4
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 f9f5 	bl	800d3dc <_sbrk_r>
 800cff2:	1c43      	adds	r3, r0, #1
 800cff4:	d103      	bne.n	800cffe <sbrk_aligned+0x26>
 800cff6:	f04f 34ff 	mov.w	r4, #4294967295
 800cffa:	4620      	mov	r0, r4
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
 800cffe:	1cc4      	adds	r4, r0, #3
 800d000:	f024 0403 	bic.w	r4, r4, #3
 800d004:	42a0      	cmp	r0, r4
 800d006:	d0f8      	beq.n	800cffa <sbrk_aligned+0x22>
 800d008:	1a21      	subs	r1, r4, r0
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f9e6 	bl	800d3dc <_sbrk_r>
 800d010:	3001      	adds	r0, #1
 800d012:	d1f2      	bne.n	800cffa <sbrk_aligned+0x22>
 800d014:	e7ef      	b.n	800cff6 <sbrk_aligned+0x1e>
 800d016:	bf00      	nop
 800d018:	20002bbc 	.word	0x20002bbc

0800d01c <_malloc_r>:
 800d01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d020:	1ccd      	adds	r5, r1, #3
 800d022:	f025 0503 	bic.w	r5, r5, #3
 800d026:	3508      	adds	r5, #8
 800d028:	2d0c      	cmp	r5, #12
 800d02a:	bf38      	it	cc
 800d02c:	250c      	movcc	r5, #12
 800d02e:	2d00      	cmp	r5, #0
 800d030:	4606      	mov	r6, r0
 800d032:	db01      	blt.n	800d038 <_malloc_r+0x1c>
 800d034:	42a9      	cmp	r1, r5
 800d036:	d904      	bls.n	800d042 <_malloc_r+0x26>
 800d038:	230c      	movs	r3, #12
 800d03a:	6033      	str	r3, [r6, #0]
 800d03c:	2000      	movs	r0, #0
 800d03e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d118 <_malloc_r+0xfc>
 800d046:	f000 f869 	bl	800d11c <__malloc_lock>
 800d04a:	f8d8 3000 	ldr.w	r3, [r8]
 800d04e:	461c      	mov	r4, r3
 800d050:	bb44      	cbnz	r4, 800d0a4 <_malloc_r+0x88>
 800d052:	4629      	mov	r1, r5
 800d054:	4630      	mov	r0, r6
 800d056:	f7ff ffbf 	bl	800cfd8 <sbrk_aligned>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	4604      	mov	r4, r0
 800d05e:	d158      	bne.n	800d112 <_malloc_r+0xf6>
 800d060:	f8d8 4000 	ldr.w	r4, [r8]
 800d064:	4627      	mov	r7, r4
 800d066:	2f00      	cmp	r7, #0
 800d068:	d143      	bne.n	800d0f2 <_malloc_r+0xd6>
 800d06a:	2c00      	cmp	r4, #0
 800d06c:	d04b      	beq.n	800d106 <_malloc_r+0xea>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	4639      	mov	r1, r7
 800d072:	4630      	mov	r0, r6
 800d074:	eb04 0903 	add.w	r9, r4, r3
 800d078:	f000 f9b0 	bl	800d3dc <_sbrk_r>
 800d07c:	4581      	cmp	r9, r0
 800d07e:	d142      	bne.n	800d106 <_malloc_r+0xea>
 800d080:	6821      	ldr	r1, [r4, #0]
 800d082:	1a6d      	subs	r5, r5, r1
 800d084:	4629      	mov	r1, r5
 800d086:	4630      	mov	r0, r6
 800d088:	f7ff ffa6 	bl	800cfd8 <sbrk_aligned>
 800d08c:	3001      	adds	r0, #1
 800d08e:	d03a      	beq.n	800d106 <_malloc_r+0xea>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	442b      	add	r3, r5
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	f8d8 3000 	ldr.w	r3, [r8]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	bb62      	cbnz	r2, 800d0f8 <_malloc_r+0xdc>
 800d09e:	f8c8 7000 	str.w	r7, [r8]
 800d0a2:	e00f      	b.n	800d0c4 <_malloc_r+0xa8>
 800d0a4:	6822      	ldr	r2, [r4, #0]
 800d0a6:	1b52      	subs	r2, r2, r5
 800d0a8:	d420      	bmi.n	800d0ec <_malloc_r+0xd0>
 800d0aa:	2a0b      	cmp	r2, #11
 800d0ac:	d917      	bls.n	800d0de <_malloc_r+0xc2>
 800d0ae:	1961      	adds	r1, r4, r5
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	6025      	str	r5, [r4, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	6059      	strne	r1, [r3, #4]
 800d0b8:	6863      	ldr	r3, [r4, #4]
 800d0ba:	bf08      	it	eq
 800d0bc:	f8c8 1000 	streq.w	r1, [r8]
 800d0c0:	5162      	str	r2, [r4, r5]
 800d0c2:	604b      	str	r3, [r1, #4]
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 f82f 	bl	800d128 <__malloc_unlock>
 800d0ca:	f104 000b 	add.w	r0, r4, #11
 800d0ce:	1d23      	adds	r3, r4, #4
 800d0d0:	f020 0007 	bic.w	r0, r0, #7
 800d0d4:	1ac2      	subs	r2, r0, r3
 800d0d6:	bf1c      	itt	ne
 800d0d8:	1a1b      	subne	r3, r3, r0
 800d0da:	50a3      	strne	r3, [r4, r2]
 800d0dc:	e7af      	b.n	800d03e <_malloc_r+0x22>
 800d0de:	6862      	ldr	r2, [r4, #4]
 800d0e0:	42a3      	cmp	r3, r4
 800d0e2:	bf0c      	ite	eq
 800d0e4:	f8c8 2000 	streq.w	r2, [r8]
 800d0e8:	605a      	strne	r2, [r3, #4]
 800d0ea:	e7eb      	b.n	800d0c4 <_malloc_r+0xa8>
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	6864      	ldr	r4, [r4, #4]
 800d0f0:	e7ae      	b.n	800d050 <_malloc_r+0x34>
 800d0f2:	463c      	mov	r4, r7
 800d0f4:	687f      	ldr	r7, [r7, #4]
 800d0f6:	e7b6      	b.n	800d066 <_malloc_r+0x4a>
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	42a3      	cmp	r3, r4
 800d0fe:	d1fb      	bne.n	800d0f8 <_malloc_r+0xdc>
 800d100:	2300      	movs	r3, #0
 800d102:	6053      	str	r3, [r2, #4]
 800d104:	e7de      	b.n	800d0c4 <_malloc_r+0xa8>
 800d106:	230c      	movs	r3, #12
 800d108:	6033      	str	r3, [r6, #0]
 800d10a:	4630      	mov	r0, r6
 800d10c:	f000 f80c 	bl	800d128 <__malloc_unlock>
 800d110:	e794      	b.n	800d03c <_malloc_r+0x20>
 800d112:	6005      	str	r5, [r0, #0]
 800d114:	e7d6      	b.n	800d0c4 <_malloc_r+0xa8>
 800d116:	bf00      	nop
 800d118:	20002bc0 	.word	0x20002bc0

0800d11c <__malloc_lock>:
 800d11c:	4801      	ldr	r0, [pc, #4]	@ (800d124 <__malloc_lock+0x8>)
 800d11e:	f000 b9aa 	b.w	800d476 <__retarget_lock_acquire_recursive>
 800d122:	bf00      	nop
 800d124:	20002d04 	.word	0x20002d04

0800d128 <__malloc_unlock>:
 800d128:	4801      	ldr	r0, [pc, #4]	@ (800d130 <__malloc_unlock+0x8>)
 800d12a:	f000 b9a5 	b.w	800d478 <__retarget_lock_release_recursive>
 800d12e:	bf00      	nop
 800d130:	20002d04 	.word	0x20002d04

0800d134 <std>:
 800d134:	2300      	movs	r3, #0
 800d136:	b510      	push	{r4, lr}
 800d138:	4604      	mov	r4, r0
 800d13a:	e9c0 3300 	strd	r3, r3, [r0]
 800d13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d142:	6083      	str	r3, [r0, #8]
 800d144:	8181      	strh	r1, [r0, #12]
 800d146:	6643      	str	r3, [r0, #100]	@ 0x64
 800d148:	81c2      	strh	r2, [r0, #14]
 800d14a:	6183      	str	r3, [r0, #24]
 800d14c:	4619      	mov	r1, r3
 800d14e:	2208      	movs	r2, #8
 800d150:	305c      	adds	r0, #92	@ 0x5c
 800d152:	f000 f906 	bl	800d362 <memset>
 800d156:	4b0d      	ldr	r3, [pc, #52]	@ (800d18c <std+0x58>)
 800d158:	6263      	str	r3, [r4, #36]	@ 0x24
 800d15a:	4b0d      	ldr	r3, [pc, #52]	@ (800d190 <std+0x5c>)
 800d15c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d15e:	4b0d      	ldr	r3, [pc, #52]	@ (800d194 <std+0x60>)
 800d160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d162:	4b0d      	ldr	r3, [pc, #52]	@ (800d198 <std+0x64>)
 800d164:	6323      	str	r3, [r4, #48]	@ 0x30
 800d166:	4b0d      	ldr	r3, [pc, #52]	@ (800d19c <std+0x68>)
 800d168:	6224      	str	r4, [r4, #32]
 800d16a:	429c      	cmp	r4, r3
 800d16c:	d006      	beq.n	800d17c <std+0x48>
 800d16e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d172:	4294      	cmp	r4, r2
 800d174:	d002      	beq.n	800d17c <std+0x48>
 800d176:	33d0      	adds	r3, #208	@ 0xd0
 800d178:	429c      	cmp	r4, r3
 800d17a:	d105      	bne.n	800d188 <std+0x54>
 800d17c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d184:	f000 b976 	b.w	800d474 <__retarget_lock_init_recursive>
 800d188:	bd10      	pop	{r4, pc}
 800d18a:	bf00      	nop
 800d18c:	0800d2dd 	.word	0x0800d2dd
 800d190:	0800d2ff 	.word	0x0800d2ff
 800d194:	0800d337 	.word	0x0800d337
 800d198:	0800d35b 	.word	0x0800d35b
 800d19c:	20002bc4 	.word	0x20002bc4

0800d1a0 <stdio_exit_handler>:
 800d1a0:	4a02      	ldr	r2, [pc, #8]	@ (800d1ac <stdio_exit_handler+0xc>)
 800d1a2:	4903      	ldr	r1, [pc, #12]	@ (800d1b0 <stdio_exit_handler+0x10>)
 800d1a4:	4803      	ldr	r0, [pc, #12]	@ (800d1b4 <stdio_exit_handler+0x14>)
 800d1a6:	f000 b869 	b.w	800d27c <_fwalk_sglue>
 800d1aa:	bf00      	nop
 800d1ac:	2000002c 	.word	0x2000002c
 800d1b0:	0800dbb5 	.word	0x0800dbb5
 800d1b4:	2000003c 	.word	0x2000003c

0800d1b8 <cleanup_stdio>:
 800d1b8:	6841      	ldr	r1, [r0, #4]
 800d1ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d1ec <cleanup_stdio+0x34>)
 800d1bc:	4299      	cmp	r1, r3
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	d001      	beq.n	800d1c8 <cleanup_stdio+0x10>
 800d1c4:	f000 fcf6 	bl	800dbb4 <_fflush_r>
 800d1c8:	68a1      	ldr	r1, [r4, #8]
 800d1ca:	4b09      	ldr	r3, [pc, #36]	@ (800d1f0 <cleanup_stdio+0x38>)
 800d1cc:	4299      	cmp	r1, r3
 800d1ce:	d002      	beq.n	800d1d6 <cleanup_stdio+0x1e>
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fcef 	bl	800dbb4 <_fflush_r>
 800d1d6:	68e1      	ldr	r1, [r4, #12]
 800d1d8:	4b06      	ldr	r3, [pc, #24]	@ (800d1f4 <cleanup_stdio+0x3c>)
 800d1da:	4299      	cmp	r1, r3
 800d1dc:	d004      	beq.n	800d1e8 <cleanup_stdio+0x30>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e4:	f000 bce6 	b.w	800dbb4 <_fflush_r>
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20002bc4 	.word	0x20002bc4
 800d1f0:	20002c2c 	.word	0x20002c2c
 800d1f4:	20002c94 	.word	0x20002c94

0800d1f8 <global_stdio_init.part.0>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d228 <global_stdio_init.part.0+0x30>)
 800d1fc:	4c0b      	ldr	r4, [pc, #44]	@ (800d22c <global_stdio_init.part.0+0x34>)
 800d1fe:	4a0c      	ldr	r2, [pc, #48]	@ (800d230 <global_stdio_init.part.0+0x38>)
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	4620      	mov	r0, r4
 800d204:	2200      	movs	r2, #0
 800d206:	2104      	movs	r1, #4
 800d208:	f7ff ff94 	bl	800d134 <std>
 800d20c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d210:	2201      	movs	r2, #1
 800d212:	2109      	movs	r1, #9
 800d214:	f7ff ff8e 	bl	800d134 <std>
 800d218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d21c:	2202      	movs	r2, #2
 800d21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d222:	2112      	movs	r1, #18
 800d224:	f7ff bf86 	b.w	800d134 <std>
 800d228:	20002cfc 	.word	0x20002cfc
 800d22c:	20002bc4 	.word	0x20002bc4
 800d230:	0800d1a1 	.word	0x0800d1a1

0800d234 <__sfp_lock_acquire>:
 800d234:	4801      	ldr	r0, [pc, #4]	@ (800d23c <__sfp_lock_acquire+0x8>)
 800d236:	f000 b91e 	b.w	800d476 <__retarget_lock_acquire_recursive>
 800d23a:	bf00      	nop
 800d23c:	20002d05 	.word	0x20002d05

0800d240 <__sfp_lock_release>:
 800d240:	4801      	ldr	r0, [pc, #4]	@ (800d248 <__sfp_lock_release+0x8>)
 800d242:	f000 b919 	b.w	800d478 <__retarget_lock_release_recursive>
 800d246:	bf00      	nop
 800d248:	20002d05 	.word	0x20002d05

0800d24c <__sinit>:
 800d24c:	b510      	push	{r4, lr}
 800d24e:	4604      	mov	r4, r0
 800d250:	f7ff fff0 	bl	800d234 <__sfp_lock_acquire>
 800d254:	6a23      	ldr	r3, [r4, #32]
 800d256:	b11b      	cbz	r3, 800d260 <__sinit+0x14>
 800d258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d25c:	f7ff bff0 	b.w	800d240 <__sfp_lock_release>
 800d260:	4b04      	ldr	r3, [pc, #16]	@ (800d274 <__sinit+0x28>)
 800d262:	6223      	str	r3, [r4, #32]
 800d264:	4b04      	ldr	r3, [pc, #16]	@ (800d278 <__sinit+0x2c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1f5      	bne.n	800d258 <__sinit+0xc>
 800d26c:	f7ff ffc4 	bl	800d1f8 <global_stdio_init.part.0>
 800d270:	e7f2      	b.n	800d258 <__sinit+0xc>
 800d272:	bf00      	nop
 800d274:	0800d1b9 	.word	0x0800d1b9
 800d278:	20002cfc 	.word	0x20002cfc

0800d27c <_fwalk_sglue>:
 800d27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d280:	4607      	mov	r7, r0
 800d282:	4688      	mov	r8, r1
 800d284:	4614      	mov	r4, r2
 800d286:	2600      	movs	r6, #0
 800d288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d28c:	f1b9 0901 	subs.w	r9, r9, #1
 800d290:	d505      	bpl.n	800d29e <_fwalk_sglue+0x22>
 800d292:	6824      	ldr	r4, [r4, #0]
 800d294:	2c00      	cmp	r4, #0
 800d296:	d1f7      	bne.n	800d288 <_fwalk_sglue+0xc>
 800d298:	4630      	mov	r0, r6
 800d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d907      	bls.n	800d2b4 <_fwalk_sglue+0x38>
 800d2a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	d003      	beq.n	800d2b4 <_fwalk_sglue+0x38>
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	47c0      	blx	r8
 800d2b2:	4306      	orrs	r6, r0
 800d2b4:	3568      	adds	r5, #104	@ 0x68
 800d2b6:	e7e9      	b.n	800d28c <_fwalk_sglue+0x10>

0800d2b8 <iprintf>:
 800d2b8:	b40f      	push	{r0, r1, r2, r3}
 800d2ba:	b507      	push	{r0, r1, r2, lr}
 800d2bc:	4906      	ldr	r1, [pc, #24]	@ (800d2d8 <iprintf+0x20>)
 800d2be:	ab04      	add	r3, sp, #16
 800d2c0:	6808      	ldr	r0, [r1, #0]
 800d2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c6:	6881      	ldr	r1, [r0, #8]
 800d2c8:	9301      	str	r3, [sp, #4]
 800d2ca:	f000 f94b 	bl	800d564 <_vfiprintf_r>
 800d2ce:	b003      	add	sp, #12
 800d2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d4:	b004      	add	sp, #16
 800d2d6:	4770      	bx	lr
 800d2d8:	20000038 	.word	0x20000038

0800d2dc <__sread>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	460c      	mov	r4, r1
 800d2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2e4:	f000 f868 	bl	800d3b8 <_read_r>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	bfab      	itete	ge
 800d2ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d2ee:	89a3      	ldrhlt	r3, [r4, #12]
 800d2f0:	181b      	addge	r3, r3, r0
 800d2f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d2f6:	bfac      	ite	ge
 800d2f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d2fa:	81a3      	strhlt	r3, [r4, #12]
 800d2fc:	bd10      	pop	{r4, pc}

0800d2fe <__swrite>:
 800d2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d302:	461f      	mov	r7, r3
 800d304:	898b      	ldrh	r3, [r1, #12]
 800d306:	05db      	lsls	r3, r3, #23
 800d308:	4605      	mov	r5, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	4616      	mov	r6, r2
 800d30e:	d505      	bpl.n	800d31c <__swrite+0x1e>
 800d310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d314:	2302      	movs	r3, #2
 800d316:	2200      	movs	r2, #0
 800d318:	f000 f83c 	bl	800d394 <_lseek_r>
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d326:	81a3      	strh	r3, [r4, #12]
 800d328:	4632      	mov	r2, r6
 800d32a:	463b      	mov	r3, r7
 800d32c:	4628      	mov	r0, r5
 800d32e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	f000 b863 	b.w	800d3fc <_write_r>

0800d336 <__sseek>:
 800d336:	b510      	push	{r4, lr}
 800d338:	460c      	mov	r4, r1
 800d33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d33e:	f000 f829 	bl	800d394 <_lseek_r>
 800d342:	1c43      	adds	r3, r0, #1
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	bf15      	itete	ne
 800d348:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d34a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d34e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d352:	81a3      	strheq	r3, [r4, #12]
 800d354:	bf18      	it	ne
 800d356:	81a3      	strhne	r3, [r4, #12]
 800d358:	bd10      	pop	{r4, pc}

0800d35a <__sclose>:
 800d35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d35e:	f000 b809 	b.w	800d374 <_close_r>

0800d362 <memset>:
 800d362:	4402      	add	r2, r0
 800d364:	4603      	mov	r3, r0
 800d366:	4293      	cmp	r3, r2
 800d368:	d100      	bne.n	800d36c <memset+0xa>
 800d36a:	4770      	bx	lr
 800d36c:	f803 1b01 	strb.w	r1, [r3], #1
 800d370:	e7f9      	b.n	800d366 <memset+0x4>
	...

0800d374 <_close_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d06      	ldr	r5, [pc, #24]	@ (800d390 <_close_r+0x1c>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4604      	mov	r4, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	602b      	str	r3, [r5, #0]
 800d380:	f7f4 fc11 	bl	8001ba6 <_close>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_close_r+0x1a>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_close_r+0x1a>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	20002d00 	.word	0x20002d00

0800d394 <_lseek_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d07      	ldr	r5, [pc, #28]	@ (800d3b4 <_lseek_r+0x20>)
 800d398:	4604      	mov	r4, r0
 800d39a:	4608      	mov	r0, r1
 800d39c:	4611      	mov	r1, r2
 800d39e:	2200      	movs	r2, #0
 800d3a0:	602a      	str	r2, [r5, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	f7f4 fc26 	bl	8001bf4 <_lseek>
 800d3a8:	1c43      	adds	r3, r0, #1
 800d3aa:	d102      	bne.n	800d3b2 <_lseek_r+0x1e>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	b103      	cbz	r3, 800d3b2 <_lseek_r+0x1e>
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	20002d00 	.word	0x20002d00

0800d3b8 <_read_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4d07      	ldr	r5, [pc, #28]	@ (800d3d8 <_read_r+0x20>)
 800d3bc:	4604      	mov	r4, r0
 800d3be:	4608      	mov	r0, r1
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	602a      	str	r2, [r5, #0]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f7f4 fbd0 	bl	8001b6c <_read>
 800d3cc:	1c43      	adds	r3, r0, #1
 800d3ce:	d102      	bne.n	800d3d6 <_read_r+0x1e>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	b103      	cbz	r3, 800d3d6 <_read_r+0x1e>
 800d3d4:	6023      	str	r3, [r4, #0]
 800d3d6:	bd38      	pop	{r3, r4, r5, pc}
 800d3d8:	20002d00 	.word	0x20002d00

0800d3dc <_sbrk_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4d06      	ldr	r5, [pc, #24]	@ (800d3f8 <_sbrk_r+0x1c>)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	602b      	str	r3, [r5, #0]
 800d3e8:	f7f4 fc12 	bl	8001c10 <_sbrk>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_sbrk_r+0x1a>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_sbrk_r+0x1a>
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	20002d00 	.word	0x20002d00

0800d3fc <_write_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	4d07      	ldr	r5, [pc, #28]	@ (800d41c <_write_r+0x20>)
 800d400:	4604      	mov	r4, r0
 800d402:	4608      	mov	r0, r1
 800d404:	4611      	mov	r1, r2
 800d406:	2200      	movs	r2, #0
 800d408:	602a      	str	r2, [r5, #0]
 800d40a:	461a      	mov	r2, r3
 800d40c:	f7f4 fa00 	bl	8001810 <_write>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_write_r+0x1e>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_write_r+0x1e>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	20002d00 	.word	0x20002d00

0800d420 <__errno>:
 800d420:	4b01      	ldr	r3, [pc, #4]	@ (800d428 <__errno+0x8>)
 800d422:	6818      	ldr	r0, [r3, #0]
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	20000038 	.word	0x20000038

0800d42c <__libc_init_array>:
 800d42c:	b570      	push	{r4, r5, r6, lr}
 800d42e:	4d0d      	ldr	r5, [pc, #52]	@ (800d464 <__libc_init_array+0x38>)
 800d430:	4c0d      	ldr	r4, [pc, #52]	@ (800d468 <__libc_init_array+0x3c>)
 800d432:	1b64      	subs	r4, r4, r5
 800d434:	10a4      	asrs	r4, r4, #2
 800d436:	2600      	movs	r6, #0
 800d438:	42a6      	cmp	r6, r4
 800d43a:	d109      	bne.n	800d450 <__libc_init_array+0x24>
 800d43c:	4d0b      	ldr	r5, [pc, #44]	@ (800d46c <__libc_init_array+0x40>)
 800d43e:	4c0c      	ldr	r4, [pc, #48]	@ (800d470 <__libc_init_array+0x44>)
 800d440:	f001 fa28 	bl	800e894 <_init>
 800d444:	1b64      	subs	r4, r4, r5
 800d446:	10a4      	asrs	r4, r4, #2
 800d448:	2600      	movs	r6, #0
 800d44a:	42a6      	cmp	r6, r4
 800d44c:	d105      	bne.n	800d45a <__libc_init_array+0x2e>
 800d44e:	bd70      	pop	{r4, r5, r6, pc}
 800d450:	f855 3b04 	ldr.w	r3, [r5], #4
 800d454:	4798      	blx	r3
 800d456:	3601      	adds	r6, #1
 800d458:	e7ee      	b.n	800d438 <__libc_init_array+0xc>
 800d45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d45e:	4798      	blx	r3
 800d460:	3601      	adds	r6, #1
 800d462:	e7f2      	b.n	800d44a <__libc_init_array+0x1e>
 800d464:	0800ecec 	.word	0x0800ecec
 800d468:	0800ecec 	.word	0x0800ecec
 800d46c:	0800ecec 	.word	0x0800ecec
 800d470:	0800ecf0 	.word	0x0800ecf0

0800d474 <__retarget_lock_init_recursive>:
 800d474:	4770      	bx	lr

0800d476 <__retarget_lock_acquire_recursive>:
 800d476:	4770      	bx	lr

0800d478 <__retarget_lock_release_recursive>:
 800d478:	4770      	bx	lr
	...

0800d47c <_free_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4605      	mov	r5, r0
 800d480:	2900      	cmp	r1, #0
 800d482:	d041      	beq.n	800d508 <_free_r+0x8c>
 800d484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d488:	1f0c      	subs	r4, r1, #4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bfb8      	it	lt
 800d48e:	18e4      	addlt	r4, r4, r3
 800d490:	f7ff fe44 	bl	800d11c <__malloc_lock>
 800d494:	4a1d      	ldr	r2, [pc, #116]	@ (800d50c <_free_r+0x90>)
 800d496:	6813      	ldr	r3, [r2, #0]
 800d498:	b933      	cbnz	r3, 800d4a8 <_free_r+0x2c>
 800d49a:	6063      	str	r3, [r4, #4]
 800d49c:	6014      	str	r4, [r2, #0]
 800d49e:	4628      	mov	r0, r5
 800d4a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4a4:	f7ff be40 	b.w	800d128 <__malloc_unlock>
 800d4a8:	42a3      	cmp	r3, r4
 800d4aa:	d908      	bls.n	800d4be <_free_r+0x42>
 800d4ac:	6820      	ldr	r0, [r4, #0]
 800d4ae:	1821      	adds	r1, r4, r0
 800d4b0:	428b      	cmp	r3, r1
 800d4b2:	bf01      	itttt	eq
 800d4b4:	6819      	ldreq	r1, [r3, #0]
 800d4b6:	685b      	ldreq	r3, [r3, #4]
 800d4b8:	1809      	addeq	r1, r1, r0
 800d4ba:	6021      	streq	r1, [r4, #0]
 800d4bc:	e7ed      	b.n	800d49a <_free_r+0x1e>
 800d4be:	461a      	mov	r2, r3
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	b10b      	cbz	r3, 800d4c8 <_free_r+0x4c>
 800d4c4:	42a3      	cmp	r3, r4
 800d4c6:	d9fa      	bls.n	800d4be <_free_r+0x42>
 800d4c8:	6811      	ldr	r1, [r2, #0]
 800d4ca:	1850      	adds	r0, r2, r1
 800d4cc:	42a0      	cmp	r0, r4
 800d4ce:	d10b      	bne.n	800d4e8 <_free_r+0x6c>
 800d4d0:	6820      	ldr	r0, [r4, #0]
 800d4d2:	4401      	add	r1, r0
 800d4d4:	1850      	adds	r0, r2, r1
 800d4d6:	4283      	cmp	r3, r0
 800d4d8:	6011      	str	r1, [r2, #0]
 800d4da:	d1e0      	bne.n	800d49e <_free_r+0x22>
 800d4dc:	6818      	ldr	r0, [r3, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	6053      	str	r3, [r2, #4]
 800d4e2:	4408      	add	r0, r1
 800d4e4:	6010      	str	r0, [r2, #0]
 800d4e6:	e7da      	b.n	800d49e <_free_r+0x22>
 800d4e8:	d902      	bls.n	800d4f0 <_free_r+0x74>
 800d4ea:	230c      	movs	r3, #12
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	e7d6      	b.n	800d49e <_free_r+0x22>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	1821      	adds	r1, r4, r0
 800d4f4:	428b      	cmp	r3, r1
 800d4f6:	bf04      	itt	eq
 800d4f8:	6819      	ldreq	r1, [r3, #0]
 800d4fa:	685b      	ldreq	r3, [r3, #4]
 800d4fc:	6063      	str	r3, [r4, #4]
 800d4fe:	bf04      	itt	eq
 800d500:	1809      	addeq	r1, r1, r0
 800d502:	6021      	streq	r1, [r4, #0]
 800d504:	6054      	str	r4, [r2, #4]
 800d506:	e7ca      	b.n	800d49e <_free_r+0x22>
 800d508:	bd38      	pop	{r3, r4, r5, pc}
 800d50a:	bf00      	nop
 800d50c:	20002bc0 	.word	0x20002bc0

0800d510 <__sfputc_r>:
 800d510:	6893      	ldr	r3, [r2, #8]
 800d512:	3b01      	subs	r3, #1
 800d514:	2b00      	cmp	r3, #0
 800d516:	b410      	push	{r4}
 800d518:	6093      	str	r3, [r2, #8]
 800d51a:	da08      	bge.n	800d52e <__sfputc_r+0x1e>
 800d51c:	6994      	ldr	r4, [r2, #24]
 800d51e:	42a3      	cmp	r3, r4
 800d520:	db01      	blt.n	800d526 <__sfputc_r+0x16>
 800d522:	290a      	cmp	r1, #10
 800d524:	d103      	bne.n	800d52e <__sfputc_r+0x1e>
 800d526:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d52a:	f000 bb6b 	b.w	800dc04 <__swbuf_r>
 800d52e:	6813      	ldr	r3, [r2, #0]
 800d530:	1c58      	adds	r0, r3, #1
 800d532:	6010      	str	r0, [r2, #0]
 800d534:	7019      	strb	r1, [r3, #0]
 800d536:	4608      	mov	r0, r1
 800d538:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d53c:	4770      	bx	lr

0800d53e <__sfputs_r>:
 800d53e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	4614      	mov	r4, r2
 800d546:	18d5      	adds	r5, r2, r3
 800d548:	42ac      	cmp	r4, r5
 800d54a:	d101      	bne.n	800d550 <__sfputs_r+0x12>
 800d54c:	2000      	movs	r0, #0
 800d54e:	e007      	b.n	800d560 <__sfputs_r+0x22>
 800d550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d554:	463a      	mov	r2, r7
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff ffda 	bl	800d510 <__sfputc_r>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d1f3      	bne.n	800d548 <__sfputs_r+0xa>
 800d560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d564 <_vfiprintf_r>:
 800d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d568:	460d      	mov	r5, r1
 800d56a:	b09d      	sub	sp, #116	@ 0x74
 800d56c:	4614      	mov	r4, r2
 800d56e:	4698      	mov	r8, r3
 800d570:	4606      	mov	r6, r0
 800d572:	b118      	cbz	r0, 800d57c <_vfiprintf_r+0x18>
 800d574:	6a03      	ldr	r3, [r0, #32]
 800d576:	b90b      	cbnz	r3, 800d57c <_vfiprintf_r+0x18>
 800d578:	f7ff fe68 	bl	800d24c <__sinit>
 800d57c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d57e:	07d9      	lsls	r1, r3, #31
 800d580:	d405      	bmi.n	800d58e <_vfiprintf_r+0x2a>
 800d582:	89ab      	ldrh	r3, [r5, #12]
 800d584:	059a      	lsls	r2, r3, #22
 800d586:	d402      	bmi.n	800d58e <_vfiprintf_r+0x2a>
 800d588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d58a:	f7ff ff74 	bl	800d476 <__retarget_lock_acquire_recursive>
 800d58e:	89ab      	ldrh	r3, [r5, #12]
 800d590:	071b      	lsls	r3, r3, #28
 800d592:	d501      	bpl.n	800d598 <_vfiprintf_r+0x34>
 800d594:	692b      	ldr	r3, [r5, #16]
 800d596:	b99b      	cbnz	r3, 800d5c0 <_vfiprintf_r+0x5c>
 800d598:	4629      	mov	r1, r5
 800d59a:	4630      	mov	r0, r6
 800d59c:	f000 fb70 	bl	800dc80 <__swsetup_r>
 800d5a0:	b170      	cbz	r0, 800d5c0 <_vfiprintf_r+0x5c>
 800d5a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5a4:	07dc      	lsls	r4, r3, #31
 800d5a6:	d504      	bpl.n	800d5b2 <_vfiprintf_r+0x4e>
 800d5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ac:	b01d      	add	sp, #116	@ 0x74
 800d5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	0598      	lsls	r0, r3, #22
 800d5b6:	d4f7      	bmi.n	800d5a8 <_vfiprintf_r+0x44>
 800d5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ba:	f7ff ff5d 	bl	800d478 <__retarget_lock_release_recursive>
 800d5be:	e7f3      	b.n	800d5a8 <_vfiprintf_r+0x44>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5c4:	2320      	movs	r3, #32
 800d5c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ce:	2330      	movs	r3, #48	@ 0x30
 800d5d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d780 <_vfiprintf_r+0x21c>
 800d5d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5d8:	f04f 0901 	mov.w	r9, #1
 800d5dc:	4623      	mov	r3, r4
 800d5de:	469a      	mov	sl, r3
 800d5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5e4:	b10a      	cbz	r2, 800d5ea <_vfiprintf_r+0x86>
 800d5e6:	2a25      	cmp	r2, #37	@ 0x25
 800d5e8:	d1f9      	bne.n	800d5de <_vfiprintf_r+0x7a>
 800d5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d5ee:	d00b      	beq.n	800d608 <_vfiprintf_r+0xa4>
 800d5f0:	465b      	mov	r3, fp
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7ff ffa1 	bl	800d53e <__sfputs_r>
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f000 80a7 	beq.w	800d750 <_vfiprintf_r+0x1ec>
 800d602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d604:	445a      	add	r2, fp
 800d606:	9209      	str	r2, [sp, #36]	@ 0x24
 800d608:	f89a 3000 	ldrb.w	r3, [sl]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 809f 	beq.w	800d750 <_vfiprintf_r+0x1ec>
 800d612:	2300      	movs	r3, #0
 800d614:	f04f 32ff 	mov.w	r2, #4294967295
 800d618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d61c:	f10a 0a01 	add.w	sl, sl, #1
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	9307      	str	r3, [sp, #28]
 800d624:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d628:	931a      	str	r3, [sp, #104]	@ 0x68
 800d62a:	4654      	mov	r4, sl
 800d62c:	2205      	movs	r2, #5
 800d62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d632:	4853      	ldr	r0, [pc, #332]	@ (800d780 <_vfiprintf_r+0x21c>)
 800d634:	f7f2 fdcc 	bl	80001d0 <memchr>
 800d638:	9a04      	ldr	r2, [sp, #16]
 800d63a:	b9d8      	cbnz	r0, 800d674 <_vfiprintf_r+0x110>
 800d63c:	06d1      	lsls	r1, r2, #27
 800d63e:	bf44      	itt	mi
 800d640:	2320      	movmi	r3, #32
 800d642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d646:	0713      	lsls	r3, r2, #28
 800d648:	bf44      	itt	mi
 800d64a:	232b      	movmi	r3, #43	@ 0x2b
 800d64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d650:	f89a 3000 	ldrb.w	r3, [sl]
 800d654:	2b2a      	cmp	r3, #42	@ 0x2a
 800d656:	d015      	beq.n	800d684 <_vfiprintf_r+0x120>
 800d658:	9a07      	ldr	r2, [sp, #28]
 800d65a:	4654      	mov	r4, sl
 800d65c:	2000      	movs	r0, #0
 800d65e:	f04f 0c0a 	mov.w	ip, #10
 800d662:	4621      	mov	r1, r4
 800d664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d668:	3b30      	subs	r3, #48	@ 0x30
 800d66a:	2b09      	cmp	r3, #9
 800d66c:	d94b      	bls.n	800d706 <_vfiprintf_r+0x1a2>
 800d66e:	b1b0      	cbz	r0, 800d69e <_vfiprintf_r+0x13a>
 800d670:	9207      	str	r2, [sp, #28]
 800d672:	e014      	b.n	800d69e <_vfiprintf_r+0x13a>
 800d674:	eba0 0308 	sub.w	r3, r0, r8
 800d678:	fa09 f303 	lsl.w	r3, r9, r3
 800d67c:	4313      	orrs	r3, r2
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	46a2      	mov	sl, r4
 800d682:	e7d2      	b.n	800d62a <_vfiprintf_r+0xc6>
 800d684:	9b03      	ldr	r3, [sp, #12]
 800d686:	1d19      	adds	r1, r3, #4
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	9103      	str	r1, [sp, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bfbb      	ittet	lt
 800d690:	425b      	neglt	r3, r3
 800d692:	f042 0202 	orrlt.w	r2, r2, #2
 800d696:	9307      	strge	r3, [sp, #28]
 800d698:	9307      	strlt	r3, [sp, #28]
 800d69a:	bfb8      	it	lt
 800d69c:	9204      	strlt	r2, [sp, #16]
 800d69e:	7823      	ldrb	r3, [r4, #0]
 800d6a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d6a2:	d10a      	bne.n	800d6ba <_vfiprintf_r+0x156>
 800d6a4:	7863      	ldrb	r3, [r4, #1]
 800d6a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6a8:	d132      	bne.n	800d710 <_vfiprintf_r+0x1ac>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	1d1a      	adds	r2, r3, #4
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	9203      	str	r2, [sp, #12]
 800d6b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6b6:	3402      	adds	r4, #2
 800d6b8:	9305      	str	r3, [sp, #20]
 800d6ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d790 <_vfiprintf_r+0x22c>
 800d6be:	7821      	ldrb	r1, [r4, #0]
 800d6c0:	2203      	movs	r2, #3
 800d6c2:	4650      	mov	r0, sl
 800d6c4:	f7f2 fd84 	bl	80001d0 <memchr>
 800d6c8:	b138      	cbz	r0, 800d6da <_vfiprintf_r+0x176>
 800d6ca:	9b04      	ldr	r3, [sp, #16]
 800d6cc:	eba0 000a 	sub.w	r0, r0, sl
 800d6d0:	2240      	movs	r2, #64	@ 0x40
 800d6d2:	4082      	lsls	r2, r0
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	3401      	adds	r4, #1
 800d6d8:	9304      	str	r3, [sp, #16]
 800d6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6de:	4829      	ldr	r0, [pc, #164]	@ (800d784 <_vfiprintf_r+0x220>)
 800d6e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6e4:	2206      	movs	r2, #6
 800d6e6:	f7f2 fd73 	bl	80001d0 <memchr>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d03f      	beq.n	800d76e <_vfiprintf_r+0x20a>
 800d6ee:	4b26      	ldr	r3, [pc, #152]	@ (800d788 <_vfiprintf_r+0x224>)
 800d6f0:	bb1b      	cbnz	r3, 800d73a <_vfiprintf_r+0x1d6>
 800d6f2:	9b03      	ldr	r3, [sp, #12]
 800d6f4:	3307      	adds	r3, #7
 800d6f6:	f023 0307 	bic.w	r3, r3, #7
 800d6fa:	3308      	adds	r3, #8
 800d6fc:	9303      	str	r3, [sp, #12]
 800d6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d700:	443b      	add	r3, r7
 800d702:	9309      	str	r3, [sp, #36]	@ 0x24
 800d704:	e76a      	b.n	800d5dc <_vfiprintf_r+0x78>
 800d706:	fb0c 3202 	mla	r2, ip, r2, r3
 800d70a:	460c      	mov	r4, r1
 800d70c:	2001      	movs	r0, #1
 800d70e:	e7a8      	b.n	800d662 <_vfiprintf_r+0xfe>
 800d710:	2300      	movs	r3, #0
 800d712:	3401      	adds	r4, #1
 800d714:	9305      	str	r3, [sp, #20]
 800d716:	4619      	mov	r1, r3
 800d718:	f04f 0c0a 	mov.w	ip, #10
 800d71c:	4620      	mov	r0, r4
 800d71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d722:	3a30      	subs	r2, #48	@ 0x30
 800d724:	2a09      	cmp	r2, #9
 800d726:	d903      	bls.n	800d730 <_vfiprintf_r+0x1cc>
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d0c6      	beq.n	800d6ba <_vfiprintf_r+0x156>
 800d72c:	9105      	str	r1, [sp, #20]
 800d72e:	e7c4      	b.n	800d6ba <_vfiprintf_r+0x156>
 800d730:	fb0c 2101 	mla	r1, ip, r1, r2
 800d734:	4604      	mov	r4, r0
 800d736:	2301      	movs	r3, #1
 800d738:	e7f0      	b.n	800d71c <_vfiprintf_r+0x1b8>
 800d73a:	ab03      	add	r3, sp, #12
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	462a      	mov	r2, r5
 800d740:	4b12      	ldr	r3, [pc, #72]	@ (800d78c <_vfiprintf_r+0x228>)
 800d742:	a904      	add	r1, sp, #16
 800d744:	4630      	mov	r0, r6
 800d746:	f3af 8000 	nop.w
 800d74a:	4607      	mov	r7, r0
 800d74c:	1c78      	adds	r0, r7, #1
 800d74e:	d1d6      	bne.n	800d6fe <_vfiprintf_r+0x19a>
 800d750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d752:	07d9      	lsls	r1, r3, #31
 800d754:	d405      	bmi.n	800d762 <_vfiprintf_r+0x1fe>
 800d756:	89ab      	ldrh	r3, [r5, #12]
 800d758:	059a      	lsls	r2, r3, #22
 800d75a:	d402      	bmi.n	800d762 <_vfiprintf_r+0x1fe>
 800d75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d75e:	f7ff fe8b 	bl	800d478 <__retarget_lock_release_recursive>
 800d762:	89ab      	ldrh	r3, [r5, #12]
 800d764:	065b      	lsls	r3, r3, #25
 800d766:	f53f af1f 	bmi.w	800d5a8 <_vfiprintf_r+0x44>
 800d76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d76c:	e71e      	b.n	800d5ac <_vfiprintf_r+0x48>
 800d76e:	ab03      	add	r3, sp, #12
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	462a      	mov	r2, r5
 800d774:	4b05      	ldr	r3, [pc, #20]	@ (800d78c <_vfiprintf_r+0x228>)
 800d776:	a904      	add	r1, sp, #16
 800d778:	4630      	mov	r0, r6
 800d77a:	f000 f879 	bl	800d870 <_printf_i>
 800d77e:	e7e4      	b.n	800d74a <_vfiprintf_r+0x1e6>
 800d780:	0800e8e0 	.word	0x0800e8e0
 800d784:	0800e8ea 	.word	0x0800e8ea
 800d788:	00000000 	.word	0x00000000
 800d78c:	0800d53f 	.word	0x0800d53f
 800d790:	0800e8e6 	.word	0x0800e8e6

0800d794 <_printf_common>:
 800d794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d798:	4616      	mov	r6, r2
 800d79a:	4698      	mov	r8, r3
 800d79c:	688a      	ldr	r2, [r1, #8]
 800d79e:	690b      	ldr	r3, [r1, #16]
 800d7a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	bfb8      	it	lt
 800d7a8:	4613      	movlt	r3, r2
 800d7aa:	6033      	str	r3, [r6, #0]
 800d7ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	b10a      	cbz	r2, 800d7ba <_printf_common+0x26>
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	6033      	str	r3, [r6, #0]
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	0699      	lsls	r1, r3, #26
 800d7be:	bf42      	ittt	mi
 800d7c0:	6833      	ldrmi	r3, [r6, #0]
 800d7c2:	3302      	addmi	r3, #2
 800d7c4:	6033      	strmi	r3, [r6, #0]
 800d7c6:	6825      	ldr	r5, [r4, #0]
 800d7c8:	f015 0506 	ands.w	r5, r5, #6
 800d7cc:	d106      	bne.n	800d7dc <_printf_common+0x48>
 800d7ce:	f104 0a19 	add.w	sl, r4, #25
 800d7d2:	68e3      	ldr	r3, [r4, #12]
 800d7d4:	6832      	ldr	r2, [r6, #0]
 800d7d6:	1a9b      	subs	r3, r3, r2
 800d7d8:	42ab      	cmp	r3, r5
 800d7da:	dc26      	bgt.n	800d82a <_printf_common+0x96>
 800d7dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7e0:	6822      	ldr	r2, [r4, #0]
 800d7e2:	3b00      	subs	r3, #0
 800d7e4:	bf18      	it	ne
 800d7e6:	2301      	movne	r3, #1
 800d7e8:	0692      	lsls	r2, r2, #26
 800d7ea:	d42b      	bmi.n	800d844 <_printf_common+0xb0>
 800d7ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	47c8      	blx	r9
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	d01e      	beq.n	800d838 <_printf_common+0xa4>
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	6922      	ldr	r2, [r4, #16]
 800d7fe:	f003 0306 	and.w	r3, r3, #6
 800d802:	2b04      	cmp	r3, #4
 800d804:	bf02      	ittt	eq
 800d806:	68e5      	ldreq	r5, [r4, #12]
 800d808:	6833      	ldreq	r3, [r6, #0]
 800d80a:	1aed      	subeq	r5, r5, r3
 800d80c:	68a3      	ldr	r3, [r4, #8]
 800d80e:	bf0c      	ite	eq
 800d810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d814:	2500      	movne	r5, #0
 800d816:	4293      	cmp	r3, r2
 800d818:	bfc4      	itt	gt
 800d81a:	1a9b      	subgt	r3, r3, r2
 800d81c:	18ed      	addgt	r5, r5, r3
 800d81e:	2600      	movs	r6, #0
 800d820:	341a      	adds	r4, #26
 800d822:	42b5      	cmp	r5, r6
 800d824:	d11a      	bne.n	800d85c <_printf_common+0xc8>
 800d826:	2000      	movs	r0, #0
 800d828:	e008      	b.n	800d83c <_printf_common+0xa8>
 800d82a:	2301      	movs	r3, #1
 800d82c:	4652      	mov	r2, sl
 800d82e:	4641      	mov	r1, r8
 800d830:	4638      	mov	r0, r7
 800d832:	47c8      	blx	r9
 800d834:	3001      	adds	r0, #1
 800d836:	d103      	bne.n	800d840 <_printf_common+0xac>
 800d838:	f04f 30ff 	mov.w	r0, #4294967295
 800d83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d840:	3501      	adds	r5, #1
 800d842:	e7c6      	b.n	800d7d2 <_printf_common+0x3e>
 800d844:	18e1      	adds	r1, r4, r3
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	2030      	movs	r0, #48	@ 0x30
 800d84a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d84e:	4422      	add	r2, r4
 800d850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d858:	3302      	adds	r3, #2
 800d85a:	e7c7      	b.n	800d7ec <_printf_common+0x58>
 800d85c:	2301      	movs	r3, #1
 800d85e:	4622      	mov	r2, r4
 800d860:	4641      	mov	r1, r8
 800d862:	4638      	mov	r0, r7
 800d864:	47c8      	blx	r9
 800d866:	3001      	adds	r0, #1
 800d868:	d0e6      	beq.n	800d838 <_printf_common+0xa4>
 800d86a:	3601      	adds	r6, #1
 800d86c:	e7d9      	b.n	800d822 <_printf_common+0x8e>
	...

0800d870 <_printf_i>:
 800d870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d874:	7e0f      	ldrb	r7, [r1, #24]
 800d876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d878:	2f78      	cmp	r7, #120	@ 0x78
 800d87a:	4691      	mov	r9, r2
 800d87c:	4680      	mov	r8, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	469a      	mov	sl, r3
 800d882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d886:	d807      	bhi.n	800d898 <_printf_i+0x28>
 800d888:	2f62      	cmp	r7, #98	@ 0x62
 800d88a:	d80a      	bhi.n	800d8a2 <_printf_i+0x32>
 800d88c:	2f00      	cmp	r7, #0
 800d88e:	f000 80d1 	beq.w	800da34 <_printf_i+0x1c4>
 800d892:	2f58      	cmp	r7, #88	@ 0x58
 800d894:	f000 80b8 	beq.w	800da08 <_printf_i+0x198>
 800d898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d89c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8a0:	e03a      	b.n	800d918 <_printf_i+0xa8>
 800d8a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8a6:	2b15      	cmp	r3, #21
 800d8a8:	d8f6      	bhi.n	800d898 <_printf_i+0x28>
 800d8aa:	a101      	add	r1, pc, #4	@ (adr r1, 800d8b0 <_printf_i+0x40>)
 800d8ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8b0:	0800d909 	.word	0x0800d909
 800d8b4:	0800d91d 	.word	0x0800d91d
 800d8b8:	0800d899 	.word	0x0800d899
 800d8bc:	0800d899 	.word	0x0800d899
 800d8c0:	0800d899 	.word	0x0800d899
 800d8c4:	0800d899 	.word	0x0800d899
 800d8c8:	0800d91d 	.word	0x0800d91d
 800d8cc:	0800d899 	.word	0x0800d899
 800d8d0:	0800d899 	.word	0x0800d899
 800d8d4:	0800d899 	.word	0x0800d899
 800d8d8:	0800d899 	.word	0x0800d899
 800d8dc:	0800da1b 	.word	0x0800da1b
 800d8e0:	0800d947 	.word	0x0800d947
 800d8e4:	0800d9d5 	.word	0x0800d9d5
 800d8e8:	0800d899 	.word	0x0800d899
 800d8ec:	0800d899 	.word	0x0800d899
 800d8f0:	0800da3d 	.word	0x0800da3d
 800d8f4:	0800d899 	.word	0x0800d899
 800d8f8:	0800d947 	.word	0x0800d947
 800d8fc:	0800d899 	.word	0x0800d899
 800d900:	0800d899 	.word	0x0800d899
 800d904:	0800d9dd 	.word	0x0800d9dd
 800d908:	6833      	ldr	r3, [r6, #0]
 800d90a:	1d1a      	adds	r2, r3, #4
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6032      	str	r2, [r6, #0]
 800d910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d918:	2301      	movs	r3, #1
 800d91a:	e09c      	b.n	800da56 <_printf_i+0x1e6>
 800d91c:	6833      	ldr	r3, [r6, #0]
 800d91e:	6820      	ldr	r0, [r4, #0]
 800d920:	1d19      	adds	r1, r3, #4
 800d922:	6031      	str	r1, [r6, #0]
 800d924:	0606      	lsls	r6, r0, #24
 800d926:	d501      	bpl.n	800d92c <_printf_i+0xbc>
 800d928:	681d      	ldr	r5, [r3, #0]
 800d92a:	e003      	b.n	800d934 <_printf_i+0xc4>
 800d92c:	0645      	lsls	r5, r0, #25
 800d92e:	d5fb      	bpl.n	800d928 <_printf_i+0xb8>
 800d930:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d934:	2d00      	cmp	r5, #0
 800d936:	da03      	bge.n	800d940 <_printf_i+0xd0>
 800d938:	232d      	movs	r3, #45	@ 0x2d
 800d93a:	426d      	negs	r5, r5
 800d93c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d940:	4858      	ldr	r0, [pc, #352]	@ (800daa4 <_printf_i+0x234>)
 800d942:	230a      	movs	r3, #10
 800d944:	e011      	b.n	800d96a <_printf_i+0xfa>
 800d946:	6821      	ldr	r1, [r4, #0]
 800d948:	6833      	ldr	r3, [r6, #0]
 800d94a:	0608      	lsls	r0, r1, #24
 800d94c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d950:	d402      	bmi.n	800d958 <_printf_i+0xe8>
 800d952:	0649      	lsls	r1, r1, #25
 800d954:	bf48      	it	mi
 800d956:	b2ad      	uxthmi	r5, r5
 800d958:	2f6f      	cmp	r7, #111	@ 0x6f
 800d95a:	4852      	ldr	r0, [pc, #328]	@ (800daa4 <_printf_i+0x234>)
 800d95c:	6033      	str	r3, [r6, #0]
 800d95e:	bf14      	ite	ne
 800d960:	230a      	movne	r3, #10
 800d962:	2308      	moveq	r3, #8
 800d964:	2100      	movs	r1, #0
 800d966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d96a:	6866      	ldr	r6, [r4, #4]
 800d96c:	60a6      	str	r6, [r4, #8]
 800d96e:	2e00      	cmp	r6, #0
 800d970:	db05      	blt.n	800d97e <_printf_i+0x10e>
 800d972:	6821      	ldr	r1, [r4, #0]
 800d974:	432e      	orrs	r6, r5
 800d976:	f021 0104 	bic.w	r1, r1, #4
 800d97a:	6021      	str	r1, [r4, #0]
 800d97c:	d04b      	beq.n	800da16 <_printf_i+0x1a6>
 800d97e:	4616      	mov	r6, r2
 800d980:	fbb5 f1f3 	udiv	r1, r5, r3
 800d984:	fb03 5711 	mls	r7, r3, r1, r5
 800d988:	5dc7      	ldrb	r7, [r0, r7]
 800d98a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d98e:	462f      	mov	r7, r5
 800d990:	42bb      	cmp	r3, r7
 800d992:	460d      	mov	r5, r1
 800d994:	d9f4      	bls.n	800d980 <_printf_i+0x110>
 800d996:	2b08      	cmp	r3, #8
 800d998:	d10b      	bne.n	800d9b2 <_printf_i+0x142>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	07df      	lsls	r7, r3, #31
 800d99e:	d508      	bpl.n	800d9b2 <_printf_i+0x142>
 800d9a0:	6923      	ldr	r3, [r4, #16]
 800d9a2:	6861      	ldr	r1, [r4, #4]
 800d9a4:	4299      	cmp	r1, r3
 800d9a6:	bfde      	ittt	le
 800d9a8:	2330      	movle	r3, #48	@ 0x30
 800d9aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9b2:	1b92      	subs	r2, r2, r6
 800d9b4:	6122      	str	r2, [r4, #16]
 800d9b6:	f8cd a000 	str.w	sl, [sp]
 800d9ba:	464b      	mov	r3, r9
 800d9bc:	aa03      	add	r2, sp, #12
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4640      	mov	r0, r8
 800d9c2:	f7ff fee7 	bl	800d794 <_printf_common>
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	d14a      	bne.n	800da60 <_printf_i+0x1f0>
 800d9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ce:	b004      	add	sp, #16
 800d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	f043 0320 	orr.w	r3, r3, #32
 800d9da:	6023      	str	r3, [r4, #0]
 800d9dc:	4832      	ldr	r0, [pc, #200]	@ (800daa8 <_printf_i+0x238>)
 800d9de:	2778      	movs	r7, #120	@ 0x78
 800d9e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	6831      	ldr	r1, [r6, #0]
 800d9e8:	061f      	lsls	r7, r3, #24
 800d9ea:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9ee:	d402      	bmi.n	800d9f6 <_printf_i+0x186>
 800d9f0:	065f      	lsls	r7, r3, #25
 800d9f2:	bf48      	it	mi
 800d9f4:	b2ad      	uxthmi	r5, r5
 800d9f6:	6031      	str	r1, [r6, #0]
 800d9f8:	07d9      	lsls	r1, r3, #31
 800d9fa:	bf44      	itt	mi
 800d9fc:	f043 0320 	orrmi.w	r3, r3, #32
 800da00:	6023      	strmi	r3, [r4, #0]
 800da02:	b11d      	cbz	r5, 800da0c <_printf_i+0x19c>
 800da04:	2310      	movs	r3, #16
 800da06:	e7ad      	b.n	800d964 <_printf_i+0xf4>
 800da08:	4826      	ldr	r0, [pc, #152]	@ (800daa4 <_printf_i+0x234>)
 800da0a:	e7e9      	b.n	800d9e0 <_printf_i+0x170>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	f023 0320 	bic.w	r3, r3, #32
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	e7f6      	b.n	800da04 <_printf_i+0x194>
 800da16:	4616      	mov	r6, r2
 800da18:	e7bd      	b.n	800d996 <_printf_i+0x126>
 800da1a:	6833      	ldr	r3, [r6, #0]
 800da1c:	6825      	ldr	r5, [r4, #0]
 800da1e:	6961      	ldr	r1, [r4, #20]
 800da20:	1d18      	adds	r0, r3, #4
 800da22:	6030      	str	r0, [r6, #0]
 800da24:	062e      	lsls	r6, r5, #24
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	d501      	bpl.n	800da2e <_printf_i+0x1be>
 800da2a:	6019      	str	r1, [r3, #0]
 800da2c:	e002      	b.n	800da34 <_printf_i+0x1c4>
 800da2e:	0668      	lsls	r0, r5, #25
 800da30:	d5fb      	bpl.n	800da2a <_printf_i+0x1ba>
 800da32:	8019      	strh	r1, [r3, #0]
 800da34:	2300      	movs	r3, #0
 800da36:	6123      	str	r3, [r4, #16]
 800da38:	4616      	mov	r6, r2
 800da3a:	e7bc      	b.n	800d9b6 <_printf_i+0x146>
 800da3c:	6833      	ldr	r3, [r6, #0]
 800da3e:	1d1a      	adds	r2, r3, #4
 800da40:	6032      	str	r2, [r6, #0]
 800da42:	681e      	ldr	r6, [r3, #0]
 800da44:	6862      	ldr	r2, [r4, #4]
 800da46:	2100      	movs	r1, #0
 800da48:	4630      	mov	r0, r6
 800da4a:	f7f2 fbc1 	bl	80001d0 <memchr>
 800da4e:	b108      	cbz	r0, 800da54 <_printf_i+0x1e4>
 800da50:	1b80      	subs	r0, r0, r6
 800da52:	6060      	str	r0, [r4, #4]
 800da54:	6863      	ldr	r3, [r4, #4]
 800da56:	6123      	str	r3, [r4, #16]
 800da58:	2300      	movs	r3, #0
 800da5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da5e:	e7aa      	b.n	800d9b6 <_printf_i+0x146>
 800da60:	6923      	ldr	r3, [r4, #16]
 800da62:	4632      	mov	r2, r6
 800da64:	4649      	mov	r1, r9
 800da66:	4640      	mov	r0, r8
 800da68:	47d0      	blx	sl
 800da6a:	3001      	adds	r0, #1
 800da6c:	d0ad      	beq.n	800d9ca <_printf_i+0x15a>
 800da6e:	6823      	ldr	r3, [r4, #0]
 800da70:	079b      	lsls	r3, r3, #30
 800da72:	d413      	bmi.n	800da9c <_printf_i+0x22c>
 800da74:	68e0      	ldr	r0, [r4, #12]
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	4298      	cmp	r0, r3
 800da7a:	bfb8      	it	lt
 800da7c:	4618      	movlt	r0, r3
 800da7e:	e7a6      	b.n	800d9ce <_printf_i+0x15e>
 800da80:	2301      	movs	r3, #1
 800da82:	4632      	mov	r2, r6
 800da84:	4649      	mov	r1, r9
 800da86:	4640      	mov	r0, r8
 800da88:	47d0      	blx	sl
 800da8a:	3001      	adds	r0, #1
 800da8c:	d09d      	beq.n	800d9ca <_printf_i+0x15a>
 800da8e:	3501      	adds	r5, #1
 800da90:	68e3      	ldr	r3, [r4, #12]
 800da92:	9903      	ldr	r1, [sp, #12]
 800da94:	1a5b      	subs	r3, r3, r1
 800da96:	42ab      	cmp	r3, r5
 800da98:	dcf2      	bgt.n	800da80 <_printf_i+0x210>
 800da9a:	e7eb      	b.n	800da74 <_printf_i+0x204>
 800da9c:	2500      	movs	r5, #0
 800da9e:	f104 0619 	add.w	r6, r4, #25
 800daa2:	e7f5      	b.n	800da90 <_printf_i+0x220>
 800daa4:	0800e8f1 	.word	0x0800e8f1
 800daa8:	0800e902 	.word	0x0800e902

0800daac <__sflush_r>:
 800daac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab4:	0716      	lsls	r6, r2, #28
 800dab6:	4605      	mov	r5, r0
 800dab8:	460c      	mov	r4, r1
 800daba:	d454      	bmi.n	800db66 <__sflush_r+0xba>
 800dabc:	684b      	ldr	r3, [r1, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	dc02      	bgt.n	800dac8 <__sflush_r+0x1c>
 800dac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dd48      	ble.n	800db5a <__sflush_r+0xae>
 800dac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daca:	2e00      	cmp	r6, #0
 800dacc:	d045      	beq.n	800db5a <__sflush_r+0xae>
 800dace:	2300      	movs	r3, #0
 800dad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dad4:	682f      	ldr	r7, [r5, #0]
 800dad6:	6a21      	ldr	r1, [r4, #32]
 800dad8:	602b      	str	r3, [r5, #0]
 800dada:	d030      	beq.n	800db3e <__sflush_r+0x92>
 800dadc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	0759      	lsls	r1, r3, #29
 800dae2:	d505      	bpl.n	800daf0 <__sflush_r+0x44>
 800dae4:	6863      	ldr	r3, [r4, #4]
 800dae6:	1ad2      	subs	r2, r2, r3
 800dae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daea:	b10b      	cbz	r3, 800daf0 <__sflush_r+0x44>
 800daec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800daee:	1ad2      	subs	r2, r2, r3
 800daf0:	2300      	movs	r3, #0
 800daf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800daf4:	6a21      	ldr	r1, [r4, #32]
 800daf6:	4628      	mov	r0, r5
 800daf8:	47b0      	blx	r6
 800dafa:	1c43      	adds	r3, r0, #1
 800dafc:	89a3      	ldrh	r3, [r4, #12]
 800dafe:	d106      	bne.n	800db0e <__sflush_r+0x62>
 800db00:	6829      	ldr	r1, [r5, #0]
 800db02:	291d      	cmp	r1, #29
 800db04:	d82b      	bhi.n	800db5e <__sflush_r+0xb2>
 800db06:	4a2a      	ldr	r2, [pc, #168]	@ (800dbb0 <__sflush_r+0x104>)
 800db08:	40ca      	lsrs	r2, r1
 800db0a:	07d6      	lsls	r6, r2, #31
 800db0c:	d527      	bpl.n	800db5e <__sflush_r+0xb2>
 800db0e:	2200      	movs	r2, #0
 800db10:	6062      	str	r2, [r4, #4]
 800db12:	04d9      	lsls	r1, r3, #19
 800db14:	6922      	ldr	r2, [r4, #16]
 800db16:	6022      	str	r2, [r4, #0]
 800db18:	d504      	bpl.n	800db24 <__sflush_r+0x78>
 800db1a:	1c42      	adds	r2, r0, #1
 800db1c:	d101      	bne.n	800db22 <__sflush_r+0x76>
 800db1e:	682b      	ldr	r3, [r5, #0]
 800db20:	b903      	cbnz	r3, 800db24 <__sflush_r+0x78>
 800db22:	6560      	str	r0, [r4, #84]	@ 0x54
 800db24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db26:	602f      	str	r7, [r5, #0]
 800db28:	b1b9      	cbz	r1, 800db5a <__sflush_r+0xae>
 800db2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db2e:	4299      	cmp	r1, r3
 800db30:	d002      	beq.n	800db38 <__sflush_r+0x8c>
 800db32:	4628      	mov	r0, r5
 800db34:	f7ff fca2 	bl	800d47c <_free_r>
 800db38:	2300      	movs	r3, #0
 800db3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800db3c:	e00d      	b.n	800db5a <__sflush_r+0xae>
 800db3e:	2301      	movs	r3, #1
 800db40:	4628      	mov	r0, r5
 800db42:	47b0      	blx	r6
 800db44:	4602      	mov	r2, r0
 800db46:	1c50      	adds	r0, r2, #1
 800db48:	d1c9      	bne.n	800dade <__sflush_r+0x32>
 800db4a:	682b      	ldr	r3, [r5, #0]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0c6      	beq.n	800dade <__sflush_r+0x32>
 800db50:	2b1d      	cmp	r3, #29
 800db52:	d001      	beq.n	800db58 <__sflush_r+0xac>
 800db54:	2b16      	cmp	r3, #22
 800db56:	d11e      	bne.n	800db96 <__sflush_r+0xea>
 800db58:	602f      	str	r7, [r5, #0]
 800db5a:	2000      	movs	r0, #0
 800db5c:	e022      	b.n	800dba4 <__sflush_r+0xf8>
 800db5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db62:	b21b      	sxth	r3, r3
 800db64:	e01b      	b.n	800db9e <__sflush_r+0xf2>
 800db66:	690f      	ldr	r7, [r1, #16]
 800db68:	2f00      	cmp	r7, #0
 800db6a:	d0f6      	beq.n	800db5a <__sflush_r+0xae>
 800db6c:	0793      	lsls	r3, r2, #30
 800db6e:	680e      	ldr	r6, [r1, #0]
 800db70:	bf08      	it	eq
 800db72:	694b      	ldreq	r3, [r1, #20]
 800db74:	600f      	str	r7, [r1, #0]
 800db76:	bf18      	it	ne
 800db78:	2300      	movne	r3, #0
 800db7a:	eba6 0807 	sub.w	r8, r6, r7
 800db7e:	608b      	str	r3, [r1, #8]
 800db80:	f1b8 0f00 	cmp.w	r8, #0
 800db84:	dde9      	ble.n	800db5a <__sflush_r+0xae>
 800db86:	6a21      	ldr	r1, [r4, #32]
 800db88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db8a:	4643      	mov	r3, r8
 800db8c:	463a      	mov	r2, r7
 800db8e:	4628      	mov	r0, r5
 800db90:	47b0      	blx	r6
 800db92:	2800      	cmp	r0, #0
 800db94:	dc08      	bgt.n	800dba8 <__sflush_r+0xfc>
 800db96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db9e:	81a3      	strh	r3, [r4, #12]
 800dba0:	f04f 30ff 	mov.w	r0, #4294967295
 800dba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dba8:	4407      	add	r7, r0
 800dbaa:	eba8 0800 	sub.w	r8, r8, r0
 800dbae:	e7e7      	b.n	800db80 <__sflush_r+0xd4>
 800dbb0:	20400001 	.word	0x20400001

0800dbb4 <_fflush_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	690b      	ldr	r3, [r1, #16]
 800dbb8:	4605      	mov	r5, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	b913      	cbnz	r3, 800dbc4 <_fflush_r+0x10>
 800dbbe:	2500      	movs	r5, #0
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	b118      	cbz	r0, 800dbce <_fflush_r+0x1a>
 800dbc6:	6a03      	ldr	r3, [r0, #32]
 800dbc8:	b90b      	cbnz	r3, 800dbce <_fflush_r+0x1a>
 800dbca:	f7ff fb3f 	bl	800d24c <__sinit>
 800dbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d0f3      	beq.n	800dbbe <_fflush_r+0xa>
 800dbd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbd8:	07d0      	lsls	r0, r2, #31
 800dbda:	d404      	bmi.n	800dbe6 <_fflush_r+0x32>
 800dbdc:	0599      	lsls	r1, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_fflush_r+0x32>
 800dbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbe2:	f7ff fc48 	bl	800d476 <__retarget_lock_acquire_recursive>
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	4621      	mov	r1, r4
 800dbea:	f7ff ff5f 	bl	800daac <__sflush_r>
 800dbee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf0:	07da      	lsls	r2, r3, #31
 800dbf2:	4605      	mov	r5, r0
 800dbf4:	d4e4      	bmi.n	800dbc0 <_fflush_r+0xc>
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	059b      	lsls	r3, r3, #22
 800dbfa:	d4e1      	bmi.n	800dbc0 <_fflush_r+0xc>
 800dbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbfe:	f7ff fc3b 	bl	800d478 <__retarget_lock_release_recursive>
 800dc02:	e7dd      	b.n	800dbc0 <_fflush_r+0xc>

0800dc04 <__swbuf_r>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	460e      	mov	r6, r1
 800dc08:	4614      	mov	r4, r2
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	b118      	cbz	r0, 800dc16 <__swbuf_r+0x12>
 800dc0e:	6a03      	ldr	r3, [r0, #32]
 800dc10:	b90b      	cbnz	r3, 800dc16 <__swbuf_r+0x12>
 800dc12:	f7ff fb1b 	bl	800d24c <__sinit>
 800dc16:	69a3      	ldr	r3, [r4, #24]
 800dc18:	60a3      	str	r3, [r4, #8]
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	071a      	lsls	r2, r3, #28
 800dc1e:	d501      	bpl.n	800dc24 <__swbuf_r+0x20>
 800dc20:	6923      	ldr	r3, [r4, #16]
 800dc22:	b943      	cbnz	r3, 800dc36 <__swbuf_r+0x32>
 800dc24:	4621      	mov	r1, r4
 800dc26:	4628      	mov	r0, r5
 800dc28:	f000 f82a 	bl	800dc80 <__swsetup_r>
 800dc2c:	b118      	cbz	r0, 800dc36 <__swbuf_r+0x32>
 800dc2e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc32:	4638      	mov	r0, r7
 800dc34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	6922      	ldr	r2, [r4, #16]
 800dc3a:	1a98      	subs	r0, r3, r2
 800dc3c:	6963      	ldr	r3, [r4, #20]
 800dc3e:	b2f6      	uxtb	r6, r6
 800dc40:	4283      	cmp	r3, r0
 800dc42:	4637      	mov	r7, r6
 800dc44:	dc05      	bgt.n	800dc52 <__swbuf_r+0x4e>
 800dc46:	4621      	mov	r1, r4
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f7ff ffb3 	bl	800dbb4 <_fflush_r>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d1ed      	bne.n	800dc2e <__swbuf_r+0x2a>
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	3b01      	subs	r3, #1
 800dc56:	60a3      	str	r3, [r4, #8]
 800dc58:	6823      	ldr	r3, [r4, #0]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	6022      	str	r2, [r4, #0]
 800dc5e:	701e      	strb	r6, [r3, #0]
 800dc60:	6962      	ldr	r2, [r4, #20]
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d004      	beq.n	800dc72 <__swbuf_r+0x6e>
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	07db      	lsls	r3, r3, #31
 800dc6c:	d5e1      	bpl.n	800dc32 <__swbuf_r+0x2e>
 800dc6e:	2e0a      	cmp	r6, #10
 800dc70:	d1df      	bne.n	800dc32 <__swbuf_r+0x2e>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4628      	mov	r0, r5
 800dc76:	f7ff ff9d 	bl	800dbb4 <_fflush_r>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d0d9      	beq.n	800dc32 <__swbuf_r+0x2e>
 800dc7e:	e7d6      	b.n	800dc2e <__swbuf_r+0x2a>

0800dc80 <__swsetup_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4b29      	ldr	r3, [pc, #164]	@ (800dd28 <__swsetup_r+0xa8>)
 800dc84:	4605      	mov	r5, r0
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	460c      	mov	r4, r1
 800dc8a:	b118      	cbz	r0, 800dc94 <__swsetup_r+0x14>
 800dc8c:	6a03      	ldr	r3, [r0, #32]
 800dc8e:	b90b      	cbnz	r3, 800dc94 <__swsetup_r+0x14>
 800dc90:	f7ff fadc 	bl	800d24c <__sinit>
 800dc94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc98:	0719      	lsls	r1, r3, #28
 800dc9a:	d422      	bmi.n	800dce2 <__swsetup_r+0x62>
 800dc9c:	06da      	lsls	r2, r3, #27
 800dc9e:	d407      	bmi.n	800dcb0 <__swsetup_r+0x30>
 800dca0:	2209      	movs	r2, #9
 800dca2:	602a      	str	r2, [r5, #0]
 800dca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dca8:	81a3      	strh	r3, [r4, #12]
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	e033      	b.n	800dd18 <__swsetup_r+0x98>
 800dcb0:	0758      	lsls	r0, r3, #29
 800dcb2:	d512      	bpl.n	800dcda <__swsetup_r+0x5a>
 800dcb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dcb6:	b141      	cbz	r1, 800dcca <__swsetup_r+0x4a>
 800dcb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcbc:	4299      	cmp	r1, r3
 800dcbe:	d002      	beq.n	800dcc6 <__swsetup_r+0x46>
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f7ff fbdb 	bl	800d47c <_free_r>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	6063      	str	r3, [r4, #4]
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f043 0308 	orr.w	r3, r3, #8
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	b94b      	cbnz	r3, 800dcfa <__swsetup_r+0x7a>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dcec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcf0:	d003      	beq.n	800dcfa <__swsetup_r+0x7a>
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	4628      	mov	r0, r5
 800dcf6:	f000 f83f 	bl	800dd78 <__smakebuf_r>
 800dcfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfe:	f013 0201 	ands.w	r2, r3, #1
 800dd02:	d00a      	beq.n	800dd1a <__swsetup_r+0x9a>
 800dd04:	2200      	movs	r2, #0
 800dd06:	60a2      	str	r2, [r4, #8]
 800dd08:	6962      	ldr	r2, [r4, #20]
 800dd0a:	4252      	negs	r2, r2
 800dd0c:	61a2      	str	r2, [r4, #24]
 800dd0e:	6922      	ldr	r2, [r4, #16]
 800dd10:	b942      	cbnz	r2, 800dd24 <__swsetup_r+0xa4>
 800dd12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd16:	d1c5      	bne.n	800dca4 <__swsetup_r+0x24>
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	0799      	lsls	r1, r3, #30
 800dd1c:	bf58      	it	pl
 800dd1e:	6962      	ldrpl	r2, [r4, #20]
 800dd20:	60a2      	str	r2, [r4, #8]
 800dd22:	e7f4      	b.n	800dd0e <__swsetup_r+0x8e>
 800dd24:	2000      	movs	r0, #0
 800dd26:	e7f7      	b.n	800dd18 <__swsetup_r+0x98>
 800dd28:	20000038 	.word	0x20000038

0800dd2c <__swhatbuf_r>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	460c      	mov	r4, r1
 800dd30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd34:	2900      	cmp	r1, #0
 800dd36:	b096      	sub	sp, #88	@ 0x58
 800dd38:	4615      	mov	r5, r2
 800dd3a:	461e      	mov	r6, r3
 800dd3c:	da0d      	bge.n	800dd5a <__swhatbuf_r+0x2e>
 800dd3e:	89a3      	ldrh	r3, [r4, #12]
 800dd40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd44:	f04f 0100 	mov.w	r1, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2340      	movne	r3, #64	@ 0x40
 800dd4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd50:	2000      	movs	r0, #0
 800dd52:	6031      	str	r1, [r6, #0]
 800dd54:	602b      	str	r3, [r5, #0]
 800dd56:	b016      	add	sp, #88	@ 0x58
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	466a      	mov	r2, sp
 800dd5c:	f000 f848 	bl	800ddf0 <_fstat_r>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	dbec      	blt.n	800dd3e <__swhatbuf_r+0x12>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd6e:	4259      	negs	r1, r3
 800dd70:	4159      	adcs	r1, r3
 800dd72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd76:	e7eb      	b.n	800dd50 <__swhatbuf_r+0x24>

0800dd78 <__smakebuf_r>:
 800dd78:	898b      	ldrh	r3, [r1, #12]
 800dd7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd7c:	079d      	lsls	r5, r3, #30
 800dd7e:	4606      	mov	r6, r0
 800dd80:	460c      	mov	r4, r1
 800dd82:	d507      	bpl.n	800dd94 <__smakebuf_r+0x1c>
 800dd84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	6123      	str	r3, [r4, #16]
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	6163      	str	r3, [r4, #20]
 800dd90:	b003      	add	sp, #12
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd94:	ab01      	add	r3, sp, #4
 800dd96:	466a      	mov	r2, sp
 800dd98:	f7ff ffc8 	bl	800dd2c <__swhatbuf_r>
 800dd9c:	9f00      	ldr	r7, [sp, #0]
 800dd9e:	4605      	mov	r5, r0
 800dda0:	4639      	mov	r1, r7
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7ff f93a 	bl	800d01c <_malloc_r>
 800dda8:	b948      	cbnz	r0, 800ddbe <__smakebuf_r+0x46>
 800ddaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddae:	059a      	lsls	r2, r3, #22
 800ddb0:	d4ee      	bmi.n	800dd90 <__smakebuf_r+0x18>
 800ddb2:	f023 0303 	bic.w	r3, r3, #3
 800ddb6:	f043 0302 	orr.w	r3, r3, #2
 800ddba:	81a3      	strh	r3, [r4, #12]
 800ddbc:	e7e2      	b.n	800dd84 <__smakebuf_r+0xc>
 800ddbe:	89a3      	ldrh	r3, [r4, #12]
 800ddc0:	6020      	str	r0, [r4, #0]
 800ddc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddc6:	81a3      	strh	r3, [r4, #12]
 800ddc8:	9b01      	ldr	r3, [sp, #4]
 800ddca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddce:	b15b      	cbz	r3, 800dde8 <__smakebuf_r+0x70>
 800ddd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f000 f81d 	bl	800de14 <_isatty_r>
 800ddda:	b128      	cbz	r0, 800dde8 <__smakebuf_r+0x70>
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f023 0303 	bic.w	r3, r3, #3
 800dde2:	f043 0301 	orr.w	r3, r3, #1
 800dde6:	81a3      	strh	r3, [r4, #12]
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	431d      	orrs	r5, r3
 800ddec:	81a5      	strh	r5, [r4, #12]
 800ddee:	e7cf      	b.n	800dd90 <__smakebuf_r+0x18>

0800ddf0 <_fstat_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	@ (800de10 <_fstat_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f3 fede 	bl	8001bbe <_fstat>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_fstat_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_fstat_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	20002d00 	.word	0x20002d00

0800de14 <_isatty_r>:
 800de14:	b538      	push	{r3, r4, r5, lr}
 800de16:	4d06      	ldr	r5, [pc, #24]	@ (800de30 <_isatty_r+0x1c>)
 800de18:	2300      	movs	r3, #0
 800de1a:	4604      	mov	r4, r0
 800de1c:	4608      	mov	r0, r1
 800de1e:	602b      	str	r3, [r5, #0]
 800de20:	f7f3 fedd 	bl	8001bde <_isatty>
 800de24:	1c43      	adds	r3, r0, #1
 800de26:	d102      	bne.n	800de2e <_isatty_r+0x1a>
 800de28:	682b      	ldr	r3, [r5, #0]
 800de2a:	b103      	cbz	r3, 800de2e <_isatty_r+0x1a>
 800de2c:	6023      	str	r3, [r4, #0]
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
 800de30:	20002d00 	.word	0x20002d00

0800de34 <sinf>:
 800de34:	ee10 3a10 	vmov	r3, s0
 800de38:	b507      	push	{r0, r1, r2, lr}
 800de3a:	4a1f      	ldr	r2, [pc, #124]	@ (800deb8 <sinf+0x84>)
 800de3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800de40:	4293      	cmp	r3, r2
 800de42:	d807      	bhi.n	800de54 <sinf+0x20>
 800de44:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800debc <sinf+0x88>
 800de48:	2000      	movs	r0, #0
 800de4a:	b003      	add	sp, #12
 800de4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de50:	f000 b88e 	b.w	800df70 <__kernel_sinf>
 800de54:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800de58:	d304      	bcc.n	800de64 <sinf+0x30>
 800de5a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800de5e:	b003      	add	sp, #12
 800de60:	f85d fb04 	ldr.w	pc, [sp], #4
 800de64:	4668      	mov	r0, sp
 800de66:	f000 f8cb 	bl	800e000 <__ieee754_rem_pio2f>
 800de6a:	f000 0003 	and.w	r0, r0, #3
 800de6e:	2801      	cmp	r0, #1
 800de70:	d00a      	beq.n	800de88 <sinf+0x54>
 800de72:	2802      	cmp	r0, #2
 800de74:	d00f      	beq.n	800de96 <sinf+0x62>
 800de76:	b9c0      	cbnz	r0, 800deaa <sinf+0x76>
 800de78:	eddd 0a01 	vldr	s1, [sp, #4]
 800de7c:	ed9d 0a00 	vldr	s0, [sp]
 800de80:	2001      	movs	r0, #1
 800de82:	f000 f875 	bl	800df70 <__kernel_sinf>
 800de86:	e7ea      	b.n	800de5e <sinf+0x2a>
 800de88:	eddd 0a01 	vldr	s1, [sp, #4]
 800de8c:	ed9d 0a00 	vldr	s0, [sp]
 800de90:	f000 f816 	bl	800dec0 <__kernel_cosf>
 800de94:	e7e3      	b.n	800de5e <sinf+0x2a>
 800de96:	eddd 0a01 	vldr	s1, [sp, #4]
 800de9a:	ed9d 0a00 	vldr	s0, [sp]
 800de9e:	2001      	movs	r0, #1
 800dea0:	f000 f866 	bl	800df70 <__kernel_sinf>
 800dea4:	eeb1 0a40 	vneg.f32	s0, s0
 800dea8:	e7d9      	b.n	800de5e <sinf+0x2a>
 800deaa:	eddd 0a01 	vldr	s1, [sp, #4]
 800deae:	ed9d 0a00 	vldr	s0, [sp]
 800deb2:	f000 f805 	bl	800dec0 <__kernel_cosf>
 800deb6:	e7f5      	b.n	800dea4 <sinf+0x70>
 800deb8:	3f490fd8 	.word	0x3f490fd8
 800debc:	00000000 	.word	0x00000000

0800dec0 <__kernel_cosf>:
 800dec0:	ee10 3a10 	vmov	r3, s0
 800dec4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dec8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800decc:	eef0 6a40 	vmov.f32	s13, s0
 800ded0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ded4:	d204      	bcs.n	800dee0 <__kernel_cosf+0x20>
 800ded6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800deda:	ee17 2a90 	vmov	r2, s15
 800dede:	b342      	cbz	r2, 800df32 <__kernel_cosf+0x72>
 800dee0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800dee4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800df50 <__kernel_cosf+0x90>
 800dee8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800df54 <__kernel_cosf+0x94>
 800deec:	4a1a      	ldr	r2, [pc, #104]	@ (800df58 <__kernel_cosf+0x98>)
 800deee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800def2:	4293      	cmp	r3, r2
 800def4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800df5c <__kernel_cosf+0x9c>
 800def8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800defc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800df60 <__kernel_cosf+0xa0>
 800df00:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df04:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800df64 <__kernel_cosf+0xa4>
 800df08:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df0c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800df68 <__kernel_cosf+0xa8>
 800df10:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df14:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800df18:	ee26 6a07 	vmul.f32	s12, s12, s14
 800df1c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800df20:	eee7 0a06 	vfma.f32	s1, s14, s12
 800df24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df28:	d804      	bhi.n	800df34 <__kernel_cosf+0x74>
 800df2a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800df2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df32:	4770      	bx	lr
 800df34:	4a0d      	ldr	r2, [pc, #52]	@ (800df6c <__kernel_cosf+0xac>)
 800df36:	4293      	cmp	r3, r2
 800df38:	bf9a      	itte	ls
 800df3a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800df3e:	ee07 3a10 	vmovls	s14, r3
 800df42:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800df46:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df4e:	e7ec      	b.n	800df2a <__kernel_cosf+0x6a>
 800df50:	ad47d74e 	.word	0xad47d74e
 800df54:	310f74f6 	.word	0x310f74f6
 800df58:	3e999999 	.word	0x3e999999
 800df5c:	b493f27c 	.word	0xb493f27c
 800df60:	37d00d01 	.word	0x37d00d01
 800df64:	bab60b61 	.word	0xbab60b61
 800df68:	3d2aaaab 	.word	0x3d2aaaab
 800df6c:	3f480000 	.word	0x3f480000

0800df70 <__kernel_sinf>:
 800df70:	ee10 3a10 	vmov	r3, s0
 800df74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df78:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800df7c:	d204      	bcs.n	800df88 <__kernel_sinf+0x18>
 800df7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800df82:	ee17 3a90 	vmov	r3, s15
 800df86:	b35b      	cbz	r3, 800dfe0 <__kernel_sinf+0x70>
 800df88:	ee20 7a00 	vmul.f32	s14, s0, s0
 800df8c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dfe4 <__kernel_sinf+0x74>
 800df90:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800dfe8 <__kernel_sinf+0x78>
 800df94:	eea7 6a27 	vfma.f32	s12, s14, s15
 800df98:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800dfec <__kernel_sinf+0x7c>
 800df9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfa0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800dff0 <__kernel_sinf+0x80>
 800dfa4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dfa8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800dff4 <__kernel_sinf+0x84>
 800dfac:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dfb0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfb4:	b930      	cbnz	r0, 800dfc4 <__kernel_sinf+0x54>
 800dfb6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800dff8 <__kernel_sinf+0x88>
 800dfba:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dfbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dfc2:	4770      	bx	lr
 800dfc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dfc8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800dfcc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dfd0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dfd4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800dffc <__kernel_sinf+0x8c>
 800dfd8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dfdc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	2f2ec9d3 	.word	0x2f2ec9d3
 800dfe8:	b2d72f34 	.word	0xb2d72f34
 800dfec:	3638ef1b 	.word	0x3638ef1b
 800dff0:	b9500d01 	.word	0xb9500d01
 800dff4:	3c088889 	.word	0x3c088889
 800dff8:	be2aaaab 	.word	0xbe2aaaab
 800dffc:	3e2aaaab 	.word	0x3e2aaaab

0800e000 <__ieee754_rem_pio2f>:
 800e000:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e002:	ee10 6a10 	vmov	r6, s0
 800e006:	4b88      	ldr	r3, [pc, #544]	@ (800e228 <__ieee754_rem_pio2f+0x228>)
 800e008:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e00c:	429d      	cmp	r5, r3
 800e00e:	b087      	sub	sp, #28
 800e010:	4604      	mov	r4, r0
 800e012:	d805      	bhi.n	800e020 <__ieee754_rem_pio2f+0x20>
 800e014:	2300      	movs	r3, #0
 800e016:	ed80 0a00 	vstr	s0, [r0]
 800e01a:	6043      	str	r3, [r0, #4]
 800e01c:	2000      	movs	r0, #0
 800e01e:	e022      	b.n	800e066 <__ieee754_rem_pio2f+0x66>
 800e020:	4b82      	ldr	r3, [pc, #520]	@ (800e22c <__ieee754_rem_pio2f+0x22c>)
 800e022:	429d      	cmp	r5, r3
 800e024:	d83a      	bhi.n	800e09c <__ieee754_rem_pio2f+0x9c>
 800e026:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e02a:	2e00      	cmp	r6, #0
 800e02c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e230 <__ieee754_rem_pio2f+0x230>
 800e030:	4a80      	ldr	r2, [pc, #512]	@ (800e234 <__ieee754_rem_pio2f+0x234>)
 800e032:	f023 030f 	bic.w	r3, r3, #15
 800e036:	dd18      	ble.n	800e06a <__ieee754_rem_pio2f+0x6a>
 800e038:	4293      	cmp	r3, r2
 800e03a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e03e:	bf09      	itett	eq
 800e040:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e238 <__ieee754_rem_pio2f+0x238>
 800e044:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e23c <__ieee754_rem_pio2f+0x23c>
 800e048:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e240 <__ieee754_rem_pio2f+0x240>
 800e04c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e050:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e054:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e058:	ed80 7a00 	vstr	s14, [r0]
 800e05c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e060:	edc0 7a01 	vstr	s15, [r0, #4]
 800e064:	2001      	movs	r0, #1
 800e066:	b007      	add	sp, #28
 800e068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06a:	4293      	cmp	r3, r2
 800e06c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e070:	bf09      	itett	eq
 800e072:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e238 <__ieee754_rem_pio2f+0x238>
 800e076:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e23c <__ieee754_rem_pio2f+0x23c>
 800e07a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e240 <__ieee754_rem_pio2f+0x240>
 800e07e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e082:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e08a:	ed80 7a00 	vstr	s14, [r0]
 800e08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e092:	edc0 7a01 	vstr	s15, [r0, #4]
 800e096:	f04f 30ff 	mov.w	r0, #4294967295
 800e09a:	e7e4      	b.n	800e066 <__ieee754_rem_pio2f+0x66>
 800e09c:	4b69      	ldr	r3, [pc, #420]	@ (800e244 <__ieee754_rem_pio2f+0x244>)
 800e09e:	429d      	cmp	r5, r3
 800e0a0:	d873      	bhi.n	800e18a <__ieee754_rem_pio2f+0x18a>
 800e0a2:	f000 f8dd 	bl	800e260 <fabsf>
 800e0a6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e248 <__ieee754_rem_pio2f+0x248>
 800e0aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e0ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0ba:	ee17 0a90 	vmov	r0, s15
 800e0be:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e230 <__ieee754_rem_pio2f+0x230>
 800e0c2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e0c6:	281f      	cmp	r0, #31
 800e0c8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e23c <__ieee754_rem_pio2f+0x23c>
 800e0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0d0:	eeb1 6a47 	vneg.f32	s12, s14
 800e0d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e0d8:	ee16 1a90 	vmov	r1, s13
 800e0dc:	dc09      	bgt.n	800e0f2 <__ieee754_rem_pio2f+0xf2>
 800e0de:	4a5b      	ldr	r2, [pc, #364]	@ (800e24c <__ieee754_rem_pio2f+0x24c>)
 800e0e0:	1e47      	subs	r7, r0, #1
 800e0e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e0e6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e0ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d107      	bne.n	800e102 <__ieee754_rem_pio2f+0x102>
 800e0f2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e0f6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e0fa:	2a08      	cmp	r2, #8
 800e0fc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e100:	dc14      	bgt.n	800e12c <__ieee754_rem_pio2f+0x12c>
 800e102:	6021      	str	r1, [r4, #0]
 800e104:	ed94 7a00 	vldr	s14, [r4]
 800e108:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e10c:	2e00      	cmp	r6, #0
 800e10e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e112:	ed84 0a01 	vstr	s0, [r4, #4]
 800e116:	daa6      	bge.n	800e066 <__ieee754_rem_pio2f+0x66>
 800e118:	eeb1 7a47 	vneg.f32	s14, s14
 800e11c:	eeb1 0a40 	vneg.f32	s0, s0
 800e120:	ed84 7a00 	vstr	s14, [r4]
 800e124:	ed84 0a01 	vstr	s0, [r4, #4]
 800e128:	4240      	negs	r0, r0
 800e12a:	e79c      	b.n	800e066 <__ieee754_rem_pio2f+0x66>
 800e12c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e238 <__ieee754_rem_pio2f+0x238>
 800e130:	eef0 6a40 	vmov.f32	s13, s0
 800e134:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e138:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e13c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e140:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e240 <__ieee754_rem_pio2f+0x240>
 800e144:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e148:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e14c:	ee15 2a90 	vmov	r2, s11
 800e150:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e154:	1a5b      	subs	r3, r3, r1
 800e156:	2b19      	cmp	r3, #25
 800e158:	dc04      	bgt.n	800e164 <__ieee754_rem_pio2f+0x164>
 800e15a:	edc4 5a00 	vstr	s11, [r4]
 800e15e:	eeb0 0a66 	vmov.f32	s0, s13
 800e162:	e7cf      	b.n	800e104 <__ieee754_rem_pio2f+0x104>
 800e164:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e250 <__ieee754_rem_pio2f+0x250>
 800e168:	eeb0 0a66 	vmov.f32	s0, s13
 800e16c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e170:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e174:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e254 <__ieee754_rem_pio2f+0x254>
 800e178:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e17c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e180:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e184:	ed84 7a00 	vstr	s14, [r4]
 800e188:	e7bc      	b.n	800e104 <__ieee754_rem_pio2f+0x104>
 800e18a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e18e:	d306      	bcc.n	800e19e <__ieee754_rem_pio2f+0x19e>
 800e190:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e194:	edc0 7a01 	vstr	s15, [r0, #4]
 800e198:	edc0 7a00 	vstr	s15, [r0]
 800e19c:	e73e      	b.n	800e01c <__ieee754_rem_pio2f+0x1c>
 800e19e:	15ea      	asrs	r2, r5, #23
 800e1a0:	3a86      	subs	r2, #134	@ 0x86
 800e1a2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e1a6:	ee07 3a90 	vmov	s15, r3
 800e1aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1ae:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e258 <__ieee754_rem_pio2f+0x258>
 800e1b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e1be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e1d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1de:	edcd 7a05 	vstr	s15, [sp, #20]
 800e1e2:	d11e      	bne.n	800e222 <__ieee754_rem_pio2f+0x222>
 800e1e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	bf0c      	ite	eq
 800e1ee:	2301      	moveq	r3, #1
 800e1f0:	2302      	movne	r3, #2
 800e1f2:	491a      	ldr	r1, [pc, #104]	@ (800e25c <__ieee754_rem_pio2f+0x25c>)
 800e1f4:	9101      	str	r1, [sp, #4]
 800e1f6:	2102      	movs	r1, #2
 800e1f8:	9100      	str	r1, [sp, #0]
 800e1fa:	a803      	add	r0, sp, #12
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	f000 f837 	bl	800e270 <__kernel_rem_pio2f>
 800e202:	2e00      	cmp	r6, #0
 800e204:	f6bf af2f 	bge.w	800e066 <__ieee754_rem_pio2f+0x66>
 800e208:	edd4 7a00 	vldr	s15, [r4]
 800e20c:	eef1 7a67 	vneg.f32	s15, s15
 800e210:	edc4 7a00 	vstr	s15, [r4]
 800e214:	edd4 7a01 	vldr	s15, [r4, #4]
 800e218:	eef1 7a67 	vneg.f32	s15, s15
 800e21c:	edc4 7a01 	vstr	s15, [r4, #4]
 800e220:	e782      	b.n	800e128 <__ieee754_rem_pio2f+0x128>
 800e222:	2303      	movs	r3, #3
 800e224:	e7e5      	b.n	800e1f2 <__ieee754_rem_pio2f+0x1f2>
 800e226:	bf00      	nop
 800e228:	3f490fd8 	.word	0x3f490fd8
 800e22c:	4016cbe3 	.word	0x4016cbe3
 800e230:	3fc90f80 	.word	0x3fc90f80
 800e234:	3fc90fd0 	.word	0x3fc90fd0
 800e238:	37354400 	.word	0x37354400
 800e23c:	37354443 	.word	0x37354443
 800e240:	2e85a308 	.word	0x2e85a308
 800e244:	43490f80 	.word	0x43490f80
 800e248:	3f22f984 	.word	0x3f22f984
 800e24c:	0800e914 	.word	0x0800e914
 800e250:	2e85a300 	.word	0x2e85a300
 800e254:	248d3132 	.word	0x248d3132
 800e258:	43800000 	.word	0x43800000
 800e25c:	0800e994 	.word	0x0800e994

0800e260 <fabsf>:
 800e260:	ee10 3a10 	vmov	r3, s0
 800e264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e268:	ee00 3a10 	vmov	s0, r3
 800e26c:	4770      	bx	lr
	...

0800e270 <__kernel_rem_pio2f>:
 800e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	ed2d 8b04 	vpush	{d8-d9}
 800e278:	b0d9      	sub	sp, #356	@ 0x164
 800e27a:	4690      	mov	r8, r2
 800e27c:	9001      	str	r0, [sp, #4]
 800e27e:	4ab6      	ldr	r2, [pc, #728]	@ (800e558 <__kernel_rem_pio2f+0x2e8>)
 800e280:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e282:	f118 0f04 	cmn.w	r8, #4
 800e286:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e28a:	460f      	mov	r7, r1
 800e28c:	f103 3bff 	add.w	fp, r3, #4294967295
 800e290:	db26      	blt.n	800e2e0 <__kernel_rem_pio2f+0x70>
 800e292:	f1b8 0203 	subs.w	r2, r8, #3
 800e296:	bf48      	it	mi
 800e298:	f108 0204 	addmi.w	r2, r8, #4
 800e29c:	10d2      	asrs	r2, r2, #3
 800e29e:	1c55      	adds	r5, r2, #1
 800e2a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e2a2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e2a6:	00e8      	lsls	r0, r5, #3
 800e2a8:	eba2 060b 	sub.w	r6, r2, fp
 800e2ac:	9002      	str	r0, [sp, #8]
 800e2ae:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e2b2:	eb0a 0c0b 	add.w	ip, sl, fp
 800e2b6:	ac1c      	add	r4, sp, #112	@ 0x70
 800e2b8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e2bc:	2000      	movs	r0, #0
 800e2be:	4560      	cmp	r0, ip
 800e2c0:	dd10      	ble.n	800e2e4 <__kernel_rem_pio2f+0x74>
 800e2c2:	a91c      	add	r1, sp, #112	@ 0x70
 800e2c4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e2c8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	4556      	cmp	r6, sl
 800e2d0:	dc24      	bgt.n	800e31c <__kernel_rem_pio2f+0xac>
 800e2d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e2d6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e2da:	4684      	mov	ip, r0
 800e2dc:	2400      	movs	r4, #0
 800e2de:	e016      	b.n	800e30e <__kernel_rem_pio2f+0x9e>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	e7dc      	b.n	800e29e <__kernel_rem_pio2f+0x2e>
 800e2e4:	42c6      	cmn	r6, r0
 800e2e6:	bf5d      	ittte	pl
 800e2e8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e2ec:	ee07 1a90 	vmovpl	s15, r1
 800e2f0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e2f4:	eef0 7a47 	vmovmi.f32	s15, s14
 800e2f8:	ece4 7a01 	vstmia	r4!, {s15}
 800e2fc:	3001      	adds	r0, #1
 800e2fe:	e7de      	b.n	800e2be <__kernel_rem_pio2f+0x4e>
 800e300:	ecfe 6a01 	vldmia	lr!, {s13}
 800e304:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e308:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e30c:	3401      	adds	r4, #1
 800e30e:	455c      	cmp	r4, fp
 800e310:	ddf6      	ble.n	800e300 <__kernel_rem_pio2f+0x90>
 800e312:	ece9 7a01 	vstmia	r9!, {s15}
 800e316:	3601      	adds	r6, #1
 800e318:	3004      	adds	r0, #4
 800e31a:	e7d8      	b.n	800e2ce <__kernel_rem_pio2f+0x5e>
 800e31c:	a908      	add	r1, sp, #32
 800e31e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e322:	9104      	str	r1, [sp, #16]
 800e324:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e326:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800e564 <__kernel_rem_pio2f+0x2f4>
 800e32a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800e560 <__kernel_rem_pio2f+0x2f0>
 800e32e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e332:	9203      	str	r2, [sp, #12]
 800e334:	4654      	mov	r4, sl
 800e336:	00a2      	lsls	r2, r4, #2
 800e338:	9205      	str	r2, [sp, #20]
 800e33a:	aa58      	add	r2, sp, #352	@ 0x160
 800e33c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e340:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e344:	a944      	add	r1, sp, #272	@ 0x110
 800e346:	aa08      	add	r2, sp, #32
 800e348:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e34c:	4694      	mov	ip, r2
 800e34e:	4626      	mov	r6, r4
 800e350:	2e00      	cmp	r6, #0
 800e352:	dc4c      	bgt.n	800e3ee <__kernel_rem_pio2f+0x17e>
 800e354:	4628      	mov	r0, r5
 800e356:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e35a:	f000 f9f1 	bl	800e740 <scalbnf>
 800e35e:	eeb0 8a40 	vmov.f32	s16, s0
 800e362:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e366:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e36a:	f000 fa4f 	bl	800e80c <floorf>
 800e36e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e372:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e376:	2d00      	cmp	r5, #0
 800e378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e37c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e380:	ee17 9a90 	vmov	r9, s15
 800e384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e388:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e38c:	dd41      	ble.n	800e412 <__kernel_rem_pio2f+0x1a2>
 800e38e:	f104 3cff 	add.w	ip, r4, #4294967295
 800e392:	a908      	add	r1, sp, #32
 800e394:	f1c5 0e08 	rsb	lr, r5, #8
 800e398:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e39c:	fa46 f00e 	asr.w	r0, r6, lr
 800e3a0:	4481      	add	r9, r0
 800e3a2:	fa00 f00e 	lsl.w	r0, r0, lr
 800e3a6:	1a36      	subs	r6, r6, r0
 800e3a8:	f1c5 0007 	rsb	r0, r5, #7
 800e3ac:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e3b0:	4106      	asrs	r6, r0
 800e3b2:	2e00      	cmp	r6, #0
 800e3b4:	dd3c      	ble.n	800e430 <__kernel_rem_pio2f+0x1c0>
 800e3b6:	f04f 0e00 	mov.w	lr, #0
 800e3ba:	f109 0901 	add.w	r9, r9, #1
 800e3be:	4670      	mov	r0, lr
 800e3c0:	4574      	cmp	r4, lr
 800e3c2:	dc68      	bgt.n	800e496 <__kernel_rem_pio2f+0x226>
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	dd03      	ble.n	800e3d0 <__kernel_rem_pio2f+0x160>
 800e3c8:	2d01      	cmp	r5, #1
 800e3ca:	d074      	beq.n	800e4b6 <__kernel_rem_pio2f+0x246>
 800e3cc:	2d02      	cmp	r5, #2
 800e3ce:	d07d      	beq.n	800e4cc <__kernel_rem_pio2f+0x25c>
 800e3d0:	2e02      	cmp	r6, #2
 800e3d2:	d12d      	bne.n	800e430 <__kernel_rem_pio2f+0x1c0>
 800e3d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e3d8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e3dc:	b340      	cbz	r0, 800e430 <__kernel_rem_pio2f+0x1c0>
 800e3de:	4628      	mov	r0, r5
 800e3e0:	9306      	str	r3, [sp, #24]
 800e3e2:	f000 f9ad 	bl	800e740 <scalbnf>
 800e3e6:	9b06      	ldr	r3, [sp, #24]
 800e3e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e3ec:	e020      	b.n	800e430 <__kernel_rem_pio2f+0x1c0>
 800e3ee:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e3f2:	3e01      	subs	r6, #1
 800e3f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e3fc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e400:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e404:	ecac 0a01 	vstmia	ip!, {s0}
 800e408:	ed30 0a01 	vldmdb	r0!, {s0}
 800e40c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e410:	e79e      	b.n	800e350 <__kernel_rem_pio2f+0xe0>
 800e412:	d105      	bne.n	800e420 <__kernel_rem_pio2f+0x1b0>
 800e414:	1e60      	subs	r0, r4, #1
 800e416:	a908      	add	r1, sp, #32
 800e418:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e41c:	11f6      	asrs	r6, r6, #7
 800e41e:	e7c8      	b.n	800e3b2 <__kernel_rem_pio2f+0x142>
 800e420:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e424:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42c:	da31      	bge.n	800e492 <__kernel_rem_pio2f+0x222>
 800e42e:	2600      	movs	r6, #0
 800e430:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e438:	f040 8098 	bne.w	800e56c <__kernel_rem_pio2f+0x2fc>
 800e43c:	1e60      	subs	r0, r4, #1
 800e43e:	2200      	movs	r2, #0
 800e440:	4550      	cmp	r0, sl
 800e442:	da4b      	bge.n	800e4dc <__kernel_rem_pio2f+0x26c>
 800e444:	2a00      	cmp	r2, #0
 800e446:	d065      	beq.n	800e514 <__kernel_rem_pio2f+0x2a4>
 800e448:	3c01      	subs	r4, #1
 800e44a:	ab08      	add	r3, sp, #32
 800e44c:	3d08      	subs	r5, #8
 800e44e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d0f8      	beq.n	800e448 <__kernel_rem_pio2f+0x1d8>
 800e456:	4628      	mov	r0, r5
 800e458:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e45c:	f000 f970 	bl	800e740 <scalbnf>
 800e460:	1c63      	adds	r3, r4, #1
 800e462:	aa44      	add	r2, sp, #272	@ 0x110
 800e464:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e564 <__kernel_rem_pio2f+0x2f4>
 800e468:	0099      	lsls	r1, r3, #2
 800e46a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e46e:	4623      	mov	r3, r4
 800e470:	2b00      	cmp	r3, #0
 800e472:	f280 80a9 	bge.w	800e5c8 <__kernel_rem_pio2f+0x358>
 800e476:	4623      	mov	r3, r4
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f2c0 80c7 	blt.w	800e60c <__kernel_rem_pio2f+0x39c>
 800e47e:	aa44      	add	r2, sp, #272	@ 0x110
 800e480:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e484:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e55c <__kernel_rem_pio2f+0x2ec>
 800e488:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e48c:	2000      	movs	r0, #0
 800e48e:	1ae2      	subs	r2, r4, r3
 800e490:	e0b1      	b.n	800e5f6 <__kernel_rem_pio2f+0x386>
 800e492:	2602      	movs	r6, #2
 800e494:	e78f      	b.n	800e3b6 <__kernel_rem_pio2f+0x146>
 800e496:	f852 1b04 	ldr.w	r1, [r2], #4
 800e49a:	b948      	cbnz	r0, 800e4b0 <__kernel_rem_pio2f+0x240>
 800e49c:	b121      	cbz	r1, 800e4a8 <__kernel_rem_pio2f+0x238>
 800e49e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e4a2:	f842 1c04 	str.w	r1, [r2, #-4]
 800e4a6:	2101      	movs	r1, #1
 800e4a8:	f10e 0e01 	add.w	lr, lr, #1
 800e4ac:	4608      	mov	r0, r1
 800e4ae:	e787      	b.n	800e3c0 <__kernel_rem_pio2f+0x150>
 800e4b0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e4b4:	e7f5      	b.n	800e4a2 <__kernel_rem_pio2f+0x232>
 800e4b6:	f104 3cff 	add.w	ip, r4, #4294967295
 800e4ba:	aa08      	add	r2, sp, #32
 800e4bc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e4c4:	a908      	add	r1, sp, #32
 800e4c6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e4ca:	e781      	b.n	800e3d0 <__kernel_rem_pio2f+0x160>
 800e4cc:	f104 3cff 	add.w	ip, r4, #4294967295
 800e4d0:	aa08      	add	r2, sp, #32
 800e4d2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e4d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e4da:	e7f3      	b.n	800e4c4 <__kernel_rem_pio2f+0x254>
 800e4dc:	a908      	add	r1, sp, #32
 800e4de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e4e2:	3801      	subs	r0, #1
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	e7ab      	b.n	800e440 <__kernel_rem_pio2f+0x1d0>
 800e4e8:	3201      	adds	r2, #1
 800e4ea:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	d0fa      	beq.n	800e4e8 <__kernel_rem_pio2f+0x278>
 800e4f2:	9905      	ldr	r1, [sp, #20]
 800e4f4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e4f8:	eb0d 0001 	add.w	r0, sp, r1
 800e4fc:	18e6      	adds	r6, r4, r3
 800e4fe:	a91c      	add	r1, sp, #112	@ 0x70
 800e500:	f104 0c01 	add.w	ip, r4, #1
 800e504:	384c      	subs	r0, #76	@ 0x4c
 800e506:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e50a:	4422      	add	r2, r4
 800e50c:	4562      	cmp	r2, ip
 800e50e:	da04      	bge.n	800e51a <__kernel_rem_pio2f+0x2aa>
 800e510:	4614      	mov	r4, r2
 800e512:	e710      	b.n	800e336 <__kernel_rem_pio2f+0xc6>
 800e514:	9804      	ldr	r0, [sp, #16]
 800e516:	2201      	movs	r2, #1
 800e518:	e7e7      	b.n	800e4ea <__kernel_rem_pio2f+0x27a>
 800e51a:	9903      	ldr	r1, [sp, #12]
 800e51c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e520:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e524:	9105      	str	r1, [sp, #20]
 800e526:	ee07 1a90 	vmov	s15, r1
 800e52a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e52e:	2400      	movs	r4, #0
 800e530:	ece6 7a01 	vstmia	r6!, {s15}
 800e534:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e538:	46b1      	mov	r9, r6
 800e53a:	455c      	cmp	r4, fp
 800e53c:	dd04      	ble.n	800e548 <__kernel_rem_pio2f+0x2d8>
 800e53e:	ece0 7a01 	vstmia	r0!, {s15}
 800e542:	f10c 0c01 	add.w	ip, ip, #1
 800e546:	e7e1      	b.n	800e50c <__kernel_rem_pio2f+0x29c>
 800e548:	ecfe 6a01 	vldmia	lr!, {s13}
 800e54c:	ed39 7a01 	vldmdb	r9!, {s14}
 800e550:	3401      	adds	r4, #1
 800e552:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e556:	e7f0      	b.n	800e53a <__kernel_rem_pio2f+0x2ca>
 800e558:	0800ecd8 	.word	0x0800ecd8
 800e55c:	0800ecac 	.word	0x0800ecac
 800e560:	43800000 	.word	0x43800000
 800e564:	3b800000 	.word	0x3b800000
 800e568:	00000000 	.word	0x00000000
 800e56c:	9b02      	ldr	r3, [sp, #8]
 800e56e:	eeb0 0a48 	vmov.f32	s0, s16
 800e572:	eba3 0008 	sub.w	r0, r3, r8
 800e576:	f000 f8e3 	bl	800e740 <scalbnf>
 800e57a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e560 <__kernel_rem_pio2f+0x2f0>
 800e57e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e586:	db19      	blt.n	800e5bc <__kernel_rem_pio2f+0x34c>
 800e588:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e564 <__kernel_rem_pio2f+0x2f4>
 800e58c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e590:	aa08      	add	r2, sp, #32
 800e592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e596:	3508      	adds	r5, #8
 800e598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e59c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e5a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e5a8:	ee10 3a10 	vmov	r3, s0
 800e5ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e5b0:	ee17 3a90 	vmov	r3, s15
 800e5b4:	3401      	adds	r4, #1
 800e5b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e5ba:	e74c      	b.n	800e456 <__kernel_rem_pio2f+0x1e6>
 800e5bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e5c0:	aa08      	add	r2, sp, #32
 800e5c2:	ee10 3a10 	vmov	r3, s0
 800e5c6:	e7f6      	b.n	800e5b6 <__kernel_rem_pio2f+0x346>
 800e5c8:	a808      	add	r0, sp, #32
 800e5ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e5ce:	9001      	str	r0, [sp, #4]
 800e5d0:	ee07 0a90 	vmov	s15, r0
 800e5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5d8:	3b01      	subs	r3, #1
 800e5da:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e5de:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e5e2:	ed62 7a01 	vstmdb	r2!, {s15}
 800e5e6:	e743      	b.n	800e470 <__kernel_rem_pio2f+0x200>
 800e5e8:	ecfc 6a01 	vldmia	ip!, {s13}
 800e5ec:	ecb5 7a01 	vldmia	r5!, {s14}
 800e5f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5f4:	3001      	adds	r0, #1
 800e5f6:	4550      	cmp	r0, sl
 800e5f8:	dc01      	bgt.n	800e5fe <__kernel_rem_pio2f+0x38e>
 800e5fa:	4290      	cmp	r0, r2
 800e5fc:	ddf4      	ble.n	800e5e8 <__kernel_rem_pio2f+0x378>
 800e5fe:	a858      	add	r0, sp, #352	@ 0x160
 800e600:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e604:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e608:	3b01      	subs	r3, #1
 800e60a:	e735      	b.n	800e478 <__kernel_rem_pio2f+0x208>
 800e60c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e60e:	2b02      	cmp	r3, #2
 800e610:	dc09      	bgt.n	800e626 <__kernel_rem_pio2f+0x3b6>
 800e612:	2b00      	cmp	r3, #0
 800e614:	dc27      	bgt.n	800e666 <__kernel_rem_pio2f+0x3f6>
 800e616:	d040      	beq.n	800e69a <__kernel_rem_pio2f+0x42a>
 800e618:	f009 0007 	and.w	r0, r9, #7
 800e61c:	b059      	add	sp, #356	@ 0x164
 800e61e:	ecbd 8b04 	vpop	{d8-d9}
 800e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e626:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d1f5      	bne.n	800e618 <__kernel_rem_pio2f+0x3a8>
 800e62c:	aa30      	add	r2, sp, #192	@ 0xc0
 800e62e:	1f0b      	subs	r3, r1, #4
 800e630:	4413      	add	r3, r2
 800e632:	461a      	mov	r2, r3
 800e634:	4620      	mov	r0, r4
 800e636:	2800      	cmp	r0, #0
 800e638:	dc50      	bgt.n	800e6dc <__kernel_rem_pio2f+0x46c>
 800e63a:	4622      	mov	r2, r4
 800e63c:	2a01      	cmp	r2, #1
 800e63e:	dc5d      	bgt.n	800e6fc <__kernel_rem_pio2f+0x48c>
 800e640:	ab30      	add	r3, sp, #192	@ 0xc0
 800e642:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e646:	440b      	add	r3, r1
 800e648:	2c01      	cmp	r4, #1
 800e64a:	dc67      	bgt.n	800e71c <__kernel_rem_pio2f+0x4ac>
 800e64c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e650:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e654:	2e00      	cmp	r6, #0
 800e656:	d167      	bne.n	800e728 <__kernel_rem_pio2f+0x4b8>
 800e658:	edc7 6a00 	vstr	s13, [r7]
 800e65c:	ed87 7a01 	vstr	s14, [r7, #4]
 800e660:	edc7 7a02 	vstr	s15, [r7, #8]
 800e664:	e7d8      	b.n	800e618 <__kernel_rem_pio2f+0x3a8>
 800e666:	ab30      	add	r3, sp, #192	@ 0xc0
 800e668:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e66c:	440b      	add	r3, r1
 800e66e:	4622      	mov	r2, r4
 800e670:	2a00      	cmp	r2, #0
 800e672:	da24      	bge.n	800e6be <__kernel_rem_pio2f+0x44e>
 800e674:	b34e      	cbz	r6, 800e6ca <__kernel_rem_pio2f+0x45a>
 800e676:	eef1 7a47 	vneg.f32	s15, s14
 800e67a:	edc7 7a00 	vstr	s15, [r7]
 800e67e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e682:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e686:	aa31      	add	r2, sp, #196	@ 0xc4
 800e688:	2301      	movs	r3, #1
 800e68a:	429c      	cmp	r4, r3
 800e68c:	da20      	bge.n	800e6d0 <__kernel_rem_pio2f+0x460>
 800e68e:	b10e      	cbz	r6, 800e694 <__kernel_rem_pio2f+0x424>
 800e690:	eef1 7a67 	vneg.f32	s15, s15
 800e694:	edc7 7a01 	vstr	s15, [r7, #4]
 800e698:	e7be      	b.n	800e618 <__kernel_rem_pio2f+0x3a8>
 800e69a:	ab30      	add	r3, sp, #192	@ 0xc0
 800e69c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800e568 <__kernel_rem_pio2f+0x2f8>
 800e6a0:	440b      	add	r3, r1
 800e6a2:	2c00      	cmp	r4, #0
 800e6a4:	da05      	bge.n	800e6b2 <__kernel_rem_pio2f+0x442>
 800e6a6:	b10e      	cbz	r6, 800e6ac <__kernel_rem_pio2f+0x43c>
 800e6a8:	eef1 7a67 	vneg.f32	s15, s15
 800e6ac:	edc7 7a00 	vstr	s15, [r7]
 800e6b0:	e7b2      	b.n	800e618 <__kernel_rem_pio2f+0x3a8>
 800e6b2:	ed33 7a01 	vldmdb	r3!, {s14}
 800e6b6:	3c01      	subs	r4, #1
 800e6b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6bc:	e7f1      	b.n	800e6a2 <__kernel_rem_pio2f+0x432>
 800e6be:	ed73 7a01 	vldmdb	r3!, {s15}
 800e6c2:	3a01      	subs	r2, #1
 800e6c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6c8:	e7d2      	b.n	800e670 <__kernel_rem_pio2f+0x400>
 800e6ca:	eef0 7a47 	vmov.f32	s15, s14
 800e6ce:	e7d4      	b.n	800e67a <__kernel_rem_pio2f+0x40a>
 800e6d0:	ecb2 7a01 	vldmia	r2!, {s14}
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6da:	e7d6      	b.n	800e68a <__kernel_rem_pio2f+0x41a>
 800e6dc:	ed72 7a01 	vldmdb	r2!, {s15}
 800e6e0:	edd2 6a01 	vldr	s13, [r2, #4]
 800e6e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e6e8:	3801      	subs	r0, #1
 800e6ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e6ee:	ed82 7a00 	vstr	s14, [r2]
 800e6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6f6:	edc2 7a01 	vstr	s15, [r2, #4]
 800e6fa:	e79c      	b.n	800e636 <__kernel_rem_pio2f+0x3c6>
 800e6fc:	ed73 7a01 	vldmdb	r3!, {s15}
 800e700:	edd3 6a01 	vldr	s13, [r3, #4]
 800e704:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e708:	3a01      	subs	r2, #1
 800e70a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e70e:	ed83 7a00 	vstr	s14, [r3]
 800e712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e716:	edc3 7a01 	vstr	s15, [r3, #4]
 800e71a:	e78f      	b.n	800e63c <__kernel_rem_pio2f+0x3cc>
 800e71c:	ed33 7a01 	vldmdb	r3!, {s14}
 800e720:	3c01      	subs	r4, #1
 800e722:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e726:	e78f      	b.n	800e648 <__kernel_rem_pio2f+0x3d8>
 800e728:	eef1 6a66 	vneg.f32	s13, s13
 800e72c:	eeb1 7a47 	vneg.f32	s14, s14
 800e730:	edc7 6a00 	vstr	s13, [r7]
 800e734:	ed87 7a01 	vstr	s14, [r7, #4]
 800e738:	eef1 7a67 	vneg.f32	s15, s15
 800e73c:	e790      	b.n	800e660 <__kernel_rem_pio2f+0x3f0>
 800e73e:	bf00      	nop

0800e740 <scalbnf>:
 800e740:	ee10 3a10 	vmov	r3, s0
 800e744:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e748:	d02b      	beq.n	800e7a2 <scalbnf+0x62>
 800e74a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e74e:	d302      	bcc.n	800e756 <scalbnf+0x16>
 800e750:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e754:	4770      	bx	lr
 800e756:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e75a:	d123      	bne.n	800e7a4 <scalbnf+0x64>
 800e75c:	4b24      	ldr	r3, [pc, #144]	@ (800e7f0 <scalbnf+0xb0>)
 800e75e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800e7f4 <scalbnf+0xb4>
 800e762:	4298      	cmp	r0, r3
 800e764:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e768:	db17      	blt.n	800e79a <scalbnf+0x5a>
 800e76a:	ee10 3a10 	vmov	r3, s0
 800e76e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e772:	3a19      	subs	r2, #25
 800e774:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e778:	4288      	cmp	r0, r1
 800e77a:	dd15      	ble.n	800e7a8 <scalbnf+0x68>
 800e77c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800e7f8 <scalbnf+0xb8>
 800e780:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800e7fc <scalbnf+0xbc>
 800e784:	ee10 3a10 	vmov	r3, s0
 800e788:	eeb0 7a67 	vmov.f32	s14, s15
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	bfb8      	it	lt
 800e790:	eef0 7a66 	vmovlt.f32	s15, s13
 800e794:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e798:	4770      	bx	lr
 800e79a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e800 <scalbnf+0xc0>
 800e79e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e7a2:	4770      	bx	lr
 800e7a4:	0dd2      	lsrs	r2, r2, #23
 800e7a6:	e7e5      	b.n	800e774 <scalbnf+0x34>
 800e7a8:	4410      	add	r0, r2
 800e7aa:	28fe      	cmp	r0, #254	@ 0xfe
 800e7ac:	dce6      	bgt.n	800e77c <scalbnf+0x3c>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	dd06      	ble.n	800e7c0 <scalbnf+0x80>
 800e7b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e7b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e7ba:	ee00 3a10 	vmov	s0, r3
 800e7be:	4770      	bx	lr
 800e7c0:	f110 0f16 	cmn.w	r0, #22
 800e7c4:	da09      	bge.n	800e7da <scalbnf+0x9a>
 800e7c6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800e800 <scalbnf+0xc0>
 800e7ca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e804 <scalbnf+0xc4>
 800e7ce:	ee10 3a10 	vmov	r3, s0
 800e7d2:	eeb0 7a67 	vmov.f32	s14, s15
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	e7d9      	b.n	800e78e <scalbnf+0x4e>
 800e7da:	3019      	adds	r0, #25
 800e7dc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e7e0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e7e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e808 <scalbnf+0xc8>
 800e7e8:	ee07 3a90 	vmov	s15, r3
 800e7ec:	e7d7      	b.n	800e79e <scalbnf+0x5e>
 800e7ee:	bf00      	nop
 800e7f0:	ffff3cb0 	.word	0xffff3cb0
 800e7f4:	4c000000 	.word	0x4c000000
 800e7f8:	7149f2ca 	.word	0x7149f2ca
 800e7fc:	f149f2ca 	.word	0xf149f2ca
 800e800:	0da24260 	.word	0x0da24260
 800e804:	8da24260 	.word	0x8da24260
 800e808:	33000000 	.word	0x33000000

0800e80c <floorf>:
 800e80c:	ee10 3a10 	vmov	r3, s0
 800e810:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e814:	3a7f      	subs	r2, #127	@ 0x7f
 800e816:	2a16      	cmp	r2, #22
 800e818:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e81c:	dc2b      	bgt.n	800e876 <floorf+0x6a>
 800e81e:	2a00      	cmp	r2, #0
 800e820:	da12      	bge.n	800e848 <floorf+0x3c>
 800e822:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e888 <floorf+0x7c>
 800e826:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e82a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e832:	dd06      	ble.n	800e842 <floorf+0x36>
 800e834:	2b00      	cmp	r3, #0
 800e836:	da24      	bge.n	800e882 <floorf+0x76>
 800e838:	2900      	cmp	r1, #0
 800e83a:	4b14      	ldr	r3, [pc, #80]	@ (800e88c <floorf+0x80>)
 800e83c:	bf08      	it	eq
 800e83e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e842:	ee00 3a10 	vmov	s0, r3
 800e846:	4770      	bx	lr
 800e848:	4911      	ldr	r1, [pc, #68]	@ (800e890 <floorf+0x84>)
 800e84a:	4111      	asrs	r1, r2
 800e84c:	420b      	tst	r3, r1
 800e84e:	d0fa      	beq.n	800e846 <floorf+0x3a>
 800e850:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e888 <floorf+0x7c>
 800e854:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e858:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e860:	ddef      	ble.n	800e842 <floorf+0x36>
 800e862:	2b00      	cmp	r3, #0
 800e864:	bfbe      	ittt	lt
 800e866:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e86a:	fa40 f202 	asrlt.w	r2, r0, r2
 800e86e:	189b      	addlt	r3, r3, r2
 800e870:	ea23 0301 	bic.w	r3, r3, r1
 800e874:	e7e5      	b.n	800e842 <floorf+0x36>
 800e876:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e87a:	d3e4      	bcc.n	800e846 <floorf+0x3a>
 800e87c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e880:	4770      	bx	lr
 800e882:	2300      	movs	r3, #0
 800e884:	e7dd      	b.n	800e842 <floorf+0x36>
 800e886:	bf00      	nop
 800e888:	7149f2ca 	.word	0x7149f2ca
 800e88c:	bf800000 	.word	0xbf800000
 800e890:	007fffff 	.word	0x007fffff

0800e894 <_init>:
 800e894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e896:	bf00      	nop
 800e898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e89a:	bc08      	pop	{r3}
 800e89c:	469e      	mov	lr, r3
 800e89e:	4770      	bx	lr

0800e8a0 <_fini>:
 800e8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a2:	bf00      	nop
 800e8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8a6:	bc08      	pop	{r3}
 800e8a8:	469e      	mov	lr, r3
 800e8aa:	4770      	bx	lr
